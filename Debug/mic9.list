
mic9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d490  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e2c  0801d660  0801d660  0002d660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f48c  0801f48c  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  0801f48c  0801f48c  0002f48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f494  0801f494  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f494  0801f494  0002f494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f498  0801f498  0002f498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0801f49c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000e4  0801f580  000300e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000184  0801f620  00030184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001bb48  20000224  0801f6c0  00030224  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2001bd6c  0801f6c0  0003bd6c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004c62c  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009cda  00000000  00000000  0007c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003b30  00000000  00000000  00086560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003720  00000000  00000000  0008a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a6fb  00000000  00000000  0008d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004eca4  00000000  00000000  000c7eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00130948  00000000  00000000  00116b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00247497  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000fe90  00000000  00000000  002474e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d648 	.word	0x0801d648

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	0801d648 	.word	0x0801d648

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <vApplicationGetIdleTaskMemory+0x30>)
 80005fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000240 	.word	0x20000240
 8000618:	20000298 	.word	0x20000298

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f006 fcf3 	bl	800700c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f84d 	bl	80006c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800062a:	f000 f8bd 	bl	80007a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f001 f871 	bl	8001714 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000632:	f000 f8eb 	bl	800080c <MX_ADC3_Init>
  MX_CRC_Init();
 8000636:	f000 f93b 	bl	80008b0 <MX_CRC_Init>
  MX_DCMI_Init();
 800063a:	f000 f95b 	bl	80008f4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800063e:	f000 f98d 	bl	800095c <MX_DMA2D_Init>
  MX_ETH_Init();
 8000642:	f000 f9bd 	bl	80009c0 <MX_ETH_Init>
  MX_FMC_Init();
 8000646:	f001 f815 	bl	8001674 <MX_FMC_Init>
  MX_I2C1_Init();
 800064a:	f000 fa07 	bl	8000a5c <MX_I2C1_Init>
  MX_I2C3_Init();
 800064e:	f000 fa45 	bl	8000adc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000652:	f000 fa83 	bl	8000b5c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000656:	f000 fb03 	bl	8000c60 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800065a:	f000 fb2d 	bl	8000cb8 <MX_RTC_Init>
  MX_SAI2_Init();
 800065e:	f000 fbcf 	bl	8000e00 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000662:	f000 fc75 	bl	8000f50 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000666:	f000 fc93 	bl	8000f90 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800066a:	f000 fcc1 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800066e:	f000 fd6b 	bl	8001148 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000672:	f000 fddf 	bl	8001234 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000676:	f000 fe55 	bl	8001324 <MX_TIM5_Init>
  MX_TIM8_Init();
 800067a:	f000 fecb 	bl	8001414 <MX_TIM8_Init>
  MX_TIM12_Init();
 800067e:	f000 ff1d 	bl	80014bc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000682:	f000 ff61 	bl	8001548 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000686:	f000 ff8f 	bl	80015a8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800068a:	f013 fb4f 	bl	8013d2c <MX_FATFS_Init>
  MX_DMA_Init();
 800068e:	f000 ffbb 	bl	8001608 <MX_DMA_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <main+0xa0>)
 8000694:	1d3c      	adds	r4, r7, #4
 8000696:	461d      	mov	r5, r3
 8000698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f019 f86d 	bl	8019788 <osThreadCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <main+0xa4>)
 80006b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006b4:	f019 f845 	bl	8019742 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x9c>
 80006ba:	bf00      	nop
 80006bc:	0801d66c 	.word	0x0801d66c
 80006c0:	20000e9c 	.word	0x20000e9c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f01c faee 	bl	801ccb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e8:	f00b febc 	bl	800c464 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <SystemClock_Config+0xdc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <SystemClock_Config+0xdc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <SystemClock_Config+0xdc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xe0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <SystemClock_Config+0xe0>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800071c:	2309      	movs	r3, #9
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000726:	2301      	movs	r3, #1
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000734:	2319      	movs	r3, #25
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000738:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000742:	2309      	movs	r3, #9
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f00b ffac 	bl	800c6a8 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000756:	f001 f9cf 	bl	8001af8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800075a:	f00b fe93 	bl	800c484 <HAL_PWREx_EnableOverDrive>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000764:	f001 f9c8 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2106      	movs	r1, #6
 8000786:	4618      	mov	r0, r3
 8000788:	f00c fa32 	bl	800cbf0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000792:	f001 f9b1 	bl	8001af8 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a2      	sub	sp, #136	; 0x88
 80007ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2284      	movs	r2, #132	; 0x84
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f01c fa7d 	bl	801ccb4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <PeriphCommonClock_Config+0x60>)
 80007bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007be:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007c4:	2305      	movs	r3, #5
 80007c6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007cc:	2303      	movs	r3, #3
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007da:	2300      	movs	r3, #0
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80007de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f00c fc16 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007fa:	f001 f97d 	bl	8001af8 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3788      	adds	r7, #136	; 0x88
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	00b00008 	.word	0x00b00008

0800080c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <MX_ADC3_Init+0x9c>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000826:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800082a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_ADC3_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_ADC3_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_ADC3_Init+0x98>)
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <MX_ADC3_Init+0xa0>)
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_ADC3_Init+0x98>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_ADC3_Init+0x98>)
 8000868:	2201      	movs	r2, #1
 800086a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_ADC3_Init+0x98>)
 800086e:	f006 fc1f 	bl	80070b0 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000878:	f001 f93e 	bl	8001af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800087c:	2304      	movs	r3, #4
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2301      	movs	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_ADC3_Init+0x98>)
 800088e:	f006 fc53 	bl	8007138 <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000898:	f001 f92e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200004d0 	.word	0x200004d0
 80008a8:	40012200 	.word	0x40012200
 80008ac:	0f000001 	.word	0x0f000001

080008b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_CRC_Init+0x3c>)
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <MX_CRC_Init+0x40>)
 80008b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_CRC_Init+0x3c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_CRC_Init+0x3c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_CRC_Init+0x3c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_CRC_Init+0x3c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_CRC_Init+0x3c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_CRC_Init+0x3c>)
 80008da:	f006 ff5f 	bl	800779c <HAL_CRC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008e4:	f001 f908 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000518 	.word	0x20000518
 80008f0:	40023000 	.word	0x40023000

080008f4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_DCMI_Init+0x60>)
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <MX_DCMI_Init+0x64>)
 80008fc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_DCMI_Init+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_DCMI_Init+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_DCMI_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_DCMI_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_DCMI_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DCMI_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DCMI_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_DCMI_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DCMI_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_DCMI_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_DCMI_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_DCMI_Init+0x60>)
 8000942:	f007 f815 	bl	8007970 <HAL_DCMI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800094c:	f001 f8d4 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000053c 	.word	0x2000053c
 8000958:	50050000 	.word	0x50050000

0800095c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <MX_DMA2D_Init+0x60>)
 8000964:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 8000992:	f007 fcdb 	bl	800834c <HAL_DMA2D_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800099c:	f001 f8ac 	bl	8001af8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009a0:	2101      	movs	r1, #1
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_DMA2D_Init+0x5c>)
 80009a4:	f007 ff40 	bl	8008828 <HAL_DMA2D_ConfigLayer>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009ae:	f001 f8a3 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000058c 	.word	0x2000058c
 80009bc:	4002b000 	.word	0x4002b000

080009c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_ETH_Init+0x84>)
 80009c6:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <MX_ETH_Init+0x88>)
 80009c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009d8:	22e1      	movs	r2, #225	; 0xe1
 80009da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_ETH_Init+0x84>)
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_ETH_Init+0x84>)
 80009f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009fa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_ETH_Init+0x84>)
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <MX_ETH_Init+0x90>)
 8000a00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_ETH_Init+0x84>)
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <MX_ETH_Init+0x94>)
 8000a06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_ETH_Init+0x84>)
 8000a0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_ETH_Init+0x84>)
 8000a12:	f008 f837 	bl	8008a84 <HAL_ETH_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a1c:	f001 f86c 	bl	8001af8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a20:	2238      	movs	r2, #56	; 0x38
 8000a22:	2100      	movs	r1, #0
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a26:	f01c f945 	bl	801ccb4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a2c:	2221      	movs	r2, #33	; 0x21
 8000a2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200005cc 	.word	0x200005cc
 8000a48:	40028000 	.word	0x40028000
 8000a4c:	20000ea0 	.word	0x20000ea0
 8000a50:	20000184 	.word	0x20000184
 8000a54:	200000e4 	.word	0x200000e4
 8000a58:	20000498 	.word	0x20000498

08000a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_I2C1_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <MX_I2C1_Init+0x7c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000a98:	f00a fb3e 	bl	800b118 <HAL_I2C_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f001 f829 	bl	8001af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000aaa:	f00b f8cb 	bl	800bc44 <HAL_I2CEx_ConfigAnalogFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f001 f820 	bl	8001af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_I2C1_Init+0x74>)
 8000abc:	f00b f90d 	bl	800bcda <HAL_I2CEx_ConfigDigitalFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f001 f817 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000067c 	.word	0x2000067c
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	00c0eaff 	.word	0x00c0eaff

08000adc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_I2C3_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <MX_I2C3_Init+0x7c>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b18:	f00a fafe 	bl	800b118 <HAL_I2C_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b22:	f000 ffe9 	bl	8001af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4809      	ldr	r0, [pc, #36]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b2a:	f00b f88b 	bl	800bc44 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b34:	f000 ffe0 	bl	8001af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_I2C3_Init+0x74>)
 8000b3c:	f00b f8cd 	bl	800bcda <HAL_I2CEx_ConfigDigitalFilter>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f000 ffd7 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200006d0 	.word	0x200006d0
 8000b54:	40005c00 	.word	0x40005c00
 8000b58:	00c0eaff 	.word	0x00c0eaff

08000b5c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2234      	movs	r2, #52	; 0x34
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f01c f8a3 	bl	801ccb4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b6e:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b70:	4a3a      	ldr	r2, [pc, #232]	; (8000c5c <MX_LTDC_Init+0x100>)
 8000b72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b74:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b7a:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b8c:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b8e:	2228      	movs	r2, #40	; 0x28
 8000b90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b94:	2209      	movs	r2, #9
 8000b96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b98:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000b9a:	2235      	movs	r2, #53	; 0x35
 8000b9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000ba0:	220b      	movs	r2, #11
 8000ba2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000ba6:	f240 2215 	movw	r2, #533	; 0x215
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000bae:	f240 121b 	movw	r2, #283	; 0x11b
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000bb6:	f240 2235 	movw	r2, #565	; 0x235
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000bbe:	f240 121d 	movw	r2, #285	; 0x11d
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bdc:	481e      	ldr	r0, [pc, #120]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000bde:	f00b f8c9 	bl	800bd74 <HAL_LTDC_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000be8:	f000 ff86 	bl	8001af8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000bf0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bf4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000bfa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bfe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c04:	23ff      	movs	r3, #255	; 0xff
 8000c06:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c10:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c12:	2307      	movs	r3, #7
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c16:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000c1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_LTDC_Init+0xfc>)
 8000c42:	f00b fa29 	bl	800c098 <HAL_LTDC_ConfigLayer>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000c4c:	f000 ff54 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	; 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000724 	.word	0x20000724
 8000c5c:	40016800 	.word	0x40016800

08000c60 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_QUADSPI_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c78:	2210      	movs	r2, #16
 8000c7a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c7e:	2218      	movs	r2, #24
 8000c80:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c84:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c88:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_QUADSPI_Init+0x50>)
 8000c9e:	f00b fc41 	bl	800c524 <HAL_QSPI_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f000 ff26 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200007cc 	.word	0x200007cc
 8000cb4:	a0001000 	.word	0xa0001000

08000cb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b090      	sub	sp, #64	; 0x40
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2228      	movs	r2, #40	; 0x28
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f01b ffeb 	bl	801ccb4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <MX_RTC_Init+0x140>)
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <MX_RTC_Init+0x144>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ce4:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <MX_RTC_Init+0x140>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <MX_RTC_Init+0x140>)
 8000cec:	227f      	movs	r2, #127	; 0x7f
 8000cee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cf0:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <MX_RTC_Init+0x140>)
 8000cf2:	22ff      	movs	r2, #255	; 0xff
 8000cf4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <MX_RTC_Init+0x140>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <MX_RTC_Init+0x140>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <MX_RTC_Init+0x140>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d08:	483b      	ldr	r0, [pc, #236]	; (8000df8 <MX_RTC_Init+0x140>)
 8000d0a:	f00c ffc9 	bl	800dca0 <HAL_RTC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d14:	f000 fef0 	bl	8001af8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482f      	ldr	r0, [pc, #188]	; (8000df8 <MX_RTC_Init+0x140>)
 8000d3c:	f00d f834 	bl	800dda8 <HAL_RTC_SetTime>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000d46:	f000 fed7 	bl	8001af8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000d50:	2301      	movs	r3, #1
 8000d52:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d66:	2201      	movs	r2, #1
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4823      	ldr	r0, [pc, #140]	; (8000df8 <MX_RTC_Init+0x140>)
 8000d6c:	f00d f8b6 	bl	800dedc <HAL_RTC_SetDate>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000d76:	f000 febf 	bl	8001af8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	2201      	movs	r2, #1
 8000dae:	4619      	mov	r1, r3
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_RTC_Init+0x140>)
 8000db2:	f00d f917 	bl	800dfe4 <HAL_RTC_SetAlarm>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000dbc:	f000 fe9c 	bl	8001af8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <MX_RTC_Init+0x140>)
 8000dce:	f00d f909 	bl	800dfe4 <HAL_RTC_SetAlarm>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000dd8:	f000 fe8e 	bl	8001af8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	2100      	movs	r1, #0
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_RTC_Init+0x140>)
 8000de2:	f00d facb 	bl	800e37c <HAL_RTCEx_SetTimeStamp>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000dec:	f000 fe84 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3740      	adds	r7, #64	; 0x40
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000818 	.word	0x20000818
 8000dfc:	40002800 	.word	0x40002800

08000e00 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e04:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e06:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <MX_SAI2_Init+0x140>)
 8000e08:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e10:	4b4a      	ldr	r3, [pc, #296]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e18:	2240      	movs	r2, #64	; 0x40
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e2e:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e34:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e3a:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e40:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e42:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <MX_SAI2_Init+0x144>)
 8000e44:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e4c:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e58:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e60:	2208      	movs	r2, #8
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e64:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e6a:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e70:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000e94:	4829      	ldr	r0, [pc, #164]	; (8000f3c <MX_SAI2_Init+0x13c>)
 8000e96:	f00d fad9 	bl	800e44c <HAL_SAI_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000ea0:	f000 fe2a 	bl	8001af8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ea6:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <MX_SAI2_Init+0x14c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000eb8:	2240      	movs	r2, #64	; 0x40
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_SAI2_Init+0x148>)
 8000f2a:	f00d fa8f 	bl	800e44c <HAL_SAI_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000f34:	f000 fde0 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000838 	.word	0x20000838
 8000f40:	40015c04 	.word	0x40015c04
 8000f44:	0002ee00 	.word	0x0002ee00
 8000f48:	200008bc 	.word	0x200008bc
 8000f4c:	40015c24 	.word	0x40015c24

08000f50 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SDMMC1_SD_Init+0x38>)
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <MX_SDMMC1_SD_Init+0x3c>)
 8000f58:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_SDMMC1_SD_Init+0x38>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SDMMC1_SD_Init+0x38>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_SDMMC1_SD_Init+0x38>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_SDMMC1_SD_Init+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <MX_SDMMC1_SD_Init+0x38>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <MX_SDMMC1_SD_Init+0x38>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	20000a00 	.word	0x20000a00
 8000f8c:	40012c00 	.word	0x40012c00

08000f90 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000f96:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f9a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_SPDIFRX_Init+0x5c>)
 8000fda:	f00f fa83 	bl	80104e4 <HAL_SPDIFRX_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000fe4:	f000 fd88 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000b44 	.word	0x20000b44

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09a      	sub	sp, #104	; 0x68
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	222c      	movs	r2, #44	; 0x2c
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f01b fe42 	bl	801ccb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <MX_TIM1_Init+0x150>)
 8001032:	4a44      	ldr	r2, [pc, #272]	; (8001144 <MX_TIM1_Init+0x154>)
 8001034:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <MX_TIM1_Init+0x150>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b40      	ldr	r3, [pc, #256]	; (8001140 <MX_TIM1_Init+0x150>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <MX_TIM1_Init+0x150>)
 8001044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001048:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <MX_TIM1_Init+0x150>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <MX_TIM1_Init+0x150>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <MX_TIM1_Init+0x150>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800105c:	4838      	ldr	r0, [pc, #224]	; (8001140 <MX_TIM1_Init+0x150>)
 800105e:	f00f fa9d 	bl	801059c <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001068:	f000 fd46 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001076:	4619      	mov	r1, r3
 8001078:	4831      	ldr	r0, [pc, #196]	; (8001140 <MX_TIM1_Init+0x150>)
 800107a:	f00f fde9 	bl	8010c50 <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001084:	f000 fd38 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001088:	482d      	ldr	r0, [pc, #180]	; (8001140 <MX_TIM1_Init+0x150>)
 800108a:	f00f fb57 	bl	801073c <HAL_TIM_PWM_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001094:	f000 fd30 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010a8:	4619      	mov	r1, r3
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <MX_TIM1_Init+0x150>)
 80010ac:	f010 fa5a 	bl	8011564 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010b6:	f000 fd1f 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ba:	2360      	movs	r3, #96	; 0x60
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <MX_TIM1_Init+0x150>)
 80010e0:	f00f fca2 	bl	8010a28 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ea:	f000 fd05 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001106:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM1_Init+0x150>)
 8001124:	f010 faac 	bl	8011680 <HAL_TIMEx_ConfigBreakDeadTime>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800112e:	f000 fce3 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM1_Init+0x150>)
 8001134:	f002 f9ce 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 8001138:	bf00      	nop
 800113a:	3768      	adds	r7, #104	; 0x68
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000b90 	.word	0x20000b90
 8001144:	40010000 	.word	0x40010000

08001148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_TIM2_Init+0xe8>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_TIM2_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_TIM2_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011a4:	f00f f9fa 	bl	801059c <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f000 fca3 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011bc:	4619      	mov	r1, r3
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011c0:	f00f fd46 	bl	8010c50 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011ca:	f000 fc95 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011d0:	f00f fab4 	bl	801073c <HAL_TIM_PWM_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 fc8d 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <MX_TIM2_Init+0xe8>)
 80011ee:	f010 f9b9 	bl	8011564 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011f8:	f000 fc7e 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fc:	2360      	movs	r3, #96	; 0x60
 80011fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001214:	f00f fc08 	bl	8010a28 <HAL_TIM_PWM_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800121e:	f000 fc6b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM2_Init+0xe8>)
 8001224:	f002 f956 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 8001228:	bf00      	nop
 800122a:	3738      	adds	r7, #56	; 0x38
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000bdc 	.word	0x20000bdc

08001234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_TIM3_Init+0xe8>)
 8001268:	4a2d      	ldr	r2, [pc, #180]	; (8001320 <MX_TIM3_Init+0xec>)
 800126a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MX_TIM3_Init+0xe8>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_TIM3_Init+0xe8>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <MX_TIM3_Init+0xe8>)
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_TIM3_Init+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <MX_TIM3_Init+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800128c:	4823      	ldr	r0, [pc, #140]	; (800131c <MX_TIM3_Init+0xe8>)
 800128e:	f00f f985 	bl	801059c <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001298:	f000 fc2e 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	4619      	mov	r1, r3
 80012a8:	481c      	ldr	r0, [pc, #112]	; (800131c <MX_TIM3_Init+0xe8>)
 80012aa:	f00f fcd1 	bl	8010c50 <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012b4:	f000 fc20 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b8:	4818      	ldr	r0, [pc, #96]	; (800131c <MX_TIM3_Init+0xe8>)
 80012ba:	f00f fa3f 	bl	801073c <HAL_TIM_PWM_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012c4:	f000 fc18 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_TIM3_Init+0xe8>)
 80012d8:	f010 f944 	bl	8011564 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012e2:	f000 fc09 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	; 0x60
 80012e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM3_Init+0xe8>)
 80012fe:	f00f fb93 	bl	8010a28 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001308:	f000 fbf6 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM3_Init+0xe8>)
 800130e:	f002 f8e1 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	; 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000c28 	.word	0x20000c28
 8001320:	40000400 	.word	0x40000400

08001324 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_TIM5_Init+0xe8>)
 8001358:	4a2d      	ldr	r2, [pc, #180]	; (8001410 <MX_TIM5_Init+0xec>)
 800135a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_TIM5_Init+0xe8>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <MX_TIM5_Init+0xe8>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_TIM5_Init+0xe8>)
 800136a:	f04f 32ff 	mov.w	r2, #4294967295
 800136e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_TIM5_Init+0xe8>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_TIM5_Init+0xe8>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800137c:	4823      	ldr	r0, [pc, #140]	; (800140c <MX_TIM5_Init+0xe8>)
 800137e:	f00f f90d 	bl	801059c <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001388:	f000 fbb6 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	4619      	mov	r1, r3
 8001398:	481c      	ldr	r0, [pc, #112]	; (800140c <MX_TIM5_Init+0xe8>)
 800139a:	f00f fc59 	bl	8010c50 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013a4:	f000 fba8 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM5_Init+0xe8>)
 80013aa:	f00f f9c7 	bl	801073c <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013b4:	f000 fba0 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_TIM5_Init+0xe8>)
 80013c8:	f010 f8cc 	bl	8011564 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013d2:	f000 fb91 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	220c      	movs	r2, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM5_Init+0xe8>)
 80013ee:	f00f fb1b 	bl	8010a28 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013f8:	f000 fb7e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM5_Init+0xe8>)
 80013fe:	f002 f869 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000c74 	.word	0x20000c74
 8001410:	40000c00 	.word	0x40000c00

08001414 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <MX_TIM8_Init+0xa4>)
 8001436:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800145e:	4815      	ldr	r0, [pc, #84]	; (80014b4 <MX_TIM8_Init+0xa0>)
 8001460:	f00f f89c 	bl	801059c <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800146a:	f000 fb45 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800147c:	f00f fbe8 	bl	8010c50 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001486:	f000 fb37 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM8_Init+0xa0>)
 800149c:	f010 f862 	bl	8011564 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014a6:	f000 fb27 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000cc0 	.word	0x20000cc0
 80014b8:	40010400 	.word	0x40010400

080014bc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM12_Init+0x84>)
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <MX_TIM12_Init+0x88>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_TIM12_Init+0x84>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_TIM12_Init+0x84>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_TIM12_Init+0x84>)
 80014e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_TIM12_Init+0x84>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_TIM12_Init+0x84>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80014fa:	4811      	ldr	r0, [pc, #68]	; (8001540 <MX_TIM12_Init+0x84>)
 80014fc:	f00f f91e 	bl	801073c <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001506:	f000 faf7 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	2360      	movs	r3, #96	; 0x60
 800150c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM12_Init+0x84>)
 8001522:	f00f fa81 	bl	8010a28 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800152c:	f000 fae4 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM12_Init+0x84>)
 8001532:	f001 ffcf 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000d0c 	.word	0x20000d0c
 8001544:	40001800 	.word	0x40001800

08001548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_USART1_UART_Init+0x5c>)
 8001550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART1_UART_Init+0x58>)
 800158c:	f010 f914 	bl	80117b8 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001596:	f000 faaf 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000d58 	.word	0x20000d58
 80015a4:	40011000 	.word	0x40011000

080015a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_USART6_UART_Init+0x5c>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART6_UART_Init+0x58>)
 80015ec:	f010 f8e4 	bl	80117b8 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015f6:	f000 fa7f 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000de0 	.word	0x20000de0
 8001604:	40011400 	.word	0x40011400

08001608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_DMA_Init+0x68>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <MX_DMA_Init+0x68>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_DMA_Init+0x68>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2105      	movs	r1, #5
 800162a:	203b      	movs	r0, #59	; 0x3b
 800162c:	f006 f88c 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001630:	203b      	movs	r0, #59	; 0x3b
 8001632:	f006 f8a5 	bl	8007780 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2105      	movs	r1, #5
 800163a:	203c      	movs	r0, #60	; 0x3c
 800163c:	f006 f884 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001640:	203c      	movs	r0, #60	; 0x3c
 8001642:	f006 f89d 	bl	8007780 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	2045      	movs	r0, #69	; 0x45
 800164c:	f006 f87c 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001650:	2045      	movs	r0, #69	; 0x45
 8001652:	f006 f895 	bl	8007780 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	2046      	movs	r0, #70	; 0x46
 800165c:	f006 f874 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001660:	2046      	movs	r0, #70	; 0x46
 8001662:	f006 f88d 	bl	8007780 <HAL_NVIC_EnableIRQ>

}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_FMC_Init+0x98>)
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <MX_FMC_Init+0x9c>)
 8001690:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_FMC_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_FMC_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_FMC_Init+0x98>)
 80016a0:	2204      	movs	r2, #4
 80016a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_FMC_Init+0x98>)
 80016a6:	2210      	movs	r2, #16
 80016a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_FMC_Init+0x98>)
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_FMC_Init+0x98>)
 80016b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80016b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_FMC_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_FMC_Init+0x98>)
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_FMC_Init+0x98>)
 80016c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_FMC_Init+0x98>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016d8:	2307      	movs	r3, #7
 80016da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016e0:	2307      	movs	r3, #7
 80016e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016e4:	2303      	movs	r3, #3
 80016e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_FMC_Init+0x98>)
 80016f6:	f00e fe64 	bl	80103c2 <HAL_SDRAM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001700:	f000 f9fa 	bl	8001af8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001704:	bf00      	nop
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000e68 	.word	0x20000e68
 8001710:	a0000140 	.word	0xa0000140

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b090      	sub	sp, #64	; 0x40
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	4bb0      	ldr	r3, [pc, #704]	; (80019ec <MX_GPIO_Init+0x2d8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4aaf      	ldr	r2, [pc, #700]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001730:	f043 0310 	orr.w	r3, r3, #16
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4bad      	ldr	r3, [pc, #692]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001742:	4baa      	ldr	r3, [pc, #680]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4aa9      	ldr	r2, [pc, #676]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4ba7      	ldr	r3, [pc, #668]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4ba4      	ldr	r3, [pc, #656]	; (80019ec <MX_GPIO_Init+0x2d8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4aa3      	ldr	r2, [pc, #652]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4ba1      	ldr	r3, [pc, #644]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	4b9e      	ldr	r3, [pc, #632]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a9d      	ldr	r2, [pc, #628]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b9b      	ldr	r3, [pc, #620]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	4b98      	ldr	r3, [pc, #608]	; (80019ec <MX_GPIO_Init+0x2d8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a97      	ldr	r2, [pc, #604]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b95      	ldr	r3, [pc, #596]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b92      	ldr	r3, [pc, #584]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a91      	ldr	r2, [pc, #580]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b8f      	ldr	r3, [pc, #572]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017ba:	4b8c      	ldr	r3, [pc, #560]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a8b      	ldr	r2, [pc, #556]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b89      	ldr	r3, [pc, #548]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017d2:	4b86      	ldr	r3, [pc, #536]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a85      	ldr	r2, [pc, #532]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b83      	ldr	r3, [pc, #524]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017ea:	4b80      	ldr	r3, [pc, #512]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a7f      	ldr	r2, [pc, #508]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <MX_GPIO_Init+0x2d8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a79      	ldr	r2, [pc, #484]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b77      	ldr	r3, [pc, #476]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181a:	4b74      	ldr	r3, [pc, #464]	; (80019ec <MX_GPIO_Init+0x2d8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a73      	ldr	r2, [pc, #460]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b71      	ldr	r3, [pc, #452]	; (80019ec <MX_GPIO_Init+0x2d8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	2120      	movs	r1, #32
 8001836:	486e      	ldr	r0, [pc, #440]	; (80019f0 <MX_GPIO_Init+0x2dc>)
 8001838:	f007 ff1a 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	210e      	movs	r1, #14
 8001840:	486c      	ldr	r0, [pc, #432]	; (80019f4 <MX_GPIO_Init+0x2e0>)
 8001842:	f007 ff15 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2108      	movs	r1, #8
 800184a:	486b      	ldr	r0, [pc, #428]	; (80019f8 <MX_GPIO_Init+0x2e4>)
 800184c:	f007 ff10 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	4867      	ldr	r0, [pc, #412]	; (80019f4 <MX_GPIO_Init+0x2e0>)
 8001858:	f007 ff0a 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001862:	4866      	ldr	r0, [pc, #408]	; (80019fc <MX_GPIO_Init+0x2e8>)
 8001864:	f007 ff04 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	21c8      	movs	r1, #200	; 0xc8
 800186c:	4864      	ldr	r0, [pc, #400]	; (8001a00 <MX_GPIO_Init+0x2ec>)
 800186e:	f007 feff 	bl	8009670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001872:	2308      	movs	r3, #8
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	485f      	ldr	r0, [pc, #380]	; (8001a04 <MX_GPIO_Init+0x2f0>)
 8001886:	f007 fc23 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800188a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800189c:	230a      	movs	r3, #10
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a4:	4619      	mov	r1, r3
 80018a6:	4858      	ldr	r0, [pc, #352]	; (8001a08 <MX_GPIO_Init+0x2f4>)
 80018a8:	f007 fc12 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	4852      	ldr	r0, [pc, #328]	; (8001a0c <MX_GPIO_Init+0x2f8>)
 80018c2:	f007 fc05 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80018c6:	2340      	movs	r3, #64	; 0x40
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	4845      	ldr	r0, [pc, #276]	; (80019f0 <MX_GPIO_Init+0x2dc>)
 80018dc:	f007 fbf8 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80018e0:	2320      	movs	r3, #32
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	483e      	ldr	r0, [pc, #248]	; (80019f0 <MX_GPIO_Init+0x2dc>)
 80018f8:	f007 fbea 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80018fc:	f241 030e 	movw	r3, #4110	; 0x100e
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001912:	4619      	mov	r1, r3
 8001914:	4837      	ldr	r0, [pc, #220]	; (80019f4 <MX_GPIO_Init+0x2e0>)
 8001916:	f007 fbdb 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800191a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	4838      	ldr	r0, [pc, #224]	; (8001a10 <MX_GPIO_Init+0x2fc>)
 8001930:	f007 fbce 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001934:	2308      	movs	r3, #8
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	482b      	ldr	r0, [pc, #172]	; (80019f8 <MX_GPIO_Init+0x2e4>)
 800194c:	f007 fbc0 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001950:	2310      	movs	r3, #16
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	4823      	ldr	r0, [pc, #140]	; (80019f0 <MX_GPIO_Init+0x2dc>)
 8001964:	f007 fbb4 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001968:	f248 0304 	movw	r3, #32772	; 0x8004
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197a:	4619      	mov	r1, r3
 800197c:	481f      	ldr	r0, [pc, #124]	; (80019fc <MX_GPIO_Init+0x2e8>)
 800197e:	f007 fba7 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	4818      	ldr	r0, [pc, #96]	; (80019fc <MX_GPIO_Init+0x2e8>)
 800199c:	f007 fb98 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	480f      	ldr	r0, [pc, #60]	; (80019f4 <MX_GPIO_Init+0x2e0>)
 80019b8:	f007 fb8a 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019bc:	2310      	movs	r3, #16
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019cc:	230a      	movs	r3, #10
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <MX_GPIO_Init+0x2e8>)
 80019d8:	f007 fb7a 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80019dc:	23c8      	movs	r3, #200	; 0xc8
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
 80019e8:	e014      	b.n	8001a14 <MX_GPIO_Init+0x300>
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40022000 	.word	0x40022000
 80019f8:	40022800 	.word	0x40022800
 80019fc:	40021c00 	.word	0x40021c00
 8001a00:	40021800 	.word	0x40021800
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40022400 	.word	0x40022400
 8001a10:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <MX_GPIO_Init+0x394>)
 8001a20:	f007 fb56 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001a24:	2305      	movs	r3, #5
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a34:	230a      	movs	r3, #10
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481b      	ldr	r0, [pc, #108]	; (8001aac <MX_GPIO_Init+0x398>)
 8001a40:	f007 fb46 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001a44:	2304      	movs	r3, #4
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a54:	4619      	mov	r1, r3
 8001a56:	4814      	ldr	r0, [pc, #80]	; (8001aa8 <MX_GPIO_Init+0x394>)
 8001a58:	f007 fb3a 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a5c:	2328      	movs	r3, #40	; 0x28
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a74:	4619      	mov	r1, r3
 8001a76:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <MX_GPIO_Init+0x39c>)
 8001a78:	f007 fb2a 	bl	80090d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <MX_GPIO_Init+0x3a0>)
 8001a9a:	f007 fb19 	bl	80090d0 <HAL_GPIO_Init>

}
 8001a9e:	bf00      	nop
 8001aa0:	3740      	adds	r7, #64	; 0x40
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400

08001ab8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001ac0:	f01a fdba 	bl	801c638 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  //qq
  /* Infinite loop */

  roleInit();
 8001ac4:	f000 fd7e 	bl	80025c4 <roleInit>
  for(;;)
  {
	  roleNode();
 8001ac8:	f000 fdb2 	bl	8002630 <roleNode>
    osDelay(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f017 fea7 	bl	8019820 <osDelay>
	  roleNode();
 8001ad2:	e7f9      	b.n	8001ac8 <StartDefaultTask+0x10>

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ae6:	f005 fa9f 	bl	8007028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40001000 	.word	0x40001000

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>
	...

08001b04 <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b094      	sub	sp, #80	; 0x50
 8001b08:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  FILINFO fno;
  DIR dir;
  char *fn;

  res = f_opendir(&dir, SDPath);
 8001b10:	463b      	mov	r3, r7
 8001b12:	4946      	ldr	r1, [pc, #280]	; (8001c2c <AUDIO_StorageParse+0x128>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f017 fc5b 	bl	80193d0 <f_opendir>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  FileList.ptr = 0;
 8001b20:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8001b28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d160      	bne.n	8001bf2 <AUDIO_StorageParse+0xee>
  {
    while(BSP_SD_IsDetected())
 8001b30:	e059      	b.n	8001be6 <AUDIO_StorageParse+0xe2>
    {
      res = f_readdir(&dir, &fno);
 8001b32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b36:	463b      	mov	r3, r7
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f017 fcec 	bl	8019518 <f_readdir>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      if(res != FR_OK || fno.fname[0] == 0)
 8001b46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d158      	bne.n	8001c00 <AUDIO_StorageParse+0xfc>
 8001b4e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d054      	beq.n	8001c00 <AUDIO_StorageParse+0xfc>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8001b56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b5c:	d100      	bne.n	8001b60 <AUDIO_StorageParse+0x5c>
      {
        continue;
 8001b5e:	e042      	b.n	8001be6 <AUDIO_StorageParse+0xe2>
      }
      fn = fno.fname;
 8001b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b64:	3309      	adds	r3, #9
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001b6a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001b6e:	2b17      	cmp	r3, #23
 8001b70:	d839      	bhi.n	8001be6 <AUDIO_StorageParse+0xe2>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8001b72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d133      	bne.n	8001be6 <AUDIO_StorageParse+0xe2>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8001b7e:	492d      	ldr	r1, [pc, #180]	; (8001c34 <AUDIO_StorageParse+0x130>)
 8001b80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b82:	f01b f9c2 	bl	801cf0a <strstr>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <AUDIO_StorageParse+0x96>
 8001b8c:	492a      	ldr	r1, [pc, #168]	; (8001c38 <AUDIO_StorageParse+0x134>)
 8001b8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b90:	f01b f9bb 	bl	801cf0a <strstr>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d025      	beq.n	8001be6 <AUDIO_StorageParse+0xe2>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001b9c:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	2228      	movs	r2, #40	; 0x28
 8001bb4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f01b f994 	bl	801cee4 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001bbe:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	491a      	ldr	r1, [pc, #104]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001bd8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001be2:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(BSP_SD_IsDetected())
 8001be6:	f012 f958 	bl	8013e9a <BSP_SD_IsDetected>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1a0      	bne.n	8001b32 <AUDIO_StorageParse+0x2e>
 8001bf0:	e006      	b.n	8001c00 <AUDIO_StorageParse+0xfc>
      }
    }
  }
  else
  {
	  serialPrintln(&vcp,  "cannot open dir : %d",res);
 8001bf2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4910      	ldr	r1, [pc, #64]	; (8001c3c <AUDIO_StorageParse+0x138>)
 8001bfa:	4811      	ldr	r0, [pc, #68]	; (8001c40 <AUDIO_StorageParse+0x13c>)
 8001bfc:	f000 fdd7 	bl	80027ae <serialPrintln>

  }
  NumObs = FileList.ptr;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <AUDIO_StorageParse+0x12c>)
 8001c02:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <AUDIO_StorageParse+0x140>)
 8001c08:	801a      	strh	r2, [r3, #0]
  serialPrintln(&vcp,"NumbObs : %d",NumObs);
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <AUDIO_StorageParse+0x140>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	490d      	ldr	r1, [pc, #52]	; (8001c48 <AUDIO_StorageParse+0x144>)
 8001c12:	480b      	ldr	r0, [pc, #44]	; (8001c40 <AUDIO_StorageParse+0x13c>)
 8001c14:	f000 fdcb 	bl	80027ae <serialPrintln>
  f_closedir(&dir);
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f017 fc51 	bl	80194c2 <f_closedir>
  return res;
 8001c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3750      	adds	r7, #80	; 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20013044 	.word	0x20013044
 8001c30:	20004ee0 	.word	0x20004ee0
 8001c34:	0801d688 	.word	0x0801d688
 8001c38:	0801d68c 	.word	0x0801d68c
 8001c3c:	0801d690 	.word	0x0801d690
 8001c40:	20012b68 	.word	0x20012b68
 8001c44:	200052ba 	.word	0x200052ba
 8001c48:	0801d6a8 	.word	0x0801d6a8

08001c4c <AUDIO_ShowWavFiles>:
  * @brief  Shows audio file (*.wav) on the root
  * @param  None
  * @retval None
  */
uint8_t AUDIO_ShowWavFiles(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  if(AUDIO_StorageParse() ==  FR_OK)
 8001c50:	f7ff ff58 	bl	8001b04 <AUDIO_StorageParse>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <AUDIO_ShowWavFiles+0x20>
  {
    if(FileList.ptr > 0)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <AUDIO_ShowWavFiles+0x28>)
 8001c5c:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <AUDIO_ShowWavFiles+0x1c>
    {
      return 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e002      	b.n	8001c6e <AUDIO_ShowWavFiles+0x22>
    }
    return 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <AUDIO_ShowWavFiles+0x22>
  }
  return 2;
 8001c6c:	2302      	movs	r3, #2
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004ee0 	.word	0x20004ee0

08001c78 <AUDIO_GetWavObjectNumber>:
  * @brief  Gets Wav Object Number.
  * @param  None
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return NumObs;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <AUDIO_GetWavObjectNumber+0x14>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	200052ba 	.word	0x200052ba

08001c90 <PlayerInit>:
  * @brief  Initializes the Wave player.
  * @param  AudioFreq: Audio sampling frequency
  * @retval None
  */
static uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <PlayerInit+0x34>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f003 fdd6 	bl	8005854 <BSP_AUDIO_OUT_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <PlayerInit+0x22>
  {
    return 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e003      	b.n	8001cba <PlayerInit+0x2a>
  }
  else
  {
    BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001cb2:	2005      	movs	r0, #5
 8001cb4:	f003 fe6c 	bl	8005990 <BSP_AUDIO_OUT_SetAudioFrameSlot>
    return 0;
 8001cb8:	2300      	movs	r3, #0
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <GetFileInfo>:
  * @param  file_idx: File index
  * @param  info: Pointer to WAV file info
  * @retval Audio error
  */
static AUDIO_ErrorTypeDef GetFileInfo(uint16_t file_idx, WAVE_FormatTypeDef *info)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b092      	sub	sp, #72	; 0x48
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	80fb      	strh	r3, [r7, #6]
  uint32_t bytesread;
  uint32_t duration;
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  if(f_open(&SDFile, (char *)FileList.file[file_idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <GetFileInfo+0x58>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480e      	ldr	r0, [pc, #56]	; (8001d24 <GetFileInfo+0x5c>)
 8001cec:	f016 fb8e 	bl	801840c <f_open>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10e      	bne.n	8001d14 <GetFileInfo+0x4c>
  {
    /* Fill the buffer to Send */
    if(f_read(&SDFile, info, sizeof(WaveReadFormat), (void *)&bytesread) == FR_OK)
 8001cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cfa:	222c      	movs	r2, #44	; 0x2c
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <GetFileInfo+0x5c>)
 8001d00:	f016 fd49 	bl	8018796 <f_read>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <GetFileInfo+0x46>
    {

      return AUDIO_ERROR_NONE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e003      	b.n	8001d16 <GetFileInfo+0x4e>
    }
    f_close(&SDFile);
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <GetFileInfo+0x5c>)
 8001d10:	f017 f8dc 	bl	8018ecc <f_close>
  }
  return AUDIO_ERROR_IO;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3748      	adds	r7, #72	; 0x48
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20004ee0 	.word	0x20004ee0
 8001d24:	2001327c 	.word	0x2001327c

08001d28 <AUDIO_PLAYER_Start>:


AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;

  f_close(&SDFile);
 8001d32:	481f      	ldr	r0, [pc, #124]	; (8001db0 <AUDIO_PLAYER_Start+0x88>)
 8001d34:	f017 f8ca 	bl	8018ecc <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001d38:	f7ff ff9e 	bl	8001c78 <AUDIO_GetWavObjectNumber>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d92d      	bls.n	8001da4 <AUDIO_PLAYER_Start+0x7c>
  {

	GetFileInfo(idx, &WaveReadFormat);
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4919      	ldr	r1, [pc, #100]	; (8001db4 <AUDIO_PLAYER_Start+0x8c>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ffba 	bl	8001cc8 <GetFileInfo>


    /*Adjust the Audio frequency */
    PlayerInit(WaveReadFormat.SampleRate);
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <AUDIO_PLAYER_Start+0x8c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff99 	bl	8001c90 <PlayerInit>

    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <AUDIO_PLAYER_Start+0x90>)
 8001d60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]

    /* Get Data from USB Flash Disk */
    f_lseek(&SDFile, 0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4811      	ldr	r0, [pc, #68]	; (8001db0 <AUDIO_PLAYER_Start+0x88>)
 8001d6c:	f017 f8dd 	bl	8018f2a <f_lseek>

    /* Fill whole buffer at first time */
    if(f_read(&SDFile,
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d78:	490f      	ldr	r1, [pc, #60]	; (8001db8 <AUDIO_PLAYER_Start+0x90>)
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <AUDIO_PLAYER_Start+0x88>)
 8001d7c:	f016 fd0b 	bl	8018796 <f_read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10e      	bne.n	8001da4 <AUDIO_PLAYER_Start+0x7c>
              &BufferCtl.buff[0],
              AUDIO_OUT_BUFFER_SIZE,
              (void *)&bytesread) == FR_OK)
    {
        if(bytesread != 0)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <AUDIO_PLAYER_Start+0x7c>
        {
          BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2);
 8001d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <AUDIO_PLAYER_Start+0x90>)
 8001d92:	f003 fdb1 	bl	80058f8 <BSP_AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <AUDIO_PLAYER_Start+0x90>)
 8001d9a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001d9e:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <AUDIO_PLAYER_Start+0x7e>
        }
    }
  }
  return AUDIO_ERROR_IO;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2001327c 	.word	0x2001327c
 8001db4:	20004eb4 	.word	0x20004eb4
 8001db8:	20000ea8 	.word	0x20000ea8

08001dbc <playStart>:



AUDIO_ErrorTypeDef playStart(int index)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	int res;
	serialPrintln(&vcp,"init play");
 8001dc4:	4916      	ldr	r1, [pc, #88]	; (8001e20 <playStart+0x64>)
 8001dc6:	4817      	ldr	r0, [pc, #92]	; (8001e24 <playStart+0x68>)
 8001dc8:	f000 fcf1 	bl	80027ae <serialPrintln>
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4916      	ldr	r1, [pc, #88]	; (8001e28 <playStart+0x6c>)
 8001dd0:	4816      	ldr	r0, [pc, #88]	; (8001e2c <playStart+0x70>)
 8001dd2:	f016 fab7 	bl	8018344 <f_mount>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	60fb      	str	r3, [r7, #12]
	if(res != FR_OK)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <playStart+0x2e>
	{
	  serialPrintln(&vcp,"error mount, code error : %d",res);
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4913      	ldr	r1, [pc, #76]	; (8001e30 <playStart+0x74>)
 8001de4:	480f      	ldr	r0, [pc, #60]	; (8001e24 <playStart+0x68>)
 8001de6:	f000 fce2 	bl	80027ae <serialPrintln>
	}

	AUDIO_ShowWavFiles();
 8001dea:	f7ff ff2f 	bl	8001c4c <AUDIO_ShowWavFiles>

	res = AUDIO_PLAYER_Start(index);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff98 	bl	8001d28 <AUDIO_PLAYER_Start>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
	if(res != AUDIO_ERROR_NONE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <playStart+0x52>
	{
	  serialPrintln(&vcp,"error start audio : %d",res);
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	490b      	ldr	r1, [pc, #44]	; (8001e34 <playStart+0x78>)
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <playStart+0x68>)
 8001e08:	f000 fcd1 	bl	80027ae <serialPrintln>
 8001e0c:	e003      	b.n	8001e16 <playStart+0x5a>
	}
	else
	{
		serialPrintln(&vcp,"audio start gaes");
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <playStart+0x7c>)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <playStart+0x68>)
 8001e12:	f000 fccc 	bl	80027ae <serialPrintln>
	}

	return (AUDIO_ERROR_NONE);
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	0801d6b8 	.word	0x0801d6b8
 8001e24:	20012b68 	.word	0x20012b68
 8001e28:	20013044 	.word	0x20013044
 8001e2c:	20013048 	.word	0x20013048
 8001e30:	0801d6c4 	.word	0x0801d6c4
 8001e34:	0801d6e4 	.word	0x0801d6e4
 8001e38:	0801d6fc 	.word	0x0801d6fc

08001e3c <playProcess>:

AUDIO_ErrorTypeDef playProcess(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
  uint32_t bytesread, elapsed_time;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;


    if(BufferCtl.fptr >= WaveReadFormat.FileSize)
 8001e46:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <playProcess+0xe0>)
 8001e48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <playProcess+0xe4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d304      	bcc.n	8001e60 <playProcess+0x24>
    {
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e56:	2002      	movs	r0, #2
 8001e58:	f003 fd78 	bl	800594c <BSP_AUDIO_OUT_Stop>
      audio_error = AUDIO_ERROR_EOF;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	73fb      	strb	r3, [r7, #15]
    }

    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <playProcess+0xe0>)
 8001e62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d11d      	bne.n	8001ea8 <playProcess+0x6c>
    {

      if(f_read(&SDFile,
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e72:	492a      	ldr	r1, [pc, #168]	; (8001f1c <playProcess+0xe0>)
 8001e74:	482b      	ldr	r0, [pc, #172]	; (8001f24 <playProcess+0xe8>)
 8001e76:	f016 fc8e 	bl	8018796 <f_read>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <playProcess+0x4e>
                &BufferCtl.buff[0],
                AUDIO_OUT_BUFFER_SIZE/2,
                (void *)&bytesread) != FR_OK)
      {
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e80:	2002      	movs	r0, #2
 8001e82:	f003 fd63 	bl	800594c <BSP_AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e044      	b.n	8001f14 <playProcess+0xd8>
      }
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <playProcess+0xe0>)
 8001e8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <playProcess+0xe0>)
 8001e96:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <playProcess+0xe0>)
 8001ea2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001ea6:	6053      	str	r3, [r2, #4]
    }

    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <playProcess+0xe0>)
 8001eaa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d11d      	bne.n	8001ef0 <playProcess+0xb4>
    {

      if(f_read(&SDFile,
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eba:	491b      	ldr	r1, [pc, #108]	; (8001f28 <playProcess+0xec>)
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <playProcess+0xe8>)
 8001ebe:	f016 fc6a 	bl	8018796 <f_read>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <playProcess+0x96>
                &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE/2],
                AUDIO_OUT_BUFFER_SIZE/2,
                (void *)&bytesread) != FR_OK)
      {
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f003 fd3f 	bl	800594c <BSP_AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e020      	b.n	8001f14 <playProcess+0xd8>
      }

      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <playProcess+0xe0>)
 8001ed4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <playProcess+0xe0>)
 8001ede:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <playProcess+0xe0>)
 8001eea:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001eee:	6053      	str	r3, [r2, #4]
    }

    /* Display elapsed time */
    elapsed_time = BufferCtl.fptr / WaveReadFormat.ByteRate;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <playProcess+0xe0>)
 8001ef2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <playProcess+0xe4>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	60bb      	str	r3, [r7, #8]
    if(prev_elapsed_time != elapsed_time)
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <playProcess+0xf0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d002      	beq.n	8001f12 <playProcess+0xd6>
    {
      prev_elapsed_time = elapsed_time;
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <playProcess+0xf0>)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	6013      	str	r3, [r2, #0]
    }
  return audio_error;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000ea8 	.word	0x20000ea8
 8001f20:	20004eb4 	.word	0x20004eb4
 8001f24:	2001327c 	.word	0x2001327c
 8001f28:	20001ea8 	.word	0x20001ea8
 8001f2c:	20000004 	.word	0x20000004

08001f30 <BSP_AUDIO_OUT_TransferComplete_CallBack>:


void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 8001f36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	701a      	strb	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20000ea8 	.word	0x20000ea8

08001f4c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>)
 8001f52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	20000ea8 	.word	0x20000ea8

08001f68 <playStop>:

AUDIO_ErrorTypeDef playStop(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  AudioState = AUDIO_STATE_STOP;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <playStop+0x2c>)
 8001f6e:	220a      	movs	r2, #10
 8001f70:	701a      	strb	r2, [r3, #0]
  FilePos = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <playStop+0x30>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	801a      	strh	r2, [r3, #0]

  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f003 fce7 	bl	800594c <BSP_AUDIO_OUT_Stop>
  f_close(&SDFile);
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <playStop+0x34>)
 8001f80:	f016 ffa4 	bl	8018ecc <f_close>

  serialPrintln(&vcp,"selesai play");
 8001f84:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <playStop+0x38>)
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <playStop+0x3c>)
 8001f88:	f000 fc11 	bl	80027ae <serialPrintln>
  return AUDIO_ERROR_NONE;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20004eb2 	.word	0x20004eb2
 8001f98:	20004eb0 	.word	0x20004eb0
 8001f9c:	2001327c 	.word	0x2001327c
 8001fa0:	0801d710 	.word	0x0801d710
 8001fa4:	20012b68 	.word	0x20012b68

08001fa8 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2252      	movs	r2, #82	; 0x52
 8001fb6:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	2249      	movs	r2, #73	; 0x49
 8001fbe:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	2246      	movs	r2, #70	; 0x46
 8001fc6:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3303      	adds	r3, #3
 8001fcc:	2246      	movs	r2, #70	; 0x46
 8001fce:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3305      	adds	r3, #5
 8001fdc:	224c      	movs	r2, #76	; 0x4c
 8001fde:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	221d      	movs	r2, #29
 8001fe6:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3307      	adds	r3, #7
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	2257      	movs	r2, #87	; 0x57
 8001ff6:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3309      	adds	r3, #9
 8001ffc:	2241      	movs	r2, #65	; 0x41
 8001ffe:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	330a      	adds	r3, #10
 8002004:	2256      	movs	r2, #86	; 0x56
 8002006:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	330b      	adds	r3, #11
 800200c:	2245      	movs	r2, #69	; 0x45
 800200e:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	330c      	adds	r3, #12
 8002014:	2266      	movs	r2, #102	; 0x66
 8002016:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	330d      	adds	r3, #13
 800201c:	226d      	movs	r2, #109	; 0x6d
 800201e:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	330e      	adds	r3, #14
 8002024:	2274      	movs	r2, #116	; 0x74
 8002026:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	330f      	adds	r3, #15
 800202c:	2220      	movs	r2, #32
 800202e:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3310      	adds	r3, #16
 8002034:	2210      	movs	r2, #16
 8002036:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3311      	adds	r3, #17
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3312      	adds	r3, #18
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3313      	adds	r3, #19
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3314      	adds	r3, #20
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3315      	adds	r3, #21
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	8ada      	ldrh	r2, [r3, #22]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3316      	adds	r3, #22
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3317      	adds	r3, #23
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3318      	adds	r3, #24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	0a1a      	lsrs	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3319      	adds	r3, #25
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	0c1a      	lsrs	r2, r3, #16
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	331a      	adds	r3, #26
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	0e1a      	lsrs	r2, r3, #24
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	331b      	adds	r3, #27
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	331c      	adds	r3, #28
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	0a1a      	lsrs	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	331d      	adds	r3, #29
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	0c1a      	lsrs	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	331e      	adds	r3, #30
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	0e1a      	lsrs	r2, r3, #24
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	331f      	adds	r3, #31
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	8c1a      	ldrh	r2, [r3, #32]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3320      	adds	r3, #32
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3321      	adds	r3, #33	; 0x21
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3322      	adds	r3, #34	; 0x22
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3323      	adds	r3, #35	; 0x23
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3324      	adds	r3, #36	; 0x24
 800210c:	2264      	movs	r2, #100	; 0x64
 800210e:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3325      	adds	r3, #37	; 0x25
 8002114:	2261      	movs	r2, #97	; 0x61
 8002116:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3326      	adds	r3, #38	; 0x26
 800211c:	2274      	movs	r2, #116	; 0x74
 800211e:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3327      	adds	r3, #39	; 0x27
 8002124:	2261      	movs	r2, #97	; 0x61
 8002126:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3328      	adds	r3, #40	; 0x28
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3329      	adds	r3, #41	; 0x29
 8002134:	224c      	movs	r2, #76	; 0x4c
 8002136:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	332a      	adds	r3, #42	; 0x2a
 800213c:	221d      	movs	r2, #29
 800213e:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	332b      	adds	r3, #43	; 0x2b
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8002162:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <WavProcess_EncInit+0x78>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <WavProcess_EncInit+0x78>)
 800216a:	2201      	movs	r2, #1
 800216c:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <WavProcess_EncInit+0x78>)
 8002170:	2210      	movs	r2, #16
 8002172:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <WavProcess_EncInit+0x78>)
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <WavProcess_EncInit+0x7c>)
 8002178:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <WavProcess_EncInit+0x78>)
 800217c:	222c      	movs	r2, #44	; 0x2c
 800217e:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <WavProcess_EncInit+0x78>)
 8002182:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <WavProcess_EncInit+0x78>)
 8002186:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8002188:	08d2      	lsrs	r2, r2, #3
 800218a:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800218c:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <WavProcess_EncInit+0x78>)
 8002192:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 8002194:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <WavProcess_EncInit+0x78>)
 800219a:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <WavProcess_EncInit+0x78>)
 800219e:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <WavProcess_EncInit+0x78>)
 80021a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	fb12 f303 	smulbb	r3, r2, r3
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <WavProcess_EncInit+0x78>)
 80021b0:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 80021b2:	4907      	ldr	r1, [pc, #28]	; (80021d0 <WavProcess_EncInit+0x78>)
 80021b4:	6838      	ldr	r0, [r7, #0]
 80021b6:	f7ff fef7 	bl	8001fa8 <WavProcess_HeaderInit>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <WavProcess_EncInit+0x6c>
  {
    return 1;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <WavProcess_EncInit+0x6e>
  }
  return 0;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20012af8 	.word	0x20012af8
 80021d4:	001d4c00 	.word	0x001d4c00

080021d8 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 80021e4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 80021f4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	0a1a      	lsrs	r2, r3, #8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3305      	adds	r3, #5
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 8002206:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0c1a      	lsrs	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3306      	adds	r3, #6
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 8002218:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	0e1a      	lsrs	r2, r3, #24
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3307      	adds	r3, #7
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 800222a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	3b2c      	subs	r3, #44	; 0x2c
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 8002234:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8002238:	60d3      	str	r3, [r2, #12]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 800223c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3328      	adds	r3, #40	; 0x28
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 800224c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	0a1a      	lsrs	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3329      	adds	r3, #41	; 0x29
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 800225e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0c1a      	lsrs	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	332a      	adds	r3, #42	; 0x2a
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <WavProcess_HeaderUpdate+0xb8>)
 8002270:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	0e1a      	lsrs	r2, r3, #24
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	332b      	adds	r3, #43	; 0x2b
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20009ae8 	.word	0x20009ae8

08002294 <recordStart>:

AUDIO_ErrorTypeDef recordStart()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	603b      	str	r3, [r7, #0]
	uwVolume = 100;
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <recordStart+0xbc>)
 80022a0:	2264      	movs	r2, #100	; 0x64
 80022a2:	601a      	str	r2, [r3, #0]

	/* Create a new file system */
	res = f_open(&SDFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE);
 80022a4:	220a      	movs	r2, #10
 80022a6:	492b      	ldr	r1, [pc, #172]	; (8002354 <recordStart+0xc0>)
 80022a8:	482b      	ldr	r0, [pc, #172]	; (8002358 <recordStart+0xc4>)
 80022aa:	f016 f8af 	bl	801840c <f_open>
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
	if( res != FR_OK)
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <recordStart+0x32>
	{
		serialPrintln(&vcp,"cannot open file, code error : %d",res);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4927      	ldr	r1, [pc, #156]	; (800235c <recordStart+0xc8>)
 80022be:	4828      	ldr	r0, [pc, #160]	; (8002360 <recordStart+0xcc>)
 80022c0:	f000 fa75 	bl	80027ae <serialPrintln>
 80022c4:	e03e      	b.n	8002344 <recordStart+0xb0>
	}
	else
	{
		serialPrintln(&vcp,"open file");
 80022c6:	4927      	ldr	r1, [pc, #156]	; (8002364 <recordStart+0xd0>)
 80022c8:	4825      	ldr	r0, [pc, #148]	; (8002360 <recordStart+0xcc>)
 80022ca:	f000 fa70 	bl	80027ae <serialPrintln>
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 80022ce:	4926      	ldr	r1, [pc, #152]	; (8002368 <recordStart+0xd4>)
 80022d0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80022d4:	f7ff ff40 	bl	8002158 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&SDFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	222c      	movs	r2, #44	; 0x2c
 80022dc:	4922      	ldr	r1, [pc, #136]	; (8002368 <recordStart+0xd4>)
 80022de:	481e      	ldr	r0, [pc, #120]	; (8002358 <recordStart+0xc4>)
 80022e0:	f016 fbc7 	bl	8018a72 <f_write>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d12c      	bne.n	8002344 <recordStart+0xb0>
		{
			if(byteswritten != 0)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d029      	beq.n	8002344 <recordStart+0xb0>
			{
			  serialPrintln(&vcp,"start record");
 80022f0:	491e      	ldr	r1, [pc, #120]	; (800236c <recordStart+0xd8>)
 80022f2:	481b      	ldr	r0, [pc, #108]	; (8002360 <recordStart+0xcc>)
 80022f4:	f000 fa5b 	bl	80027ae <serialPrintln>

			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, 1);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2110      	movs	r1, #16
 80022fc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002300:	f003 fd36 	bl	8005d70 <BSP_AUDIO_IN_Init>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 8002304:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8002308:	4819      	ldr	r0, [pc, #100]	; (8002370 <recordStart+0xdc>)
 800230a:	f003 fdaf 	bl	8005e6c <BSP_AUDIO_IN_Record>
			  BufferCtl.fptr = byteswritten;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <recordStart+0xdc>)
 8002312:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8002316:	60d3      	str	r3, [r2, #12]
			  BufferCtl.pcm_ptr = 0;
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <recordStart+0xdc>)
 800231a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800231e:	461a      	mov	r2, r3
 8002320:	2300      	movs	r3, #0
 8002322:	6013      	str	r3, [r2, #0]
			  BufferCtl.offset = 0;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <recordStart+0xdc>)
 8002326:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800232a:	461a      	mov	r2, r3
 800232c:	2300      	movs	r3, #0
 800232e:	6093      	str	r3, [r2, #8]
			  BufferCtl.wr_state = BUFFER_EMPTY;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <recordStart+0xdc>)
 8002332:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002336:	2200      	movs	r2, #0
 8002338:	711a      	strb	r2, [r3, #4]
			  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, SET);
 800233a:	2201      	movs	r2, #1
 800233c:	2102      	movs	r1, #2
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <recordStart+0xe0>)
 8002340:	f007 f996 	bl	8009670 <HAL_GPIO_WritePin>
			}
		}
	}

	return (AUDIO_ERROR_NONE);
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000008 	.word	0x20000008
 8002354:	0801d720 	.word	0x0801d720
 8002358:	2001327c 	.word	0x2001327c
 800235c:	0801d72c 	.word	0x0801d72c
 8002360:	20012b68 	.word	0x20012b68
 8002364:	0801d750 	.word	0x0801d750
 8002368:	20009abc 	.word	0x20009abc
 800236c:	0801d75c 	.word	0x0801d75c
 8002370:	20009ae8 	.word	0x20009ae8
 8002374:	40022000 	.word	0x40022000

08002378 <recordProcess>:

AUDIO_ErrorTypeDef recordProcess()
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
	uint32_t elapsed_time;
	static uint32_t prev_elapsed_time = 0xFFFFFFFF;

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]


	/* MAX Recording time reached, so stop audio interface and close file */
	if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <recordProcess+0xc8>)
 8002384:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a2e      	ldr	r2, [pc, #184]	; (8002444 <recordProcess+0xcc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <recordProcess+0x1c>
	{
	  return (AUDIO_ERROR_EOF);
 8002390:	2302      	movs	r3, #2
 8002392:	e050      	b.n	8002436 <recordProcess+0xbe>
	}

	if (BufferCtl.wr_state == BUFFER_FULL)
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <recordProcess+0xc8>)
 8002396:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d138      	bne.n	8002412 <recordProcess+0x9a>
	{
		for(int i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE/2; i ++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e010      	b.n	80023c8 <recordProcess+0x50>
		{
			buffer[i] =  BufferCtl.pcm_buff[BufferCtl.offset + i*4];
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <recordProcess+0xc8>)
 80023a8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	0092      	lsls	r2, r2, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <recordProcess+0xc8>)
 80023b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <recordProcess+0xd0>)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE/2; i ++)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80023ce:	dbea      	blt.n	80023a6 <recordProcess+0x2e>
		}

		/* write buffer in file */
		res = f_write(&SDFile, (uint16_t*)(buffer),AUDIO_IN_PCM_BUFFER_SIZE/2,(void*)&byteswritten);
 80023d0:	463b      	mov	r3, r7
 80023d2:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80023d6:	491c      	ldr	r1, [pc, #112]	; (8002448 <recordProcess+0xd0>)
 80023d8:	481c      	ldr	r0, [pc, #112]	; (800244c <recordProcess+0xd4>)
 80023da:	f016 fb4a 	bl	8018a72 <f_write>
 80023de:	4603      	mov	r3, r0
 80023e0:	72fb      	strb	r3, [r7, #11]
		if(res != FR_OK)
 80023e2:	7afb      	ldrb	r3, [r7, #11]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <recordProcess+0x7c>
		{
			serialPrintln(&vcp, "cannot store data, code error : %d",res);
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4918      	ldr	r1, [pc, #96]	; (8002450 <recordProcess+0xd8>)
 80023ee:	4819      	ldr	r0, [pc, #100]	; (8002454 <recordProcess+0xdc>)
 80023f0:	f000 f9dd 	bl	80027ae <serialPrintln>
		}
		BufferCtl.fptr += byteswritten;
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <recordProcess+0xc8>)
 80023f6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <recordProcess+0xc8>)
 8002402:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8002406:	60d3      	str	r3, [r2, #12]
		BufferCtl.wr_state = BUFFER_EMPTY;
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <recordProcess+0xc8>)
 800240a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800240e:	2200      	movs	r2, #0
 8002410:	711a      	strb	r2, [r3, #4]
	}

	/* Display elapsed time */
	elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <recordProcess+0xc8>)
 8002414:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <recordProcess+0xe0>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0b1b      	lsrs	r3, r3, #12
 8002422:	607b      	str	r3, [r7, #4]
	if(prev_elapsed_time != elapsed_time)
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <recordProcess+0xe4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d002      	beq.n	8002434 <recordProcess+0xbc>
	{
	  prev_elapsed_time = elapsed_time;
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <recordProcess+0xe4>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]
	}

	return (AUDIO_ERROR_NONE);
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20009ae8 	.word	0x20009ae8
 8002444:	0009c3ff 	.word	0x0009c3ff
 8002448:	200052bc 	.word	0x200052bc
 800244c:	2001327c 	.word	0x2001327c
 8002450:	0801d76c 	.word	0x0801d76c
 8002454:	20012b68 	.word	0x20012b68
 8002458:	10624dd3 	.word	0x10624dd3
 800245c:	2000000c 	.word	0x2000000c

08002460 <recordStop>:

AUDIO_ErrorTypeDef recordStop()
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]

    /* Stop recorder */
    BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800246a:	2002      	movs	r0, #2
 800246c:	f003 fd16 	bl	8005e9c <BSP_AUDIO_IN_Stop>
    HAL_Delay(150);
 8002470:	2096      	movs	r0, #150	; 0x96
 8002472:	f004 fdf9 	bl	8007068 <HAL_Delay>

    /* Move file pointer of the file object */
    res = f_lseek(&SDFile, 0);
 8002476:	2100      	movs	r1, #0
 8002478:	481d      	ldr	r0, [pc, #116]	; (80024f0 <recordStop+0x90>)
 800247a:	f016 fd56 	bl	8018f2a <f_lseek>
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
    if(res != FR_OK)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <recordStop+0x36>
    {
    	serialPrintln(&vcp, "f_lseek error, code error : %d",res);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	461a      	mov	r2, r3
 800248c:	4919      	ldr	r1, [pc, #100]	; (80024f4 <recordStop+0x94>)
 800248e:	481a      	ldr	r0, [pc, #104]	; (80024f8 <recordStop+0x98>)
 8002490:	f000 f98d 	bl	80027ae <serialPrintln>
 8002494:	e01b      	b.n	80024ce <recordStop+0x6e>
    }
    else
    {
		/* Update the wav file header save it into wav file */
		WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8002496:	4919      	ldr	r1, [pc, #100]	; (80024fc <recordStop+0x9c>)
 8002498:	4819      	ldr	r0, [pc, #100]	; (8002500 <recordStop+0xa0>)
 800249a:	f7ff fe9d 	bl	80021d8 <WavProcess_HeaderUpdate>

		res = f_write(&SDFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
 800249e:	463b      	mov	r3, r7
 80024a0:	222c      	movs	r2, #44	; 0x2c
 80024a2:	4917      	ldr	r1, [pc, #92]	; (8002500 <recordStop+0xa0>)
 80024a4:	4812      	ldr	r0, [pc, #72]	; (80024f0 <recordStop+0x90>)
 80024a6:	f016 fae4 	bl	8018a72 <f_write>
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
		if(res != FR_OK)
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <recordStop+0x62>
		{
			serialPrintln(&vcp, "cannot end file, code error : %d",res);
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <recordStop+0xa4>)
 80024ba:	480f      	ldr	r0, [pc, #60]	; (80024f8 <recordStop+0x98>)
 80024bc:	f000 f977 	bl	80027ae <serialPrintln>
 80024c0:	e005      	b.n	80024ce <recordStop+0x6e>
		}
		else
		{
			serialPrintln(&vcp, "end of file",res);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4910      	ldr	r1, [pc, #64]	; (8002508 <recordStop+0xa8>)
 80024c8:	480b      	ldr	r0, [pc, #44]	; (80024f8 <recordStop+0x98>)
 80024ca:	f000 f970 	bl	80027ae <serialPrintln>
		}
    }
    /* Close file */
    f_close(&SDFile);
 80024ce:	4808      	ldr	r0, [pc, #32]	; (80024f0 <recordStop+0x90>)
 80024d0:	f016 fcfc 	bl	8018ecc <f_close>

    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2102      	movs	r1, #2
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <recordStop+0xac>)
 80024da:	f007 f8c9 	bl	8009670 <HAL_GPIO_WritePin>

    serialPrintln(&vcp, "recording success");
 80024de:	490c      	ldr	r1, [pc, #48]	; (8002510 <recordStop+0xb0>)
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <recordStop+0x98>)
 80024e2:	f000 f964 	bl	80027ae <serialPrintln>

    return (AUDIO_ERROR_NONE);
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2001327c 	.word	0x2001327c
 80024f4:	0801d790 	.word	0x0801d790
 80024f8:	20012b68 	.word	0x20012b68
 80024fc:	20012af8 	.word	0x20012af8
 8002500:	20009abc 	.word	0x20009abc
 8002504:	0801d7b0 	.word	0x0801d7b0
 8002508:	0801d7d4 	.word	0x0801d7d4
 800250c:	40022000 	.word	0x40022000
 8002510:	0801d7e0 	.word	0x0801d7e0

08002514 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
	BufferCtl.wr_state = BUFFER_FULL;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x24>)
 800251a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800251e:	2201      	movs	r2, #1
 8002520:	711a      	strb	r2, [r3, #4]
	BufferCtl.offset = 0;
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x24>)
 8002524:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002528:	461a      	mov	r2, r3
 800252a:	2300      	movs	r3, #0
 800252c:	6093      	str	r3, [r2, #8]

}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	20009ae8 	.word	0x20009ae8

0800253c <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	BufferCtl.wr_state = BUFFER_FULL;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>)
 8002542:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002546:	2201      	movs	r2, #1
 8002548:	711a      	strb	r2, [r3, #4]
	BufferCtl.offset = AUDIO_IN_PCM_BUFFER_SIZE;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>)
 800254c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002550:	461a      	mov	r2, r3
 8002552:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002556:	6093      	str	r3, [r2, #8]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20009ae8 	.word	0x20009ae8

08002568 <LCD_Config>:
ROLE_TypeDef role = RECORD_START;

#define SONG_NUMBER 0

static void LCD_Config(void)
{
 8002568:	b598      	push	{r3, r4, r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* LCD Initialization */
  BSP_LCD_Init();
 800256c:	f003 fe52 	bl	8006214 <BSP_LCD_Init>

  /* LCD Initialization */
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002570:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002574:	2000      	movs	r0, #0
 8002576:	f003 fee5 	bl	8006344 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 800257a:	f003 febb 	bl	80062f4 <BSP_LCD_GetXSize>
 800257e:	4604      	mov	r4, r0
 8002580:	f003 fecc 	bl	800631c <BSP_LCD_GetYSize>
 8002584:	4603      	mov	r3, r0
 8002586:	fb04 f303 	mul.w	r3, r4, r3
 800258a:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4619      	mov	r1, r3
 8002592:	2001      	movs	r0, #1
 8002594:	f003 fed6 	bl	8006344 <BSP_LCD_LayerDefaultInit>

  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 8002598:	f004 f96a 	bl	8006870 <BSP_LCD_DisplayOn>

  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(0);
 800259c:	2000      	movs	r0, #0
 800259e:	f003 ff31 	bl	8006404 <BSP_LCD_SelectLayer>

  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80025a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025a6:	f003 ff89 	bl	80064bc <BSP_LCD_Clear>

  /* Select the LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f003 ff2a 	bl	8006404 <BSP_LCD_SelectLayer>

  /* Clear the Foreground Layer */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80025b0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025b4:	f003 ff82 	bl	80064bc <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80025b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025bc:	f003 ff4a 	bl	8006454 <BSP_LCD_SetBackColor>
  /* Configure the transparency for foreground and background :
     Increase the transparency */
}
 80025c0:	bf00      	nop
 80025c2:	bd98      	pop	{r3, r4, r7, pc}

080025c4 <roleInit>:


void roleInit()
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
	FRESULT res; /* FatFs function common result code */


	/*init library serial*/
	serialInit(&vcp,USART1,usart1_buffer, sizeof(usart1_buffer));
 80025ca:	2340      	movs	r3, #64	; 0x40
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <roleInit+0x50>)
 80025ce:	4912      	ldr	r1, [pc, #72]	; (8002618 <roleInit+0x54>)
 80025d0:	4812      	ldr	r0, [pc, #72]	; (800261c <roleInit+0x58>)
 80025d2:	f000 f8af 	bl	8002734 <serialInit>

	serialPrintln(&vcp,"mount logical drive and create a FAT volume");
 80025d6:	4912      	ldr	r1, [pc, #72]	; (8002620 <roleInit+0x5c>)
 80025d8:	4810      	ldr	r0, [pc, #64]	; (800261c <roleInit+0x58>)
 80025da:	f000 f8e8 	bl	80027ae <serialPrintln>
	/*Mount a logical drive*/
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	4910      	ldr	r1, [pc, #64]	; (8002624 <roleInit+0x60>)
 80025e2:	4811      	ldr	r0, [pc, #68]	; (8002628 <roleInit+0x64>)
 80025e4:	f015 feae 	bl	8018344 <f_mount>
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <roleInit+0x3a>
	{
	  serialPrintln(&vcp,"error mount, code error : %d",res);
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	461a      	mov	r2, r3
 80025f6:	490d      	ldr	r1, [pc, #52]	; (800262c <roleInit+0x68>)
 80025f8:	4808      	ldr	r0, [pc, #32]	; (800261c <roleInit+0x58>)
 80025fa:	f000 f8d8 	bl	80027ae <serialPrintln>
//		{
//			serialPrintln(&vcp,"error mkfs, code error : %d",res);
//		}
//	}

	LCD_Config();
 80025fe:	f7ff ffb3 	bl	8002568 <LCD_Config>
//	BSP_TS_Init(480,272);
	HAL_Delay(500);
 8002602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002606:	f004 fd2f 	bl	8007068 <HAL_Delay>

}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20012b28 	.word	0x20012b28
 8002618:	40011000 	.word	0x40011000
 800261c:	20012b68 	.word	0x20012b68
 8002620:	0801d7f4 	.word	0x0801d7f4
 8002624:	20013044 	.word	0x20013044
 8002628:	20013048 	.word	0x20013048
 800262c:	0801d820 	.word	0x0801d820

08002630 <roleNode>:


void roleNode()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
	char buf[25];
	switch(role)
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <roleNode+0xf4>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b06      	cmp	r3, #6
 800263c:	d86e      	bhi.n	800271c <roleNode+0xec>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <roleNode+0x14>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002661 	.word	0x08002661
 8002648:	08002691 	.word	0x08002691
 800264c:	080026a3 	.word	0x080026a3
 8002650:	080026af 	.word	0x080026af
 8002654:	080026e3 	.word	0x080026e3
 8002658:	080026f5 	.word	0x080026f5
 800265c:	08002701 	.word	0x08002701
	{
	case RECORD_START:
		recordStart();
 8002660:	f7ff fe18 	bl	8002294 <recordStart>
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002664:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002668:	f003 ff28 	bl	80064bc <BSP_LCD_Clear>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800266c:	482e      	ldr	r0, [pc, #184]	; (8002728 <roleNode+0xf8>)
 800266e:	f003 fed9 	bl	8006424 <BSP_LCD_SetTextColor>
		sprintf(buf, "Recording..");
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	492d      	ldr	r1, [pc, #180]	; (800272c <roleNode+0xfc>)
 8002676:	4618      	mov	r0, r3
 8002678:	f01a fc14 	bl	801cea4 <siprintf>
		BSP_LCD_DisplayStringAt(0,150,(uint8_t*)buf,LEFT_MODE);
 800267c:	1d3a      	adds	r2, r7, #4
 800267e:	2303      	movs	r3, #3
 8002680:	2196      	movs	r1, #150	; 0x96
 8002682:	2000      	movs	r0, #0
 8002684:	f003 ff86 	bl	8006594 <BSP_LCD_DisplayStringAt>
		role = RECORD_PROCESS;
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <roleNode+0xf4>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
		break;
 800268e:	e045      	b.n	800271c <roleNode+0xec>
	case RECORD_PROCESS:
		if(recordProcess() == AUDIO_ERROR_EOF)
 8002690:	f7ff fe72 	bl	8002378 <recordProcess>
 8002694:	4603      	mov	r3, r0
 8002696:	2b02      	cmp	r3, #2
 8002698:	d13d      	bne.n	8002716 <roleNode+0xe6>
			role = RECORD_STOP;
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <roleNode+0xf4>)
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
		break;
 80026a0:	e039      	b.n	8002716 <roleNode+0xe6>
	case RECORD_STOP:
		recordStop();
 80026a2:	f7ff fedd 	bl	8002460 <recordStop>
		role = PLAY_START;
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <roleNode+0xf4>)
 80026a8:	2203      	movs	r2, #3
 80026aa:	701a      	strb	r2, [r3, #0]
		break;
 80026ac:	e036      	b.n	800271c <roleNode+0xec>
	case PLAY_START:
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 80026ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80026b2:	f003 ff03 	bl	80064bc <BSP_LCD_Clear>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80026b6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80026ba:	f003 feb3 	bl	8006424 <BSP_LCD_SetTextColor>
		sprintf(buf, "Play..");
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	491b      	ldr	r1, [pc, #108]	; (8002730 <roleNode+0x100>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f01a fbee 	bl	801cea4 <siprintf>
		BSP_LCD_DisplayStringAt(0,150,(uint8_t*)buf,LEFT_MODE);
 80026c8:	1d3a      	adds	r2, r7, #4
 80026ca:	2303      	movs	r3, #3
 80026cc:	2196      	movs	r1, #150	; 0x96
 80026ce:	2000      	movs	r0, #0
 80026d0:	f003 ff60 	bl	8006594 <BSP_LCD_DisplayStringAt>
		playStart(SONG_NUMBER);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7ff fb71 	bl	8001dbc <playStart>
		role = PLAY_PROCESS;
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <roleNode+0xf4>)
 80026dc:	2204      	movs	r2, #4
 80026de:	701a      	strb	r2, [r3, #0]
		break;
 80026e0:	e01c      	b.n	800271c <roleNode+0xec>
	case PLAY_PROCESS:
		if(playProcess() == AUDIO_ERROR_EOF)
 80026e2:	f7ff fbab 	bl	8001e3c <playProcess>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d116      	bne.n	800271a <roleNode+0xea>
			role = PLAY_STOP;
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <roleNode+0xf4>)
 80026ee:	2205      	movs	r2, #5
 80026f0:	701a      	strb	r2, [r3, #0]
		break;
 80026f2:	e012      	b.n	800271a <roleNode+0xea>
	case PLAY_STOP:
		playStop();
 80026f4:	f7ff fc38 	bl	8001f68 <playStop>
		role = AUDIO_GRAPH;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <roleNode+0xf4>)
 80026fa:	2206      	movs	r2, #6
 80026fc:	701a      	strb	r2, [r3, #0]
		break;
 80026fe:	e00d      	b.n	800271c <roleNode+0xec>
	case AUDIO_GRAPH:
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002700:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8002704:	f003 fe8e 	bl	8006424 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawHLine(0, 136, 480);
 8002708:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800270c:	2188      	movs	r1, #136	; 0x88
 800270e:	2000      	movs	r0, #0
 8002710:	f004 f808 	bl	8006724 <BSP_LCD_DrawHLine>
		break;
 8002714:	e002      	b.n	800271c <roleNode+0xec>
		break;
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <roleNode+0xec>
		break;
 800271a:	bf00      	nop
	}
}
 800271c:	bf00      	nop
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20012b24 	.word	0x20012b24
 8002728:	ffff0000 	.word	0xffff0000
 800272c:	0801d840 	.word	0x0801d840
 8002730:	0801d84c 	.word	0x0801d84c

08002734 <serialInit>:

#include "serial.h"


void serialInit(Serial *serial,USART_TypeDef *USARTx,uint8_t *buffer,uint16_t size)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	807b      	strh	r3, [r7, #2]
	serial->port_name = USARTx;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	601a      	str	r2, [r3, #0]
	serial->buffer = buffer;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	605a      	str	r2, [r3, #4]
	serial->buffer_size = size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	811a      	strh	r2, [r3, #8]
	serial->current_index= 0;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	815a      	strh	r2, [r3, #10]
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <serialFlush>:

void serialFlush(Serial *serial)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
	while(!(serial->port_name->ISR & USART_ISR_TXE));
 800276e:	bf00      	nop
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f8      	beq.n	8002770 <serialFlush+0xa>
		// serial->port_name->SR &= ~USART_SR_TXE;
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <serialWrite>:

void serialWrite(Serial *serial,uint8_t value)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
	serial->port_name->TDR = value;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
	serialFlush(serial);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ffe0 	bl	8002766 <serialFlush>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <serialPrintln>:
    	serialWrite(serial,(uint8_t)buffer[i]);
	}
}

void serialPrintln(Serial *serial,const char *fmt, ...)
{
 80027ae:	b40e      	push	{r1, r2, r3}
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b097      	sub	sp, #92	; 0x5c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    char buffer[64];
    va_list args;
    va_start(args, fmt);
 80027b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027bc:	60fb      	str	r3, [r7, #12]
    int length = vsnprintf(buffer, sizeof(buffer), fmt, args);
 80027be:	f107 0010 	add.w	r0, r7, #16
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	f01a fbe0 	bl	801cf8c <vsniprintf>
 80027cc:	6538      	str	r0, [r7, #80]	; 0x50
    va_end(args);
    for(int i = 0;i < length;i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	657b      	str	r3, [r7, #84]	; 0x54
 80027d2:	e00b      	b.n	80027ec <serialPrintln+0x3e>
	{
    	serialWrite(serial,(uint8_t)buffer[i]);
 80027d4:	f107 0210 	add.w	r2, r7, #16
 80027d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ffd3 	bl	800278c <serialWrite>
    for(int i = 0;i < length;i++)
 80027e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e8:	3301      	adds	r3, #1
 80027ea:	657b      	str	r3, [r7, #84]	; 0x54
 80027ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f0:	429a      	cmp	r2, r3
 80027f2:	dbef      	blt.n	80027d4 <serialPrintln+0x26>
	}
    serialWrite(serial,'\n');
 80027f4:	210a      	movs	r1, #10
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffc8 	bl	800278c <serialWrite>
}
 80027fc:	bf00      	nop
 80027fe:	375c      	adds	r7, #92	; 0x5c
 8002800:	46bd      	mov	sp, r7
 8002802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002806:	b003      	add	sp, #12
 8002808:	4770      	bx	lr
	...

0800280c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_MspInit+0x4c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_MspInit+0x4c>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_MspInit+0x4c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_MspInit+0x4c>)
 8002830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_MspInit+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	210f      	movs	r1, #15
 8002846:	f06f 0001 	mvn.w	r0, #1
 800284a:	f004 ff7d 	bl	8007748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a21      	ldr	r2, [pc, #132]	; (8002900 <HAL_ADC_MspInit+0xa4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d13c      	bne.n	80028f8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a20      	ldr	r2, [pc, #128]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 8002884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 800289c:	f043 0320 	orr.w	r3, r3, #32
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a14      	ldr	r2, [pc, #80]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_ADC_MspInit+0xa8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80028c6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80028ca:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028cc:	2303      	movs	r3, #3
 80028ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <HAL_ADC_MspInit+0xac>)
 80028dc:	f006 fbf8 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80028e0:	2301      	movs	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e4:	2303      	movs	r3, #3
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	4806      	ldr	r0, [pc, #24]	; (800290c <HAL_ADC_MspInit+0xb0>)
 80028f4:	f006 fbec 	bl	80090d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40012200 	.word	0x40012200
 8002904:	40023800 	.word	0x40023800
 8002908:	40021400 	.word	0x40021400
 800290c:	40020000 	.word	0x40020000

08002910 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_CRC_MspInit+0x38>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10b      	bne.n	800293a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_CRC_MspInit+0x3c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_CRC_MspInit+0x3c>)
 8002928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_CRC_MspInit+0x3c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023000 	.word	0x40023000
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08e      	sub	sp, #56	; 0x38
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_DCMI_MspInit+0x160>)
 800296e:	4293      	cmp	r3, r2
 8002970:	f040 809a 	bne.w	8002aa8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002974:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6353      	str	r3, [r2, #52]	; 0x34
 8002980:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800298c:	4b49      	ldr	r3, [pc, #292]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 8002992:	f043 0310 	orr.w	r3, r3, #16
 8002996:	6313      	str	r3, [r2, #48]	; 0x30
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a4:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	4a42      	ldr	r2, [pc, #264]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	6313      	str	r3, [r2, #48]	; 0x30
 80029b0:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029bc:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4a3c      	ldr	r2, [pc, #240]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
 80029c8:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a36      	ldr	r2, [pc, #216]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6313      	str	r3, [r2, #48]	; 0x30
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_DCMI_MspInit+0x164>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002a04:	2360      	movs	r3, #96	; 0x60
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a14:	230d      	movs	r3, #13
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4826      	ldr	r0, [pc, #152]	; (8002ab8 <HAL_DCMI_MspInit+0x168>)
 8002a20:	f006 fb56 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002a24:	2308      	movs	r3, #8
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a34:	230d      	movs	r3, #13
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	481f      	ldr	r0, [pc, #124]	; (8002abc <HAL_DCMI_MspInit+0x16c>)
 8002a40:	f006 fb46 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a56:	230d      	movs	r3, #13
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4817      	ldr	r0, [pc, #92]	; (8002ac0 <HAL_DCMI_MspInit+0x170>)
 8002a62:	f006 fb35 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002a66:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a78:	230d      	movs	r3, #13
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a80:	4619      	mov	r1, r3
 8002a82:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <HAL_DCMI_MspInit+0x174>)
 8002a84:	f006 fb24 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002a88:	2350      	movs	r3, #80	; 0x50
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a98:	230d      	movs	r3, #13
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <HAL_DCMI_MspInit+0x178>)
 8002aa4:	f006 fb14 	bl	80090d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002aa8:	bf00      	nop
 8002aaa:	3738      	adds	r7, #56	; 0x38
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	50050000 	.word	0x50050000
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40020000 	.word	0x40020000

08002acc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <HAL_DMA2D_MspInit+0x44>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d113      	bne.n	8002b06 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <HAL_DMA2D_MspInit+0x48>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <HAL_DMA2D_MspInit+0x48>)
 8002ae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_DMA2D_MspInit+0x48>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2105      	movs	r1, #5
 8002afa:	205a      	movs	r0, #90	; 0x5a
 8002afc:	f004 fe24 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002b00:	205a      	movs	r0, #90	; 0x5a
 8002b02:	f004 fe3d 	bl	8007780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	4002b000 	.word	0x4002b000
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a3f      	ldr	r2, [pc, #252]	; (8002c34 <HAL_ETH_MspInit+0x11c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d178      	bne.n	8002c2c <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a3e      	ldr	r2, [pc, #248]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a38      	ldr	r2, [pc, #224]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a32      	ldr	r2, [pc, #200]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a20      	ldr	r2, [pc, #128]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <HAL_ETH_MspInit+0x120>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002bca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bdc:	230b      	movs	r3, #11
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be4:	4619      	mov	r1, r3
 8002be6:	4815      	ldr	r0, [pc, #84]	; (8002c3c <HAL_ETH_MspInit+0x124>)
 8002be8:	f006 fa72 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002bec:	2332      	movs	r3, #50	; 0x32
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bfc:	230b      	movs	r3, #11
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	4619      	mov	r1, r3
 8002c06:	480e      	ldr	r0, [pc, #56]	; (8002c40 <HAL_ETH_MspInit+0x128>)
 8002c08:	f006 fa62 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c0c:	2386      	movs	r3, #134	; 0x86
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c1c:	230b      	movs	r3, #11
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c24:	4619      	mov	r1, r3
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <HAL_ETH_MspInit+0x12c>)
 8002c28:	f006 fa52 	bl	80090d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40028000 	.word	0x40028000
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40021800 	.word	0x40021800
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0ac      	sub	sp, #176	; 0xb0
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	2284      	movs	r2, #132	; 0x84
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f01a f823 	bl	801ccb4 <memset>
  if(hi2c->Instance==I2C1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a44      	ldr	r2, [pc, #272]	; (8002d84 <HAL_I2C_MspInit+0x13c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d13d      	bne.n	8002cf4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c82:	f107 0318 	add.w	r3, r7, #24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f00a f9ca 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c92:	f7fe ff31 	bl	8001af8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002cae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	482d      	ldr	r0, [pc, #180]	; (8002d8c <HAL_I2C_MspInit+0x144>)
 8002cd6:	f006 f9fb 	bl	80090d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cf2:	e042      	b.n	8002d7a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <HAL_I2C_MspInit+0x148>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d13d      	bne.n	8002d7a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d0a:	f107 0318 	add.w	r3, r7, #24
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f00a f986 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002d1a:	f7fe feed 	bl	8001af8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002d36:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3e:	2312      	movs	r3, #18
 8002d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d50:	2304      	movs	r3, #4
 8002d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <HAL_I2C_MspInit+0x14c>)
 8002d5e:	f006 f9b7 	bl	80090d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_I2C_MspInit+0x140>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
}
 8002d7a:	bf00      	nop
 8002d7c:	37b0      	adds	r7, #176	; 0xb0
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40005400 	.word	0x40005400
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40005c00 	.word	0x40005c00
 8002d94:	40021c00 	.word	0x40021c00

08002d98 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_I2C_MspDeInit+0x64>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d110      	bne.n	8002dcc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_I2C_MspDeInit+0x68>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_I2C_MspDeInit+0x68>)
 8002db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dba:	4812      	ldr	r0, [pc, #72]	; (8002e04 <HAL_I2C_MspDeInit+0x6c>)
 8002dbc:	f006 fb34 	bl	8009428 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc4:	480f      	ldr	r0, [pc, #60]	; (8002e04 <HAL_I2C_MspDeInit+0x6c>)
 8002dc6:	f006 fb2f 	bl	8009428 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002dca:	e013      	b.n	8002df4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_I2C_MspDeInit+0x70>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_I2C_MspDeInit+0x68>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_I2C_MspDeInit+0x68>)
 8002ddc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	4809      	ldr	r0, [pc, #36]	; (8002e0c <HAL_I2C_MspDeInit+0x74>)
 8002de6:	f006 fb1f 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dee:	4807      	ldr	r0, [pc, #28]	; (8002e0c <HAL_I2C_MspDeInit+0x74>)
 8002df0:	f006 fb1a 	bl	8009428 <HAL_GPIO_DeInit>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40005400 	.word	0x40005400
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40005c00 	.word	0x40005c00
 8002e0c:	40021c00 	.word	0x40021c00

08002e10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	; 0x38
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a55      	ldr	r2, [pc, #340]	; (8002f84 <HAL_LTDC_MspInit+0x174>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f040 80a3 	bne.w	8002f7a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e34:	4b54      	ldr	r3, [pc, #336]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	4a53      	ldr	r2, [pc, #332]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e40:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e4c:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4a4d      	ldr	r2, [pc, #308]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e52:	f043 0310 	orr.w	r3, r3, #16
 8002e56:	6313      	str	r3, [r2, #48]	; 0x30
 8002e58:	4b4b      	ldr	r3, [pc, #300]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e64:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a47      	ldr	r2, [pc, #284]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e70:	4b45      	ldr	r3, [pc, #276]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e7c:	4b42      	ldr	r3, [pc, #264]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4a41      	ldr	r2, [pc, #260]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e86:	6313      	str	r3, [r2, #48]	; 0x30
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e94:	4b3c      	ldr	r3, [pc, #240]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	4a3b      	ldr	r2, [pc, #236]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea0:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002eac:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a35      	ldr	r2, [pc, #212]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_LTDC_MspInit+0x178>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ed4:	230e      	movs	r3, #14
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002edc:	4619      	mov	r1, r3
 8002ede:	482b      	ldr	r0, [pc, #172]	; (8002f8c <HAL_LTDC_MspInit+0x17c>)
 8002ee0:	f006 f8f6 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002ee4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ef6:	230e      	movs	r3, #14
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efe:	4619      	mov	r1, r3
 8002f00:	4823      	ldr	r0, [pc, #140]	; (8002f90 <HAL_LTDC_MspInit+0x180>)
 8002f02:	f006 f8e5 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002f06:	23f7      	movs	r3, #247	; 0xf7
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f16:	230e      	movs	r3, #14
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1e:	4619      	mov	r1, r3
 8002f20:	481c      	ldr	r0, [pc, #112]	; (8002f94 <HAL_LTDC_MspInit+0x184>)
 8002f22:	f006 f8d5 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f38:	2309      	movs	r3, #9
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f40:	4619      	mov	r1, r3
 8002f42:	4815      	ldr	r0, [pc, #84]	; (8002f98 <HAL_LTDC_MspInit+0x188>)
 8002f44:	f006 f8c4 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002f48:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f5a:	230e      	movs	r3, #14
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <HAL_LTDC_MspInit+0x18c>)
 8002f66:	f006 f8b3 	bl	80090d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2105      	movs	r1, #5
 8002f6e:	2058      	movs	r0, #88	; 0x58
 8002f70:	f004 fbea 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002f74:	2058      	movs	r0, #88	; 0x58
 8002f76:	f004 fc03 	bl	8007780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f7a:	bf00      	nop
 8002f7c:	3738      	adds	r7, #56	; 0x38
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40016800 	.word	0x40016800
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40022400 	.word	0x40022400
 8002f94:	40022800 	.word	0x40022800
 8002f98:	40021800 	.word	0x40021800
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	; 0x30
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <HAL_QSPI_MspInit+0x10c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d170      	bne.n	80030a4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	4a3a      	ldr	r2, [pc, #232]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6393      	str	r3, [r2, #56]	; 0x38
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fda:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002fe0:	f043 0310 	orr.w	r3, r3, #16
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_QSPI_MspInit+0x110>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003022:	2304      	movs	r3, #4
 8003024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2302      	movs	r3, #2
 8003028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302e:	2303      	movs	r3, #3
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003032:	2309      	movs	r3, #9
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 031c 	add.w	r3, r7, #28
 800303a:	4619      	mov	r1, r3
 800303c:	481d      	ldr	r0, [pc, #116]	; (80030b4 <HAL_QSPI_MspInit+0x114>)
 800303e:	f006 f847 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304e:	2303      	movs	r3, #3
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003052:	230a      	movs	r3, #10
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4619      	mov	r1, r3
 800305c:	4816      	ldr	r0, [pc, #88]	; (80030b8 <HAL_QSPI_MspInit+0x118>)
 800305e:	f006 f837 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003062:	2304      	movs	r3, #4
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003072:	2309      	movs	r3, #9
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	480e      	ldr	r0, [pc, #56]	; (80030b8 <HAL_QSPI_MspInit+0x118>)
 800307e:	f006 f827 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003082:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003094:	2309      	movs	r3, #9
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	4807      	ldr	r0, [pc, #28]	; (80030bc <HAL_QSPI_MspInit+0x11c>)
 80030a0:	f006 f816 	bl	80090d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80030a4:	bf00      	nop
 80030a6:	3730      	adds	r7, #48	; 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	a0001000 	.word	0xa0001000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020c00 	.word	0x40020c00

080030c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0a4      	sub	sp, #144	; 0x90
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c8:	f107 030c 	add.w	r3, r7, #12
 80030cc:	2284      	movs	r2, #132	; 0x84
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f019 fdef 	bl	801ccb4 <memset>
  if(hrtc->Instance==RTC)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <HAL_RTC_MspInit+0x54>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d114      	bne.n	800310a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030e0:	2320      	movs	r3, #32
 80030e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ea:	f107 030c 	add.w	r3, r7, #12
 80030ee:	4618      	mov	r0, r3
 80030f0:	f009 ff96 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80030fa:	f7fe fcfd 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RTC_MspInit+0x58>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a05      	ldr	r2, [pc, #20]	; (8003118 <HAL_RTC_MspInit+0x58>)
 8003104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800310a:	bf00      	nop
 800310c:	3790      	adds	r7, #144	; 0x90
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40002800 	.word	0x40002800
 8003118:	40023800 	.word	0x40023800

0800311c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_SD_MspInit+0x1b4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f040 80c3 	bne.w	80032c6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003140:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 8003146:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800314a:	6453      	str	r3, [r2, #68]	; 0x44
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003158:	4b5e      	ldr	r3, [pc, #376]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a5d      	ldr	r2, [pc, #372]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6313      	str	r3, [r2, #48]	; 0x30
 8003164:	4b5b      	ldr	r3, [pc, #364]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003170:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 8003176:	f043 0308 	orr.w	r3, r3, #8
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b55      	ldr	r3, [pc, #340]	; (80032d4 <HAL_SD_MspInit+0x1b8>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003188:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800318c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003196:	2303      	movs	r3, #3
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800319a:	230c      	movs	r3, #12
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	484c      	ldr	r0, [pc, #304]	; (80032d8 <HAL_SD_MspInit+0x1bc>)
 80031a6:	f005 ff93 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80031aa:	2304      	movs	r3, #4
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80031ba:	230c      	movs	r3, #12
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4845      	ldr	r0, [pc, #276]	; (80032dc <HAL_SD_MspInit+0x1c0>)
 80031c6:	f005 ff83 	bl	80090d0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80031ca:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031cc:	4a45      	ldr	r2, [pc, #276]	; (80032e4 <HAL_SD_MspInit+0x1c8>)
 80031ce:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d8:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031de:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031e4:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ea:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ec:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031f2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031f4:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fa:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80031fc:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 80031fe:	2220      	movs	r2, #32
 8003200:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003208:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 800320a:	2204      	movs	r2, #4
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 8003210:	2203      	movs	r2, #3
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003214:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 8003216:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800321c:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 800321e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003224:	482e      	ldr	r0, [pc, #184]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 8003226:	f004 fc1d 	bl	8007a64 <HAL_DMA_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003230:	f7fe fc62 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
 800323a:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <HAL_SD_MspInit+0x1c4>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8003240:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003242:	4a2a      	ldr	r2, [pc, #168]	; (80032ec <HAL_SD_MspInit+0x1d0>)
 8003244:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800324c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003250:	2240      	movs	r2, #64	; 0x40
 8003252:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 800325c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003260:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003268:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 800326c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003270:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003274:	2220      	movs	r2, #32
 8003276:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 800327a:	2200      	movs	r2, #0
 800327c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003280:	2204      	movs	r2, #4
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003286:	2203      	movs	r2, #3
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 800328c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 8003294:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800329a:	4813      	ldr	r0, [pc, #76]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 800329c:	f004 fbe2 	bl	8007a64 <HAL_DMA_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80032a6:	f7fe fc27 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 80032ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b0:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <HAL_SD_MspInit+0x1cc>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2105      	movs	r1, #5
 80032ba:	2031      	movs	r0, #49	; 0x31
 80032bc:	f004 fa44 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80032c0:	2031      	movs	r0, #49	; 0x31
 80032c2:	f004 fa5d 	bl	8007780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80032c6:	bf00      	nop
 80032c8:	3728      	adds	r7, #40	; 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020800 	.word	0x40020800
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	20000a84 	.word	0x20000a84
 80032e4:	400264a0 	.word	0x400264a0
 80032e8:	20000ae4 	.word	0x20000ae4
 80032ec:	40026458 	.word	0x40026458

080032f0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b0aa      	sub	sp, #168	; 0xa8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003308:	f107 0310 	add.w	r3, r7, #16
 800330c:	2284      	movs	r2, #132	; 0x84
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f019 fccf 	bl	801ccb4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800331e:	d143      	bne.n	80033a8 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003324:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003326:	2364      	movs	r3, #100	; 0x64
 8003328:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003332:	2302      	movs	r3, #2
 8003334:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	4618      	mov	r0, r3
 8003340:	f009 fe6e 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800334a:	f7fe fbd5 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_SPDIFRX_MspInit+0xc0>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_SPDIFRX_MspInit+0xc0>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_SPDIFRX_MspInit+0xc0>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_SPDIFRX_MspInit+0xc0>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_SPDIFRX_MspInit+0xc0>)
 800336c:	f043 0308 	orr.w	r3, r3, #8
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_SPDIFRX_MspInit+0xc0>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003396:	2308      	movs	r3, #8
 8003398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800339c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033a0:	4619      	mov	r1, r3
 80033a2:	4804      	ldr	r0, [pc, #16]	; (80033b4 <HAL_SPDIFRX_MspInit+0xc4>)
 80033a4:	f005 fe94 	bl	80090d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80033a8:	bf00      	nop
 80033aa:	37a8      	adds	r7, #168	; 0xa8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020c00 	.word	0x40020c00

080033b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2e      	ldr	r2, [pc, #184]	; (8003480 <HAL_TIM_Base_MspInit+0xc8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10c      	bne.n	80033e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033e2:	e046      	b.n	8003472 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d10c      	bne.n	8003408 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	69bb      	ldr	r3, [r7, #24]
}
 8003406:	e034      	b.n	8003472 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <HAL_TIM_Base_MspInit+0xd0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10c      	bne.n	800342c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003412:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]
}
 800342a:	e022      	b.n	8003472 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a16      	ldr	r2, [pc, #88]	; (800348c <HAL_TIM_Base_MspInit+0xd4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10c      	bne.n	8003450 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
}
 800344e:	e010      	b.n	8003472 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <HAL_TIM_Base_MspInit+0xd8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10b      	bne.n	8003472 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	6453      	str	r3, [r2, #68]	; 0x44
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_TIM_Base_MspInit+0xcc>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
}
 8003472:	bf00      	nop
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40023800 	.word	0x40023800
 8003488:	40000400 	.word	0x40000400
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_TIM_PWM_MspInit+0x38>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10b      	bne.n	80034be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80034ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40001800 	.word	0x40001800
 80034d0:	40023800 	.word	0x40023800

080034d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a56      	ldr	r2, [pc, #344]	; (800364c <HAL_TIM_MspPostInit+0x178>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d11d      	bne.n	8003532 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	4b56      	ldr	r3, [pc, #344]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a55      	ldr	r2, [pc, #340]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b53      	ldr	r3, [pc, #332]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800350e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003520:	2301      	movs	r3, #1
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	4619      	mov	r1, r3
 800352a:	484a      	ldr	r0, [pc, #296]	; (8003654 <HAL_TIM_MspPostInit+0x180>)
 800352c:	f005 fdd0 	bl	80090d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003530:	e087      	b.n	8003642 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d11d      	bne.n	8003578 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	4b44      	ldr	r3, [pc, #272]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	4a43      	ldr	r2, [pc, #268]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6313      	str	r3, [r2, #48]	; 0x30
 8003548:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003566:	2301      	movs	r3, #1
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4838      	ldr	r0, [pc, #224]	; (8003654 <HAL_TIM_MspPostInit+0x180>)
 8003572:	f005 fdad 	bl	80090d0 <HAL_GPIO_Init>
}
 8003576:	e064      	b.n	8003642 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a36      	ldr	r2, [pc, #216]	; (8003658 <HAL_TIM_MspPostInit+0x184>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d11c      	bne.n	80035bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003582:	4b33      	ldr	r3, [pc, #204]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a32      	ldr	r2, [pc, #200]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800359a:	2310      	movs	r3, #16
 800359c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035aa:	2302      	movs	r3, #2
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80035ae:	f107 031c 	add.w	r3, r7, #28
 80035b2:	4619      	mov	r1, r3
 80035b4:	4829      	ldr	r0, [pc, #164]	; (800365c <HAL_TIM_MspPostInit+0x188>)
 80035b6:	f005 fd8b 	bl	80090d0 <HAL_GPIO_Init>
}
 80035ba:	e042      	b.n	8003642 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <HAL_TIM_MspPostInit+0x18c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d11c      	bne.n	8003600 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80035c6:	4b22      	ldr	r3, [pc, #136]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80035de:	2301      	movs	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035ee:	2302      	movs	r3, #2
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 031c 	add.w	r3, r7, #28
 80035f6:	4619      	mov	r1, r3
 80035f8:	481a      	ldr	r0, [pc, #104]	; (8003664 <HAL_TIM_MspPostInit+0x190>)
 80035fa:	f005 fd69 	bl	80090d0 <HAL_GPIO_Init>
}
 80035fe:	e020      	b.n	8003642 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <HAL_TIM_MspPostInit+0x194>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d11b      	bne.n	8003642 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a10      	ldr	r2, [pc, #64]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 8003610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_TIM_MspPostInit+0x17c>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003632:	2309      	movs	r3, #9
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 031c 	add.w	r3, r7, #28
 800363a:	4619      	mov	r1, r3
 800363c:	480b      	ldr	r0, [pc, #44]	; (800366c <HAL_TIM_MspPostInit+0x198>)
 800363e:	f005 fd47 	bl	80090d0 <HAL_GPIO_Init>
}
 8003642:	bf00      	nop
 8003644:	3730      	adds	r7, #48	; 0x30
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40023800 	.word	0x40023800
 8003654:	40020000 	.word	0x40020000
 8003658:	40000400 	.word	0x40000400
 800365c:	40020400 	.word	0x40020400
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40022000 	.word	0x40022000
 8003668:	40001800 	.word	0x40001800
 800366c:	40021c00 	.word	0x40021c00

08003670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0ae      	sub	sp, #184	; 0xb8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003688:	f107 0320 	add.w	r3, r7, #32
 800368c:	2284      	movs	r2, #132	; 0x84
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f019 fb0f 	bl	801ccb4 <memset>
  if(huart->Instance==USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a53      	ldr	r2, [pc, #332]	; (80037e8 <HAL_UART_MspInit+0x178>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d15d      	bne.n	800375c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036a0:	2340      	movs	r3, #64	; 0x40
 80036a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80036a4:	2300      	movs	r3, #0
 80036a6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a8:	f107 0320 	add.w	r3, r7, #32
 80036ac:	4618      	mov	r0, r3
 80036ae:	f009 fcb7 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036b8:	f7fe fa1e 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	4a4a      	ldr	r2, [pc, #296]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	6453      	str	r3, [r2, #68]	; 0x44
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d4:	4b45      	ldr	r3, [pc, #276]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4a44      	ldr	r2, [pc, #272]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	6313      	str	r3, [r2, #48]	; 0x30
 80036e0:	4b42      	ldr	r3, [pc, #264]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ec:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4a3e      	ldr	r2, [pc, #248]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6313      	str	r3, [r2, #48]	; 0x30
 80036f8:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	2302      	movs	r3, #2
 800370c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800371c:	2307      	movs	r3, #7
 800371e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003726:	4619      	mov	r1, r3
 8003728:	4831      	ldr	r0, [pc, #196]	; (80037f0 <HAL_UART_MspInit+0x180>)
 800372a:	f005 fcd1 	bl	80090d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800372e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003748:	2307      	movs	r3, #7
 800374a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800374e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003752:	4619      	mov	r1, r3
 8003754:	4827      	ldr	r0, [pc, #156]	; (80037f4 <HAL_UART_MspInit+0x184>)
 8003756:	f005 fcbb 	bl	80090d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800375a:	e040      	b.n	80037de <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <HAL_UART_MspInit+0x188>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d13b      	bne.n	80037de <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800376a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800376c:	2300      	movs	r3, #0
 800376e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003770:	f107 0320 	add.w	r3, r7, #32
 8003774:	4618      	mov	r0, r3
 8003776:	f009 fc53 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003780:	f7fe f9ba 	bl	8001af8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_UART_MspInit+0x17c>)
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_UART_MspInit+0x17c>)
 800378a:	f043 0320 	orr.w	r3, r3, #32
 800378e:	6453      	str	r3, [r2, #68]	; 0x44
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_UART_MspInit+0x17c>)
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_UART_MspInit+0x17c>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	4a12      	ldr	r2, [pc, #72]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	6313      	str	r3, [r2, #48]	; 0x30
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80037b4:	23c0      	movs	r3, #192	; 0xc0
 80037b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c6:	2303      	movs	r3, #3
 80037c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037cc:	2308      	movs	r3, #8
 80037ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <HAL_UART_MspInit+0x18c>)
 80037da:	f005 fc79 	bl	80090d0 <HAL_GPIO_Init>
}
 80037de:	bf00      	nop
 80037e0:	37b8      	adds	r7, #184	; 0xb8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40011000 	.word	0x40011000
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020400 	.word	0x40020400
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	40020800 	.word	0x40020800

08003800 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_FMC_MspInit+0x100>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d16d      	bne.n	80038f8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800381c:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_FMC_MspInit+0x100>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <HAL_FMC_MspInit+0x104>)
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	4a37      	ldr	r2, [pc, #220]	; (8003904 <HAL_FMC_MspInit+0x104>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	6393      	str	r3, [r2, #56]	; 0x38
 800382e:	4b35      	ldr	r3, [pc, #212]	; (8003904 <HAL_FMC_MspInit+0x104>)
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800383a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800383e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003848:	2303      	movs	r3, #3
 800384a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800384c:	230c      	movs	r3, #12
 800384e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	4619      	mov	r1, r3
 8003854:	482c      	ldr	r0, [pc, #176]	; (8003908 <HAL_FMC_MspInit+0x108>)
 8003856:	f005 fc3b 	bl	80090d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800385a:	f248 1333 	movw	r3, #33075	; 0x8133
 800385e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2303      	movs	r3, #3
 800386a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800386c:	230c      	movs	r3, #12
 800386e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4825      	ldr	r0, [pc, #148]	; (800390c <HAL_FMC_MspInit+0x10c>)
 8003876:	f005 fc2b 	bl	80090d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800387a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800387e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003888:	2303      	movs	r3, #3
 800388a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800388c:	230c      	movs	r3, #12
 800388e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	4619      	mov	r1, r3
 8003894:	481e      	ldr	r0, [pc, #120]	; (8003910 <HAL_FMC_MspInit+0x110>)
 8003896:	f005 fc1b 	bl	80090d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800389a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800389e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	2302      	movs	r3, #2
 80038a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a8:	2303      	movs	r3, #3
 80038aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ac:	230c      	movs	r3, #12
 80038ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4817      	ldr	r0, [pc, #92]	; (8003914 <HAL_FMC_MspInit+0x114>)
 80038b6:	f005 fc0b 	bl	80090d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80038ba:	2328      	movs	r3, #40	; 0x28
 80038bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c6:	2303      	movs	r3, #3
 80038c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ca:	230c      	movs	r3, #12
 80038cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4811      	ldr	r0, [pc, #68]	; (8003918 <HAL_FMC_MspInit+0x118>)
 80038d4:	f005 fbfc 	bl	80090d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80038d8:	2308      	movs	r3, #8
 80038da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038e8:	230c      	movs	r3, #12
 80038ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	480a      	ldr	r0, [pc, #40]	; (800391c <HAL_FMC_MspInit+0x11c>)
 80038f2:	f005 fbed 	bl	80090d0 <HAL_GPIO_Init>
 80038f6:	e000      	b.n	80038fa <HAL_FMC_MspInit+0xfa>
    return;
 80038f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20012b74 	.word	0x20012b74
 8003904:	40023800 	.word	0x40023800
 8003908:	40021000 	.word	0x40021000
 800390c:	40021800 	.word	0x40021800
 8003910:	40020c00 	.word	0x40020c00
 8003914:	40021400 	.word	0x40021400
 8003918:	40021c00 	.word	0x40021c00
 800391c:	40020800 	.word	0x40020800

08003920 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003928:	f7ff ff6a 	bl	8003800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a61      	ldr	r2, [pc, #388]	; (8003ac8 <HAL_SAI_MspInit+0x194>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d15b      	bne.n	80039fe <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003946:	4b61      	ldr	r3, [pc, #388]	; (8003acc <HAL_SAI_MspInit+0x198>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800394e:	4b60      	ldr	r3, [pc, #384]	; (8003ad0 <HAL_SAI_MspInit+0x19c>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	4a5f      	ldr	r2, [pc, #380]	; (8003ad0 <HAL_SAI_MspInit+0x19c>)
 8003954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003958:	6453      	str	r3, [r2, #68]	; 0x44
 800395a:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <HAL_SAI_MspInit+0x19c>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003966:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_SAI_MspInit+0x198>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	4a57      	ldr	r2, [pc, #348]	; (8003acc <HAL_SAI_MspInit+0x198>)
 800396e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003970:	23f0      	movs	r3, #240	; 0xf0
 8003972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397c:	2300      	movs	r3, #0
 800397e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003980:	230a      	movs	r3, #10
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	4619      	mov	r1, r3
 800398a:	4852      	ldr	r0, [pc, #328]	; (8003ad4 <HAL_SAI_MspInit+0x1a0>)
 800398c:	f005 fba0 	bl	80090d0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003990:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 8003992:	4a52      	ldr	r2, [pc, #328]	; (8003adc <HAL_SAI_MspInit+0x1a8>)
 8003994:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003996:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 8003998:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800399c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800399e:	4b4e      	ldr	r3, [pc, #312]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a4:	4b4c      	ldr	r3, [pc, #304]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80039aa:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039b2:	4b49      	ldr	r3, [pc, #292]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039b8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039c0:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80039c2:	4b45      	ldr	r3, [pc, #276]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80039ca:	4b43      	ldr	r3, [pc, #268]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039d0:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80039d6:	4840      	ldr	r0, [pc, #256]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039d8:	f004 f844 	bl	8007a64 <HAL_DMA_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 80039e2:	f7fe f889 	bl	8001af8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a3b      	ldr	r2, [pc, #236]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039ea:	671a      	str	r2, [r3, #112]	; 0x70
 80039ec:	4a3a      	ldr	r2, [pc, #232]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a38      	ldr	r2, [pc, #224]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80039f8:	4a37      	ldr	r2, [pc, #220]	; (8003ad8 <HAL_SAI_MspInit+0x1a4>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a37      	ldr	r2, [pc, #220]	; (8003ae0 <HAL_SAI_MspInit+0x1ac>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d15b      	bne.n	8003ac0 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003a08:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_SAI_MspInit+0x198>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_SAI_MspInit+0x19c>)
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <HAL_SAI_MspInit+0x19c>)
 8003a16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1c:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <HAL_SAI_MspInit+0x19c>)
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003a28:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_SAI_MspInit+0x198>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4a27      	ldr	r2, [pc, #156]	; (8003acc <HAL_SAI_MspInit+0x198>)
 8003a30:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003a44:	230a      	movs	r3, #10
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4825      	ldr	r0, [pc, #148]	; (8003ae4 <HAL_SAI_MspInit+0x1b0>)
 8003a50:	f005 fb3e 	bl	80090d0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a56:	4a25      	ldr	r2, [pc, #148]	; (8003aec <HAL_SAI_MspInit+0x1b8>)
 8003a58:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003a6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a72:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a7a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a82:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8a:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a92:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003a98:	4813      	ldr	r0, [pc, #76]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003a9a:	f003 ffe3 	bl	8007a64 <HAL_DMA_Init>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8003aa4:	f7fe f828 	bl	8001af8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003aac:	671a      	str	r2, [r3, #112]	; 0x70
 8003aae:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003ab8:	66da      	str	r2, [r3, #108]	; 0x6c
 8003aba:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <HAL_SAI_MspInit+0x1b4>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003ac0:	bf00      	nop
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40015c04 	.word	0x40015c04
 8003acc:	20012b78 	.word	0x20012b78
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40022000 	.word	0x40022000
 8003ad8:	20000940 	.word	0x20000940
 8003adc:	40026470 	.word	0x40026470
 8003ae0:	40015c24 	.word	0x40015c24
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	200009a0 	.word	0x200009a0
 8003aec:	400264b8 	.word	0x400264b8

08003af0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_SAI_MspDeInit+0x9c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d11c      	bne.n	8003b3c <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_SAI_MspDeInit+0xa0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_SAI_MspDeInit+0xa0>)
 8003b0a:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8003b0c:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_SAI_MspDeInit+0xa0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8003b14:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <HAL_SAI_MspDeInit+0xa4>)
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <HAL_SAI_MspDeInit+0xa4>)
 8003b1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b1e:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8003b20:	21f0      	movs	r1, #240	; 0xf0
 8003b22:	481d      	ldr	r0, [pc, #116]	; (8003b98 <HAL_SAI_MspDeInit+0xa8>)
 8003b24:	f005 fc80 	bl	8009428 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f004 f847 	bl	8007bc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 f842 	bl	8007bc0 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_SAI_MspDeInit+0xac>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d11d      	bne.n	8003b82 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_SAI_MspDeInit+0xa0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	4a10      	ldr	r2, [pc, #64]	; (8003b90 <HAL_SAI_MspDeInit+0xa0>)
 8003b4e:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <HAL_SAI_MspDeInit+0xa0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_SAI_MspDeInit+0xa4>)
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <HAL_SAI_MspDeInit+0xa4>)
 8003b5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b62:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8003b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b68:	480d      	ldr	r0, [pc, #52]	; (8003ba0 <HAL_SAI_MspDeInit+0xb0>)
 8003b6a:	f005 fc5d 	bl	8009428 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 f824 	bl	8007bc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 f81f 	bl	8007bc0 <HAL_DMA_DeInit>
    }
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40015c04 	.word	0x40015c04
 8003b90:	20012b78 	.word	0x20012b78
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	40015c24 	.word	0x40015c24
 8003ba0:	40021800 	.word	0x40021800

08003ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08e      	sub	sp, #56	; 0x38
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003bb4:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <HAL_InitTick+0xe0>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	4a32      	ldr	r2, [pc, #200]	; (8003c84 <HAL_InitTick+0xe0>)
 8003bba:	f043 0310 	orr.w	r3, r3, #16
 8003bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc0:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <HAL_InitTick+0xe0>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003bcc:	f107 0210 	add.w	r2, r7, #16
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f009 f9f0 	bl	800cfbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003be6:	f009 f9c1 	bl	800cf6c <HAL_RCC_GetPCLK1Freq>
 8003bea:	6378      	str	r0, [r7, #52]	; 0x34
 8003bec:	e004      	b.n	8003bf8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003bee:	f009 f9bd 	bl	800cf6c <HAL_RCC_GetPCLK1Freq>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <HAL_InitTick+0xe4>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	0c9b      	lsrs	r3, r3, #18
 8003c02:	3b01      	subs	r3, #1
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_InitTick+0xec>)
 8003c0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003c0c:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003c2c:	4817      	ldr	r0, [pc, #92]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c2e:	f00c fcb5 	bl	801059c <HAL_TIM_Base_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003c38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11b      	bne.n	8003c78 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003c40:	4812      	ldr	r0, [pc, #72]	; (8003c8c <HAL_InitTick+0xe8>)
 8003c42:	f00c fd03 	bl	801064c <HAL_TIM_Base_Start_IT>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d111      	bne.n	8003c78 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c54:	2036      	movs	r0, #54	; 0x36
 8003c56:	f003 fd93 	bl	8007780 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b0f      	cmp	r3, #15
 8003c5e:	d808      	bhi.n	8003c72 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003c60:	2200      	movs	r2, #0
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	2036      	movs	r0, #54	; 0x36
 8003c66:	f003 fd6f 	bl	8007748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <HAL_InitTick+0xf0>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e002      	b.n	8003c78 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3738      	adds	r7, #56	; 0x38
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	431bde83 	.word	0x431bde83
 8003c8c:	20012b7c 	.word	0x20012b7c
 8003c90:	40001000 	.word	0x40001000
 8003c94:	20000054 	.word	0x20000054

08003c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c9c:	e7fe      	b.n	8003c9c <NMI_Handler+0x4>

08003c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ca2:	e7fe      	b.n	8003ca2 <HardFault_Handler+0x4>

08003ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca8:	e7fe      	b.n	8003ca8 <MemManage_Handler+0x4>

08003caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cae:	e7fe      	b.n	8003cae <BusFault_Handler+0x4>

08003cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <UsageFault_Handler+0x4>

08003cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <SDMMC1_IRQHandler+0x10>)
 8003cca:	f00b facf 	bl	800f26c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000a00 	.word	0x20000a00

08003cd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <TIM6_DAC_IRQHandler+0x10>)
 8003cde:	f00c fd84 	bl	80107ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20012b7c 	.word	0x20012b7c

08003cec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <DMA2_Stream3_IRQHandler+0x10>)
 8003cf2:	f004 f8b5 	bl	8007e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000ae4 	.word	0x20000ae4

08003d00 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <DMA2_Stream4_IRQHandler+0x10>)
 8003d06:	f004 f8ab 	bl	8007e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000940 	.word	0x20000940

08003d14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <OTG_FS_IRQHandler+0x10>)
 8003d1a:	f005 ff2d 	bl	8009b78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	2001ba58 	.word	0x2001ba58

08003d28 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <DMA2_Stream6_IRQHandler+0x10>)
 8003d2e:	f004 f897 	bl	8007e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000a84 	.word	0x20000a84

08003d3c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003d40:	4802      	ldr	r0, [pc, #8]	; (8003d4c <DMA2_Stream7_IRQHandler+0x10>)
 8003d42:	f004 f88d 	bl	8007e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200009a0 	.word	0x200009a0

08003d50 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <LTDC_IRQHandler+0x10>)
 8003d56:	f008 f8dd 	bl	800bf14 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000724 	.word	0x20000724

08003d64 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <DMA2D_IRQHandler+0x10>)
 8003d6a:	f004 fc4d 	bl	8008608 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000058c 	.word	0x2000058c

08003d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <_sbrk+0x5c>)
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <_sbrk+0x60>)
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <_sbrk+0x64>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <_sbrk+0x64>)
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <_sbrk+0x68>)
 8003d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <_sbrk+0x64>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4413      	add	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d207      	bcs.n	8003db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003da8:	f018 ff3c 	bl	801cc24 <__errno>
 8003dac:	4603      	mov	r3, r0
 8003dae:	220c      	movs	r2, #12
 8003db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	e009      	b.n	8003dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <_sbrk+0x64>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <_sbrk+0x64>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a05      	ldr	r2, [pc, #20]	; (8003ddc <_sbrk+0x64>)
 8003dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20050000 	.word	0x20050000
 8003dd8:	00000400 	.word	0x00000400
 8003ddc:	20012bc8 	.word	0x20012bc8
 8003de0:	2001bd70 	.word	0x2001bd70

08003de4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <SystemInit+0x20>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <SystemInit+0x20>)
 8003df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e0c:	480d      	ldr	r0, [pc, #52]	; (8003e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e0e:	490e      	ldr	r1, [pc, #56]	; (8003e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e24:	4c0b      	ldr	r4, [pc, #44]	; (8003e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e32:	f7ff ffd7 	bl	8003de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e36:	f018 fefb 	bl	801cc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e3a:	f7fc fbef 	bl	800061c <main>
  bx  lr    
 8003e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e48:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8003e4c:	0801f49c 	.word	0x0801f49c
  ldr r2, =_sbss
 8003e50:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8003e54:	2001bd6c 	.word	0x2001bd6c

08003e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC_IRQHandler>
	...

08003e5c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	4603      	mov	r3, r0
 8003e66:	81fb      	strh	r3, [r7, #14]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	81bb      	strh	r3, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003e74:	89bb      	ldrh	r3, [r7, #12]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8003e7a:	89bb      	ldrh	r3, [r7, #12]
 8003e7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e80:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003e86:	f001 fc71 	bl	800576c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2203      	movs	r2, #3
 8003e90:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 fafb 	bl	8005490 <CODEC_IO_Write>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8003ea4:	89fb      	ldrh	r3, [r7, #14]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f640 0117 	movw	r1, #2071	; 0x817
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 faee 	bl	8005490 <CODEC_IO_Write>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 fae1 	bl	8005490 <CODEC_IO_Write>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8003ed8:	89fb      	ldrh	r3, [r7, #14]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	226c      	movs	r2, #108	; 0x6c
 8003ede:	2139      	movs	r1, #57	; 0x39
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 fad5 	bl	8005490 <CODEC_IO_Write>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8003ef0:	8afb      	ldrh	r3, [r7, #22]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8003ef6:	89fb      	ldrh	r3, [r7, #14]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2213      	movs	r2, #19
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fac6 	bl	8005490 <CODEC_IO_Write>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e00b      	b.n	8003f28 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8003f10:	89fb      	ldrh	r3, [r7, #14]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2203      	movs	r2, #3
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fab9 	bl	8005490 <CODEC_IO_Write>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8003f28:	2032      	movs	r0, #50	; 0x32
 8003f2a:	f001 fc87 	bl	800583c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8003f2e:	8b3b      	ldrh	r3, [r7, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 815f 	beq.w	80041f4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8003f36:	4bae      	ldr	r3, [pc, #696]	; (80041f0 <wm8994_Init+0x394>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8003f3c:	8b3b      	ldrh	r3, [r7, #24]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	f000 808c 	beq.w	800405c <wm8994_Init+0x200>
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	f300 8111 	bgt.w	800416c <wm8994_Init+0x310>
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d002      	beq.n	8003f54 <wm8994_Init+0xf8>
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d042      	beq.n	8003fd8 <wm8994_Init+0x17c>
 8003f52:	e10b      	b.n	800416c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003f54:	89fb      	ldrh	r3, [r7, #14]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003f5c:	2105      	movs	r1, #5
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 fa96 	bl	8005490 <CODEC_IO_Write>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003f6e:	89fb      	ldrh	r3, [r7, #14]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2200      	movs	r2, #0
 8003f74:	f240 6101 	movw	r1, #1537	; 0x601
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 fa89 	bl	8005490 <CODEC_IO_Write>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f240 6102 	movw	r1, #1538	; 0x602
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 fa7c 	bl	8005490 <CODEC_IO_Write>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003fa2:	89fb      	ldrh	r3, [r7, #14]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f240 6104 	movw	r1, #1540	; 0x604
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fa6f 	bl	8005490 <CODEC_IO_Write>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f240 6105 	movw	r1, #1541	; 0x605
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 fa62 	bl	8005490 <CODEC_IO_Write>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	61fb      	str	r3, [r7, #28]
      break;
 8003fd6:	e110      	b.n	80041fa <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003fd8:	89fb      	ldrh	r3, [r7, #14]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f240 3203 	movw	r2, #771	; 0x303
 8003fe0:	2105      	movs	r1, #5
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fa54 	bl	8005490 <CODEC_IO_Write>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003ff2:	89fb      	ldrh	r3, [r7, #14]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f240 6101 	movw	r1, #1537	; 0x601
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 fa47 	bl	8005490 <CODEC_IO_Write>
 8004002:	4603      	mov	r3, r0
 8004004:	461a      	mov	r2, r3
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800400c:	89fb      	ldrh	r3, [r7, #14]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2201      	movs	r2, #1
 8004012:	f240 6102 	movw	r1, #1538	; 0x602
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fa3a 	bl	8005490 <CODEC_IO_Write>
 800401c:	4603      	mov	r3, r0
 800401e:	461a      	mov	r2, r3
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2200      	movs	r2, #0
 800402c:	f240 6104 	movw	r1, #1540	; 0x604
 8004030:	4618      	mov	r0, r3
 8004032:	f001 fa2d 	bl	8005490 <CODEC_IO_Write>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004040:	89fb      	ldrh	r3, [r7, #14]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2200      	movs	r2, #0
 8004046:	f240 6105 	movw	r1, #1541	; 0x605
 800404a:	4618      	mov	r0, r3
 800404c:	f001 fa20 	bl	8005490 <CODEC_IO_Write>
 8004050:	4603      	mov	r3, r0
 8004052:	461a      	mov	r2, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	61fb      	str	r3, [r7, #28]
      break;
 800405a:	e0ce      	b.n	80041fa <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800405c:	8afb      	ldrh	r3, [r7, #22]
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d141      	bne.n	80040e8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004064:	89fb      	ldrh	r3, [r7, #14]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f640 720f 	movw	r2, #3855	; 0xf0f
 800406c:	2105      	movs	r1, #5
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fa0e 	bl	8005490 <CODEC_IO_Write>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800407e:	89fb      	ldrh	r3, [r7, #14]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2203      	movs	r2, #3
 8004084:	f240 6101 	movw	r1, #1537	; 0x601
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fa01 	bl	8005490 <CODEC_IO_Write>
 800408e:	4603      	mov	r3, r0
 8004090:	461a      	mov	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004098:	89fb      	ldrh	r3, [r7, #14]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2203      	movs	r2, #3
 800409e:	f240 6102 	movw	r1, #1538	; 0x602
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 f9f4 	bl	8005490 <CODEC_IO_Write>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2203      	movs	r2, #3
 80040b8:	f240 6104 	movw	r1, #1540	; 0x604
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f9e7 	bl	8005490 <CODEC_IO_Write>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80040cc:	89fb      	ldrh	r3, [r7, #14]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2203      	movs	r2, #3
 80040d2:	f240 6105 	movw	r1, #1541	; 0x605
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f9da 	bl	8005490 <CODEC_IO_Write>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80040e6:	e088      	b.n	80041fa <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f640 720f 	movw	r2, #3855	; 0xf0f
 80040f0:	2105      	movs	r1, #5
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 f9cc 	bl	8005490 <CODEC_IO_Write>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2201      	movs	r2, #1
 8004108:	f240 6101 	movw	r1, #1537	; 0x601
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f9bf 	bl	8005490 <CODEC_IO_Write>
 8004112:	4603      	mov	r3, r0
 8004114:	461a      	mov	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800411c:	89fb      	ldrh	r3, [r7, #14]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2201      	movs	r2, #1
 8004122:	f240 6102 	movw	r1, #1538	; 0x602
 8004126:	4618      	mov	r0, r3
 8004128:	f001 f9b2 	bl	8005490 <CODEC_IO_Write>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004136:	89fb      	ldrh	r3, [r7, #14]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2202      	movs	r2, #2
 800413c:	f240 6104 	movw	r1, #1540	; 0x604
 8004140:	4618      	mov	r0, r3
 8004142:	f001 f9a5 	bl	8005490 <CODEC_IO_Write>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2202      	movs	r2, #2
 8004156:	f240 6105 	movw	r1, #1541	; 0x605
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f998 	bl	8005490 <CODEC_IO_Write>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	61fb      	str	r3, [r7, #28]
      break;
 800416a:	e046      	b.n	80041fa <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800416c:	89fb      	ldrh	r3, [r7, #14]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f240 3203 	movw	r2, #771	; 0x303
 8004174:	2105      	movs	r1, #5
 8004176:	4618      	mov	r0, r3
 8004178:	f001 f98a 	bl	8005490 <CODEC_IO_Write>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004186:	89fb      	ldrh	r3, [r7, #14]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2201      	movs	r2, #1
 800418c:	f240 6101 	movw	r1, #1537	; 0x601
 8004190:	4618      	mov	r0, r3
 8004192:	f001 f97d 	bl	8005490 <CODEC_IO_Write>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80041a0:	89fb      	ldrh	r3, [r7, #14]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2201      	movs	r2, #1
 80041a6:	f240 6102 	movw	r1, #1538	; 0x602
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 f970 	bl	8005490 <CODEC_IO_Write>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80041ba:	89fb      	ldrh	r3, [r7, #14]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2200      	movs	r2, #0
 80041c0:	f240 6104 	movw	r1, #1540	; 0x604
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 f963 	bl	8005490 <CODEC_IO_Write>
 80041ca:	4603      	mov	r3, r0
 80041cc:	461a      	mov	r2, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80041d4:	89fb      	ldrh	r3, [r7, #14]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2200      	movs	r2, #0
 80041da:	f240 6105 	movw	r1, #1541	; 0x605
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f956 	bl	8005490 <CODEC_IO_Write>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	61fb      	str	r3, [r7, #28]
      break;
 80041ee:	e004      	b.n	80041fa <wm8994_Init+0x39e>
 80041f0:	20012bcc 	.word	0x20012bcc
    }
  }
  else
  {
    outputEnabled = 0;
 80041f4:	4b99      	ldr	r3, [pc, #612]	; (800445c <wm8994_Init+0x600>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80041fa:	8afb      	ldrh	r3, [r7, #22]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 81ab 	beq.w	8004558 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8004202:	4b97      	ldr	r3, [pc, #604]	; (8004460 <wm8994_Init+0x604>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004208:	8afb      	ldrh	r3, [r7, #22]
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420e:	f000 8129 	beq.w	8004464 <wm8994_Init+0x608>
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	f300 819b 	bgt.w	8004550 <wm8994_Init+0x6f4>
 800421a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800421e:	d05a      	beq.n	80042d6 <wm8994_Init+0x47a>
 8004220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004224:	f300 8194 	bgt.w	8004550 <wm8994_Init+0x6f4>
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	f000 80c6 	beq.w	80043bc <wm8994_Init+0x560>
 8004230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004234:	f040 818c 	bne.w	8004550 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8004238:	89fb      	ldrh	r3, [r7, #14]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8004240:	2104      	movs	r1, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f001 f924 	bl	8005490 <CODEC_IO_Write>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	22db      	movs	r2, #219	; 0xdb
 8004258:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f917 	bl	8005490 <CODEC_IO_Write>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f90a 	bl	8005490 <CODEC_IO_Write>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2202      	movs	r2, #2
 800428c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004290:	4618      	mov	r0, r3
 8004292:	f001 f8fd 	bl	8005490 <CODEC_IO_Write>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80042a0:	89fb      	ldrh	r3, [r7, #14]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2202      	movs	r2, #2
 80042a6:	f240 6109 	movw	r1, #1545	; 0x609
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 f8f0 	bl	8005490 <CODEC_IO_Write>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461a      	mov	r2, r3
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	220e      	movs	r2, #14
 80042c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f8e3 	bl	8005490 <CODEC_IO_Write>
 80042ca:	4603      	mov	r3, r0
 80042cc:	461a      	mov	r2, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	61fb      	str	r3, [r7, #28]
      break;
 80042d4:	e143      	b.n	800455e <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2211      	movs	r2, #17
 80042dc:	2128      	movs	r1, #40	; 0x28
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 f8d6 	bl	8005490 <CODEC_IO_Write>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2235      	movs	r2, #53	; 0x35
 80042f4:	2129      	movs	r1, #41	; 0x29
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f8ca 	bl	8005490 <CODEC_IO_Write>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8004306:	89fb      	ldrh	r3, [r7, #14]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2235      	movs	r2, #53	; 0x35
 800430c:	212a      	movs	r1, #42	; 0x2a
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f8be 	bl	8005490 <CODEC_IO_Write>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800431e:	89fb      	ldrh	r3, [r7, #14]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f240 3203 	movw	r2, #771	; 0x303
 8004326:	2104      	movs	r1, #4
 8004328:	4618      	mov	r0, r3
 800432a:	f001 f8b1 	bl	8005490 <CODEC_IO_Write>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004338:	89fb      	ldrh	r3, [r7, #14]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	22db      	movs	r2, #219	; 0xdb
 800433e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f8a4 	bl	8005490 <CODEC_IO_Write>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f246 3250 	movw	r2, #25424	; 0x6350
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f001 f897 	bl	8005490 <CODEC_IO_Write>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800436c:	89fb      	ldrh	r3, [r7, #14]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2202      	movs	r2, #2
 8004372:	f240 6106 	movw	r1, #1542	; 0x606
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f88a 	bl	8005490 <CODEC_IO_Write>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004386:	89fb      	ldrh	r3, [r7, #14]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2202      	movs	r2, #2
 800438c:	f240 6107 	movw	r1, #1543	; 0x607
 8004390:	4618      	mov	r0, r3
 8004392:	f001 f87d 	bl	8005490 <CODEC_IO_Write>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80043a0:	89fb      	ldrh	r3, [r7, #14]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	220d      	movs	r2, #13
 80043a6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f870 	bl	8005490 <CODEC_IO_Write>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	61fb      	str	r3, [r7, #28]
      break;
 80043ba:	e0d0      	b.n	800455e <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80043c4:	2104      	movs	r1, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 f862 	bl	8005490 <CODEC_IO_Write>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	22db      	movs	r2, #219	; 0xdb
 80043dc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 f855 	bl	8005490 <CODEC_IO_Write>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80043f0:	89fb      	ldrh	r3, [r7, #14]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f246 3250 	movw	r2, #25424	; 0x6350
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f001 f848 	bl	8005490 <CODEC_IO_Write>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800440a:	89fb      	ldrh	r3, [r7, #14]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2202      	movs	r2, #2
 8004410:	f240 6106 	movw	r1, #1542	; 0x606
 8004414:	4618      	mov	r0, r3
 8004416:	f001 f83b 	bl	8005490 <CODEC_IO_Write>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2202      	movs	r2, #2
 800442a:	f240 6107 	movw	r1, #1543	; 0x607
 800442e:	4618      	mov	r0, r3
 8004430:	f001 f82e 	bl	8005490 <CODEC_IO_Write>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	4413      	add	r3, r2
 800443c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	220d      	movs	r2, #13
 8004444:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f821 	bl	8005490 <CODEC_IO_Write>
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	61fb      	str	r3, [r7, #28]
      break; 
 8004458:	e081      	b.n	800455e <wm8994_Init+0x702>
 800445a:	bf00      	nop
 800445c:	20012bcc 	.word	0x20012bcc
 8004460:	20012bd0 	.word	0x20012bd0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f640 723c 	movw	r2, #3900	; 0xf3c
 800446c:	2104      	movs	r1, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f80e 	bl	8005490 <CODEC_IO_Write>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800447e:	89fb      	ldrh	r3, [r7, #14]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	22db      	movs	r2, #219	; 0xdb
 8004484:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004488:	4618      	mov	r0, r3
 800448a:	f001 f801 	bl	8005490 <CODEC_IO_Write>
 800448e:	4603      	mov	r3, r0
 8004490:	461a      	mov	r2, r3
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004498:	89fb      	ldrh	r3, [r7, #14]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	22db      	movs	r2, #219	; 0xdb
 800449e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fff4 	bl	8005490 <CODEC_IO_Write>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80044b2:	89fb      	ldrh	r3, [r7, #14]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 ffe7 	bl	8005490 <CODEC_IO_Write>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80044cc:	89fb      	ldrh	r3, [r7, #14]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2202      	movs	r2, #2
 80044d2:	f240 6106 	movw	r1, #1542	; 0x606
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ffda 	bl	8005490 <CODEC_IO_Write>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80044e6:	89fb      	ldrh	r3, [r7, #14]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2202      	movs	r2, #2
 80044ec:	f240 6107 	movw	r1, #1543	; 0x607
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 ffcd 	bl	8005490 <CODEC_IO_Write>
 80044f6:	4603      	mov	r3, r0
 80044f8:	461a      	mov	r2, r3
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2202      	movs	r2, #2
 8004506:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ffc0 	bl	8005490 <CODEC_IO_Write>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2202      	movs	r2, #2
 8004520:	f240 6109 	movw	r1, #1545	; 0x609
 8004524:	4618      	mov	r0, r3
 8004526:	f000 ffb3 	bl	8005490 <CODEC_IO_Write>
 800452a:	4603      	mov	r3, r0
 800452c:	461a      	mov	r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004534:	89fb      	ldrh	r3, [r7, #14]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	220d      	movs	r2, #13
 800453a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800453e:	4618      	mov	r0, r3
 8004540:	f000 ffa6 	bl	8005490 <CODEC_IO_Write>
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	61fb      	str	r3, [r7, #28]
      break;    
 800454e:	e006      	b.n	800455e <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
      break;
 8004556:	e002      	b.n	800455e <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8004558:	4ba4      	ldr	r3, [pc, #656]	; (80047ec <wm8994_Init+0x990>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4aa3      	ldr	r2, [pc, #652]	; (80047f0 <wm8994_Init+0x994>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d079      	beq.n	800465a <wm8994_Init+0x7fe>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4aa1      	ldr	r2, [pc, #644]	; (80047f0 <wm8994_Init+0x994>)
 800456a:	4293      	cmp	r3, r2
 800456c:	f200 80ad 	bhi.w	80046ca <wm8994_Init+0x86e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004576:	4293      	cmp	r3, r2
 8004578:	d061      	beq.n	800463e <wm8994_Init+0x7e2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004580:	4293      	cmp	r3, r2
 8004582:	f200 80a2 	bhi.w	80046ca <wm8994_Init+0x86e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f64a 4244 	movw	r2, #44100	; 0xac44
 800458c:	4293      	cmp	r3, r2
 800458e:	f000 808e 	beq.w	80046ae <wm8994_Init+0x852>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004598:	4293      	cmp	r3, r2
 800459a:	f200 8096 	bhi.w	80046ca <wm8994_Init+0x86e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80045a4:	d03d      	beq.n	8004622 <wm8994_Init+0x7c6>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80045ac:	f200 808d 	bhi.w	80046ca <wm8994_Init+0x86e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f245 6222 	movw	r2, #22050	; 0x5622
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d06b      	beq.n	8004692 <wm8994_Init+0x836>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f245 6222 	movw	r2, #22050	; 0x5622
 80045c0:	4293      	cmp	r3, r2
 80045c2:	f200 8082 	bhi.w	80046ca <wm8994_Init+0x86e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80045cc:	d01b      	beq.n	8004606 <wm8994_Init+0x7aa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80045d4:	d879      	bhi.n	80046ca <wm8994_Init+0x86e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80045dc:	d005      	beq.n	80045ea <wm8994_Init+0x78e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d046      	beq.n	8004676 <wm8994_Init+0x81a>
 80045e8:	e06f      	b.n	80046ca <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2203      	movs	r2, #3
 80045f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 ff4b 	bl	8005490 <CODEC_IO_Write>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461a      	mov	r2, r3
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	61fb      	str	r3, [r7, #28]
    break;
 8004604:	e06f      	b.n	80046e6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004606:	89fb      	ldrh	r3, [r7, #14]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2233      	movs	r2, #51	; 0x33
 800460c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004610:	4618      	mov	r0, r3
 8004612:	f000 ff3d 	bl	8005490 <CODEC_IO_Write>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]
    break;
 8004620:	e061      	b.n	80046e6 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004622:	89fb      	ldrh	r3, [r7, #14]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2263      	movs	r2, #99	; 0x63
 8004628:	f44f 7104 	mov.w	r1, #528	; 0x210
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ff2f 	bl	8005490 <CODEC_IO_Write>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]
    break;
 800463c:	e053      	b.n	80046e6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800463e:	89fb      	ldrh	r3, [r7, #14]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2283      	movs	r2, #131	; 0x83
 8004644:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004648:	4618      	mov	r0, r3
 800464a:	f000 ff21 	bl	8005490 <CODEC_IO_Write>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	61fb      	str	r3, [r7, #28]
    break;
 8004658:	e045      	b.n	80046e6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800465a:	89fb      	ldrh	r3, [r7, #14]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	22a3      	movs	r2, #163	; 0xa3
 8004660:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004664:	4618      	mov	r0, r3
 8004666:	f000 ff13 	bl	8005490 <CODEC_IO_Write>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	61fb      	str	r3, [r7, #28]
    break;
 8004674:	e037      	b.n	80046e6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004676:	89fb      	ldrh	r3, [r7, #14]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2213      	movs	r2, #19
 800467c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004680:	4618      	mov	r0, r3
 8004682:	f000 ff05 	bl	8005490 <CODEC_IO_Write>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	61fb      	str	r3, [r7, #28]
    break;
 8004690:	e029      	b.n	80046e6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004692:	89fb      	ldrh	r3, [r7, #14]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2243      	movs	r2, #67	; 0x43
 8004698:	f44f 7104 	mov.w	r1, #528	; 0x210
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fef7 	bl	8005490 <CODEC_IO_Write>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	61fb      	str	r3, [r7, #28]
    break;
 80046ac:	e01b      	b.n	80046e6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2273      	movs	r2, #115	; 0x73
 80046b4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fee9 	bl	8005490 <CODEC_IO_Write>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	61fb      	str	r3, [r7, #28]
    break; 
 80046c8:	e00d      	b.n	80046e6 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2283      	movs	r2, #131	; 0x83
 80046d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fedb 	bl	8005490 <CODEC_IO_Write>
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
    break; 
 80046e4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ec:	d10e      	bne.n	800470c <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80046ee:	89fb      	ldrh	r3, [r7, #14]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f244 0218 	movw	r2, #16408	; 0x4018
 80046f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fec8 	bl	8005490 <CODEC_IO_Write>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e00d      	b.n	8004728 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f244 0210 	movw	r2, #16400	; 0x4010
 8004714:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004718:	4618      	mov	r0, r3
 800471a:	f000 feb9 	bl	8005490 <CODEC_IO_Write>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8004728:	89fb      	ldrh	r3, [r7, #14]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2200      	movs	r2, #0
 800472e:	f240 3102 	movw	r1, #770	; 0x302
 8004732:	4618      	mov	r0, r3
 8004734:	f000 feac 	bl	8005490 <CODEC_IO_Write>
 8004738:	4603      	mov	r3, r0
 800473a:	461a      	mov	r2, r3
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	4413      	add	r3, r2
 8004740:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8004742:	89fb      	ldrh	r3, [r7, #14]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	220a      	movs	r2, #10
 8004748:	f44f 7102 	mov.w	r1, #520	; 0x208
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fe9f 	bl	8005490 <CODEC_IO_Write>
 8004752:	4603      	mov	r3, r0
 8004754:	461a      	mov	r2, r3
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2201      	movs	r2, #1
 8004762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fe92 	bl	8005490 <CODEC_IO_Write>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8004776:	8b3b      	ldrh	r3, [r7, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 817b 	beq.w	8004a74 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800477e:	8b3b      	ldrh	r3, [r7, #24]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d157      	bne.n	8004834 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004784:	89fb      	ldrh	r3, [r7, #14]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800478c:	212d      	movs	r1, #45	; 0x2d
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fe7e 	bl	8005490 <CODEC_IO_Write>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047a6:	212e      	movs	r1, #46	; 0x2e
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fe71 	bl	8005490 <CODEC_IO_Write>
 80047ae:	4603      	mov	r3, r0
 80047b0:	461a      	mov	r2, r3
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <wm8994_Init+0x998>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01b      	beq.n	80047f8 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80047c0:	89fb      	ldrh	r3, [r7, #14]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80047c8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fe5f 	bl	8005490 <CODEC_IO_Write>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <wm8994_Init+0x998>)
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80047e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047e6:	f001 f829 	bl	800583c <AUDIO_IO_Delay>
 80047ea:	e016      	b.n	800481a <wm8994_Init+0x9be>
 80047ec:	20012bd0 	.word	0x20012bd0
 80047f0:	00017700 	.word	0x00017700
 80047f4:	20000044 	.word	0x20000044
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80047f8:	89fb      	ldrh	r3, [r7, #14]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f248 1208 	movw	r2, #33032	; 0x8108
 8004800:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fe43 	bl	8005490 <CODEC_IO_Write>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8004814:	2032      	movs	r0, #50	; 0x32
 8004816:	f001 f811 	bl	800583c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800481a:	89fb      	ldrh	r3, [r7, #14]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2200      	movs	r2, #0
 8004820:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fe33 	bl	8005490 <CODEC_IO_Write>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8004834:	89fb      	ldrh	r3, [r7, #14]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f44f 7240 	mov.w	r2, #768	; 0x300
 800483c:	2103      	movs	r1, #3
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fe26 	bl	8005490 <CODEC_IO_Write>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800484e:	89fb      	ldrh	r3, [r7, #14]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2200      	movs	r2, #0
 8004854:	2122      	movs	r1, #34	; 0x22
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fe1a 	bl	8005490 <CODEC_IO_Write>
 800485c:	4603      	mov	r3, r0
 800485e:	461a      	mov	r2, r3
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2200      	movs	r2, #0
 800486c:	2123      	movs	r1, #35	; 0x23
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fe0e 	bl	8005490 <CODEC_IO_Write>
 8004874:	4603      	mov	r3, r0
 8004876:	461a      	mov	r2, r3
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800487e:	89fb      	ldrh	r3, [r7, #14]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004886:	2136      	movs	r1, #54	; 0x36
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fe01 	bl	8005490 <CODEC_IO_Write>
 800488e:	4603      	mov	r3, r0
 8004890:	461a      	mov	r2, r3
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004898:	89fb      	ldrh	r3, [r7, #14]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f243 0203 	movw	r2, #12291	; 0x3003
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fdf4 	bl	8005490 <CODEC_IO_Write>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80048b2:	8afb      	ldrh	r3, [r7, #22]
 80048b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b8:	d10d      	bne.n	80048d6 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f240 2205 	movw	r2, #517	; 0x205
 80048c2:	2151      	movs	r1, #81	; 0x51
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fde3 	bl	8005490 <CODEC_IO_Write>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e00b      	b.n	80048ee <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80048d6:	89fb      	ldrh	r3, [r7, #14]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2205      	movs	r2, #5
 80048dc:	2151      	movs	r1, #81	; 0x51
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fdd6 	bl	8005490 <CODEC_IO_Write>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80048ee:	8b7b      	ldrh	r3, [r7, #26]
 80048f0:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80048f4:	f043 0303 	orr.w	r3, r3, #3
 80048f8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	8b7a      	ldrh	r2, [r7, #26]
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fdc4 	bl	8005490 <CODEC_IO_Write>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2222      	movs	r2, #34	; 0x22
 8004918:	2160      	movs	r1, #96	; 0x60
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fdb8 	bl	8005490 <CODEC_IO_Write>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004932:	214c      	movs	r1, #76	; 0x4c
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fdab 	bl	8005490 <CODEC_IO_Write>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4413      	add	r3, r2
 8004942:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004944:	200f      	movs	r0, #15
 8004946:	f000 ff79 	bl	800583c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2201      	movs	r2, #1
 8004950:	212d      	movs	r1, #45	; 0x2d
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fd9c 	bl	8005490 <CODEC_IO_Write>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2201      	movs	r2, #1
 8004968:	212e      	movs	r1, #46	; 0x2e
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fd90 	bl	8005490 <CODEC_IO_Write>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004982:	2103      	movs	r1, #3
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fd83 	bl	8005490 <CODEC_IO_Write>
 800498a:	4603      	mov	r3, r0
 800498c:	461a      	mov	r2, r3
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004994:	89fb      	ldrh	r3, [r7, #14]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2233      	movs	r2, #51	; 0x33
 800499a:	2154      	movs	r1, #84	; 0x54
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fd77 	bl	8005490 <CODEC_IO_Write>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80049ac:	f240 1001 	movw	r0, #257	; 0x101
 80049b0:	f000 ff44 	bl	800583c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80049b4:	89fb      	ldrh	r3, [r7, #14]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	22ee      	movs	r2, #238	; 0xee
 80049ba:	2160      	movs	r1, #96	; 0x60
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fd67 	bl	8005490 <CODEC_IO_Write>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	22c0      	movs	r2, #192	; 0xc0
 80049d2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fd5a 	bl	8005490 <CODEC_IO_Write>
 80049dc:	4603      	mov	r3, r0
 80049de:	461a      	mov	r2, r3
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	22c0      	movs	r2, #192	; 0xc0
 80049ec:	f240 6111 	movw	r1, #1553	; 0x611
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fd4d 	bl	8005490 <CODEC_IO_Write>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461a      	mov	r2, r3
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004a00:	89fb      	ldrh	r3, [r7, #14]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2210      	movs	r2, #16
 8004a06:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fd40 	bl	8005490 <CODEC_IO_Write>
 8004a10:	4603      	mov	r3, r0
 8004a12:	461a      	mov	r2, r3
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	4413      	add	r3, r2
 8004a18:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	22c0      	movs	r2, #192	; 0xc0
 8004a20:	f240 6112 	movw	r1, #1554	; 0x612
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fd33 	bl	8005490 <CODEC_IO_Write>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8004a34:	89fb      	ldrh	r3, [r7, #14]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	22c0      	movs	r2, #192	; 0xc0
 8004a3a:	f240 6113 	movw	r1, #1555	; 0x613
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fd26 	bl	8005490 <CODEC_IO_Write>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004a4e:	89fb      	ldrh	r3, [r7, #14]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2210      	movs	r2, #16
 8004a54:	f240 4122 	movw	r1, #1058	; 0x422
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fd19 	bl	8005490 <CODEC_IO_Write>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	461a      	mov	r2, r3
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004a68:	7afa      	ldrb	r2, [r7, #11]
 8004a6a:	89fb      	ldrh	r3, [r7, #14]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f984 	bl	8004d7c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004a74:	8afb      	ldrh	r3, [r7, #22]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80a6 	beq.w	8004bc8 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004a7c:	8afb      	ldrh	r3, [r7, #22]
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d003      	beq.n	8004a8c <wm8994_Init+0xc30>
 8004a84:	8afb      	ldrh	r3, [r7, #22]
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d12b      	bne.n	8004ae4 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004a8c:	8b7b      	ldrh	r3, [r7, #26]
 8004a8e:	f043 0313 	orr.w	r3, r3, #19
 8004a92:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004a94:	89fb      	ldrh	r3, [r7, #14]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	8b7a      	ldrh	r2, [r7, #26]
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fcf7 	bl	8005490 <CODEC_IO_Write>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004aac:	89fb      	ldrh	r3, [r7, #14]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fcea 	bl	8005490 <CODEC_IO_Write>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8004ac6:	89fb      	ldrh	r3, [r7, #14]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ace:	f240 4111 	movw	r1, #1041	; 0x411
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fcdc 	bl	8005490 <CODEC_IO_Write>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	461a      	mov	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e06b      	b.n	8004bbc <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004ae4:	8afb      	ldrh	r3, [r7, #22]
 8004ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aea:	d139      	bne.n	8004b60 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004aec:	8b7b      	ldrh	r3, [r7, #26]
 8004aee:	f043 0313 	orr.w	r3, r3, #19
 8004af2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	8b7a      	ldrh	r2, [r7, #26]
 8004afa:	2101      	movs	r1, #1
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fcc7 	bl	8005490 <CODEC_IO_Write>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004b0c:	89fb      	ldrh	r3, [r7, #14]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2202      	movs	r2, #2
 8004b12:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fcba 	bl	8005490 <CODEC_IO_Write>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004b2e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fcac 	bl	8005490 <CODEC_IO_Write>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8004b42:	89fb      	ldrh	r3, [r7, #14]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004b4a:	f240 4111 	movw	r1, #1041	; 0x411
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fc9e 	bl	8005490 <CODEC_IO_Write>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	e02d      	b.n	8004bbc <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004b60:	8afb      	ldrh	r3, [r7, #22]
 8004b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b66:	d003      	beq.n	8004b70 <wm8994_Init+0xd14>
 8004b68:	8afb      	ldrh	r3, [r7, #22]
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6e:	d125      	bne.n	8004bbc <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004b70:	89fb      	ldrh	r3, [r7, #14]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	220b      	movs	r2, #11
 8004b76:	2118      	movs	r1, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fc89 	bl	8005490 <CODEC_IO_Write>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004b88:	89fb      	ldrh	r3, [r7, #14]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	220b      	movs	r2, #11
 8004b8e:	211a      	movs	r1, #26
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fc7d 	bl	8005490 <CODEC_IO_Write>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004ba0:	89fb      	ldrh	r3, [r7, #14]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004ba8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fc6f 	bl	8005490 <CODEC_IO_Write>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004bbc:	7afa      	ldrb	r2, [r7, #11]
 8004bbe:	89fb      	ldrh	r3, [r7, #14]
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f8da 	bl	8004d7c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8004bc8:	69fb      	ldr	r3, [r7, #28]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop

08004bd4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8004bd8:	f000 fdd2 	bl	8005780 <AUDIO_IO_DeInit>
}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004bea:	f000 fdbf 	bl	800576c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fdf5 	bl	80057e4 <AUDIO_IO_Read>
 8004bfa:	4603      	mov	r3, r0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	6039      	str	r1, [r7, #0]
 8004c0e:	80fb      	strh	r3, [r7, #6]
 8004c10:	4613      	mov	r3, r2
 8004c12:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f9d1 	bl	8004fc4 <wm8994_SetMute>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	2101      	movs	r1, #1
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f9bc 	bl	8004fc4 <wm8994_SetMute>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fc17 	bl	8005490 <CODEC_IO_Write>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f99b 	bl	8004fc4 <wm8994_SetMute>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	6039      	str	r1, [r7, #0]
 8004caa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004cb0:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <wm8994_Stop+0xd8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d05a      	beq.n	8004d6e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f981 	bl	8004fc4 <wm8994_SetMute>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d04e      	beq.n	8004d6e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fbd7 	bl	8005490 <CODEC_IO_Write>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf4:	f240 4122 	movw	r1, #1058	; 0x422
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fbc9 	bl	8005490 <CODEC_IO_Write>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	212d      	movs	r1, #45	; 0x2d
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fbbd 	bl	8005490 <CODEC_IO_Write>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2200      	movs	r2, #0
 8004d26:	212e      	movs	r1, #46	; 0x2e
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fbb1 	bl	8005490 <CODEC_IO_Write>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2105      	movs	r1, #5
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fba5 	bl	8005490 <CODEC_IO_Write>
 8004d46:	4603      	mov	r3, r0
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	2100      	movs	r1, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fb99 	bl	8005490 <CODEC_IO_Write>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <wm8994_Stop+0xd8>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20012bcc 	.word	0x20012bcc

08004d7c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	460a      	mov	r2, r1
 8004d86:	80fb      	strh	r3, [r7, #6]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004d90:	797b      	ldrb	r3, [r7, #5]
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d80b      	bhi.n	8004dae <wm8994_SetVolume+0x32>
 8004d96:	797a      	ldrb	r2, [r7, #5]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	019b      	lsls	r3, r3, #6
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	4a86      	ldr	r2, [pc, #536]	; (8004fb8 <wm8994_SetVolume+0x23c>)
 8004da0:	fb82 1203 	smull	r1, r2, r2, r3
 8004da4:	1152      	asrs	r2, r2, #5
 8004da6:	17db      	asrs	r3, r3, #31
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e000      	b.n	8004db0 <wm8994_SetVolume+0x34>
 8004dae:	2364      	movs	r3, #100	; 0x64
 8004db0:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004db2:	4b82      	ldr	r3, [pc, #520]	; (8004fbc <wm8994_SetVolume+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 809b 	beq.w	8004ef2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
 8004dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8004dc0:	d93d      	bls.n	8004e3e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f8fc 	bl	8004fc4 <wm8994_SetMute>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f240 127f 	movw	r2, #383	; 0x17f
 8004ddc:	211c      	movs	r1, #28
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fb56 	bl	8005490 <CODEC_IO_Write>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f240 127f 	movw	r2, #383	; 0x17f
 8004df6:	211d      	movs	r1, #29
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fb49 	bl	8005490 <CODEC_IO_Write>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f240 127f 	movw	r2, #383	; 0x17f
 8004e10:	2126      	movs	r1, #38	; 0x26
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fb3c 	bl	8005490 <CODEC_IO_Write>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	f240 127f 	movw	r2, #383	; 0x17f
 8004e2a:	2127      	movs	r1, #39	; 0x27
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fb2f 	bl	8005490 <CODEC_IO_Write>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e059      	b.n	8004ef2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8004e3e:	797b      	ldrb	r3, [r7, #5]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	2101      	movs	r1, #1
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 f8bb 	bl	8004fc4 <wm8994_SetMute>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e04c      	b.n	8004ef2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f8b1 	bl	8004fc4 <wm8994_SetMute>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	b2d8      	uxtb	r0, r3
 8004e6e:	7afb      	ldrb	r3, [r7, #11]
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	211c      	movs	r1, #28
 8004e7e:	f000 fb07 	bl	8005490 <CODEC_IO_Write>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461a      	mov	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	b2d8      	uxtb	r0, r3
 8004e90:	7afb      	ldrb	r3, [r7, #11]
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	211d      	movs	r1, #29
 8004ea0:	f000 faf6 	bl	8005490 <CODEC_IO_Write>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	b2d8      	uxtb	r0, r3
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	b21b      	sxth	r3, r3
 8004eb6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004eba:	b21b      	sxth	r3, r3
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2126      	movs	r1, #38	; 0x26
 8004ec2:	f000 fae5 	bl	8005490 <CODEC_IO_Write>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	b2d8      	uxtb	r0, r3
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2127      	movs	r1, #39	; 0x27
 8004ee4:	f000 fad4 	bl	8005490 <CODEC_IO_Write>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8004ef2:	4b33      	ldr	r3, [pc, #204]	; (8004fc0 <wm8994_SetVolume+0x244>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d059      	beq.n	8004fae <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8004efa:	797b      	ldrb	r3, [r7, #5]
 8004efc:	2b63      	cmp	r3, #99	; 0x63
 8004efe:	d80c      	bhi.n	8004f1a <wm8994_SetVolume+0x19e>
 8004f00:	797a      	ldrb	r2, [r7, #5]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <wm8994_SetVolume+0x23c>)
 8004f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f10:	1152      	asrs	r2, r2, #5
 8004f12:	17db      	asrs	r3, r3, #31
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	e000      	b.n	8004f1c <wm8994_SetVolume+0x1a0>
 8004f1a:	23ef      	movs	r3, #239	; 0xef
 8004f1c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	b2d8      	uxtb	r0, r3
 8004f22:	7afb      	ldrb	r3, [r7, #11]
 8004f24:	b21b      	sxth	r3, r3
 8004f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f34:	f000 faac 	bl	8005490 <CODEC_IO_Write>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	b2d8      	uxtb	r0, r3
 8004f46:	7afb      	ldrb	r3, [r7, #11]
 8004f48:	b21b      	sxth	r3, r3
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4e:	b21b      	sxth	r3, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	f240 4101 	movw	r1, #1025	; 0x401
 8004f58:	f000 fa9a 	bl	8005490 <CODEC_IO_Write>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	b2d8      	uxtb	r0, r3
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	b21b      	sxth	r3, r3
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f72:	b21b      	sxth	r3, r3
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	f240 4104 	movw	r1, #1028	; 0x404
 8004f7c:	f000 fa88 	bl	8005490 <CODEC_IO_Write>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	b2d8      	uxtb	r0, r3
 8004f8e:	7afb      	ldrb	r3, [r7, #11]
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f96:	b21b      	sxth	r3, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f240 4105 	movw	r1, #1029	; 0x405
 8004fa0:	f000 fa76 	bl	8005490 <CODEC_IO_Write>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	51eb851f 	.word	0x51eb851f
 8004fbc:	20012bcc 	.word	0x20012bcc
 8004fc0:	20012bd0 	.word	0x20012bd0

08004fc4 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <wm8994_SetMute+0x98>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d039      	beq.n	8005050 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d11c      	bne.n	800501c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fea:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa4e 	bl	8005490 <CODEC_IO_Write>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005006:	f240 4122 	movw	r1, #1058	; 0x422
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fa40 	bl	8005490 <CODEC_IO_Write>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e019      	b.n	8005050 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2210      	movs	r2, #16
 8005022:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fa32 	bl	8005490 <CODEC_IO_Write>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2210      	movs	r2, #16
 800503c:	f240 4122 	movw	r1, #1058	; 0x422
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fa25 	bl	8005490 <CODEC_IO_Write>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20012bcc 	.word	0x20012bcc

08005060 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	460a      	mov	r2, r1
 800506a:	80fb      	strh	r3, [r7, #6]
 800506c:	4613      	mov	r3, r2
 800506e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8005074:	797b      	ldrb	r3, [r7, #5]
 8005076:	2b03      	cmp	r3, #3
 8005078:	f000 808c 	beq.w	8005194 <wm8994_SetOutputMode+0x134>
 800507c:	2b03      	cmp	r3, #3
 800507e:	f300 80cb 	bgt.w	8005218 <wm8994_SetOutputMode+0x1b8>
 8005082:	2b01      	cmp	r3, #1
 8005084:	d002      	beq.n	800508c <wm8994_SetOutputMode+0x2c>
 8005086:	2b02      	cmp	r3, #2
 8005088:	d042      	beq.n	8005110 <wm8994_SetOutputMode+0xb0>
 800508a:	e0c5      	b.n	8005218 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005094:	2105      	movs	r1, #5
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f9fa 	bl	8005490 <CODEC_IO_Write>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2200      	movs	r2, #0
 80050ac:	f240 6101 	movw	r1, #1537	; 0x601
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f9ed 	bl	8005490 <CODEC_IO_Write>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2200      	movs	r2, #0
 80050c6:	f240 6102 	movw	r1, #1538	; 0x602
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f9e0 	bl	8005490 <CODEC_IO_Write>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2202      	movs	r2, #2
 80050e0:	f240 6104 	movw	r1, #1540	; 0x604
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f9d3 	bl	8005490 <CODEC_IO_Write>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2202      	movs	r2, #2
 80050fa:	f240 6105 	movw	r1, #1541	; 0x605
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f9c6 	bl	8005490 <CODEC_IO_Write>
 8005104:	4603      	mov	r3, r0
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
    break;
 800510e:	e0c5      	b.n	800529c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f240 3203 	movw	r2, #771	; 0x303
 8005118:	2105      	movs	r1, #5
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f9b8 	bl	8005490 <CODEC_IO_Write>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2201      	movs	r2, #1
 8005130:	f240 6101 	movw	r1, #1537	; 0x601
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f9ab 	bl	8005490 <CODEC_IO_Write>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2201      	movs	r2, #1
 800514a:	f240 6102 	movw	r1, #1538	; 0x602
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f99e 	bl	8005490 <CODEC_IO_Write>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2200      	movs	r2, #0
 8005164:	f240 6104 	movw	r1, #1540	; 0x604
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f991 	bl	8005490 <CODEC_IO_Write>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2200      	movs	r2, #0
 800517e:	f240 6105 	movw	r1, #1541	; 0x605
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f984 	bl	8005490 <CODEC_IO_Write>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
    break;
 8005192:	e083      	b.n	800529c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f640 720f 	movw	r2, #3855	; 0xf0f
 800519c:	2105      	movs	r1, #5
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f976 	bl	8005490 <CODEC_IO_Write>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2201      	movs	r2, #1
 80051b4:	f240 6101 	movw	r1, #1537	; 0x601
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 f969 	bl	8005490 <CODEC_IO_Write>
 80051be:	4603      	mov	r3, r0
 80051c0:	461a      	mov	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2201      	movs	r2, #1
 80051ce:	f240 6102 	movw	r1, #1538	; 0x602
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f95c 	bl	8005490 <CODEC_IO_Write>
 80051d8:	4603      	mov	r3, r0
 80051da:	461a      	mov	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2202      	movs	r2, #2
 80051e8:	f240 6104 	movw	r1, #1540	; 0x604
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f94f 	bl	8005490 <CODEC_IO_Write>
 80051f2:	4603      	mov	r3, r0
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2202      	movs	r2, #2
 8005202:	f240 6105 	movw	r1, #1541	; 0x605
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f942 	bl	8005490 <CODEC_IO_Write>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
    break;
 8005216:	e041      	b.n	800529c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f240 3203 	movw	r2, #771	; 0x303
 8005220:	2105      	movs	r1, #5
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f934 	bl	8005490 <CODEC_IO_Write>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2201      	movs	r2, #1
 8005238:	f240 6101 	movw	r1, #1537	; 0x601
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f927 	bl	8005490 <CODEC_IO_Write>
 8005242:	4603      	mov	r3, r0
 8005244:	461a      	mov	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2201      	movs	r2, #1
 8005252:	f240 6102 	movw	r1, #1538	; 0x602
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f91a 	bl	8005490 <CODEC_IO_Write>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2200      	movs	r2, #0
 800526c:	f240 6104 	movw	r1, #1540	; 0x604
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f90d 	bl	8005490 <CODEC_IO_Write>
 8005276:	4603      	mov	r3, r0
 8005278:	461a      	mov	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2200      	movs	r2, #0
 8005286:	f240 6105 	movw	r1, #1541	; 0x605
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f900 	bl	8005490 <CODEC_IO_Write>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
    break;    
 800529a:	bf00      	nop
  }  
  return counter;
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4a64      	ldr	r2, [pc, #400]	; (800544c <wm8994_SetFrequency+0x1a4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d079      	beq.n	80053b4 <wm8994_SetFrequency+0x10c>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4a62      	ldr	r2, [pc, #392]	; (800544c <wm8994_SetFrequency+0x1a4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f200 80ad 	bhi.w	8005424 <wm8994_SetFrequency+0x17c>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d061      	beq.n	8005398 <wm8994_SetFrequency+0xf0>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80052da:	4293      	cmp	r3, r2
 80052dc:	f200 80a2 	bhi.w	8005424 <wm8994_SetFrequency+0x17c>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80052e6:	4293      	cmp	r3, r2
 80052e8:	f000 808e 	beq.w	8005408 <wm8994_SetFrequency+0x160>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f64a 4244 	movw	r2, #44100	; 0xac44
 80052f2:	4293      	cmp	r3, r2
 80052f4:	f200 8096 	bhi.w	8005424 <wm8994_SetFrequency+0x17c>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80052fe:	d03d      	beq.n	800537c <wm8994_SetFrequency+0xd4>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005306:	f200 808d 	bhi.w	8005424 <wm8994_SetFrequency+0x17c>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f245 6222 	movw	r2, #22050	; 0x5622
 8005310:	4293      	cmp	r3, r2
 8005312:	d06b      	beq.n	80053ec <wm8994_SetFrequency+0x144>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f245 6222 	movw	r2, #22050	; 0x5622
 800531a:	4293      	cmp	r3, r2
 800531c:	f200 8082 	bhi.w	8005424 <wm8994_SetFrequency+0x17c>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005326:	d01b      	beq.n	8005360 <wm8994_SetFrequency+0xb8>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800532e:	d879      	bhi.n	8005424 <wm8994_SetFrequency+0x17c>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005336:	d005      	beq.n	8005344 <wm8994_SetFrequency+0x9c>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800533e:	4293      	cmp	r3, r2
 8005340:	d046      	beq.n	80053d0 <wm8994_SetFrequency+0x128>
 8005342:	e06f      	b.n	8005424 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2203      	movs	r2, #3
 800534a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f89e 	bl	8005490 <CODEC_IO_Write>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
    break;
 800535e:	e06f      	b.n	8005440 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2233      	movs	r2, #51	; 0x33
 8005366:	f44f 7104 	mov.w	r1, #528	; 0x210
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f890 	bl	8005490 <CODEC_IO_Write>
 8005370:	4603      	mov	r3, r0
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
    break;
 800537a:	e061      	b.n	8005440 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2263      	movs	r2, #99	; 0x63
 8005382:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f882 	bl	8005490 <CODEC_IO_Write>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
    break;
 8005396:	e053      	b.n	8005440 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2283      	movs	r2, #131	; 0x83
 800539e:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f874 	bl	8005490 <CODEC_IO_Write>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
    break;
 80053b2:	e045      	b.n	8005440 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	22a3      	movs	r2, #163	; 0xa3
 80053ba:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f866 	bl	8005490 <CODEC_IO_Write>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
    break;
 80053ce:	e037      	b.n	8005440 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2213      	movs	r2, #19
 80053d6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f858 	bl	8005490 <CODEC_IO_Write>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
    break;
 80053ea:	e029      	b.n	8005440 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2243      	movs	r2, #67	; 0x43
 80053f2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f84a 	bl	8005490 <CODEC_IO_Write>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
    break;
 8005406:	e01b      	b.n	8005440 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2273      	movs	r2, #115	; 0x73
 800540e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f83c 	bl	8005490 <CODEC_IO_Write>
 8005418:	4603      	mov	r3, r0
 800541a:	461a      	mov	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
    break; 
 8005422:	e00d      	b.n	8005440 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2283      	movs	r2, #131	; 0x83
 800542a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f82e 	bl	8005490 <CODEC_IO_Write>
 8005434:	4603      	mov	r3, r0
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
    break; 
 800543e:	bf00      	nop
  }
  return counter;
 8005440:	68fb      	ldr	r3, [r7, #12]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	00017700 	.word	0x00017700

08005450 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f812 	bl	8005490 <CODEC_IO_Write>
 800546c:	4603      	mov	r3, r0
 800546e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <wm8994_Reset+0x38>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <wm8994_Reset+0x3c>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

  return counter;
 800547c:	68fb      	ldr	r3, [r7, #12]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20012bcc 	.word	0x20012bcc
 800548c:	20012bd0 	.word	0x20012bd0

08005490 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
 800549a:	460b      	mov	r3, r1
 800549c:	80bb      	strh	r3, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	88b9      	ldrh	r1, [r7, #4]
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f96f 	bl	8005790 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	b2db      	uxtb	r3, r3
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08c      	sub	sp, #48	; 0x30
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a51      	ldr	r2, [pc, #324]	; (8005610 <I2Cx_MspInit+0x150>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d14d      	bne.n	800556c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80054d0:	4b50      	ldr	r3, [pc, #320]	; (8005614 <I2Cx_MspInit+0x154>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4a4f      	ldr	r2, [pc, #316]	; (8005614 <I2Cx_MspInit+0x154>)
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	6313      	str	r3, [r2, #48]	; 0x30
 80054dc:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <I2Cx_MspInit+0x154>)
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80054ec:	2312      	movs	r3, #18
 80054ee:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80054f4:	2302      	movs	r3, #2
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80054f8:	2304      	movs	r3, #4
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80054fc:	f107 031c 	add.w	r3, r7, #28
 8005500:	4619      	mov	r1, r3
 8005502:	4845      	ldr	r0, [pc, #276]	; (8005618 <I2Cx_MspInit+0x158>)
 8005504:	f003 fde4 	bl	80090d0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800550c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800550e:	f107 031c 	add.w	r3, r7, #28
 8005512:	4619      	mov	r1, r3
 8005514:	4840      	ldr	r0, [pc, #256]	; (8005618 <I2Cx_MspInit+0x158>)
 8005516:	f003 fddb 	bl	80090d0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800551a:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <I2Cx_MspInit+0x154>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	4a3d      	ldr	r2, [pc, #244]	; (8005614 <I2Cx_MspInit+0x154>)
 8005520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005524:	6413      	str	r3, [r2, #64]	; 0x40
 8005526:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <I2Cx_MspInit+0x154>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005532:	4b38      	ldr	r3, [pc, #224]	; (8005614 <I2Cx_MspInit+0x154>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	4a37      	ldr	r2, [pc, #220]	; (8005614 <I2Cx_MspInit+0x154>)
 8005538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800553c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800553e:	4b35      	ldr	r3, [pc, #212]	; (8005614 <I2Cx_MspInit+0x154>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	4a34      	ldr	r2, [pc, #208]	; (8005614 <I2Cx_MspInit+0x154>)
 8005544:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005548:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800554a:	2200      	movs	r2, #0
 800554c:	210f      	movs	r1, #15
 800554e:	2048      	movs	r0, #72	; 0x48
 8005550:	f002 f8fa 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005554:	2048      	movs	r0, #72	; 0x48
 8005556:	f002 f913 	bl	8007780 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	210f      	movs	r1, #15
 800555e:	2049      	movs	r0, #73	; 0x49
 8005560:	f002 f8f2 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005564:	2049      	movs	r0, #73	; 0x49
 8005566:	f002 f90b 	bl	8007780 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800556a:	e04d      	b.n	8005608 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800556c:	4b29      	ldr	r3, [pc, #164]	; (8005614 <I2Cx_MspInit+0x154>)
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	4a28      	ldr	r2, [pc, #160]	; (8005614 <I2Cx_MspInit+0x154>)
 8005572:	f043 0302 	orr.w	r3, r3, #2
 8005576:	6313      	str	r3, [r2, #48]	; 0x30
 8005578:	4b26      	ldr	r3, [pc, #152]	; (8005614 <I2Cx_MspInit+0x154>)
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005588:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800558a:	2312      	movs	r3, #18
 800558c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800558e:	2300      	movs	r3, #0
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005592:	2302      	movs	r3, #2
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005596:	2304      	movs	r3, #4
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800559a:	f107 031c 	add.w	r3, r7, #28
 800559e:	4619      	mov	r1, r3
 80055a0:	481e      	ldr	r0, [pc, #120]	; (800561c <I2Cx_MspInit+0x15c>)
 80055a2:	f003 fd95 	bl	80090d0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80055a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80055ac:	f107 031c 	add.w	r3, r7, #28
 80055b0:	4619      	mov	r1, r3
 80055b2:	481a      	ldr	r0, [pc, #104]	; (800561c <I2Cx_MspInit+0x15c>)
 80055b4:	f003 fd8c 	bl	80090d0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <I2Cx_MspInit+0x154>)
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	4a15      	ldr	r2, [pc, #84]	; (8005614 <I2Cx_MspInit+0x154>)
 80055be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055c2:	6413      	str	r3, [r2, #64]	; 0x40
 80055c4:	4b13      	ldr	r3, [pc, #76]	; (8005614 <I2Cx_MspInit+0x154>)
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80055d0:	4b10      	ldr	r3, [pc, #64]	; (8005614 <I2Cx_MspInit+0x154>)
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	4a0f      	ldr	r2, [pc, #60]	; (8005614 <I2Cx_MspInit+0x154>)
 80055d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055da:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <I2Cx_MspInit+0x154>)
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	4a0c      	ldr	r2, [pc, #48]	; (8005614 <I2Cx_MspInit+0x154>)
 80055e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055e6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80055e8:	2200      	movs	r2, #0
 80055ea:	210f      	movs	r1, #15
 80055ec:	201f      	movs	r0, #31
 80055ee:	f002 f8ab 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80055f2:	201f      	movs	r0, #31
 80055f4:	f002 f8c4 	bl	8007780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80055f8:	2200      	movs	r2, #0
 80055fa:	210f      	movs	r1, #15
 80055fc:	2020      	movs	r0, #32
 80055fe:	f002 f8a3 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005602:	2020      	movs	r0, #32
 8005604:	f002 f8bc 	bl	8007780 <HAL_NVIC_EnableIRQ>
}
 8005608:	bf00      	nop
 800560a:	3730      	adds	r7, #48	; 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20012bd4 	.word	0x20012bd4
 8005614:	40023800 	.word	0x40023800
 8005618:	40021c00 	.word	0x40021c00
 800561c:	40020400 	.word	0x40020400

08005620 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f006 f863 	bl	800b6f4 <HAL_I2C_GetState>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d125      	bne.n	8005680 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a14      	ldr	r2, [pc, #80]	; (8005688 <I2Cx_Init+0x68>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d103      	bne.n	8005644 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a13      	ldr	r2, [pc, #76]	; (800568c <I2Cx_Init+0x6c>)
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e002      	b.n	800564a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a12      	ldr	r2, [pc, #72]	; (8005690 <I2Cx_Init+0x70>)
 8005648:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a11      	ldr	r2, [pc, #68]	; (8005694 <I2Cx_Init+0x74>)
 800564e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff23 	bl	80054c0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f005 fd4c 	bl	800b118 <HAL_I2C_Init>
  }
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20012bd4 	.word	0x20012bd4
 800568c:	40005c00 	.word	0x40005c00
 8005690:	40005400 	.word	0x40005400
 8005694:	40912732 	.word	0x40912732

08005698 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af04      	add	r7, sp, #16
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	4608      	mov	r0, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	72fb      	strb	r3, [r7, #11]
 80056aa:	460b      	mov	r3, r1
 80056ac:	813b      	strh	r3, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	b299      	uxth	r1, r3
 80056ba:	88f8      	ldrh	r0, [r7, #6]
 80056bc:	893a      	ldrh	r2, [r7, #8]
 80056be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056c2:	9302      	str	r3, [sp, #8]
 80056c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	4603      	mov	r3, r0
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f005 fef6 	bl	800b4c0 <HAL_I2C_Mem_Read>
 80056d4:	4603      	mov	r3, r0
 80056d6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	4619      	mov	r1, r3
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f832 	bl	800574c <I2Cx_Error>
  }
  return status;    
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08a      	sub	sp, #40	; 0x28
 80056f6:	af04      	add	r7, sp, #16
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	4608      	mov	r0, r1
 80056fc:	4611      	mov	r1, r2
 80056fe:	461a      	mov	r2, r3
 8005700:	4603      	mov	r3, r0
 8005702:	72fb      	strb	r3, [r7, #11]
 8005704:	460b      	mov	r3, r1
 8005706:	813b      	strh	r3, [r7, #8]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	b299      	uxth	r1, r3
 8005714:	88f8      	ldrh	r0, [r7, #6]
 8005716:	893a      	ldrh	r2, [r7, #8]
 8005718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800571c:	9302      	str	r3, [sp, #8]
 800571e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	4603      	mov	r3, r0
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f005 fdb5 	bl	800b298 <HAL_I2C_Mem_Write>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005738:	7afb      	ldrb	r3, [r7, #11]
 800573a:	4619      	mov	r1, r3
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f805 	bl	800574c <I2Cx_Error>
  }
  return status;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f005 fd6d 	bl	800b238 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff ff5e 	bl	8005620 <I2Cx_Init>
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8005770:	4802      	ldr	r0, [pc, #8]	; (800577c <AUDIO_IO_Init+0x10>)
 8005772:	f7ff ff55 	bl	8005620 <I2Cx_Init>
}
 8005776:	bf00      	nop
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20012bd4 	.word	0x20012bd4

08005780 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af02      	add	r7, sp, #8
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
 800579a:	460b      	mov	r3, r1
 800579c:	80bb      	strh	r3, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80057ae:	89fb      	ldrh	r3, [r7, #14]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	b21a      	sxth	r2, r3
 80057b6:	887b      	ldrh	r3, [r7, #2]
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b21b      	sxth	r3, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80057c2:	88ba      	ldrh	r2, [r7, #4]
 80057c4:	79f9      	ldrb	r1, [r7, #7]
 80057c6:	2302      	movs	r3, #2
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	1cbb      	adds	r3, r7, #2
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	2302      	movs	r3, #2
 80057d0:	4803      	ldr	r0, [pc, #12]	; (80057e0 <AUDIO_IO_Write+0x50>)
 80057d2:	f7ff ff8e 	bl	80056f2 <I2Cx_WriteMultiple>
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20012bd4 	.word	0x20012bd4

080057e4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	4603      	mov	r3, r0
 80057ec:	460a      	mov	r2, r1
 80057ee:	71fb      	strb	r3, [r7, #7]
 80057f0:	4613      	mov	r3, r2
 80057f2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	81bb      	strh	r3, [r7, #12]
 80057f8:	2300      	movs	r3, #0
 80057fa:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80057fc:	88ba      	ldrh	r2, [r7, #4]
 80057fe:	79f9      	ldrb	r1, [r7, #7]
 8005800:	2302      	movs	r3, #2
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2302      	movs	r3, #2
 800580c:	480a      	ldr	r0, [pc, #40]	; (8005838 <AUDIO_IO_Read+0x54>)
 800580e:	f7ff ff43 	bl	8005698 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8005812:	89bb      	ldrh	r3, [r7, #12]
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8005818:	89bb      	ldrh	r3, [r7, #12]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	b29b      	uxth	r3, r3
 800581e:	b21a      	sxth	r2, r3
 8005820:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005824:	4313      	orrs	r3, r2
 8005826:	b21b      	sxth	r3, r3
 8005828:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800582a:	89fb      	ldrh	r3, [r7, #14]
 800582c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800582e:	89bb      	ldrh	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20012bd4 	.word	0x20012bd4

0800583c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fc0f 	bl	8007068 <HAL_Delay>
}
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	603a      	str	r2, [r7, #0]
 800585e:	80fb      	strh	r3, [r7, #6]
 8005860:	460b      	mov	r3, r1
 8005862:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 8005868:	2300      	movs	r3, #0
 800586a:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 800586c:	f000 fa6a 	bl	8005d44 <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8005870:	2200      	movs	r2, #0
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	481c      	ldr	r0, [pc, #112]	; (80058e8 <BSP_AUDIO_OUT_Init+0x94>)
 8005876:	f000 f9c3 	bl	8005c00 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <BSP_AUDIO_OUT_Init+0x94>)
 800587c:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <BSP_AUDIO_OUT_Init+0x98>)
 800587e:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8005880:	4819      	ldr	r0, [pc, #100]	; (80058e8 <BSP_AUDIO_OUT_Init+0x94>)
 8005882:	f009 f947 	bl	800eb14 <HAL_SAI_GetState>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d103      	bne.n	8005894 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800588c:	2100      	movs	r1, #0
 800588e:	4816      	ldr	r0, [pc, #88]	; (80058e8 <BSP_AUDIO_OUT_Init+0x94>)
 8005890:	f000 f8e0 	bl	8005a54 <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8005894:	6838      	ldr	r0, [r7, #0]
 8005896:	f000 f9f7 	bl	8005c88 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <BSP_AUDIO_OUT_Init+0x9c>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2034      	movs	r0, #52	; 0x34
 80058a0:	4798      	blx	r3
 80058a2:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f648 1294 	movw	r2, #35220	; 0x8994
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d109      	bne.n	80058c2 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80058ae:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <BSP_AUDIO_OUT_Init+0x9c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	2034      	movs	r0, #52	; 0x34
 80058b4:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <BSP_AUDIO_OUT_Init+0xa0>)
 80058b8:	4a0d      	ldr	r2, [pc, #52]	; (80058f0 <BSP_AUDIO_OUT_Init+0x9c>)
 80058ba:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	e001      	b.n	80058c6 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <BSP_AUDIO_OUT_Init+0xa0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681c      	ldr	r4, [r3, #0]
 80058d2:	797a      	ldrb	r2, [r7, #5]
 80058d4:	88f9      	ldrh	r1, [r7, #6]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2034      	movs	r0, #52	; 0x34
 80058da:	47a0      	blx	r4
  }
 
  return ret;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20012c2c 	.word	0x20012c2c
 80058ec:	40015c04 	.word	0x40015c04
 80058f0:	20000014 	.word	0x20000014
 80058f4:	20012c28 	.word	0x20012c28

080058f8 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <BSP_AUDIO_OUT_Play+0x4c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	b292      	uxth	r2, r2
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	2034      	movs	r0, #52	; 0x34
 8005910:	4798      	blx	r3
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e00f      	b.n	800593c <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005922:	d203      	bcs.n	800592c <BSP_AUDIO_OUT_Play+0x34>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	b29b      	uxth	r3, r3
 800592a:	e001      	b.n	8005930 <BSP_AUDIO_OUT_Play+0x38>
 800592c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005930:	461a      	mov	r2, r3
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4804      	ldr	r0, [pc, #16]	; (8005948 <BSP_AUDIO_OUT_Play+0x50>)
 8005936:	f008 ffaf 	bl	800e898 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 800593a:	2300      	movs	r3, #0
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20012c28 	.word	0x20012c28
 8005948:	20012c2c 	.word	0x20012c2c

0800594c <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 8005954:	480c      	ldr	r0, [pc, #48]	; (8005988 <BSP_AUDIO_OUT_Stop+0x3c>)
 8005956:	f008 ff2c 	bl	800e7b2 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <BSP_AUDIO_OUT_Stop+0x40>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	2034      	movs	r0, #52	; 0x34
 8005964:	4798      	blx	r3
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e006      	b.n	800597e <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d102      	bne.n	800597c <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8005976:	2001      	movs	r0, #1
 8005978:	f001 fb76 	bl	8007068 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800597c:	2300      	movs	r3, #0
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20012c2c 	.word	0x20012c2c
 800598c:	20012c28 	.word	0x20012c28

08005990 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059a6:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 80059a8:	4a08      	ldr	r2, [pc, #32]	; (80059cc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 80059ae:	4807      	ldr	r0, [pc, #28]	; (80059cc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80059b0:	f008 fd4c 	bl	800e44c <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b04      	ldr	r3, [pc, #16]	; (80059cc <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059c2:	601a      	str	r2, [r3, #0]
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20012c2c 	.word	0x20012c2c

080059d0 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80059d8:	f7fc faaa 	bl	8001f30 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80059ec:	f7fc faae 	bl	8001f4c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8005a00:	480e      	ldr	r0, [pc, #56]	; (8005a3c <HAL_SAI_ErrorCallback+0x44>)
 8005a02:	f009 f887 	bl	800eb14 <HAL_SAI_GetState>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8005a0a:	480d      	ldr	r0, [pc, #52]	; (8005a40 <HAL_SAI_ErrorCallback+0x48>)
 8005a0c:	f009 f882 	bl	800eb14 <HAL_SAI_GetState>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d002      	beq.n	8005a20 <HAL_SAI_ErrorCallback+0x28>
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b12      	cmp	r3, #18
 8005a1e:	d101      	bne.n	8005a24 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8005a20:	f000 f810 	bl	8005a44 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d002      	beq.n	8005a30 <HAL_SAI_ErrorCallback+0x38>
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	2b22      	cmp	r3, #34	; 0x22
 8005a2e:	d101      	bne.n	8005a34 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8005a30:	f000 fa6a 	bl	8005f08 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20012c2c 	.word	0x20012c2c
 8005a40:	20012cb0 	.word	0x20012cb0

08005a44 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08c      	sub	sp, #48	; 0x30
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8005a5e:	4b63      	ldr	r3, [pc, #396]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a62:	4a62      	ldr	r2, [pc, #392]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a68:	6453      	str	r3, [r2, #68]	; 0x44
 8005a6a:	4b60      	ldr	r3, [pc, #384]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8005a76:	4b5d      	ldr	r3, [pc, #372]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	4a5c      	ldr	r2, [pc, #368]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a80:	6313      	str	r3, [r2, #48]	; 0x30
 8005a82:	4b5a      	ldr	r3, [pc, #360]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8005a8e:	4b57      	ldr	r3, [pc, #348]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4a56      	ldr	r2, [pc, #344]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a98:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9a:	4b54      	ldr	r3, [pc, #336]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8005aa6:	4b51      	ldr	r3, [pc, #324]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	4a50      	ldr	r2, [pc, #320]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab2:	4b4e      	ldr	r3, [pc, #312]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005aca:	2303      	movs	r3, #3
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005ace:	230a      	movs	r3, #10
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8005ad2:	f107 031c 	add.w	r3, r7, #28
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4845      	ldr	r0, [pc, #276]	; (8005bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005ada:	f003 faf9 	bl	80090d0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8005ade:	2320      	movs	r3, #32
 8005ae0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005aea:	2303      	movs	r3, #3
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8005aee:	230a      	movs	r3, #10
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8005af2:	f107 031c 	add.w	r3, r7, #28
 8005af6:	4619      	mov	r1, r3
 8005af8:	483d      	ldr	r0, [pc, #244]	; (8005bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005afa:	f003 fae9 	bl	80090d0 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005b02:	2302      	movs	r3, #2
 8005b04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005b0e:	230a      	movs	r3, #10
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8005b12:	f107 031c 	add.w	r3, r7, #28
 8005b16:	4619      	mov	r1, r3
 8005b18:	4835      	ldr	r0, [pc, #212]	; (8005bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005b1a:	f003 fad9 	bl	80090d0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8005b1e:	2310      	movs	r3, #16
 8005b20:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005b22:	2302      	movs	r3, #2
 8005b24:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005b2e:	230a      	movs	r3, #10
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8005b32:	f107 031c 	add.w	r3, r7, #28
 8005b36:	4619      	mov	r1, r3
 8005b38:	482d      	ldr	r0, [pc, #180]	; (8005bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005b3a:	f003 fac9 	bl	80090d0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b48:	6313      	str	r3, [r2, #48]	; 0x30
 8005b4a:	4b28      	ldr	r3, [pc, #160]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d138      	bne.n	8005bd2 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8005b60:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b62:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005b66:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005b68:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005b74:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b7a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005b7c:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b82:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8005b84:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b8a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b92:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005b94:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b9a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005ba8:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bb6:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8005bb8:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a0e      	ldr	r2, [pc, #56]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bbe:	66da      	str	r2, [r3, #108]	; 0x6c
 8005bc0:	4a0d      	ldr	r2, [pc, #52]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8005bc6:	480c      	ldr	r0, [pc, #48]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bc8:	f001 fffa 	bl	8007bc0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8005bcc:	480a      	ldr	r0, [pc, #40]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bce:	f001 ff49 	bl	8007a64 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	210e      	movs	r1, #14
 8005bd6:	203c      	movs	r0, #60	; 0x3c
 8005bd8:	f001 fdb6 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8005bdc:	203c      	movs	r0, #60	; 0x3c
 8005bde:	f001 fdcf 	bl	8007780 <HAL_NVIC_EnableIRQ>
}
 8005be2:	bf00      	nop
 8005be4:	3730      	adds	r7, #48	; 0x30
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	40015c04 	.word	0x40015c04
 8005bf8:	20012d34 	.word	0x20012d34
 8005bfc:	40026470 	.word	0x40026470

08005c00 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b0a6      	sub	sp, #152	; 0x98
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	4618      	mov	r0, r3
 8005c12:	f007 fdf5 	bl	800d800 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f245 6222 	movw	r2, #22050	; 0x5622
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d112      	bne.n	8005c5a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005c34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c38:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c3e:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8005c40:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005c44:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8005c46:	2302      	movs	r3, #2
 8005c48:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8005c4a:	2313      	movs	r3, #19
 8005c4c:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c4e:	f107 0314 	add.w	r3, r7, #20
 8005c52:	4618      	mov	r0, r3
 8005c54:	f007 f9e4 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
 8005c58:	e012      	b.n	8005c80 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005c5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c5e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c64:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8005c66:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8005c6a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8005c6c:	2307      	movs	r3, #7
 8005c6e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8005c70:	2301      	movs	r3, #1
 8005c72:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c74:	f107 0314 	add.w	r3, r7, #20
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f007 f9d1 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	3798      	adds	r7, #152	; 0x98
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005c90:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005c92:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <SAIx_Out_Init+0xb8>)
 8005c94:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005c96:	4b29      	ldr	r3, [pc, #164]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ca4:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8005ca6:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8005cac:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005cb2:	4b22      	ldr	r3, [pc, #136]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8005cb8:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cdc:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005cde:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8005ce4:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cec:	2220      	movs	r2, #32
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005cf0:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cf6:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8005d06:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d14:	2204      	movs	r2, #4
 8005d16:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8005d18:	4b08      	ldr	r3, [pc, #32]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d1a:	220f      	movs	r2, #15
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8005d1e:	4807      	ldr	r0, [pc, #28]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d20:	f008 fb94 	bl	800e44c <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <SAIx_Out_Init+0xb4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20012c2c 	.word	0x20012c2c
 8005d40:	40015c04 	.word	0x40015c04

08005d44 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <SAIx_Out_DeInit+0x24>)
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <SAIx_Out_DeInit+0x28>)
 8005d4c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <SAIx_Out_DeInit+0x24>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <SAIx_Out_DeInit+0x24>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d5c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8005d5e:	4802      	ldr	r0, [pc, #8]	; (8005d68 <SAIx_Out_DeInit+0x24>)
 8005d60:	f008 fcf2 	bl	800e748 <HAL_SAI_DeInit>
}
 8005d64:	bf00      	nop
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20012c2c 	.word	0x20012c2c
 8005d6c:	40015c04 	.word	0x40015c04

08005d70 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	68f9      	ldr	r1, [r7, #12]
 8005d82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d86:	f000 f805 	bl	8005d94 <BSP_AUDIO_IN_InitEx>
 8005d8a:	4603      	mov	r3, r0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8005d94:	b590      	push	{r4, r7, lr}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4603      	mov	r3, r0
 8005da2:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8005dac:	89fb      	ldrh	r3, [r7, #14]
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db2:	d006      	beq.n	8005dc2 <BSP_AUDIO_IN_InitEx+0x2e>
 8005db4:	89fb      	ldrh	r3, [r7, #14]
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dba:	d002      	beq.n	8005dc2 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e046      	b.n	8005e50 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8005dc2:	f000 fa11 	bl	80061e8 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4824      	ldr	r0, [pc, #144]	; (8005e5c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005dcc:	f7ff ff18 	bl	8005c00 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005dd0:	4b22      	ldr	r3, [pc, #136]	; (8005e5c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005dd2:	4a23      	ldr	r2, [pc, #140]	; (8005e60 <BSP_AUDIO_IN_InitEx+0xcc>)
 8005dd4:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8005dd6:	4821      	ldr	r0, [pc, #132]	; (8005e5c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005dd8:	f008 fe9c 	bl	800eb14 <HAL_SAI_GetState>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8005de2:	2100      	movs	r1, #0
 8005de4:	481d      	ldr	r0, [pc, #116]	; (8005e5c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005de6:	f7ff fe35 	bl	8005a54 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8005dea:	2100      	movs	r1, #0
 8005dec:	481b      	ldr	r0, [pc, #108]	; (8005e5c <BSP_AUDIO_IN_InitEx+0xc8>)
 8005dee:	f000 f893 	bl	8005f18 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8005df2:	89fb      	ldrh	r3, [r7, #14]
 8005df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df8:	d102      	bne.n	8005e00 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8005dfa:	230a      	movs	r3, #10
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	e001      	b.n	8005e04 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8005e00:	2305      	movs	r3, #5
 8005e02:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	69b9      	ldr	r1, [r7, #24]
 8005e08:	2001      	movs	r0, #1
 8005e0a:	f000 f937 	bl	800607c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8005e0e:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2034      	movs	r0, #52	; 0x34
 8005e14:	4798      	blx	r3
 8005e16:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f648 1294 	movw	r2, #35220	; 0x8994
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d109      	bne.n	8005e36 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8005e22:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	2034      	movs	r0, #52	; 0x34
 8005e28:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <BSP_AUDIO_IN_InitEx+0xd4>)
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005e2e:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e001      	b.n	8005e3a <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d107      	bne.n	8005e50 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8005e40:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <BSP_AUDIO_IN_InitEx+0xd4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681c      	ldr	r4, [r3, #0]
 8005e46:	89f9      	ldrh	r1, [r7, #14]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2264      	movs	r2, #100	; 0x64
 8005e4c:	2034      	movs	r0, #52	; 0x34
 8005e4e:	47a0      	blx	r4
    }
  }
  return ret;
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3724      	adds	r7, #36	; 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd90      	pop	{r4, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20012cb0 	.word	0x20012cb0
 8005e60:	40015c24 	.word	0x40015c24
 8005e64:	20000014 	.word	0x20000014
 8005e68:	20012c28 	.word	0x20012c28

08005e6c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4805      	ldr	r0, [pc, #20]	; (8005e98 <BSP_AUDIO_IN_Record+0x2c>)
 8005e84:	f008 fdb8 	bl	800e9f8 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	b2db      	uxtb	r3, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20012cb0 	.word	0x20012cb0

08005e9c <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8005ea4:	480c      	ldr	r0, [pc, #48]	; (8005ed8 <BSP_AUDIO_IN_Stop+0x3c>)
 8005ea6:	f008 fc84 	bl	800e7b2 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <BSP_AUDIO_IN_Stop+0x40>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	2034      	movs	r0, #52	; 0x34
 8005eb4:	4798      	blx	r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e006      	b.n	8005ece <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d102      	bne.n	8005ecc <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	f001 f8ce 	bl	8007068 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8005ecc:	2300      	movs	r3, #0
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20012cb0 	.word	0x20012cb0
 8005edc:	20012c28 	.word	0x20012c28

08005ee0 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8005ee8:	f7fc fb28 	bl	800253c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8005efc:	f7fc fb0a 	bl	8002514 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
	...

08005f18 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08c      	sub	sp, #48	; 0x30
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8005f22:	4b50      	ldr	r3, [pc, #320]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	4a4f      	ldr	r2, [pc, #316]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2e:	4b4d      	ldr	r3, [pc, #308]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8005f3a:	4b4a      	ldr	r3, [pc, #296]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	4a49      	ldr	r2, [pc, #292]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f44:	6313      	str	r3, [r2, #48]	; 0x30
 8005f46:	4b47      	ldr	r3, [pc, #284]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8005f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f56:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005f60:	2302      	movs	r3, #2
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8005f64:	230a      	movs	r3, #10
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005f68:	f107 031c 	add.w	r3, r7, #28
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	483e      	ldr	r0, [pc, #248]	; (8006068 <BSP_AUDIO_IN_MspInit+0x150>)
 8005f70:	f003 f8ae 	bl	80090d0 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8005f74:	4b3b      	ldr	r3, [pc, #236]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	4a3a      	ldr	r2, [pc, #232]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f80:	4b38      	ldr	r3, [pc, #224]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8005f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f90:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005f92:	2300      	movs	r3, #0
 8005f94:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8005f9e:	f107 031c 	add.w	r3, r7, #28
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4831      	ldr	r0, [pc, #196]	; (800606c <BSP_AUDIO_IN_MspInit+0x154>)
 8005fa6:	f003 f893 	bl	80090d0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005faa:	4b2e      	ldr	r3, [pc, #184]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	4a2d      	ldr	r2, [pc, #180]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a2a      	ldr	r2, [pc, #168]	; (8006070 <BSP_AUDIO_IN_MspInit+0x158>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d137      	bne.n	800603c <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8005fcc:	4b29      	ldr	r3, [pc, #164]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005fd2:	4b28      	ldr	r3, [pc, #160]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005fd8:	4b26      	ldr	r3, [pc, #152]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fe4:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005fe6:	4b23      	ldr	r3, [pc, #140]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fec:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8005fee:	4b21      	ldr	r3, [pc, #132]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ff0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ff4:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8005ff6:	4b1f      	ldr	r3, [pc, #124]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ffc:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005ffe:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006004:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006006:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006008:	2200      	movs	r2, #0
 800600a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 800600e:	2203      	movs	r2, #3
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006012:	4b18      	ldr	r3, [pc, #96]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006014:	2200      	movs	r2, #0
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8006018:	4b16      	ldr	r3, [pc, #88]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800601e:	4b15      	ldr	r3, [pc, #84]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <BSP_AUDIO_IN_MspInit+0x160>)
 8006022:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a13      	ldr	r2, [pc, #76]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006028:	671a      	str	r2, [r3, #112]	; 0x70
 800602a:	4a12      	ldr	r2, [pc, #72]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8006030:	4810      	ldr	r0, [pc, #64]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006032:	f001 fdc5 	bl	8007bc0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8006036:	480f      	ldr	r0, [pc, #60]	; (8006074 <BSP_AUDIO_IN_MspInit+0x15c>)
 8006038:	f001 fd14 	bl	8007a64 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800603c:	2200      	movs	r2, #0
 800603e:	210f      	movs	r1, #15
 8006040:	2046      	movs	r0, #70	; 0x46
 8006042:	f001 fb81 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006046:	2046      	movs	r0, #70	; 0x46
 8006048:	f001 fb9a 	bl	8007780 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800604c:	2200      	movs	r2, #0
 800604e:	210f      	movs	r1, #15
 8006050:	2028      	movs	r0, #40	; 0x28
 8006052:	f001 fb79 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8006056:	2028      	movs	r0, #40	; 0x28
 8006058:	f001 fb92 	bl	8007780 <HAL_NVIC_EnableIRQ>
}
 800605c:	bf00      	nop
 800605e:	3730      	adds	r7, #48	; 0x30
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	40021800 	.word	0x40021800
 800606c:	40021c00 	.word	0x40021c00
 8006070:	40015c24 	.word	0x40015c24
 8006074:	20012d94 	.word	0x20012d94
 8006078:	400264b8 	.word	0x400264b8

0800607c <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006088:	4b53      	ldr	r3, [pc, #332]	; (80061d8 <SAIx_In_Init+0x15c>)
 800608a:	4a54      	ldr	r2, [pc, #336]	; (80061dc <SAIx_In_Init+0x160>)
 800608c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800608e:	4b52      	ldr	r3, [pc, #328]	; (80061d8 <SAIx_In_Init+0x15c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b50      	ldr	r3, [pc, #320]	; (80061d8 <SAIx_In_Init+0x15c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800609c:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800609e:	4a4e      	ldr	r2, [pc, #312]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80060a4:	4a4c      	ldr	r2, [pc, #304]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80060aa:	4b4b      	ldr	r3, [pc, #300]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80060b0:	4b49      	ldr	r3, [pc, #292]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80060b6:	4b48      	ldr	r3, [pc, #288]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80060bc:	4b46      	ldr	r3, [pc, #280]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060be:	2200      	movs	r2, #0
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80060c2:	4b45      	ldr	r3, [pc, #276]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80060c8:	4b43      	ldr	r3, [pc, #268]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80060ce:	4b42      	ldr	r3, [pc, #264]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060d4:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80060d6:	4b40      	ldr	r3, [pc, #256]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060d8:	2201      	movs	r2, #1
 80060da:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80060dc:	4b3e      	ldr	r3, [pc, #248]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80060e2:	4b3d      	ldr	r3, [pc, #244]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060e4:	2220      	movs	r2, #32
 80060e6:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80060e8:	4b3b      	ldr	r3, [pc, #236]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80060ee:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80060f0:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80060f6:	4b38      	ldr	r3, [pc, #224]	; (80061d8 <SAIx_In_Init+0x15c>)
 80060f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80060fc:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80060fe:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <SAIx_In_Init+0x15c>)
 8006100:	2200      	movs	r2, #0
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006104:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <SAIx_In_Init+0x15c>)
 8006106:	2200      	movs	r2, #0
 8006108:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800610a:	4b33      	ldr	r3, [pc, #204]	; (80061d8 <SAIx_In_Init+0x15c>)
 800610c:	2204      	movs	r2, #4
 800610e:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8006110:	4a31      	ldr	r2, [pc, #196]	; (80061d8 <SAIx_In_Init+0x15c>)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8006116:	4830      	ldr	r0, [pc, #192]	; (80061d8 <SAIx_In_Init+0x15c>)
 8006118:	f008 f998 	bl	800e44c <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800611c:	4b30      	ldr	r3, [pc, #192]	; (80061e0 <SAIx_In_Init+0x164>)
 800611e:	4a31      	ldr	r2, [pc, #196]	; (80061e4 <SAIx_In_Init+0x168>)
 8006120:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8006122:	4b2f      	ldr	r3, [pc, #188]	; (80061e0 <SAIx_In_Init+0x164>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b2d      	ldr	r3, [pc, #180]	; (80061e0 <SAIx_In_Init+0x164>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006130:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8006132:	4a2b      	ldr	r2, [pc, #172]	; (80061e0 <SAIx_In_Init+0x164>)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8006138:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <SAIx_In_Init+0x164>)
 800613a:	2203      	movs	r2, #3
 800613c:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800613e:	4b28      	ldr	r3, [pc, #160]	; (80061e0 <SAIx_In_Init+0x164>)
 8006140:	2200      	movs	r2, #0
 8006142:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8006144:	4b26      	ldr	r3, [pc, #152]	; (80061e0 <SAIx_In_Init+0x164>)
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800614a:	4b25      	ldr	r3, [pc, #148]	; (80061e0 <SAIx_In_Init+0x164>)
 800614c:	2280      	movs	r2, #128	; 0x80
 800614e:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006150:	4b23      	ldr	r3, [pc, #140]	; (80061e0 <SAIx_In_Init+0x164>)
 8006152:	2200      	movs	r2, #0
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8006156:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <SAIx_In_Init+0x164>)
 8006158:	2201      	movs	r2, #1
 800615a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800615c:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <SAIx_In_Init+0x164>)
 800615e:	2201      	movs	r2, #1
 8006160:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8006162:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <SAIx_In_Init+0x164>)
 8006164:	2200      	movs	r2, #0
 8006166:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <SAIx_In_Init+0x164>)
 800616a:	2201      	movs	r2, #1
 800616c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <SAIx_In_Init+0x164>)
 8006170:	2240      	movs	r2, #64	; 0x40
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8006174:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <SAIx_In_Init+0x164>)
 8006176:	2220      	movs	r2, #32
 8006178:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800617a:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <SAIx_In_Init+0x164>)
 800617c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006180:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <SAIx_In_Init+0x164>)
 8006184:	2200      	movs	r2, #0
 8006186:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006188:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <SAIx_In_Init+0x164>)
 800618a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800618e:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8006190:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <SAIx_In_Init+0x164>)
 8006192:	2200      	movs	r2, #0
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <SAIx_In_Init+0x164>)
 8006198:	2200      	movs	r2, #0
 800619a:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 800619c:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <SAIx_In_Init+0x164>)
 800619e:	2204      	movs	r2, #4
 80061a0:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80061a2:	4a0f      	ldr	r2, [pc, #60]	; (80061e0 <SAIx_In_Init+0x164>)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80061a8:	480d      	ldr	r0, [pc, #52]	; (80061e0 <SAIx_In_Init+0x164>)
 80061aa:	f008 f94f 	bl	800e44c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80061ae:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <SAIx_In_Init+0x15c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <SAIx_In_Init+0x15c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061bc:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80061be:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <SAIx_In_Init+0x164>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <SAIx_In_Init+0x164>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061cc:	601a      	str	r2, [r3, #0]
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20012c2c 	.word	0x20012c2c
 80061dc:	40015c04 	.word	0x40015c04
 80061e0:	20012cb0 	.word	0x20012cb0
 80061e4:	40015c24 	.word	0x40015c24

080061e8 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80061ec:	4b07      	ldr	r3, [pc, #28]	; (800620c <SAIx_In_DeInit+0x24>)
 80061ee:	4a08      	ldr	r2, [pc, #32]	; (8006210 <SAIx_In_DeInit+0x28>)
 80061f0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <SAIx_In_DeInit+0x24>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b04      	ldr	r3, [pc, #16]	; (800620c <SAIx_In_DeInit+0x24>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006200:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8006202:	4802      	ldr	r0, [pc, #8]	; (800620c <SAIx_In_DeInit+0x24>)
 8006204:	f008 faa0 	bl	800e748 <HAL_SAI_DeInit>
}
 8006208:	bf00      	nop
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20012cb0 	.word	0x20012cb0
 8006210:	40015c24 	.word	0x40015c24

08006214 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006218:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800621a:	2228      	movs	r2, #40	; 0x28
 800621c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800621e:	4b30      	ldr	r3, [pc, #192]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006220:	2209      	movs	r2, #9
 8006222:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006224:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006226:	2235      	movs	r2, #53	; 0x35
 8006228:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800622a:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800622c:	220b      	movs	r2, #11
 800622e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006230:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006232:	f240 121b 	movw	r2, #283	; 0x11b
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006238:	4b29      	ldr	r3, [pc, #164]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800623a:	f240 2215 	movw	r2, #533	; 0x215
 800623e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006240:	4b27      	ldr	r3, [pc, #156]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006242:	f240 121d 	movw	r2, #285	; 0x11d
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800624a:	f240 2235 	movw	r2, #565	; 0x235
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006250:	2100      	movs	r1, #0
 8006252:	4823      	ldr	r0, [pc, #140]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006254:	f000 fc04 	bl	8006a60 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006258:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800625a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800625e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006260:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006262:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006266:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006270:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006278:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006282:	2200      	movs	r2, #0
 8006284:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006288:	2200      	movs	r2, #0
 800628a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800628c:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800628e:	2200      	movs	r2, #0
 8006290:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <BSP_LCD_Init+0xcc>)
 8006294:	2200      	movs	r2, #0
 8006296:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <BSP_LCD_Init+0xcc>)
 800629a:	4a12      	ldr	r2, [pc, #72]	; (80062e4 <BSP_LCD_Init+0xd0>)
 800629c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800629e:	4810      	ldr	r0, [pc, #64]	; (80062e0 <BSP_LCD_Init+0xcc>)
 80062a0:	f005 ff38 	bl	800c114 <HAL_LTDC_GetState>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80062aa:	2100      	movs	r1, #0
 80062ac:	480c      	ldr	r0, [pc, #48]	; (80062e0 <BSP_LCD_Init+0xcc>)
 80062ae:	f000 fafd 	bl	80068ac <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80062b2:	480b      	ldr	r0, [pc, #44]	; (80062e0 <BSP_LCD_Init+0xcc>)
 80062b4:	f005 fd5e 	bl	800bd74 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80062b8:	2201      	movs	r2, #1
 80062ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062be:	480a      	ldr	r0, [pc, #40]	; (80062e8 <BSP_LCD_Init+0xd4>)
 80062c0:	f003 f9d6 	bl	8009670 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80062c4:	2201      	movs	r2, #1
 80062c6:	2108      	movs	r1, #8
 80062c8:	4808      	ldr	r0, [pc, #32]	; (80062ec <BSP_LCD_Init+0xd8>)
 80062ca:	f003 f9d1 	bl	8009670 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80062ce:	f000 fce7 	bl	8006ca0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80062d2:	4807      	ldr	r0, [pc, #28]	; (80062f0 <BSP_LCD_Init+0xdc>)
 80062d4:	f000 f8d8 	bl	8006488 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20012df4 	.word	0x20012df4
 80062e4:	40016800 	.word	0x40016800
 80062e8:	40022000 	.word	0x40022000
 80062ec:	40022800 	.word	0x40022800
 80062f0:	20000048 	.word	0x20000048

080062f4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <BSP_LCD_GetXSize+0x20>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a06      	ldr	r2, [pc, #24]	; (8006318 <BSP_LCD_GetXSize+0x24>)
 80062fe:	2134      	movs	r1, #52	; 0x34
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	4413      	add	r3, r2
 8006306:	3360      	adds	r3, #96	; 0x60
 8006308:	681b      	ldr	r3, [r3, #0]
}
 800630a:	4618      	mov	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	20012edc 	.word	0x20012edc
 8006318:	20012df4 	.word	0x20012df4

0800631c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <BSP_LCD_GetYSize+0x20>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a06      	ldr	r2, [pc, #24]	; (8006340 <BSP_LCD_GetYSize+0x24>)
 8006326:	2134      	movs	r1, #52	; 0x34
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	4413      	add	r3, r2
 800632e:	3364      	adds	r3, #100	; 0x64
 8006330:	681b      	ldr	r3, [r3, #0]
}
 8006332:	4618      	mov	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20012edc 	.word	0x20012edc
 8006340:	20012df4 	.word	0x20012df4

08006344 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006344:	b580      	push	{r7, lr}
 8006346:	b090      	sub	sp, #64	; 0x40
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	6039      	str	r1, [r7, #0]
 800634e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006354:	f7ff ffce 	bl	80062f4 <BSP_LCD_GetXSize>
 8006358:	4603      	mov	r3, r0
 800635a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006360:	f7ff ffdc 	bl	800631c <BSP_LCD_GetYSize>
 8006364:	4603      	mov	r3, r0
 8006366:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006368:	2300      	movs	r3, #0
 800636a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8006370:	23ff      	movs	r3, #255	; 0xff
 8006372:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800638a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006390:	2307      	movs	r3, #7
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006394:	f7ff ffae 	bl	80062f4 <BSP_LCD_GetXSize>
 8006398:	4603      	mov	r3, r0
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800639c:	f7ff ffbe 	bl	800631c <BSP_LCD_GetYSize>
 80063a0:	4603      	mov	r3, r0
 80063a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	4619      	mov	r1, r3
 80063ac:	4812      	ldr	r0, [pc, #72]	; (80063f8 <BSP_LCD_LayerDefaultInit+0xb4>)
 80063ae:	f005 fe73 	bl	800c098 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	4911      	ldr	r1, [pc, #68]	; (80063fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80063b6:	4613      	mov	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	3304      	adds	r3, #4
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	490c      	ldr	r1, [pc, #48]	; (80063fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80063cc:	4613      	mov	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	3308      	adds	r3, #8
 80063d8:	4a09      	ldr	r2, [pc, #36]	; (8006400 <BSP_LCD_LayerDefaultInit+0xbc>)
 80063da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	4907      	ldr	r1, [pc, #28]	; (80063fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80063e0:	4613      	mov	r3, r2
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80063ee:	601a      	str	r2, [r3, #0]
}
 80063f0:	bf00      	nop
 80063f2:	3740      	adds	r7, #64	; 0x40
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20012df4 	.word	0x20012df4
 80063fc:	20012ee0 	.word	0x20012ee0
 8006400:	20000048 	.word	0x20000048

08006404 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <BSP_LCD_SelectLayer+0x1c>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6013      	str	r3, [r2, #0]
} 
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20012edc 	.word	0x20012edc

08006424 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <BSP_LCD_SetTextColor+0x28>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4907      	ldr	r1, [pc, #28]	; (8006450 <BSP_LCD_SetTextColor+0x2c>)
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20012edc 	.word	0x20012edc
 8006450:	20012ee0 	.word	0x20012ee0

08006454 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800645c:	4b08      	ldr	r3, [pc, #32]	; (8006480 <BSP_LCD_SetBackColor+0x2c>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4908      	ldr	r1, [pc, #32]	; (8006484 <BSP_LCD_SetBackColor+0x30>)
 8006462:	4613      	mov	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	3304      	adds	r3, #4
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20012edc 	.word	0x20012edc
 8006484:	20012ee0 	.word	0x20012ee0

08006488 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006490:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <BSP_LCD_SetFont+0x2c>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4908      	ldr	r1, [pc, #32]	; (80064b8 <BSP_LCD_SetFont+0x30>)
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	3308      	adds	r3, #8
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20012edc 	.word	0x20012edc
 80064b8:	20012ee0 	.word	0x20012ee0

080064bc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80064bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064be:	b085      	sub	sp, #20
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <BSP_LCD_Clear+0x48>)
 80064c6:	681c      	ldr	r4, [r3, #0]
 80064c8:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <BSP_LCD_Clear+0x48>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a0e      	ldr	r2, [pc, #56]	; (8006508 <BSP_LCD_Clear+0x4c>)
 80064ce:	2134      	movs	r1, #52	; 0x34
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	335c      	adds	r3, #92	; 0x5c
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461e      	mov	r6, r3
 80064dc:	f7ff ff0a 	bl	80062f4 <BSP_LCD_GetXSize>
 80064e0:	4605      	mov	r5, r0
 80064e2:	f7ff ff1b 	bl	800631c <BSP_LCD_GetYSize>
 80064e6:	4602      	mov	r2, r0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	2300      	movs	r3, #0
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	462a      	mov	r2, r5
 80064f4:	4631      	mov	r1, r6
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 fb86 	bl	8006c08 <LL_FillBuffer>
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006504:	20012edc 	.word	0x20012edc
 8006508:	20012df4 	.word	0x20012df4

0800650c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	80fb      	strh	r3, [r7, #6]
 8006516:	460b      	mov	r3, r1
 8006518:	80bb      	strh	r3, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800651e:	4b1b      	ldr	r3, [pc, #108]	; (800658c <BSP_LCD_DisplayChar+0x80>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	491b      	ldr	r1, [pc, #108]	; (8006590 <BSP_LCD_DisplayChar+0x84>)
 8006524:	4613      	mov	r3, r2
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	3308      	adds	r3, #8
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <BSP_LCD_DisplayChar+0x80>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4c14      	ldr	r4, [pc, #80]	; (8006590 <BSP_LCD_DisplayChar+0x84>)
 8006540:	4613      	mov	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4423      	add	r3, r4
 800654a:	3308      	adds	r3, #8
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006550:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <BSP_LCD_DisplayChar+0x80>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	4c0d      	ldr	r4, [pc, #52]	; (8006590 <BSP_LCD_DisplayChar+0x84>)
 800655a:	4613      	mov	r3, r2
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4423      	add	r3, r4
 8006564:	3308      	adds	r3, #8
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	889b      	ldrh	r3, [r3, #4]
 800656a:	3307      	adds	r3, #7
 800656c:	2b00      	cmp	r3, #0
 800656e:	da00      	bge.n	8006572 <BSP_LCD_DisplayChar+0x66>
 8006570:	3307      	adds	r3, #7
 8006572:	10db      	asrs	r3, r3, #3
 8006574:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006578:	18ca      	adds	r2, r1, r3
 800657a:	88b9      	ldrh	r1, [r7, #4]
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fa8a 	bl	8006a98 <DrawChar>
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	bd90      	pop	{r4, r7, pc}
 800658c:	20012edc 	.word	0x20012edc
 8006590:	20012ee0 	.word	0x20012ee0

08006594 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006594:	b5b0      	push	{r4, r5, r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	60ba      	str	r2, [r7, #8]
 800659c:	461a      	mov	r2, r3
 800659e:	4603      	mov	r3, r0
 80065a0:	81fb      	strh	r3, [r7, #14]
 80065a2:	460b      	mov	r3, r1
 80065a4:	81bb      	strh	r3, [r7, #12]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80065aa:	2301      	movs	r3, #1
 80065ac:	83fb      	strh	r3, [r7, #30]
 80065ae:	2300      	movs	r3, #0
 80065b0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80065be:	e002      	b.n	80065c6 <BSP_LCD_DisplayStringAt+0x32>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	617a      	str	r2, [r7, #20]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f6      	bne.n	80065c0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80065d2:	f7ff fe8f 	bl	80062f4 <BSP_LCD_GetXSize>
 80065d6:	4601      	mov	r1, r0
 80065d8:	4b50      	ldr	r3, [pc, #320]	; (800671c <BSP_LCD_DisplayStringAt+0x188>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4850      	ldr	r0, [pc, #320]	; (8006720 <BSP_LCD_DisplayStringAt+0x18c>)
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4403      	add	r3, r0
 80065e8:	3308      	adds	r3, #8
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	889b      	ldrh	r3, [r3, #4]
 80065ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80065f2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d01c      	beq.n	8006634 <BSP_LCD_DisplayStringAt+0xa0>
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	dc33      	bgt.n	8006666 <BSP_LCD_DisplayStringAt+0xd2>
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d002      	beq.n	8006608 <BSP_LCD_DisplayStringAt+0x74>
 8006602:	2b02      	cmp	r3, #2
 8006604:	d019      	beq.n	800663a <BSP_LCD_DisplayStringAt+0xa6>
 8006606:	e02e      	b.n	8006666 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	1ad1      	subs	r1, r2, r3
 800660e:	4b43      	ldr	r3, [pc, #268]	; (800671c <BSP_LCD_DisplayStringAt+0x188>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4843      	ldr	r0, [pc, #268]	; (8006720 <BSP_LCD_DisplayStringAt+0x18c>)
 8006614:	4613      	mov	r3, r2
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4403      	add	r3, r0
 800661e:	3308      	adds	r3, #8
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	889b      	ldrh	r3, [r3, #4]
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	89fb      	ldrh	r3, [r7, #14]
 800662e:	4413      	add	r3, r2
 8006630:	83fb      	strh	r3, [r7, #30]
      break;
 8006632:	e01b      	b.n	800666c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8006634:	89fb      	ldrh	r3, [r7, #14]
 8006636:	83fb      	strh	r3, [r7, #30]
      break;
 8006638:	e018      	b.n	800666c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	b299      	uxth	r1, r3
 8006642:	4b36      	ldr	r3, [pc, #216]	; (800671c <BSP_LCD_DisplayStringAt+0x188>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4836      	ldr	r0, [pc, #216]	; (8006720 <BSP_LCD_DisplayStringAt+0x18c>)
 8006648:	4613      	mov	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4403      	add	r3, r0
 8006652:	3308      	adds	r3, #8
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	889b      	ldrh	r3, [r3, #4]
 8006658:	fb11 f303 	smulbb	r3, r1, r3
 800665c:	b29a      	uxth	r2, r3
 800665e:	89fb      	ldrh	r3, [r7, #14]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	83fb      	strh	r3, [r7, #30]
      break;
 8006664:	e002      	b.n	800666c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8006666:	89fb      	ldrh	r3, [r7, #14]
 8006668:	83fb      	strh	r3, [r7, #30]
      break;
 800666a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800666c:	8bfb      	ldrh	r3, [r7, #30]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <BSP_LCD_DisplayStringAt+0xe6>
 8006672:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da1d      	bge.n	80066b6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800667a:	2301      	movs	r3, #1
 800667c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800667e:	e01a      	b.n	80066b6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781a      	ldrb	r2, [r3, #0]
 8006684:	89b9      	ldrh	r1, [r7, #12]
 8006686:	8bfb      	ldrh	r3, [r7, #30]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff ff3f 	bl	800650c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800668e:	4b23      	ldr	r3, [pc, #140]	; (800671c <BSP_LCD_DisplayStringAt+0x188>)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4923      	ldr	r1, [pc, #140]	; (8006720 <BSP_LCD_DisplayStringAt+0x18c>)
 8006694:	4613      	mov	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	3308      	adds	r3, #8
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	889a      	ldrh	r2, [r3, #4]
 80066a4:	8bfb      	ldrh	r3, [r7, #30]
 80066a6:	4413      	add	r3, r2
 80066a8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60bb      	str	r3, [r7, #8]
    i++;
 80066b0:	8bbb      	ldrh	r3, [r7, #28]
 80066b2:	3301      	adds	r3, #1
 80066b4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2dc      	uxtb	r4, r3
 80066c4:	f7ff fe16 	bl	80062f4 <BSP_LCD_GetXSize>
 80066c8:	8bb9      	ldrh	r1, [r7, #28]
 80066ca:	4b14      	ldr	r3, [pc, #80]	; (800671c <BSP_LCD_DisplayStringAt+0x188>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4d14      	ldr	r5, [pc, #80]	; (8006720 <BSP_LCD_DisplayStringAt+0x18c>)
 80066d0:	4613      	mov	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	442b      	add	r3, r5
 80066da:	3308      	adds	r3, #8
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	889b      	ldrh	r3, [r3, #4]
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	1ac3      	subs	r3, r0, r3
 80066e6:	b299      	uxth	r1, r3
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <BSP_LCD_DisplayStringAt+0x188>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	480c      	ldr	r0, [pc, #48]	; (8006720 <BSP_LCD_DisplayStringAt+0x18c>)
 80066ee:	4613      	mov	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4403      	add	r3, r0
 80066f8:	3308      	adds	r3, #8
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	889b      	ldrh	r3, [r3, #4]
 80066fe:	4299      	cmp	r1, r3
 8006700:	bf2c      	ite	cs
 8006702:	2301      	movcs	r3, #1
 8006704:	2300      	movcc	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	4023      	ands	r3, r4
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1b7      	bne.n	8006680 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bdb0      	pop	{r4, r5, r7, pc}
 800671a:	bf00      	nop
 800671c:	20012edc 	.word	0x20012edc
 8006720:	20012ee0 	.word	0x20012ee0

08006724 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006724:	b5b0      	push	{r4, r5, r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af02      	add	r7, sp, #8
 800672a:	4603      	mov	r3, r0
 800672c:	80fb      	strh	r3, [r7, #6]
 800672e:	460b      	mov	r3, r1
 8006730:	80bb      	strh	r3, [r7, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800673a:	4b26      	ldr	r3, [pc, #152]	; (80067d4 <BSP_LCD_DrawHLine+0xb0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a26      	ldr	r2, [pc, #152]	; (80067d8 <BSP_LCD_DrawHLine+0xb4>)
 8006740:	2134      	movs	r1, #52	; 0x34
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	3348      	adds	r3, #72	; 0x48
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d114      	bne.n	800677a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <BSP_LCD_DrawHLine+0xb0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <BSP_LCD_DrawHLine+0xb4>)
 8006756:	2134      	movs	r1, #52	; 0x34
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	335c      	adds	r3, #92	; 0x5c
 8006760:	681c      	ldr	r4, [r3, #0]
 8006762:	f7ff fdc7 	bl	80062f4 <BSP_LCD_GetXSize>
 8006766:	4602      	mov	r2, r0
 8006768:	88bb      	ldrh	r3, [r7, #4]
 800676a:	fb03 f202 	mul.w	r2, r3, r2
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	4413      	add	r3, r2
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	4423      	add	r3, r4
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e013      	b.n	80067a2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <BSP_LCD_DrawHLine+0xb0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a16      	ldr	r2, [pc, #88]	; (80067d8 <BSP_LCD_DrawHLine+0xb4>)
 8006780:	2134      	movs	r1, #52	; 0x34
 8006782:	fb01 f303 	mul.w	r3, r1, r3
 8006786:	4413      	add	r3, r2
 8006788:	335c      	adds	r3, #92	; 0x5c
 800678a:	681c      	ldr	r4, [r3, #0]
 800678c:	f7ff fdb2 	bl	80062f4 <BSP_LCD_GetXSize>
 8006790:	4602      	mov	r2, r0
 8006792:	88bb      	ldrh	r3, [r7, #4]
 8006794:	fb03 f202 	mul.w	r2, r3, r2
 8006798:	88fb      	ldrh	r3, [r7, #6]
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4423      	add	r3, r4
 80067a0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80067a2:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <BSP_LCD_DrawHLine+0xb0>)
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	68f9      	ldr	r1, [r7, #12]
 80067a8:	887c      	ldrh	r4, [r7, #2]
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <BSP_LCD_DrawHLine+0xb0>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4d0b      	ldr	r5, [pc, #44]	; (80067dc <BSP_LCD_DrawHLine+0xb8>)
 80067b0:	4613      	mov	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	442b      	add	r3, r5
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	2301      	movs	r3, #1
 80067c4:	4622      	mov	r2, r4
 80067c6:	f000 fa1f 	bl	8006c08 <LL_FillBuffer>
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bdb0      	pop	{r4, r5, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20012edc 	.word	0x20012edc
 80067d8:	20012df4 	.word	0x20012df4
 80067dc:	20012ee0 	.word	0x20012ee0

080067e0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80067e0:	b5b0      	push	{r4, r5, r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	603a      	str	r2, [r7, #0]
 80067ea:	80fb      	strh	r3, [r7, #6]
 80067ec:	460b      	mov	r3, r1
 80067ee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80067f0:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <BSP_LCD_DrawPixel+0x88>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1d      	ldr	r2, [pc, #116]	; (800686c <BSP_LCD_DrawPixel+0x8c>)
 80067f6:	2134      	movs	r1, #52	; 0x34
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	3348      	adds	r3, #72	; 0x48
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d116      	bne.n	8006834 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <BSP_LCD_DrawPixel+0x88>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a18      	ldr	r2, [pc, #96]	; (800686c <BSP_LCD_DrawPixel+0x8c>)
 800680c:	2134      	movs	r1, #52	; 0x34
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	4413      	add	r3, r2
 8006814:	335c      	adds	r3, #92	; 0x5c
 8006816:	681c      	ldr	r4, [r3, #0]
 8006818:	88bd      	ldrh	r5, [r7, #4]
 800681a:	f7ff fd6b 	bl	80062f4 <BSP_LCD_GetXSize>
 800681e:	4603      	mov	r3, r0
 8006820:	fb03 f205 	mul.w	r2, r3, r5
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	4413      	add	r3, r2
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	4423      	add	r3, r4
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	b292      	uxth	r2, r2
 8006830:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8006832:	e015      	b.n	8006860 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <BSP_LCD_DrawPixel+0x88>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a0c      	ldr	r2, [pc, #48]	; (800686c <BSP_LCD_DrawPixel+0x8c>)
 800683a:	2134      	movs	r1, #52	; 0x34
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	4413      	add	r3, r2
 8006842:	335c      	adds	r3, #92	; 0x5c
 8006844:	681c      	ldr	r4, [r3, #0]
 8006846:	88bd      	ldrh	r5, [r7, #4]
 8006848:	f7ff fd54 	bl	80062f4 <BSP_LCD_GetXSize>
 800684c:	4603      	mov	r3, r0
 800684e:	fb03 f205 	mul.w	r2, r3, r5
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4423      	add	r3, r4
 800685a:	461a      	mov	r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	6013      	str	r3, [r2, #0]
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bdb0      	pop	{r4, r5, r7, pc}
 8006868:	20012edc 	.word	0x20012edc
 800686c:	20012df4 	.word	0x20012df4

08006870 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <BSP_LCD_DisplayOn+0x30>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <BSP_LCD_DisplayOn+0x30>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006884:	2201      	movs	r2, #1
 8006886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800688a:	4806      	ldr	r0, [pc, #24]	; (80068a4 <BSP_LCD_DisplayOn+0x34>)
 800688c:	f002 fef0 	bl	8009670 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006890:	2201      	movs	r2, #1
 8006892:	2108      	movs	r1, #8
 8006894:	4804      	ldr	r0, [pc, #16]	; (80068a8 <BSP_LCD_DisplayOn+0x38>)
 8006896:	f002 feeb 	bl	8009670 <HAL_GPIO_WritePin>
}
 800689a:	bf00      	nop
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20012df4 	.word	0x20012df4
 80068a4:	40022000 	.word	0x40022000
 80068a8:	40022800 	.word	0x40022800

080068ac <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b090      	sub	sp, #64	; 0x40
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80068b6:	4b64      	ldr	r3, [pc, #400]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	4a63      	ldr	r2, [pc, #396]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068c0:	6453      	str	r3, [r2, #68]	; 0x44
 80068c2:	4b61      	ldr	r3, [pc, #388]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80068ce:	4b5e      	ldr	r3, [pc, #376]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	4a5d      	ldr	r2, [pc, #372]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068d8:	6313      	str	r3, [r2, #48]	; 0x30
 80068da:	4b5b      	ldr	r3, [pc, #364]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80068e6:	4b58      	ldr	r3, [pc, #352]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	4a57      	ldr	r2, [pc, #348]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068ec:	f043 0310 	orr.w	r3, r3, #16
 80068f0:	6313      	str	r3, [r2, #48]	; 0x30
 80068f2:	4b55      	ldr	r3, [pc, #340]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	623b      	str	r3, [r7, #32]
 80068fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80068fe:	4b52      	ldr	r3, [pc, #328]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	4a51      	ldr	r2, [pc, #324]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006908:	6313      	str	r3, [r2, #48]	; 0x30
 800690a:	4b4f      	ldr	r3, [pc, #316]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006916:	4b4c      	ldr	r3, [pc, #304]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	4a4b      	ldr	r2, [pc, #300]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	6313      	str	r3, [r2, #48]	; 0x30
 8006922:	4b49      	ldr	r3, [pc, #292]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800692e:	4b46      	ldr	r3, [pc, #280]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	4a45      	ldr	r2, [pc, #276]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006938:	6313      	str	r3, [r2, #48]	; 0x30
 800693a:	4b43      	ldr	r3, [pc, #268]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006946:	4b40      	ldr	r3, [pc, #256]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	4a3f      	ldr	r2, [pc, #252]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 800694c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006950:	6313      	str	r3, [r2, #48]	; 0x30
 8006952:	4b3d      	ldr	r3, [pc, #244]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800695e:	4b3a      	ldr	r3, [pc, #232]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	4a39      	ldr	r2, [pc, #228]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006968:	6313      	str	r3, [r2, #48]	; 0x30
 800696a:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006976:	4b34      	ldr	r3, [pc, #208]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	4a33      	ldr	r2, [pc, #204]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 800697c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006980:	6313      	str	r3, [r2, #48]	; 0x30
 8006982:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <BSP_LCD_MspInit+0x19c>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698a:	60bb      	str	r3, [r7, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800698e:	2310      	movs	r3, #16
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006992:	2302      	movs	r3, #2
 8006994:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006996:	2300      	movs	r3, #0
 8006998:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800699a:	2302      	movs	r3, #2
 800699c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800699e:	230e      	movs	r3, #14
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80069a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069a6:	4619      	mov	r1, r3
 80069a8:	4828      	ldr	r0, [pc, #160]	; (8006a4c <BSP_LCD_MspInit+0x1a0>)
 80069aa:	f002 fb91 	bl	80090d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80069ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80069b4:	2302      	movs	r3, #2
 80069b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80069b8:	2309      	movs	r3, #9
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80069bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069c0:	4619      	mov	r1, r3
 80069c2:	4823      	ldr	r0, [pc, #140]	; (8006a50 <BSP_LCD_MspInit+0x1a4>)
 80069c4:	f002 fb84 	bl	80090d0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80069c8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80069ce:	2302      	movs	r3, #2
 80069d0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80069d2:	230e      	movs	r3, #14
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80069d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069da:	4619      	mov	r1, r3
 80069dc:	481d      	ldr	r0, [pc, #116]	; (8006a54 <BSP_LCD_MspInit+0x1a8>)
 80069de:	f002 fb77 	bl	80090d0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80069e2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80069e8:	2302      	movs	r3, #2
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80069ec:	230e      	movs	r3, #14
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80069f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069f4:	4619      	mov	r1, r3
 80069f6:	4818      	ldr	r0, [pc, #96]	; (8006a58 <BSP_LCD_MspInit+0x1ac>)
 80069f8:	f002 fb6a 	bl	80090d0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80069fc:	23f7      	movs	r3, #247	; 0xf7
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a00:	2302      	movs	r3, #2
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006a04:	230e      	movs	r3, #14
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4813      	ldr	r0, [pc, #76]	; (8006a5c <BSP_LCD_MspInit+0x1b0>)
 8006a10:	f002 fb5e 	bl	80090d0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a22:	4619      	mov	r1, r3
 8006a24:	480b      	ldr	r0, [pc, #44]	; (8006a54 <BSP_LCD_MspInit+0x1a8>)
 8006a26:	f002 fb53 	bl	80090d0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a36:	4619      	mov	r1, r3
 8006a38:	4808      	ldr	r0, [pc, #32]	; (8006a5c <BSP_LCD_MspInit+0x1b0>)
 8006a3a:	f002 fb49 	bl	80090d0 <HAL_GPIO_Init>
}
 8006a3e:	bf00      	nop
 8006a40:	3740      	adds	r7, #64	; 0x40
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	40021800 	.word	0x40021800
 8006a54:	40022000 	.word	0x40022000
 8006a58:	40022400 	.word	0x40022400
 8006a5c:	40022800 	.word	0x40022800

08006a60 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <BSP_LCD_ClockConfig+0x34>)
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006a70:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <BSP_LCD_ClockConfig+0x34>)
 8006a72:	22c0      	movs	r2, #192	; 0xc0
 8006a74:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006a76:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <BSP_LCD_ClockConfig+0x34>)
 8006a78:	2205      	movs	r2, #5
 8006a7a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <BSP_LCD_ClockConfig+0x34>)
 8006a7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a82:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006a84:	4803      	ldr	r0, [pc, #12]	; (8006a94 <BSP_LCD_ClockConfig+0x34>)
 8006a86:	f006 facb 	bl	800d020 <HAL_RCCEx_PeriphCLKConfig>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20012ef8 	.word	0x20012ef8

08006a98 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	603a      	str	r2, [r7, #0]
 8006aa2:	80fb      	strh	r3, [r7, #6]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	2300      	movs	r3, #0
 8006aae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8006ab0:	4b53      	ldr	r3, [pc, #332]	; (8006c00 <DrawChar+0x168>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	4953      	ldr	r1, [pc, #332]	; (8006c04 <DrawChar+0x16c>)
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	88db      	ldrh	r3, [r3, #6]
 8006ac6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006ac8:	4b4d      	ldr	r3, [pc, #308]	; (8006c00 <DrawChar+0x168>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	494d      	ldr	r1, [pc, #308]	; (8006c04 <DrawChar+0x16c>)
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3308      	adds	r3, #8
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	889b      	ldrh	r3, [r3, #4]
 8006ade:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8006ae0:	8a3b      	ldrh	r3, [r7, #16]
 8006ae2:	3307      	adds	r3, #7
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da00      	bge.n	8006aea <DrawChar+0x52>
 8006ae8:	3307      	adds	r3, #7
 8006aea:	10db      	asrs	r3, r3, #3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	8a3b      	ldrh	r3, [r7, #16]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	e076      	b.n	8006bee <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006b00:	8a3b      	ldrh	r3, [r7, #16]
 8006b02:	3307      	adds	r3, #7
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	da00      	bge.n	8006b0a <DrawChar+0x72>
 8006b08:	3307      	adds	r3, #7
 8006b0a:	10db      	asrs	r3, r3, #3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	fb02 f303 	mul.w	r3, r2, r3
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	4413      	add	r3, r2
 8006b18:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8006b1a:	8a3b      	ldrh	r3, [r7, #16]
 8006b1c:	3307      	adds	r3, #7
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da00      	bge.n	8006b24 <DrawChar+0x8c>
 8006b22:	3307      	adds	r3, #7
 8006b24:	10db      	asrs	r3, r3, #3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d002      	beq.n	8006b30 <DrawChar+0x98>
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d004      	beq.n	8006b38 <DrawChar+0xa0>
 8006b2e:	e00c      	b.n	8006b4a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	617b      	str	r3, [r7, #20]
      break;
 8006b36:	e016      	b.n	8006b66 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	3201      	adds	r2, #1
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
      break;
 8006b48:	e00d      	b.n	8006b66 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	041a      	lsls	r2, r3, #16
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3301      	adds	r3, #1
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	3202      	adds	r2, #2
 8006b5e:	7812      	ldrb	r2, [r2, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
      break;
 8006b64:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e036      	b.n	8006bda <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006b6c:	8a3a      	ldrh	r2, [r7, #16]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	1ad2      	subs	r2, r2, r3
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	4413      	add	r3, r2
 8006b76:	3b01      	subs	r3, #1
 8006b78:	2201      	movs	r2, #1
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d012      	beq.n	8006bae <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	4413      	add	r3, r2
 8006b90:	b298      	uxth	r0, r3
 8006b92:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <DrawChar+0x168>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	491b      	ldr	r1, [pc, #108]	; (8006c04 <DrawChar+0x16c>)
 8006b98:	4613      	mov	r3, r2
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	88bb      	ldrh	r3, [r7, #4]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f7ff fe1a 	bl	80067e0 <BSP_LCD_DrawPixel>
 8006bac:	e012      	b.n	8006bd4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	b298      	uxth	r0, r3
 8006bb8:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <DrawChar+0x168>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4911      	ldr	r1, [pc, #68]	; (8006c04 <DrawChar+0x16c>)
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	3304      	adds	r3, #4
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	88bb      	ldrh	r3, [r7, #4]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f7ff fe06 	bl	80067e0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	8a3b      	ldrh	r3, [r7, #16]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d3c4      	bcc.n	8006b6c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8006be2:	88bb      	ldrh	r3, [r7, #4]
 8006be4:	3301      	adds	r3, #1
 8006be6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
 8006bee:	8a7b      	ldrh	r3, [r7, #18]
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d384      	bcc.n	8006b00 <DrawChar+0x68>
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20012edc 	.word	0x20012edc
 8006c04:	20012ee0 	.word	0x20012ee0

08006c08 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006c16:	4b1e      	ldr	r3, [pc, #120]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006c1c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <LL_FillBuffer+0x8c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1d      	ldr	r2, [pc, #116]	; (8006c98 <LL_FillBuffer+0x90>)
 8006c24:	2134      	movs	r1, #52	; 0x34
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3348      	adds	r3, #72	; 0x48
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d103      	bne.n	8006c3c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006c34:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c36:	2202      	movs	r2, #2
 8006c38:	609a      	str	r2, [r3, #8]
 8006c3a:	e002      	b.n	8006c42 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006c3c:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8006c42:	4a13      	ldr	r2, [pc, #76]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006c48:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c4a:	4a14      	ldr	r2, [pc, #80]	; (8006c9c <LL_FillBuffer+0x94>)
 8006c4c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006c4e:	4810      	ldr	r0, [pc, #64]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c50:	f001 fb7c 	bl	800834c <HAL_DMA2D_Init>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d115      	bne.n	8006c86 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	480c      	ldr	r0, [pc, #48]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c5e:	f001 fde3 	bl	8008828 <HAL_DMA2D_ConfigLayer>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10e      	bne.n	8006c86 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	4807      	ldr	r0, [pc, #28]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c74:	f001 fbb4 	bl	80083e0 <HAL_DMA2D_Start>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006c7e:	210a      	movs	r1, #10
 8006c80:	4803      	ldr	r0, [pc, #12]	; (8006c90 <LL_FillBuffer+0x88>)
 8006c82:	f001 fbd8 	bl	8008436 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006c86:	bf00      	nop
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20012e9c 	.word	0x20012e9c
 8006c94:	20012edc 	.word	0x20012edc
 8006c98:	20012df4 	.word	0x20012df4
 8006c9c:	4002b000 	.word	0x4002b000

08006ca0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006ca4:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006ca6:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <BSP_SDRAM_Init+0xb0>)
 8006ca8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006caa:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006cac:	2202      	movs	r2, #2
 8006cae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006cb0:	4b28      	ldr	r3, [pc, #160]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006cb2:	2207      	movs	r2, #7
 8006cb4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006cb6:	4b27      	ldr	r3, [pc, #156]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006cb8:	2204      	movs	r2, #4
 8006cba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006cbc:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006cbe:	2207      	movs	r2, #7
 8006cc0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006cc8:	4b22      	ldr	r3, [pc, #136]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006cca:	2202      	movs	r2, #2
 8006ccc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006cce:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006ce0:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006ce6:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006ce8:	2210      	movs	r2, #16
 8006cea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006cec:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006cee:	2240      	movs	r2, #64	; 0x40
 8006cf0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006cf2:	4b16      	ldr	r3, [pc, #88]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006d00:	4b12      	ldr	r3, [pc, #72]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d06:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006d10:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006d16:	2100      	movs	r1, #0
 8006d18:	480c      	ldr	r0, [pc, #48]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006d1a:	f000 f87f 	bl	8006e1c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006d1e:	490d      	ldr	r1, [pc, #52]	; (8006d54 <BSP_SDRAM_Init+0xb4>)
 8006d20:	480a      	ldr	r0, [pc, #40]	; (8006d4c <BSP_SDRAM_Init+0xac>)
 8006d22:	f009 fb4e 	bl	80103c2 <HAL_SDRAM_Init>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <BSP_SDRAM_Init+0xb8>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <BSP_SDRAM_Init+0xb8>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006d3a:	f240 6003 	movw	r0, #1539	; 0x603
 8006d3e:	f000 f80d 	bl	8006d5c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <BSP_SDRAM_Init+0xb8>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20012f7c 	.word	0x20012f7c
 8006d50:	a0000140 	.word	0xa0000140
 8006d54:	20012fb0 	.word	0x20012fb0
 8006d58:	20000050 	.word	0x20000050

08006d5c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006d68:	4b2a      	ldr	r3, [pc, #168]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006d6e:	4b29      	ldr	r3, [pc, #164]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d70:	2210      	movs	r2, #16
 8006d72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006d7a:	4b26      	ldr	r3, [pc, #152]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d84:	4923      	ldr	r1, [pc, #140]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d86:	4824      	ldr	r0, [pc, #144]	; (8006e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006d88:	f009 fb4f 	bl	801042a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f000 f96b 	bl	8007068 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006d92:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d94:	2202      	movs	r2, #2
 8006d96:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006d98:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d9a:	2210      	movs	r2, #16
 8006d9c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006da4:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dae:	4919      	ldr	r1, [pc, #100]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006db0:	4819      	ldr	r0, [pc, #100]	; (8006e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006db2:	f009 fb3a 	bl	801042a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006db6:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006db8:	2203      	movs	r2, #3
 8006dba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006dbc:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006dc2:	4b14      	ldr	r3, [pc, #80]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dc4:	2208      	movs	r2, #8
 8006dc6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006dc8:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dd2:	4910      	ldr	r1, [pc, #64]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dd4:	4810      	ldr	r0, [pc, #64]	; (8006e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006dd6:	f009 fb28 	bl	801042a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006dda:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006dde:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006de2:	2204      	movs	r2, #4
 8006de4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006de8:	2210      	movs	r2, #16
 8006dea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006df6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dfc:	4905      	ldr	r1, [pc, #20]	; (8006e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dfe:	4806      	ldr	r0, [pc, #24]	; (8006e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006e00:	f009 fb13 	bl	801042a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4804      	ldr	r0, [pc, #16]	; (8006e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006e08:	f009 fb44 	bl	8010494 <HAL_SDRAM_ProgramRefreshRate>
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20012fcc 	.word	0x20012fcc
 8006e18:	20012f7c 	.word	0x20012f7c

08006e1c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b090      	sub	sp, #64	; 0x40
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006e26:	4b70      	ldr	r3, [pc, #448]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	4a6f      	ldr	r2, [pc, #444]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	6393      	str	r3, [r2, #56]	; 0x38
 8006e32:	4b6d      	ldr	r3, [pc, #436]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8006e3e:	4b6a      	ldr	r3, [pc, #424]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	4a69      	ldr	r2, [pc, #420]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e48:	6313      	str	r3, [r2, #48]	; 0x30
 8006e4a:	4b67      	ldr	r3, [pc, #412]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e56:	4b64      	ldr	r3, [pc, #400]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	4a63      	ldr	r2, [pc, #396]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e5c:	f043 0304 	orr.w	r3, r3, #4
 8006e60:	6313      	str	r3, [r2, #48]	; 0x30
 8006e62:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	623b      	str	r3, [r7, #32]
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e6e:	4b5e      	ldr	r3, [pc, #376]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	4a5d      	ldr	r2, [pc, #372]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e74:	f043 0308 	orr.w	r3, r3, #8
 8006e78:	6313      	str	r3, [r2, #48]	; 0x30
 8006e7a:	4b5b      	ldr	r3, [pc, #364]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e86:	4b58      	ldr	r3, [pc, #352]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	4a57      	ldr	r2, [pc, #348]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e8c:	f043 0310 	orr.w	r3, r3, #16
 8006e90:	6313      	str	r3, [r2, #48]	; 0x30
 8006e92:	4b55      	ldr	r3, [pc, #340]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e9e:	4b52      	ldr	r3, [pc, #328]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	4a51      	ldr	r2, [pc, #324]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006ea4:	f043 0320 	orr.w	r3, r3, #32
 8006ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eaa:	4b4f      	ldr	r3, [pc, #316]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006eb6:	4b4c      	ldr	r3, [pc, #304]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	4a4b      	ldr	r2, [pc, #300]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec2:	4b49      	ldr	r3, [pc, #292]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ece:	4b46      	ldr	r3, [pc, #280]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	4a45      	ldr	r2, [pc, #276]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eda:	4b43      	ldr	r3, [pc, #268]	; (8006fe8 <BSP_SDRAM_MspInit+0x1cc>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006eea:	2301      	movs	r3, #1
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006efe:	4619      	mov	r1, r3
 8006f00:	483a      	ldr	r0, [pc, #232]	; (8006fec <BSP_SDRAM_MspInit+0x1d0>)
 8006f02:	f002 f8e5 	bl	80090d0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006f06:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f10:	4619      	mov	r1, r3
 8006f12:	4837      	ldr	r0, [pc, #220]	; (8006ff0 <BSP_SDRAM_MspInit+0x1d4>)
 8006f14:	f002 f8dc 	bl	80090d0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006f18:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f22:	4619      	mov	r1, r3
 8006f24:	4833      	ldr	r0, [pc, #204]	; (8006ff4 <BSP_SDRAM_MspInit+0x1d8>)
 8006f26:	f002 f8d3 	bl	80090d0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006f2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f34:	4619      	mov	r1, r3
 8006f36:	4830      	ldr	r0, [pc, #192]	; (8006ff8 <BSP_SDRAM_MspInit+0x1dc>)
 8006f38:	f002 f8ca 	bl	80090d0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006f3c:	f248 1333 	movw	r3, #33075	; 0x8133
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f46:	4619      	mov	r1, r3
 8006f48:	482c      	ldr	r0, [pc, #176]	; (8006ffc <BSP_SDRAM_MspInit+0x1e0>)
 8006f4a:	f002 f8c1 	bl	80090d0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006f4e:	2328      	movs	r3, #40	; 0x28
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f56:	4619      	mov	r1, r3
 8006f58:	4829      	ldr	r0, [pc, #164]	; (8007000 <BSP_SDRAM_MspInit+0x1e4>)
 8006f5a:	f002 f8b9 	bl	80090d0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006f64:	4b27      	ldr	r3, [pc, #156]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f66:	2280      	movs	r2, #128	; 0x80
 8006f68:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006f6a:	4b26      	ldr	r3, [pc, #152]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f70:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006f72:	4b24      	ldr	r3, [pc, #144]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f78:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f80:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006f82:	4b20      	ldr	r3, [pc, #128]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f88:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006f90:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f96:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006f98:	4b1a      	ldr	r3, [pc, #104]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006f9e:	4b19      	ldr	r3, [pc, #100]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006fa4:	4b17      	ldr	r3, [pc, #92]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006faa:	4b16      	ldr	r3, [pc, #88]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006fb0:	4b14      	ldr	r3, [pc, #80]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <BSP_SDRAM_MspInit+0x1ec>)
 8006fb4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a12      	ldr	r2, [pc, #72]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
 8006fbc:	4a11      	ldr	r2, [pc, #68]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8006fc2:	4810      	ldr	r0, [pc, #64]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fc4:	f000 fdfc 	bl	8007bc0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006fc8:	480e      	ldr	r0, [pc, #56]	; (8007004 <BSP_SDRAM_MspInit+0x1e8>)
 8006fca:	f000 fd4b 	bl	8007a64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006fce:	2200      	movs	r2, #0
 8006fd0:	210f      	movs	r1, #15
 8006fd2:	2038      	movs	r0, #56	; 0x38
 8006fd4:	f000 fbb8 	bl	8007748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006fd8:	2038      	movs	r0, #56	; 0x38
 8006fda:	f000 fbd1 	bl	8007780 <HAL_NVIC_EnableIRQ>
}
 8006fde:	bf00      	nop
 8006fe0:	3740      	adds	r7, #64	; 0x40
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	40020800 	.word	0x40020800
 8006ff0:	40020c00 	.word	0x40020c00
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	40021400 	.word	0x40021400
 8006ffc:	40021800 	.word	0x40021800
 8007000:	40021c00 	.word	0x40021c00
 8007004:	20012fdc 	.word	0x20012fdc
 8007008:	40026410 	.word	0x40026410

0800700c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007010:	2003      	movs	r0, #3
 8007012:	f000 fb8e 	bl	8007732 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007016:	2000      	movs	r0, #0
 8007018:	f7fc fdc4 	bl	8003ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800701c:	f7fb fbf6 	bl	800280c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <HAL_IncTick+0x20>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	4b06      	ldr	r3, [pc, #24]	; (800704c <HAL_IncTick+0x24>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4413      	add	r3, r2
 8007038:	4a04      	ldr	r2, [pc, #16]	; (800704c <HAL_IncTick+0x24>)
 800703a:	6013      	str	r3, [r2, #0]
}
 800703c:	bf00      	nop
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000058 	.word	0x20000058
 800704c:	2001303c 	.word	0x2001303c

08007050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  return uwTick;
 8007054:	4b03      	ldr	r3, [pc, #12]	; (8007064 <HAL_GetTick+0x14>)
 8007056:	681b      	ldr	r3, [r3, #0]
}
 8007058:	4618      	mov	r0, r3
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	2001303c 	.word	0x2001303c

08007068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007070:	f7ff ffee 	bl	8007050 <HAL_GetTick>
 8007074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d005      	beq.n	800708e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007082:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <HAL_Delay+0x44>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800708e:	bf00      	nop
 8007090:	f7ff ffde 	bl	8007050 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	429a      	cmp	r2, r3
 800709e:	d8f7      	bhi.n	8007090 <HAL_Delay+0x28>
  {
  }
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000058 	.word	0x20000058

080070b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e031      	b.n	800712a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fb fbc4 	bl	800285c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d116      	bne.n	800711c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070f2:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_ADC_Init+0x84>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	f043 0202 	orr.w	r2, r3, #2
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f970 	bl	80073e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	f043 0201 	orr.w	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	641a      	str	r2, [r3, #64]	; 0x40
 800711a:	e001      	b.n	8007120 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	ffffeefd 	.word	0xffffeefd

08007138 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x1c>
 8007150:	2302      	movs	r3, #2
 8007152:	e136      	b.n	80073c2 <HAL_ADC_ConfigChannel+0x28a>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b09      	cmp	r3, #9
 8007162:	d93a      	bls.n	80071da <HAL_ADC_ConfigChannel+0xa2>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800716c:	d035      	beq.n	80071da <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68d9      	ldr	r1, [r3, #12]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	3b1e      	subs	r3, #30
 8007184:	2207      	movs	r2, #7
 8007186:	fa02 f303 	lsl.w	r3, r2, r3
 800718a:	43da      	mvns	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	400a      	ands	r2, r1
 8007192:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a8d      	ldr	r2, [pc, #564]	; (80073d0 <HAL_ADC_ConfigChannel+0x298>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d10a      	bne.n	80071b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68d9      	ldr	r1, [r3, #12]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	061a      	lsls	r2, r3, #24
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80071b2:	e035      	b.n	8007220 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68d9      	ldr	r1, [r3, #12]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4618      	mov	r0, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4403      	add	r3, r0
 80071cc:	3b1e      	subs	r3, #30
 80071ce:	409a      	lsls	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80071d8:	e022      	b.n	8007220 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6919      	ldr	r1, [r3, #16]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	4613      	mov	r3, r2
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	4413      	add	r3, r2
 80071ee:	2207      	movs	r2, #7
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	43da      	mvns	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	400a      	ands	r2, r1
 80071fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6919      	ldr	r1, [r3, #16]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	4618      	mov	r0, r3
 8007210:	4603      	mov	r3, r0
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	4403      	add	r3, r0
 8007216:	409a      	lsls	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b06      	cmp	r3, #6
 8007226:	d824      	bhi.n	8007272 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	3b05      	subs	r3, #5
 800723a:	221f      	movs	r2, #31
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	43da      	mvns	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	400a      	ands	r2, r1
 8007248:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	4618      	mov	r0, r3
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	3b05      	subs	r3, #5
 8007264:	fa00 f203 	lsl.w	r2, r0, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	635a      	str	r2, [r3, #52]	; 0x34
 8007270:	e04c      	b.n	800730c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b0c      	cmp	r3, #12
 8007278:	d824      	bhi.n	80072c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	3b23      	subs	r3, #35	; 0x23
 800728c:	221f      	movs	r2, #31
 800728e:	fa02 f303 	lsl.w	r3, r2, r3
 8007292:	43da      	mvns	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	400a      	ands	r2, r1
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	4618      	mov	r0, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	3b23      	subs	r3, #35	; 0x23
 80072b6:	fa00 f203 	lsl.w	r2, r0, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
 80072c2:	e023      	b.n	800730c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	3b41      	subs	r3, #65	; 0x41
 80072d6:	221f      	movs	r2, #31
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	43da      	mvns	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	400a      	ands	r2, r1
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	4618      	mov	r0, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	3b41      	subs	r3, #65	; 0x41
 8007300:	fa00 f203 	lsl.w	r2, r0, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <HAL_ADC_ConfigChannel+0x29c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10a      	bne.n	800732c <HAL_ADC_ConfigChannel+0x1f4>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731e:	d105      	bne.n	800732c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007320:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a2c      	ldr	r2, [pc, #176]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007326:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800732a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a28      	ldr	r2, [pc, #160]	; (80073d4 <HAL_ADC_ConfigChannel+0x29c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d10f      	bne.n	8007356 <HAL_ADC_ConfigChannel+0x21e>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b12      	cmp	r3, #18
 800733c:	d10b      	bne.n	8007356 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800733e:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4a25      	ldr	r2, [pc, #148]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007344:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007348:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007350:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007354:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1e      	ldr	r2, [pc, #120]	; (80073d4 <HAL_ADC_ConfigChannel+0x29c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d12b      	bne.n	80073b8 <HAL_ADC_ConfigChannel+0x280>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <HAL_ADC_ConfigChannel+0x298>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d003      	beq.n	8007372 <HAL_ADC_ConfigChannel+0x23a>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b11      	cmp	r3, #17
 8007370:	d122      	bne.n	80073b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007372:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4a18      	ldr	r2, [pc, #96]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007378:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800737c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800737e:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8007384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007388:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <HAL_ADC_ConfigChannel+0x298>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d111      	bne.n	80073b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007394:	4b11      	ldr	r3, [pc, #68]	; (80073dc <HAL_ADC_ConfigChannel+0x2a4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800739a:	fba2 2303 	umull	r2, r3, r2, r3
 800739e:	0c9a      	lsrs	r2, r3, #18
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80073aa:	e002      	b.n	80073b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f9      	bne.n	80073ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	10000012 	.word	0x10000012
 80073d4:	40012000 	.word	0x40012000
 80073d8:	40012300 	.word	0x40012300
 80073dc:	20000010 	.word	0x20000010
 80073e0:	431bde83 	.word	0x431bde83

080073e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80073ec:	4b78      	ldr	r3, [pc, #480]	; (80075d0 <ADC_Init+0x1ec>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a77      	ldr	r2, [pc, #476]	; (80075d0 <ADC_Init+0x1ec>)
 80073f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80073f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80073f8:	4b75      	ldr	r3, [pc, #468]	; (80075d0 <ADC_Init+0x1ec>)
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4973      	ldr	r1, [pc, #460]	; (80075d0 <ADC_Init+0x1ec>)
 8007402:	4313      	orrs	r3, r2
 8007404:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6859      	ldr	r1, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	021a      	lsls	r2, r3, #8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6859      	ldr	r1, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	4a58      	ldr	r2, [pc, #352]	; (80075d4 <ADC_Init+0x1f0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d022      	beq.n	80074be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6899      	ldr	r1, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6899      	ldr	r1, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	e00f      	b.n	80074de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0202 	bic.w	r2, r2, #2
 80074ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6899      	ldr	r1, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	005a      	lsls	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01b      	beq.n	8007544 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800751a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800752a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6859      	ldr	r1, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	3b01      	subs	r3, #1
 8007538:	035a      	lsls	r2, r3, #13
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	e007      	b.n	8007554 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007552:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	3b01      	subs	r3, #1
 8007570:	051a      	lsls	r2, r3, #20
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6899      	ldr	r1, [r3, #8]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007596:	025a      	lsls	r2, r3, #9
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6899      	ldr	r1, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	029a      	lsls	r2, r3, #10
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	609a      	str	r2, [r3, #8]
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	40012300 	.word	0x40012300
 80075d4:	0f000001 	.word	0x0f000001

080075d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075e8:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <__NVIC_SetPriorityGrouping+0x40>)
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075f4:	4013      	ands	r3, r2
 80075f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007600:	4b06      	ldr	r3, [pc, #24]	; (800761c <__NVIC_SetPriorityGrouping+0x44>)
 8007602:	4313      	orrs	r3, r2
 8007604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007606:	4a04      	ldr	r2, [pc, #16]	; (8007618 <__NVIC_SetPriorityGrouping+0x40>)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	60d3      	str	r3, [r2, #12]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	e000ed00 	.word	0xe000ed00
 800761c:	05fa0000 	.word	0x05fa0000

08007620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007624:	4b04      	ldr	r3, [pc, #16]	; (8007638 <__NVIC_GetPriorityGrouping+0x18>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	f003 0307 	and.w	r3, r3, #7
}
 800762e:	4618      	mov	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	e000ed00 	.word	0xe000ed00

0800763c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764a:	2b00      	cmp	r3, #0
 800764c:	db0b      	blt.n	8007666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	f003 021f 	and.w	r2, r3, #31
 8007654:	4907      	ldr	r1, [pc, #28]	; (8007674 <__NVIC_EnableIRQ+0x38>)
 8007656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765a:	095b      	lsrs	r3, r3, #5
 800765c:	2001      	movs	r0, #1
 800765e:	fa00 f202 	lsl.w	r2, r0, r2
 8007662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	e000e100 	.word	0xe000e100

08007678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007688:	2b00      	cmp	r3, #0
 800768a:	db0a      	blt.n	80076a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	490c      	ldr	r1, [pc, #48]	; (80076c4 <__NVIC_SetPriority+0x4c>)
 8007692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007696:	0112      	lsls	r2, r2, #4
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	440b      	add	r3, r1
 800769c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076a0:	e00a      	b.n	80076b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	4908      	ldr	r1, [pc, #32]	; (80076c8 <__NVIC_SetPriority+0x50>)
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	3b04      	subs	r3, #4
 80076b0:	0112      	lsls	r2, r2, #4
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	440b      	add	r3, r1
 80076b6:	761a      	strb	r2, [r3, #24]
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	e000e100 	.word	0xe000e100
 80076c8:	e000ed00 	.word	0xe000ed00

080076cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f1c3 0307 	rsb	r3, r3, #7
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	bf28      	it	cs
 80076ea:	2304      	movcs	r3, #4
 80076ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	3304      	adds	r3, #4
 80076f2:	2b06      	cmp	r3, #6
 80076f4:	d902      	bls.n	80076fc <NVIC_EncodePriority+0x30>
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	3b03      	subs	r3, #3
 80076fa:	e000      	b.n	80076fe <NVIC_EncodePriority+0x32>
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007700:	f04f 32ff 	mov.w	r2, #4294967295
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	43da      	mvns	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	401a      	ands	r2, r3
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007714:	f04f 31ff 	mov.w	r1, #4294967295
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	fa01 f303 	lsl.w	r3, r1, r3
 800771e:	43d9      	mvns	r1, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007724:	4313      	orrs	r3, r2
         );
}
 8007726:	4618      	mov	r0, r3
 8007728:	3724      	adds	r7, #36	; 0x24
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff ff4c 	bl	80075d8 <__NVIC_SetPriorityGrouping>
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800775a:	f7ff ff61 	bl	8007620 <__NVIC_GetPriorityGrouping>
 800775e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	6978      	ldr	r0, [r7, #20]
 8007766:	f7ff ffb1 	bl	80076cc <NVIC_EncodePriority>
 800776a:	4602      	mov	r2, r0
 800776c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff ff80 	bl	8007678 <__NVIC_SetPriority>
}
 8007778:	bf00      	nop
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800778a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff ff54 	bl	800763c <__NVIC_EnableIRQ>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e054      	b.n	8007858 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7f5b      	ldrb	r3, [r3, #29]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d105      	bne.n	80077c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fb f8a6 	bl	8002910 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	791b      	ldrb	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10c      	bne.n	80077ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a22      	ldr	r2, [pc, #136]	; (8007860 <HAL_CRC_Init+0xc4>)
 80077d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0218 	bic.w	r2, r2, #24
 80077e8:	609a      	str	r2, [r3, #8]
 80077ea:	e00c      	b.n	8007806 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6899      	ldr	r1, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f834 	bl	8007864 <HAL_CRCEx_Polynomial_Set>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e028      	b.n	8007858 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	795b      	ldrb	r3, [r3, #5]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f04f 32ff 	mov.w	r2, #4294967295
 8007816:	611a      	str	r2, [r3, #16]
 8007818:	e004      	b.n	8007824 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6912      	ldr	r2, [r2, #16]
 8007822:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695a      	ldr	r2, [r3, #20]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	04c11db7 	.word	0x04c11db7

08007864 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007874:	231f      	movs	r3, #31
 8007876:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007878:	bf00      	nop
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1e5a      	subs	r2, r3, #1
 800787e:	613a      	str	r2, [r7, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <HAL_CRCEx_Polynomial_Set+0x34>
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b18      	cmp	r3, #24
 800789c:	d846      	bhi.n	800792c <HAL_CRCEx_Polynomial_Set+0xc8>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	08007933 	.word	0x08007933
 80078a8:	0800792d 	.word	0x0800792d
 80078ac:	0800792d 	.word	0x0800792d
 80078b0:	0800792d 	.word	0x0800792d
 80078b4:	0800792d 	.word	0x0800792d
 80078b8:	0800792d 	.word	0x0800792d
 80078bc:	0800792d 	.word	0x0800792d
 80078c0:	0800792d 	.word	0x0800792d
 80078c4:	08007921 	.word	0x08007921
 80078c8:	0800792d 	.word	0x0800792d
 80078cc:	0800792d 	.word	0x0800792d
 80078d0:	0800792d 	.word	0x0800792d
 80078d4:	0800792d 	.word	0x0800792d
 80078d8:	0800792d 	.word	0x0800792d
 80078dc:	0800792d 	.word	0x0800792d
 80078e0:	0800792d 	.word	0x0800792d
 80078e4:	08007915 	.word	0x08007915
 80078e8:	0800792d 	.word	0x0800792d
 80078ec:	0800792d 	.word	0x0800792d
 80078f0:	0800792d 	.word	0x0800792d
 80078f4:	0800792d 	.word	0x0800792d
 80078f8:	0800792d 	.word	0x0800792d
 80078fc:	0800792d 	.word	0x0800792d
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007909 	.word	0x08007909
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b06      	cmp	r3, #6
 800790c:	d913      	bls.n	8007936 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007912:	e010      	b.n	8007936 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b07      	cmp	r3, #7
 8007918:	d90f      	bls.n	800793a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800791e:	e00c      	b.n	800793a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d90b      	bls.n	800793e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800792a:	e008      	b.n	800793e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	75fb      	strb	r3, [r7, #23]
      break;
 8007930:	e006      	b.n	8007940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007932:	bf00      	nop
 8007934:	e004      	b.n	8007940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007936:	bf00      	nop
 8007938:	e002      	b.n	8007940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800793a:	bf00      	nop
 800793c:	e000      	b.n	8007940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800793e:	bf00      	nop
  }
  if (status == HAL_OK)
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10d      	bne.n	8007962 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f023 0118 	bic.w	r1, r3, #24
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
}
 8007964:	4618      	mov	r0, r3
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e069      	b.n	8007a56 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fa ffde 	bl	8002950 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <HAL_DCMI_Init+0xf0>)
 80079b6:	400b      	ands	r3, r1
 80079b8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80079ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80079da:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80079e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80079f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80079fe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b10      	cmp	r3, #16
 8007a0e:	d112      	bne.n	8007a36 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7f1b      	ldrb	r3, [r3, #28]
 8007a14:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7f5b      	ldrb	r3, [r3, #29]
 8007a1a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a1c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7f9b      	ldrb	r3, [r3, #30]
 8007a22:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007a24:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7fdb      	ldrb	r3, [r3, #31]
 8007a2c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007a32:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007a34:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 021e 	orr.w	r2, r2, #30
 8007a44:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	ffe0f007 	.word	0xffe0f007

08007a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a70:	f7ff faee 	bl	8007050 <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e099      	b.n	8007bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aa0:	e00f      	b.n	8007ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007aa2:	f7ff fad5 	bl	8007050 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b05      	cmp	r3, #5
 8007aae:	d908      	bls.n	8007ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2203      	movs	r2, #3
 8007aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e078      	b.n	8007bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e8      	bne.n	8007aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4b38      	ldr	r3, [pc, #224]	; (8007bbc <HAL_DMA_Init+0x158>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d107      	bne.n	8007b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	4313      	orrs	r3, r2
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f023 0307 	bic.w	r3, r3, #7
 8007b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d117      	bne.n	8007b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00e      	beq.n	8007b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fb73 	bl	8008254 <DMA_CheckFifoParam>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d008      	beq.n	8007b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2240      	movs	r2, #64	; 0x40
 8007b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b82:	2301      	movs	r3, #1
 8007b84:	e016      	b.n	8007bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fb2a 	bl	80081e8 <DMA_CalcBaseAndBitshift>
 8007b94:	4603      	mov	r3, r0
 8007b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b9c:	223f      	movs	r2, #63	; 0x3f
 8007b9e:	409a      	lsls	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	f010803f 	.word	0xf010803f

08007bc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e050      	b.n	8007c74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d101      	bne.n	8007be2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007bde:	2302      	movs	r3, #2
 8007be0:	e048      	b.n	8007c74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2200      	movs	r2, #0
 8007c18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2221      	movs	r2, #33	; 0x21
 8007c20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fae0 	bl	80081e8 <DMA_CalcBaseAndBitshift>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c30:	223f      	movs	r2, #63	; 0x3f
 8007c32:	409a      	lsls	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_DMA_Start_IT+0x26>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e048      	b.n	8007d34 <HAL_DMA_Start_IT+0xb8>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d137      	bne.n	8007d26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fa5e 	bl	800818c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd4:	223f      	movs	r2, #63	; 0x3f
 8007cd6:	409a      	lsls	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0216 	orr.w	r2, r2, #22
 8007cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695a      	ldr	r2, [r3, #20]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cfa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d007      	beq.n	8007d14 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0208 	orr.w	r2, r2, #8
 8007d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0201 	orr.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e005      	b.n	8007d32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d2e:	2302      	movs	r3, #2
 8007d30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d4a:	f7ff f981 	bl	8007050 <HAL_GetTick>
 8007d4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d008      	beq.n	8007d6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2280      	movs	r2, #128	; 0x80
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e052      	b.n	8007e14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0216 	bic.w	r2, r2, #22
 8007d7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695a      	ldr	r2, [r3, #20]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d103      	bne.n	8007d9e <HAL_DMA_Abort+0x62>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d007      	beq.n	8007dae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0208 	bic.w	r2, r2, #8
 8007dac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dbe:	e013      	b.n	8007de8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007dc0:	f7ff f946 	bl	8007050 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	d90c      	bls.n	8007de8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e015      	b.n	8007e14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e4      	bne.n	8007dc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfa:	223f      	movs	r2, #63	; 0x3f
 8007dfc:	409a      	lsls	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d004      	beq.n	8007e3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2280      	movs	r2, #128	; 0x80
 8007e34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e00c      	b.n	8007e54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2205      	movs	r2, #5
 8007e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0201 	bic.w	r2, r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007e6c:	4b8e      	ldr	r3, [pc, #568]	; (80080a8 <HAL_DMA_IRQHandler+0x248>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a8e      	ldr	r2, [pc, #568]	; (80080ac <HAL_DMA_IRQHandler+0x24c>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	0a9b      	lsrs	r3, r3, #10
 8007e78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	409a      	lsls	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d01a      	beq.n	8007ecc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d013      	beq.n	8007ecc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0204 	bic.w	r2, r2, #4
 8007eb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb8:	2208      	movs	r2, #8
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec4:	f043 0201 	orr.w	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d012      	beq.n	8007f02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eee:	2201      	movs	r2, #1
 8007ef0:	409a      	lsls	r2, r3
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efa:	f043 0202 	orr.w	r2, r3, #2
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f06:	2204      	movs	r2, #4
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d012      	beq.n	8007f38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f24:	2204      	movs	r2, #4
 8007f26:	409a      	lsls	r2, r3
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f30:	f043 0204 	orr.w	r2, r3, #4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3c:	2210      	movs	r2, #16
 8007f3e:	409a      	lsls	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4013      	ands	r3, r2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d043      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d03c      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f5a:	2210      	movs	r2, #16
 8007f5c:	409a      	lsls	r2, r3
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d018      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d024      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
 8007f8e:	e01f      	b.n	8007fd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01b      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
 8007fa0:	e016      	b.n	8007fd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0208 	bic.w	r2, r2, #8
 8007fbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	409a      	lsls	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 808f 	beq.w	8008100 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8087 	beq.w	8008100 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b05      	cmp	r3, #5
 8008008:	d136      	bne.n	8008078 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0216 	bic.w	r2, r2, #22
 8008018:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695a      	ldr	r2, [r3, #20]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008028:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <HAL_DMA_IRQHandler+0x1da>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0208 	bic.w	r2, r2, #8
 8008048:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	223f      	movs	r2, #63	; 0x3f
 8008050:	409a      	lsls	r2, r3
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806a:	2b00      	cmp	r3, #0
 800806c:	d07e      	beq.n	800816c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
        }
        return;
 8008076:	e079      	b.n	800816c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01d      	beq.n	80080c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10d      	bne.n	80080b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008098:	2b00      	cmp	r3, #0
 800809a:	d031      	beq.n	8008100 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
 80080a4:	e02c      	b.n	8008100 <HAL_DMA_IRQHandler+0x2a0>
 80080a6:	bf00      	nop
 80080a8:	20000010 	.word	0x20000010
 80080ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d023      	beq.n	8008100 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
 80080c0:	e01e      	b.n	8008100 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10f      	bne.n	80080f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0210 	bic.w	r2, r2, #16
 80080de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008104:	2b00      	cmp	r3, #0
 8008106:	d032      	beq.n	800816e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d022      	beq.n	800815a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2205      	movs	r2, #5
 8008118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3301      	adds	r3, #1
 8008130:	60bb      	str	r3, [r7, #8]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	429a      	cmp	r2, r3
 8008136:	d307      	bcc.n	8008148 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f2      	bne.n	800812c <HAL_DMA_IRQHandler+0x2cc>
 8008146:	e000      	b.n	800814a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008148:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
 800816a:	e000      	b.n	800816e <HAL_DMA_IRQHandler+0x30e>
        return;
 800816c:	bf00      	nop
    }
  }
}
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d108      	bne.n	80081cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80081ca:	e007      	b.n	80081dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	60da      	str	r2, [r3, #12]
}
 80081dc:	bf00      	nop
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	3b10      	subs	r3, #16
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <DMA_CalcBaseAndBitshift+0x60>)
 80081fa:	fba2 2303 	umull	r2, r3, r2, r3
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008202:	4a12      	ldr	r2, [pc, #72]	; (800824c <DMA_CalcBaseAndBitshift+0x64>)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4413      	add	r3, r2
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b03      	cmp	r3, #3
 8008214:	d908      	bls.n	8008228 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <DMA_CalcBaseAndBitshift+0x68>)
 800821e:	4013      	ands	r3, r2
 8008220:	1d1a      	adds	r2, r3, #4
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	659a      	str	r2, [r3, #88]	; 0x58
 8008226:	e006      	b.n	8008236 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	4b08      	ldr	r3, [pc, #32]	; (8008250 <DMA_CalcBaseAndBitshift+0x68>)
 8008230:	4013      	ands	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	aaaaaaab 	.word	0xaaaaaaab
 800824c:	0801f3bc 	.word	0x0801f3bc
 8008250:	fffffc00 	.word	0xfffffc00

08008254 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d11f      	bne.n	80082ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d856      	bhi.n	8008322 <DMA_CheckFifoParam+0xce>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <DMA_CheckFifoParam+0x28>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800828d 	.word	0x0800828d
 8008280:	0800829f 	.word	0x0800829f
 8008284:	0800828d 	.word	0x0800828d
 8008288:	08008323 	.word	0x08008323
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d046      	beq.n	8008326 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800829c:	e043      	b.n	8008326 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082a6:	d140      	bne.n	800832a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082ac:	e03d      	b.n	800832a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b6:	d121      	bne.n	80082fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d837      	bhi.n	800832e <DMA_CheckFifoParam+0xda>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <DMA_CheckFifoParam+0x70>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082db 	.word	0x080082db
 80082cc:	080082d5 	.word	0x080082d5
 80082d0:	080082ed 	.word	0x080082ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	e030      	b.n	800833c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d025      	beq.n	8008332 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082ea:	e022      	b.n	8008332 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082f4:	d11f      	bne.n	8008336 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082fa:	e01c      	b.n	8008336 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d903      	bls.n	800830a <DMA_CheckFifoParam+0xb6>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d003      	beq.n	8008310 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008308:	e018      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	73fb      	strb	r3, [r7, #15]
      break;
 800830e:	e015      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00e      	beq.n	800833a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
      break;
 8008320:	e00b      	b.n	800833a <DMA_CheckFifoParam+0xe6>
      break;
 8008322:	bf00      	nop
 8008324:	e00a      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      break;
 8008326:	bf00      	nop
 8008328:	e008      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      break;
 800832a:	bf00      	nop
 800832c:	e006      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      break;
 800832e:	bf00      	nop
 8008330:	e004      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      break;
 8008332:	bf00      	nop
 8008334:	e002      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      break;   
 8008336:	bf00      	nop
 8008338:	e000      	b.n	800833c <DMA_CheckFifoParam+0xe8>
      break;
 800833a:	bf00      	nop
    }
  } 
  
  return status; 
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e039      	b.n	80083d2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fa fbaa 	bl	8002acc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	f023 0107 	bic.w	r1, r3, #7
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <HAL_DMA2D_Init+0x90>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68d1      	ldr	r1, [r2, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	430b      	orrs	r3, r1
 80083c0:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	ffffc000 	.word	0xffffc000

080083e0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_DMA2D_Start+0x1c>
 80083f8:	2302      	movs	r3, #2
 80083fa:	e018      	b.n	800842e <HAL_DMA2D_Start+0x4e>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	68b9      	ldr	r1, [r7, #8]
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fa98 	bl	800894c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b086      	sub	sp, #24
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008440:	2300      	movs	r3, #0
 8008442:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d056      	beq.n	8008500 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008452:	f7fe fdfd 	bl	8007050 <HAL_GetTick>
 8008456:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008458:	e04b      	b.n	80084f2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008468:	2b00      	cmp	r3, #0
 800846a:	d023      	beq.n	80084b4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	f043 0202 	orr.w	r2, r3, #2
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008490:	f043 0201 	orr.w	r2, r3, #1
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2221      	movs	r2, #33	; 0x21
 800849e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2204      	movs	r2, #4
 80084a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0a5      	b.n	8008600 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ba:	d01a      	beq.n	80084f2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80084bc:	f7fe fdc8 	bl	8007050 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d302      	bcc.n	80084d2 <HAL_DMA2D_PollForTransfer+0x9c>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10f      	bne.n	80084f2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	f043 0220 	orr.w	r2, r3, #32
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2203      	movs	r2, #3
 80084e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e086      	b.n	8008600 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0ac      	beq.n	800845a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d061      	beq.n	80085e6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008522:	f7fe fd95 	bl	8007050 <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008528:	e056      	b.n	80085d8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008538:	2b00      	cmp	r3, #0
 800853a:	d02e      	beq.n	800859a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0308 	and.w	r3, r3, #8
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854a:	f043 0204 	orr.w	r2, r3, #4
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008560:	f043 0202 	orr.w	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	f043 0201 	orr.w	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2229      	movs	r2, #41	; 0x29
 8008584:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2204      	movs	r2, #4
 800858a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e032      	b.n	8008600 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d01a      	beq.n	80085d8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085a2:	f7fe fd55 	bl	8007050 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d302      	bcc.n	80085b8 <HAL_DMA2D_PollForTransfer+0x182>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10f      	bne.n	80085d8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	f043 0220 	orr.w	r2, r3, #32
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2203      	movs	r2, #3
 80085c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e013      	b.n	8008600 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f003 0310 	and.w	r3, r3, #16
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0a1      	beq.n	800852a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2212      	movs	r2, #18
 80085ec:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d026      	beq.n	8008678 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	2b00      	cmp	r3, #0
 8008632:	d021      	beq.n	8008678 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008642:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	f043 0201 	orr.w	r2, r3, #1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2201      	movs	r2, #1
 8008656:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2204      	movs	r2, #4
 800865c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d026      	beq.n	80086d0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d021      	beq.n	80086d0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800869a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2220      	movs	r2, #32
 80086a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a8:	f043 0202 	orr.w	r2, r3, #2
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2204      	movs	r2, #4
 80086b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d026      	beq.n	8008728 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d021      	beq.n	8008728 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086f2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2208      	movs	r2, #8
 80086fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008700:	f043 0204 	orr.w	r2, r3, #4
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2204      	movs	r2, #4
 800870c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d013      	beq.n	800875a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00e      	beq.n	800875a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800874a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2204      	movs	r2, #4
 8008752:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f853 	bl	8008800 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d024      	beq.n	80087ae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01f      	beq.n	80087ae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800877c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2202      	movs	r2, #2
 8008784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01f      	beq.n	80087f8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01a      	beq.n	80087f8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2210      	movs	r2, #16
 80087d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f80e 	bl	8008814 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_DMA2D_ConfigLayer+0x20>
 8008844:	2302      	movs	r3, #2
 8008846:	e079      	b.n	800893c <HAL_DMA2D_ConfigLayer+0x114>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	3318      	adds	r3, #24
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	4413      	add	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	041b      	lsls	r3, r3, #16
 800886e:	4313      	orrs	r3, r2
 8008870:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008872:	4b35      	ldr	r3, [pc, #212]	; (8008948 <HAL_DMA2D_ConfigLayer+0x120>)
 8008874:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	2b0a      	cmp	r3, #10
 800887c:	d003      	beq.n	8008886 <HAL_DMA2D_ConfigLayer+0x5e>
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2b09      	cmp	r3, #9
 8008884:	d107      	bne.n	8008896 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	e005      	b.n	80088a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	061b      	lsls	r3, r3, #24
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d120      	bne.n	80088ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	43db      	mvns	r3, r3
 80088b2:	ea02 0103 	and.w	r1, r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	430a      	orrs	r2, r1
 80088be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	6812      	ldr	r2, [r2, #0]
 80088c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2b0a      	cmp	r3, #10
 80088d0:	d003      	beq.n	80088da <HAL_DMA2D_ConfigLayer+0xb2>
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d127      	bne.n	800892a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28
 80088e8:	e01f      	b.n	800892a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69da      	ldr	r2, [r3, #28]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	43db      	mvns	r3, r3
 80088f4:	ea02 0103 	and.w	r1, r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	430a      	orrs	r2, r1
 8008900:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b0a      	cmp	r3, #10
 8008912:	d003      	beq.n	800891c <HAL_DMA2D_ConfigLayer+0xf4>
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b09      	cmp	r3, #9
 800891a:	d106      	bne.n	800892a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008928:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	ff03000f 	.word	0xff03000f

0800894c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800894c:	b480      	push	{r7}
 800894e:	b08b      	sub	sp, #44	; 0x2c
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	041a      	lsls	r2, r3, #16
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	431a      	orrs	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008984:	d174      	bne.n	8008a70 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800898c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008994:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800899c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d108      	bne.n	80089be <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	e053      	b.n	8008a66 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d106      	bne.n	80089d4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
 80089d2:	e048      	b.n	8008a66 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d111      	bne.n	8008a00 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	0cdb      	lsrs	r3, r3, #19
 80089e0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	0a9b      	lsrs	r3, r3, #10
 80089e6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	02db      	lsls	r3, r3, #11
 80089f6:	4313      	orrs	r3, r2
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
 80089fe:	e032      	b.n	8008a66 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d117      	bne.n	8008a38 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	0fdb      	lsrs	r3, r3, #31
 8008a0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	0cdb      	lsrs	r3, r3, #19
 8008a12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	0adb      	lsrs	r3, r3, #11
 8008a18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	08db      	lsrs	r3, r3, #3
 8008a1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	029b      	lsls	r3, r3, #10
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	03db      	lsls	r3, r3, #15
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
 8008a36:	e016      	b.n	8008a66 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	0f1b      	lsrs	r3, r3, #28
 8008a3c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	0d1b      	lsrs	r3, r3, #20
 8008a42:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	0b1b      	lsrs	r3, r3, #12
 8008a48:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	091b      	lsrs	r3, r3, #4
 8008a4e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	011a      	lsls	r2, r3, #4
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	031b      	lsls	r3, r3, #12
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008a6e:	e003      	b.n	8008a78 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	60da      	str	r2, [r3, #12]
}
 8008a78:	bf00      	nop
 8008a7a:	372c      	adds	r7, #44	; 0x2c
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e06a      	b.n	8008b6c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d106      	bne.n	8008aae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2223      	movs	r2, #35	; 0x23
 8008aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fa f835 	bl	8002b18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aae:	4b31      	ldr	r3, [pc, #196]	; (8008b74 <HAL_ETH_Init+0xf0>)
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab2:	4a30      	ldr	r2, [pc, #192]	; (8008b74 <HAL_ETH_Init+0xf0>)
 8008ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <HAL_ETH_Init+0xf0>)
 8008abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008ac6:	4b2c      	ldr	r3, [pc, #176]	; (8008b78 <HAL_ETH_Init+0xf4>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	4a2b      	ldr	r2, [pc, #172]	; (8008b78 <HAL_ETH_Init+0xf4>)
 8008acc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ad0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008ad2:	4b29      	ldr	r3, [pc, #164]	; (8008b78 <HAL_ETH_Init+0xf4>)
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	4927      	ldr	r1, [pc, #156]	; (8008b78 <HAL_ETH_Init+0xf4>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8008ae0:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <HAL_ETH_Init+0xf4>)
 8008ae2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	f043 0301 	orr.w	r3, r3, #1
 8008af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008afa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008afc:	f7fe faa8 	bl	8007050 <HAL_GetTick>
 8008b00:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8008b02:	e011      	b.n	8008b28 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8008b04:	f7fe faa4 	bl	8007050 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008b12:	d909      	bls.n	8008b28 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2204      	movs	r2, #4
 8008b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	22e0      	movs	r2, #224	; 0xe0
 8008b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e021      	b.n	8008b6c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e4      	bne.n	8008b04 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f958 	bl	8008df0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f9ff 	bl	8008f44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa55 	bl	8008ff6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	461a      	mov	r2, r3
 8008b52:	2100      	movs	r1, #0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f9bd 	bl	8008ed4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2210      	movs	r2, #16
 8008b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	40023800 	.word	0x40023800
 8008b78:	40013800 	.word	0x40013800

08008b7c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4b51      	ldr	r3, [pc, #324]	; (8008cd8 <ETH_SetMACConfig+0x15c>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	7c1b      	ldrb	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <ETH_SetMACConfig+0x28>
 8008b9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008ba2:	e000      	b.n	8008ba6 <ETH_SetMACConfig+0x2a>
 8008ba4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	7c5b      	ldrb	r3, [r3, #17]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <ETH_SetMACConfig+0x38>
 8008bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bb2:	e000      	b.n	8008bb6 <ETH_SetMACConfig+0x3a>
 8008bb4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008bb6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8008bbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	7fdb      	ldrb	r3, [r3, #31]
 8008bc2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8008bc4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8008bca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	7f92      	ldrb	r2, [r2, #30]
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	d102      	bne.n	8008bda <ETH_SetMACConfig+0x5e>
 8008bd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bd8:	e000      	b.n	8008bdc <ETH_SetMACConfig+0x60>
 8008bda:	2200      	movs	r2, #0
                        macconf->Speed |
 8008bdc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	7f1b      	ldrb	r3, [r3, #28]
 8008be2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8008be4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8008bea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	791b      	ldrb	r3, [r3, #4]
 8008bf0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8008bf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008bfa:	2a00      	cmp	r2, #0
 8008bfc:	d102      	bne.n	8008c04 <ETH_SetMACConfig+0x88>
 8008bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c02:	e000      	b.n	8008c06 <ETH_SetMACConfig+0x8a>
 8008c04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8008c06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	7bdb      	ldrb	r3, [r3, #15]
 8008c0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8008c0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8008c14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008c36:	2001      	movs	r0, #1
 8008c38:	f7fe fa16 	bl	8007068 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008c52:	4013      	ands	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	d101      	bne.n	8008c6a <ETH_SetMACConfig+0xee>
 8008c66:	2280      	movs	r2, #128	; 0x80
 8008c68:	e000      	b.n	8008c6c <ETH_SetMACConfig+0xf0>
 8008c6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008c6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8008c72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8008c7a:	2a01      	cmp	r2, #1
 8008c7c:	d101      	bne.n	8008c82 <ETH_SetMACConfig+0x106>
 8008c7e:	2208      	movs	r2, #8
 8008c80:	e000      	b.n	8008c84 <ETH_SetMACConfig+0x108>
 8008c82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8008c84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8008c8c:	2a01      	cmp	r2, #1
 8008c8e:	d101      	bne.n	8008c94 <ETH_SetMACConfig+0x118>
 8008c90:	2204      	movs	r2, #4
 8008c92:	e000      	b.n	8008c96 <ETH_SetMACConfig+0x11a>
 8008c94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008c96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8008c9e:	2a01      	cmp	r2, #1
 8008ca0:	d101      	bne.n	8008ca6 <ETH_SetMACConfig+0x12a>
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	e000      	b.n	8008ca8 <ETH_SetMACConfig+0x12c>
 8008ca6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	f7fe f9d1 	bl	8007068 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	619a      	str	r2, [r3, #24]
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	ff20810f 	.word	0xff20810f

08008cdc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4b3d      	ldr	r3, [pc, #244]	; (8008dec <ETH_SetDMAConfig+0x110>)
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	7b1b      	ldrb	r3, [r3, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <ETH_SetDMAConfig+0x2c>
 8008d02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008d06:	e000      	b.n	8008d0a <ETH_SetDMAConfig+0x2e>
 8008d08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	7b5b      	ldrb	r3, [r3, #13]
 8008d0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8008d10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	7f52      	ldrb	r2, [r2, #29]
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	d102      	bne.n	8008d20 <ETH_SetDMAConfig+0x44>
 8008d1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d1e:	e000      	b.n	8008d22 <ETH_SetDMAConfig+0x46>
 8008d20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8008d22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	7b9b      	ldrb	r3, [r3, #14]
 8008d28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8008d2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8008d30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	7f1b      	ldrb	r3, [r3, #28]
 8008d36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8008d38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	7f9b      	ldrb	r3, [r3, #30]
 8008d3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8008d40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8008d46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8008d50:	4313      	orrs	r3, r2
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d60:	461a      	mov	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008d72:	2001      	movs	r0, #1
 8008d74:	f7fe f978 	bl	8007068 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d80:	461a      	mov	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	791b      	ldrb	r3, [r3, #4]
 8008d8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008d90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8008d96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008d9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008da4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8008da6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8008dae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008db4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6812      	ldr	r2, [r2, #0]
 8008dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008dc2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	f7fe f949 	bl	8007068 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dde:	461a      	mov	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	f8de3f23 	.word	0xf8de3f23

08008df0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b0a6      	sub	sp, #152	; 0x98
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008e52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e56:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008e64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff fe86 	bl	8008b7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8008e70:	2301      	movs	r3, #1
 8008e72:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008e82:	2300      	movs	r3, #0
 8008e84:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008e92:	2300      	movs	r3, #0
 8008e94:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ea4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008eaa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008eb0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008ec0:	f107 0308 	add.w	r3, r7, #8
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7ff ff08 	bl	8008cdc <ETH_SetDMAConfig>
}
 8008ecc:	bf00      	nop
 8008ece:	3798      	adds	r7, #152	; 0x98
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3305      	adds	r3, #5
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	3204      	adds	r2, #4
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <ETH_MACAddressConfig+0x68>)
 8008ef6:	4413      	add	r3, r2
 8008ef8:	461a      	mov	r2, r3
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3303      	adds	r3, #3
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	061a      	lsls	r2, r3, #24
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3302      	adds	r3, #2
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	041b      	lsls	r3, r3, #16
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3301      	adds	r3, #1
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	7812      	ldrb	r2, [r2, #0]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <ETH_MACAddressConfig+0x6c>)
 8008f26:	4413      	add	r3, r2
 8008f28:	461a      	mov	r2, r3
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	6013      	str	r3, [r2, #0]
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40028040 	.word	0x40028040
 8008f40:	40028044 	.word	0x40028044

08008f44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	e03e      	b.n	8008fd0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68d9      	ldr	r1, [r3, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	440b      	add	r3, r1
 8008f62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	3206      	adds	r2, #6
 8008f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d80c      	bhi.n	8008fb4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68d9      	ldr	r1, [r3, #12]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	440b      	add	r3, r1
 8008fac:	461a      	mov	r2, r3
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	60da      	str	r2, [r3, #12]
 8008fb2:	e004      	b.n	8008fbe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d9bd      	bls.n	8008f52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe8:	611a      	str	r2, [r3, #16]
}
 8008fea:	bf00      	nop
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e046      	b.n	8009092 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6919      	ldr	r1, [r3, #16]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	440b      	add	r3, r1
 8009014:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2200      	movs	r2, #0
 8009032:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2200      	movs	r2, #0
 8009038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009040:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8009048:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	3212      	adds	r2, #18
 800905e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d80c      	bhi.n	8009082 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6919      	ldr	r1, [r3, #16]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	440b      	add	r3, r1
 800907a:	461a      	mov	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	60da      	str	r2, [r3, #12]
 8009080:	e004      	b.n	800908c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	461a      	mov	r2, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3301      	adds	r3, #1
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b03      	cmp	r3, #3
 8009096:	d9b5      	bls.n	8009004 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691a      	ldr	r2, [r3, #16]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	60da      	str	r2, [r3, #12]
}
 80090c4:	bf00      	nop
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b089      	sub	sp, #36	; 0x24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80090e2:	2300      	movs	r3, #0
 80090e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80090e6:	2300      	movs	r3, #0
 80090e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	e175      	b.n	80093dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80090f0:	2201      	movs	r2, #1
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	fa02 f303 	lsl.w	r3, r2, r3
 80090f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4013      	ands	r3, r2
 8009102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	429a      	cmp	r2, r3
 800910a:	f040 8164 	bne.w	80093d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	2b01      	cmp	r3, #1
 8009118:	d005      	beq.n	8009126 <HAL_GPIO_Init+0x56>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f003 0303 	and.w	r3, r3, #3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d130      	bne.n	8009188 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	2203      	movs	r2, #3
 8009132:	fa02 f303 	lsl.w	r3, r2, r3
 8009136:	43db      	mvns	r3, r3
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	4013      	ands	r3, r2
 800913c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	4313      	orrs	r3, r2
 800914e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800915c:	2201      	movs	r2, #1
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	43db      	mvns	r3, r3
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	4013      	ands	r3, r2
 800916a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	091b      	lsrs	r3, r3, #4
 8009172:	f003 0201 	and.w	r2, r3, #1
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	fa02 f303 	lsl.w	r3, r2, r3
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	4313      	orrs	r3, r2
 8009180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	2b03      	cmp	r3, #3
 8009192:	d017      	beq.n	80091c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	2203      	movs	r2, #3
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	43db      	mvns	r3, r3
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	4013      	ands	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	fa02 f303 	lsl.w	r3, r2, r3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d123      	bne.n	8009218 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	08da      	lsrs	r2, r3, #3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3208      	adds	r2, #8
 80091d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	f003 0307 	and.w	r3, r3, #7
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	220f      	movs	r2, #15
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	43db      	mvns	r3, r3
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	4013      	ands	r3, r2
 80091f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	691a      	ldr	r2, [r3, #16]
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	4313      	orrs	r3, r2
 8009208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	08da      	lsrs	r2, r3, #3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3208      	adds	r2, #8
 8009212:	69b9      	ldr	r1, [r7, #24]
 8009214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	2203      	movs	r2, #3
 8009224:	fa02 f303 	lsl.w	r3, r2, r3
 8009228:	43db      	mvns	r3, r3
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	4013      	ands	r3, r2
 800922e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f003 0203 	and.w	r2, r3, #3
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	4313      	orrs	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 80be 	beq.w	80093d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800925a:	4b66      	ldr	r3, [pc, #408]	; (80093f4 <HAL_GPIO_Init+0x324>)
 800925c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925e:	4a65      	ldr	r2, [pc, #404]	; (80093f4 <HAL_GPIO_Init+0x324>)
 8009260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009264:	6453      	str	r3, [r2, #68]	; 0x44
 8009266:	4b63      	ldr	r3, [pc, #396]	; (80093f4 <HAL_GPIO_Init+0x324>)
 8009268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009272:	4a61      	ldr	r2, [pc, #388]	; (80093f8 <HAL_GPIO_Init+0x328>)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	089b      	lsrs	r3, r3, #2
 8009278:	3302      	adds	r3, #2
 800927a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800927e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	220f      	movs	r2, #15
 800928a:	fa02 f303 	lsl.w	r3, r2, r3
 800928e:	43db      	mvns	r3, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4013      	ands	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a58      	ldr	r2, [pc, #352]	; (80093fc <HAL_GPIO_Init+0x32c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d037      	beq.n	800930e <HAL_GPIO_Init+0x23e>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a57      	ldr	r2, [pc, #348]	; (8009400 <HAL_GPIO_Init+0x330>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d031      	beq.n	800930a <HAL_GPIO_Init+0x23a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a56      	ldr	r2, [pc, #344]	; (8009404 <HAL_GPIO_Init+0x334>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d02b      	beq.n	8009306 <HAL_GPIO_Init+0x236>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a55      	ldr	r2, [pc, #340]	; (8009408 <HAL_GPIO_Init+0x338>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d025      	beq.n	8009302 <HAL_GPIO_Init+0x232>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a54      	ldr	r2, [pc, #336]	; (800940c <HAL_GPIO_Init+0x33c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d01f      	beq.n	80092fe <HAL_GPIO_Init+0x22e>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a53      	ldr	r2, [pc, #332]	; (8009410 <HAL_GPIO_Init+0x340>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d019      	beq.n	80092fa <HAL_GPIO_Init+0x22a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a52      	ldr	r2, [pc, #328]	; (8009414 <HAL_GPIO_Init+0x344>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d013      	beq.n	80092f6 <HAL_GPIO_Init+0x226>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a51      	ldr	r2, [pc, #324]	; (8009418 <HAL_GPIO_Init+0x348>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d00d      	beq.n	80092f2 <HAL_GPIO_Init+0x222>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a50      	ldr	r2, [pc, #320]	; (800941c <HAL_GPIO_Init+0x34c>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d007      	beq.n	80092ee <HAL_GPIO_Init+0x21e>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a4f      	ldr	r2, [pc, #316]	; (8009420 <HAL_GPIO_Init+0x350>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d101      	bne.n	80092ea <HAL_GPIO_Init+0x21a>
 80092e6:	2309      	movs	r3, #9
 80092e8:	e012      	b.n	8009310 <HAL_GPIO_Init+0x240>
 80092ea:	230a      	movs	r3, #10
 80092ec:	e010      	b.n	8009310 <HAL_GPIO_Init+0x240>
 80092ee:	2308      	movs	r3, #8
 80092f0:	e00e      	b.n	8009310 <HAL_GPIO_Init+0x240>
 80092f2:	2307      	movs	r3, #7
 80092f4:	e00c      	b.n	8009310 <HAL_GPIO_Init+0x240>
 80092f6:	2306      	movs	r3, #6
 80092f8:	e00a      	b.n	8009310 <HAL_GPIO_Init+0x240>
 80092fa:	2305      	movs	r3, #5
 80092fc:	e008      	b.n	8009310 <HAL_GPIO_Init+0x240>
 80092fe:	2304      	movs	r3, #4
 8009300:	e006      	b.n	8009310 <HAL_GPIO_Init+0x240>
 8009302:	2303      	movs	r3, #3
 8009304:	e004      	b.n	8009310 <HAL_GPIO_Init+0x240>
 8009306:	2302      	movs	r3, #2
 8009308:	e002      	b.n	8009310 <HAL_GPIO_Init+0x240>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <HAL_GPIO_Init+0x240>
 800930e:	2300      	movs	r3, #0
 8009310:	69fa      	ldr	r2, [r7, #28]
 8009312:	f002 0203 	and.w	r2, r2, #3
 8009316:	0092      	lsls	r2, r2, #2
 8009318:	4093      	lsls	r3, r2
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	4313      	orrs	r3, r2
 800931e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009320:	4935      	ldr	r1, [pc, #212]	; (80093f8 <HAL_GPIO_Init+0x328>)
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	089b      	lsrs	r3, r3, #2
 8009326:	3302      	adds	r3, #2
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800932e:	4b3d      	ldr	r3, [pc, #244]	; (8009424 <HAL_GPIO_Init+0x354>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	43db      	mvns	r3, r3
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	4013      	ands	r3, r2
 800933c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4313      	orrs	r3, r2
 8009350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009352:	4a34      	ldr	r2, [pc, #208]	; (8009424 <HAL_GPIO_Init+0x354>)
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009358:	4b32      	ldr	r3, [pc, #200]	; (8009424 <HAL_GPIO_Init+0x354>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	43db      	mvns	r3, r3
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	4013      	ands	r3, r2
 8009366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800937c:	4a29      	ldr	r2, [pc, #164]	; (8009424 <HAL_GPIO_Init+0x354>)
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009382:	4b28      	ldr	r3, [pc, #160]	; (8009424 <HAL_GPIO_Init+0x354>)
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	43db      	mvns	r3, r3
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	4013      	ands	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80093a6:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <HAL_GPIO_Init+0x354>)
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80093ac:	4b1d      	ldr	r3, [pc, #116]	; (8009424 <HAL_GPIO_Init+0x354>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	43db      	mvns	r3, r3
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	4013      	ands	r3, r2
 80093ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80093d0:	4a14      	ldr	r2, [pc, #80]	; (8009424 <HAL_GPIO_Init+0x354>)
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2b0f      	cmp	r3, #15
 80093e0:	f67f ae86 	bls.w	80090f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	3724      	adds	r7, #36	; 0x24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	40023800 	.word	0x40023800
 80093f8:	40013800 	.word	0x40013800
 80093fc:	40020000 	.word	0x40020000
 8009400:	40020400 	.word	0x40020400
 8009404:	40020800 	.word	0x40020800
 8009408:	40020c00 	.word	0x40020c00
 800940c:	40021000 	.word	0x40021000
 8009410:	40021400 	.word	0x40021400
 8009414:	40021800 	.word	0x40021800
 8009418:	40021c00 	.word	0x40021c00
 800941c:	40022000 	.word	0x40022000
 8009420:	40022400 	.word	0x40022400
 8009424:	40013c00 	.word	0x40013c00

08009428 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009432:	2300      	movs	r3, #0
 8009434:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009436:	2300      	movs	r3, #0
 8009438:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800943a:	2300      	movs	r3, #0
 800943c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	e0d9      	b.n	80095f8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009444:	2201      	movs	r2, #1
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	fa02 f303 	lsl.w	r3, r2, r3
 800944c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	4013      	ands	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	429a      	cmp	r2, r3
 800945c:	f040 80c9 	bne.w	80095f2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009460:	4a6b      	ldr	r2, [pc, #428]	; (8009610 <HAL_GPIO_DeInit+0x1e8>)
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	089b      	lsrs	r3, r3, #2
 8009466:	3302      	adds	r3, #2
 8009468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800946c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	220f      	movs	r2, #15
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	4013      	ands	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a63      	ldr	r2, [pc, #396]	; (8009614 <HAL_GPIO_DeInit+0x1ec>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d037      	beq.n	80094fa <HAL_GPIO_DeInit+0xd2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a62      	ldr	r2, [pc, #392]	; (8009618 <HAL_GPIO_DeInit+0x1f0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d031      	beq.n	80094f6 <HAL_GPIO_DeInit+0xce>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a61      	ldr	r2, [pc, #388]	; (800961c <HAL_GPIO_DeInit+0x1f4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d02b      	beq.n	80094f2 <HAL_GPIO_DeInit+0xca>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a60      	ldr	r2, [pc, #384]	; (8009620 <HAL_GPIO_DeInit+0x1f8>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d025      	beq.n	80094ee <HAL_GPIO_DeInit+0xc6>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a5f      	ldr	r2, [pc, #380]	; (8009624 <HAL_GPIO_DeInit+0x1fc>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d01f      	beq.n	80094ea <HAL_GPIO_DeInit+0xc2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a5e      	ldr	r2, [pc, #376]	; (8009628 <HAL_GPIO_DeInit+0x200>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d019      	beq.n	80094e6 <HAL_GPIO_DeInit+0xbe>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a5d      	ldr	r2, [pc, #372]	; (800962c <HAL_GPIO_DeInit+0x204>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d013      	beq.n	80094e2 <HAL_GPIO_DeInit+0xba>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a5c      	ldr	r2, [pc, #368]	; (8009630 <HAL_GPIO_DeInit+0x208>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00d      	beq.n	80094de <HAL_GPIO_DeInit+0xb6>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a5b      	ldr	r2, [pc, #364]	; (8009634 <HAL_GPIO_DeInit+0x20c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d007      	beq.n	80094da <HAL_GPIO_DeInit+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a5a      	ldr	r2, [pc, #360]	; (8009638 <HAL_GPIO_DeInit+0x210>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d101      	bne.n	80094d6 <HAL_GPIO_DeInit+0xae>
 80094d2:	2309      	movs	r3, #9
 80094d4:	e012      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094d6:	230a      	movs	r3, #10
 80094d8:	e010      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094da:	2308      	movs	r3, #8
 80094dc:	e00e      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094de:	2307      	movs	r3, #7
 80094e0:	e00c      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094e2:	2306      	movs	r3, #6
 80094e4:	e00a      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094e6:	2305      	movs	r3, #5
 80094e8:	e008      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094ea:	2304      	movs	r3, #4
 80094ec:	e006      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094ee:	2303      	movs	r3, #3
 80094f0:	e004      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e002      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <HAL_GPIO_DeInit+0xd4>
 80094fa:	2300      	movs	r3, #0
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	f002 0203 	and.w	r2, r2, #3
 8009502:	0092      	lsls	r2, r2, #2
 8009504:	4093      	lsls	r3, r2
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	429a      	cmp	r2, r3
 800950a:	d132      	bne.n	8009572 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800950c:	4b4b      	ldr	r3, [pc, #300]	; (800963c <HAL_GPIO_DeInit+0x214>)
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	43db      	mvns	r3, r3
 8009514:	4949      	ldr	r1, [pc, #292]	; (800963c <HAL_GPIO_DeInit+0x214>)
 8009516:	4013      	ands	r3, r2
 8009518:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800951a:	4b48      	ldr	r3, [pc, #288]	; (800963c <HAL_GPIO_DeInit+0x214>)
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	43db      	mvns	r3, r3
 8009522:	4946      	ldr	r1, [pc, #280]	; (800963c <HAL_GPIO_DeInit+0x214>)
 8009524:	4013      	ands	r3, r2
 8009526:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009528:	4b44      	ldr	r3, [pc, #272]	; (800963c <HAL_GPIO_DeInit+0x214>)
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	43db      	mvns	r3, r3
 8009530:	4942      	ldr	r1, [pc, #264]	; (800963c <HAL_GPIO_DeInit+0x214>)
 8009532:	4013      	ands	r3, r2
 8009534:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009536:	4b41      	ldr	r3, [pc, #260]	; (800963c <HAL_GPIO_DeInit+0x214>)
 8009538:	689a      	ldr	r2, [r3, #8]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	43db      	mvns	r3, r3
 800953e:	493f      	ldr	r1, [pc, #252]	; (800963c <HAL_GPIO_DeInit+0x214>)
 8009540:	4013      	ands	r3, r2
 8009542:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	220f      	movs	r2, #15
 800954e:	fa02 f303 	lsl.w	r3, r2, r3
 8009552:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009554:	4a2e      	ldr	r2, [pc, #184]	; (8009610 <HAL_GPIO_DeInit+0x1e8>)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	089b      	lsrs	r3, r3, #2
 800955a:	3302      	adds	r3, #2
 800955c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	43da      	mvns	r2, r3
 8009564:	482a      	ldr	r0, [pc, #168]	; (8009610 <HAL_GPIO_DeInit+0x1e8>)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	089b      	lsrs	r3, r3, #2
 800956a:	400a      	ands	r2, r1
 800956c:	3302      	adds	r3, #2
 800956e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	2103      	movs	r1, #3
 800957c:	fa01 f303 	lsl.w	r3, r1, r3
 8009580:	43db      	mvns	r3, r3
 8009582:	401a      	ands	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	08da      	lsrs	r2, r3, #3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3208      	adds	r2, #8
 8009590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	220f      	movs	r2, #15
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	43db      	mvns	r3, r3
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	08d2      	lsrs	r2, r2, #3
 80095a8:	4019      	ands	r1, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3208      	adds	r2, #8
 80095ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	2103      	movs	r1, #3
 80095bc:	fa01 f303 	lsl.w	r3, r1, r3
 80095c0:	43db      	mvns	r3, r3
 80095c2:	401a      	ands	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	2101      	movs	r1, #1
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	43db      	mvns	r3, r3
 80095d6:	401a      	ands	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	2103      	movs	r1, #3
 80095e6:	fa01 f303 	lsl.w	r3, r1, r3
 80095ea:	43db      	mvns	r3, r3
 80095ec:	401a      	ands	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	3301      	adds	r3, #1
 80095f6:	617b      	str	r3, [r7, #20]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2b0f      	cmp	r3, #15
 80095fc:	f67f af22 	bls.w	8009444 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40013800 	.word	0x40013800
 8009614:	40020000 	.word	0x40020000
 8009618:	40020400 	.word	0x40020400
 800961c:	40020800 	.word	0x40020800
 8009620:	40020c00 	.word	0x40020c00
 8009624:	40021000 	.word	0x40021000
 8009628:	40021400 	.word	0x40021400
 800962c:	40021800 	.word	0x40021800
 8009630:	40021c00 	.word	0x40021c00
 8009634:	40022000 	.word	0x40022000
 8009638:	40022400 	.word	0x40022400
 800963c:	40013c00 	.word	0x40013c00

08009640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	887b      	ldrh	r3, [r7, #2]
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009658:	2301      	movs	r3, #1
 800965a:	73fb      	strb	r3, [r7, #15]
 800965c:	e001      	b.n	8009662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	807b      	strh	r3, [r7, #2]
 800967c:	4613      	mov	r3, r2
 800967e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009680:	787b      	ldrb	r3, [r7, #1]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009686:	887a      	ldrh	r2, [r7, #2]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800968c:	e003      	b.n	8009696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800968e:	887b      	ldrh	r3, [r7, #2]
 8009690:	041a      	lsls	r2, r3, #16
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	619a      	str	r2, [r3, #24]
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80096a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a4:	b08f      	sub	sp, #60	; 0x3c
 80096a6:	af0a      	add	r7, sp, #40	; 0x28
 80096a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e054      	b.n	800975e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f013 f806 	bl	801c6e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2203      	movs	r2, #3
 80096d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f009 fb93 	bl	8012e1e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	687e      	ldr	r6, [r7, #4]
 8009700:	466d      	mov	r5, sp
 8009702:	f106 0410 	add.w	r4, r6, #16
 8009706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800970c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800970e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009712:	e885 0003 	stmia.w	r5, {r0, r1}
 8009716:	1d33      	adds	r3, r6, #4
 8009718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800971a:	6838      	ldr	r0, [r7, #0]
 800971c:	f009 fb16 	bl	8012d4c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2101      	movs	r1, #1
 8009726:	4618      	mov	r0, r3
 8009728:	f009 fb8a 	bl	8012e40 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	687e      	ldr	r6, [r7, #4]
 8009734:	466d      	mov	r5, sp
 8009736:	f106 0410 	add.w	r4, r6, #16
 800973a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800973c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800973e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009746:	e885 0003 	stmia.w	r5, {r0, r1}
 800974a:	1d33      	adds	r3, r6, #4
 800974c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800974e:	6838      	ldr	r0, [r7, #0]
 8009750:	f009 fd32 	bl	80131b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009766 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009766:	b590      	push	{r4, r7, lr}
 8009768:	b089      	sub	sp, #36	; 0x24
 800976a:	af04      	add	r7, sp, #16
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	4608      	mov	r0, r1
 8009770:	4611      	mov	r1, r2
 8009772:	461a      	mov	r2, r3
 8009774:	4603      	mov	r3, r0
 8009776:	70fb      	strb	r3, [r7, #3]
 8009778:	460b      	mov	r3, r1
 800977a:	70bb      	strb	r3, [r7, #2]
 800977c:	4613      	mov	r3, r2
 800977e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_HCD_HC_Init+0x28>
 800978a:	2302      	movs	r3, #2
 800978c:	e076      	b.n	800987c <HAL_HCD_HC_Init+0x116>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	212c      	movs	r1, #44	; 0x2c
 800979c:	fb01 f303 	mul.w	r3, r1, r3
 80097a0:	4413      	add	r3, r2
 80097a2:	333d      	adds	r3, #61	; 0x3d
 80097a4:	2200      	movs	r2, #0
 80097a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	212c      	movs	r1, #44	; 0x2c
 80097ae:	fb01 f303 	mul.w	r3, r1, r3
 80097b2:	4413      	add	r3, r2
 80097b4:	3338      	adds	r3, #56	; 0x38
 80097b6:	787a      	ldrb	r2, [r7, #1]
 80097b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	212c      	movs	r1, #44	; 0x2c
 80097c0:	fb01 f303 	mul.w	r3, r1, r3
 80097c4:	4413      	add	r3, r2
 80097c6:	3340      	adds	r3, #64	; 0x40
 80097c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80097ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	212c      	movs	r1, #44	; 0x2c
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	3339      	adds	r3, #57	; 0x39
 80097da:	78fa      	ldrb	r2, [r7, #3]
 80097dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	212c      	movs	r1, #44	; 0x2c
 80097e4:	fb01 f303 	mul.w	r3, r1, r3
 80097e8:	4413      	add	r3, r2
 80097ea:	333f      	adds	r3, #63	; 0x3f
 80097ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80097f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	78ba      	ldrb	r2, [r7, #2]
 80097f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097fa:	b2d0      	uxtb	r0, r2
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	212c      	movs	r1, #44	; 0x2c
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	4413      	add	r3, r2
 8009806:	333a      	adds	r3, #58	; 0x3a
 8009808:	4602      	mov	r2, r0
 800980a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800980c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009810:	2b00      	cmp	r3, #0
 8009812:	da09      	bge.n	8009828 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	212c      	movs	r1, #44	; 0x2c
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	333b      	adds	r3, #59	; 0x3b
 8009822:	2201      	movs	r2, #1
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	e008      	b.n	800983a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	212c      	movs	r1, #44	; 0x2c
 800982e:	fb01 f303 	mul.w	r3, r1, r3
 8009832:	4413      	add	r3, r2
 8009834:	333b      	adds	r3, #59	; 0x3b
 8009836:	2200      	movs	r2, #0
 8009838:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	212c      	movs	r1, #44	; 0x2c
 8009840:	fb01 f303 	mul.w	r3, r1, r3
 8009844:	4413      	add	r3, r2
 8009846:	333c      	adds	r3, #60	; 0x3c
 8009848:	f897 2020 	ldrb.w	r2, [r7, #32]
 800984c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	787c      	ldrb	r4, [r7, #1]
 8009854:	78ba      	ldrb	r2, [r7, #2]
 8009856:	78f9      	ldrb	r1, [r7, #3]
 8009858:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4623      	mov	r3, r4
 800986a:	f009 fe1f 	bl	80134ac <USB_HC_Init>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	bd90      	pop	{r4, r7, pc}

08009884 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_HCD_HC_Halt+0x1e>
 800989e:	2302      	movs	r3, #2
 80098a0:	e00f      	b.n	80098c2 <HAL_HCD_HC_Halt+0x3e>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f00a f86f 	bl	8013996 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	4608      	mov	r0, r1
 80098d6:	4611      	mov	r1, r2
 80098d8:	461a      	mov	r2, r3
 80098da:	4603      	mov	r3, r0
 80098dc:	70fb      	strb	r3, [r7, #3]
 80098de:	460b      	mov	r3, r1
 80098e0:	70bb      	strb	r3, [r7, #2]
 80098e2:	4613      	mov	r3, r2
 80098e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	212c      	movs	r1, #44	; 0x2c
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	4413      	add	r3, r2
 80098f2:	333b      	adds	r3, #59	; 0x3b
 80098f4:	78ba      	ldrb	r2, [r7, #2]
 80098f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	212c      	movs	r1, #44	; 0x2c
 80098fe:	fb01 f303 	mul.w	r3, r1, r3
 8009902:	4413      	add	r3, r2
 8009904:	333f      	adds	r3, #63	; 0x3f
 8009906:	787a      	ldrb	r2, [r7, #1]
 8009908:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800990a:	7c3b      	ldrb	r3, [r7, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d112      	bne.n	8009936 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	212c      	movs	r1, #44	; 0x2c
 8009916:	fb01 f303 	mul.w	r3, r1, r3
 800991a:	4413      	add	r3, r2
 800991c:	3342      	adds	r3, #66	; 0x42
 800991e:	2203      	movs	r2, #3
 8009920:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	212c      	movs	r1, #44	; 0x2c
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	4413      	add	r3, r2
 800992e:	333d      	adds	r3, #61	; 0x3d
 8009930:	7f3a      	ldrb	r2, [r7, #28]
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e008      	b.n	8009948 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	212c      	movs	r1, #44	; 0x2c
 800993c:	fb01 f303 	mul.w	r3, r1, r3
 8009940:	4413      	add	r3, r2
 8009942:	3342      	adds	r3, #66	; 0x42
 8009944:	2202      	movs	r2, #2
 8009946:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009948:	787b      	ldrb	r3, [r7, #1]
 800994a:	2b03      	cmp	r3, #3
 800994c:	f200 80c6 	bhi.w	8009adc <HAL_HCD_HC_SubmitRequest+0x210>
 8009950:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8009952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009956:	bf00      	nop
 8009958:	08009969 	.word	0x08009969
 800995c:	08009ac9 	.word	0x08009ac9
 8009960:	080099cd 	.word	0x080099cd
 8009964:	08009a4b 	.word	0x08009a4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009968:	7c3b      	ldrb	r3, [r7, #16]
 800996a:	2b01      	cmp	r3, #1
 800996c:	f040 80b8 	bne.w	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>
 8009970:	78bb      	ldrb	r3, [r7, #2]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f040 80b4 	bne.w	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009978:	8b3b      	ldrh	r3, [r7, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d108      	bne.n	8009990 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	212c      	movs	r1, #44	; 0x2c
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	4413      	add	r3, r2
 800998a:	3355      	adds	r3, #85	; 0x55
 800998c:	2201      	movs	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	212c      	movs	r1, #44	; 0x2c
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	3355      	adds	r3, #85	; 0x55
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	212c      	movs	r1, #44	; 0x2c
 80099aa:	fb01 f303 	mul.w	r3, r1, r3
 80099ae:	4413      	add	r3, r2
 80099b0:	3342      	adds	r3, #66	; 0x42
 80099b2:	2200      	movs	r2, #0
 80099b4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80099b6:	e093      	b.n	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	212c      	movs	r1, #44	; 0x2c
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	4413      	add	r3, r2
 80099c4:	3342      	adds	r3, #66	; 0x42
 80099c6:	2202      	movs	r2, #2
 80099c8:	701a      	strb	r2, [r3, #0]
      break;
 80099ca:	e089      	b.n	8009ae0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80099cc:	78bb      	ldrb	r3, [r7, #2]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d11d      	bne.n	8009a0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	212c      	movs	r1, #44	; 0x2c
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	4413      	add	r3, r2
 80099de:	3355      	adds	r3, #85	; 0x55
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d109      	bne.n	80099fa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	212c      	movs	r1, #44	; 0x2c
 80099ec:	fb01 f303 	mul.w	r3, r1, r3
 80099f0:	4413      	add	r3, r2
 80099f2:	3342      	adds	r3, #66	; 0x42
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80099f8:	e073      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	212c      	movs	r1, #44	; 0x2c
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	4413      	add	r3, r2
 8009a06:	3342      	adds	r3, #66	; 0x42
 8009a08:	2202      	movs	r2, #2
 8009a0a:	701a      	strb	r2, [r3, #0]
      break;
 8009a0c:	e069      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	212c      	movs	r1, #44	; 0x2c
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	4413      	add	r3, r2
 8009a1a:	3354      	adds	r3, #84	; 0x54
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	212c      	movs	r1, #44	; 0x2c
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3342      	adds	r3, #66	; 0x42
 8009a30:	2200      	movs	r2, #0
 8009a32:	701a      	strb	r2, [r3, #0]
      break;
 8009a34:	e055      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	212c      	movs	r1, #44	; 0x2c
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	4413      	add	r3, r2
 8009a42:	3342      	adds	r3, #66	; 0x42
 8009a44:	2202      	movs	r2, #2
 8009a46:	701a      	strb	r2, [r3, #0]
      break;
 8009a48:	e04b      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009a4a:	78bb      	ldrb	r3, [r7, #2]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d11d      	bne.n	8009a8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	212c      	movs	r1, #44	; 0x2c
 8009a56:	fb01 f303 	mul.w	r3, r1, r3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3355      	adds	r3, #85	; 0x55
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	212c      	movs	r1, #44	; 0x2c
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	4413      	add	r3, r2
 8009a70:	3342      	adds	r3, #66	; 0x42
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009a76:	e034      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	212c      	movs	r1, #44	; 0x2c
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	3342      	adds	r3, #66	; 0x42
 8009a86:	2202      	movs	r2, #2
 8009a88:	701a      	strb	r2, [r3, #0]
      break;
 8009a8a:	e02a      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	212c      	movs	r1, #44	; 0x2c
 8009a92:	fb01 f303 	mul.w	r3, r1, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	3354      	adds	r3, #84	; 0x54
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d109      	bne.n	8009ab4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	212c      	movs	r1, #44	; 0x2c
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	3342      	adds	r3, #66	; 0x42
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
      break;
 8009ab2:	e016      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	212c      	movs	r1, #44	; 0x2c
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	4413      	add	r3, r2
 8009ac0:	3342      	adds	r3, #66	; 0x42
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	701a      	strb	r2, [r3, #0]
      break;
 8009ac6:	e00c      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	212c      	movs	r1, #44	; 0x2c
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3342      	adds	r3, #66	; 0x42
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
      break;
 8009ada:	e002      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009adc:	bf00      	nop
 8009ade:	e000      	b.n	8009ae2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009ae0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	212c      	movs	r1, #44	; 0x2c
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	4413      	add	r3, r2
 8009aee:	3344      	adds	r3, #68	; 0x44
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	8b3a      	ldrh	r2, [r7, #24]
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	202c      	movs	r0, #44	; 0x2c
 8009afc:	fb00 f303 	mul.w	r3, r0, r3
 8009b00:	440b      	add	r3, r1
 8009b02:	334c      	adds	r3, #76	; 0x4c
 8009b04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	212c      	movs	r1, #44	; 0x2c
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	3360      	adds	r3, #96	; 0x60
 8009b14:	2200      	movs	r2, #0
 8009b16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	212c      	movs	r1, #44	; 0x2c
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	3350      	adds	r3, #80	; 0x50
 8009b26:	2200      	movs	r2, #0
 8009b28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	212c      	movs	r1, #44	; 0x2c
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	3339      	adds	r3, #57	; 0x39
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	212c      	movs	r1, #44	; 0x2c
 8009b42:	fb01 f303 	mul.w	r3, r1, r3
 8009b46:	4413      	add	r3, r2
 8009b48:	3361      	adds	r3, #97	; 0x61
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	222c      	movs	r2, #44	; 0x2c
 8009b56:	fb02 f303 	mul.w	r3, r2, r3
 8009b5a:	3338      	adds	r3, #56	; 0x38
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	18d1      	adds	r1, r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	f009 fdc2 	bl	80136f0 <USB_HC_StartXfer>
 8009b6c:	4603      	mov	r3, r0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop

08009b78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f009 fad0 	bl	8013134 <USB_GetMode>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	f040 80f6 	bne.w	8009d88 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f009 fa93 	bl	80130cc <USB_ReadInterrupts>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 80ec 	beq.w	8009d86 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f009 fa8a 	bl	80130cc <USB_ReadInterrupts>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc2:	d104      	bne.n	8009bce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f009 fa7a 	bl	80130cc <USB_ReadInterrupts>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009be2:	d104      	bne.n	8009bee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f009 fa6a 	bl	80130cc <USB_ReadInterrupts>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c02:	d104      	bne.n	8009c0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f009 fa5a 	bl	80130cc <USB_ReadInterrupts>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d103      	bne.n	8009c2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2202      	movs	r2, #2
 8009c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f009 fa4c 	bl	80130cc <USB_ReadInterrupts>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c3e:	d11c      	bne.n	8009c7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009c48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10f      	bne.n	8009c7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009c5a:	2110      	movs	r1, #16
 8009c5c:	6938      	ldr	r0, [r7, #16]
 8009c5e:	f009 f93b 	bl	8012ed8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009c62:	6938      	ldr	r0, [r7, #16]
 8009c64:	f009 f96c 	bl	8012f40 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f009 fb56 	bl	8013320 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f012 fda5 	bl	801c7c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f009 fa24 	bl	80130cc <USB_ReadInterrupts>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c8e:	d102      	bne.n	8009c96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 f9ce 	bl	800b032 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f009 fa16 	bl	80130cc <USB_ReadInterrupts>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f003 0308 	and.w	r3, r3, #8
 8009ca6:	2b08      	cmp	r3, #8
 8009ca8:	d106      	bne.n	8009cb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f012 fd6e 	bl	801c78c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f009 fa05 	bl	80130cc <USB_ReadInterrupts>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b10      	cmp	r3, #16
 8009cca:	d101      	bne.n	8009cd0 <HAL_HCD_IRQHandler+0x158>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e000      	b.n	8009cd2 <HAL_HCD_IRQHandler+0x15a>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d012      	beq.n	8009cfc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	699a      	ldr	r2, [r3, #24]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f022 0210 	bic.w	r2, r2, #16
 8009ce4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 f8d1 	bl	800ae8e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f042 0210 	orr.w	r2, r2, #16
 8009cfa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f009 f9e3 	bl	80130cc <USB_ReadInterrupts>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d10:	d13a      	bne.n	8009d88 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f009 fe2c 	bl	8013974 <USB_HC_ReadInterrupt>
 8009d1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]
 8009d22:	e025      	b.n	8009d70 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d018      	beq.n	8009d6a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d4e:	d106      	bne.n	8009d5e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8ab 	bl	8009eb2 <HCD_HC_IN_IRQHandler>
 8009d5c:	e005      	b.n	8009d6a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fcc6 	bl	800a6f6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d3d4      	bcc.n	8009d24 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d82:	615a      	str	r2, [r3, #20]
 8009d84:	e000      	b.n	8009d88 <HAL_HCD_IRQHandler+0x210>
      return;
 8009d86:	bf00      	nop
    }
  }
}
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <HAL_HCD_Start+0x16>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e013      	b.n	8009dcc <HAL_HCD_Start+0x3e>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2101      	movs	r1, #1
 8009db2:	4618      	mov	r0, r3
 8009db4:	f009 fb18 	bl	80133e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f009 f81d 	bl	8012dfc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_HCD_Stop+0x16>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e00d      	b.n	8009e06 <HAL_HCD_Stop+0x32>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f009 ff06 	bl	8013c08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f009 faba 	bl	8013394 <USB_ResetPort>
 8009e20:	4603      	mov	r3, r0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009e36:	78fb      	ldrb	r3, [r7, #3]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	212c      	movs	r1, #44	; 0x2c
 8009e3c:	fb01 f303 	mul.w	r3, r1, r3
 8009e40:	4413      	add	r3, r2
 8009e42:	3360      	adds	r3, #96	; 0x60
 8009e44:	781b      	ldrb	r3, [r3, #0]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	212c      	movs	r1, #44	; 0x2c
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	4413      	add	r3, r2
 8009e6a:	3350      	adds	r3, #80	; 0x50
 8009e6c:	681b      	ldr	r3, [r3, #0]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f009 fafe 	bl	8013488 <USB_GetCurrentFrame>
 8009e8c:	4603      	mov	r3, r0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f009 fad9 	bl	801345a <USB_GetHostSpeed>
 8009ea8:	4603      	mov	r3, r0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b086      	sub	sp, #24
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f009 f90b 	bl	80130f2 <USB_ReadChInterrupts>
 8009edc:	4603      	mov	r3, r0
 8009ede:	f003 0304 	and.w	r3, r3, #4
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d11a      	bne.n	8009f1c <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	212c      	movs	r1, #44	; 0x2c
 8009efe:	fb01 f303 	mul.w	r3, r1, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	3361      	adds	r3, #97	; 0x61
 8009f06:	2207      	movs	r2, #7
 8009f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	4611      	mov	r1, r2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f009 fd3e 	bl	8013996 <USB_HC_Halt>
 8009f1a:	e0a2      	b.n	800a062 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	b2d2      	uxtb	r2, r2
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f009 f8e3 	bl	80130f2 <USB_ReadChInterrupts>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f36:	d11b      	bne.n	8009f70 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f44:	461a      	mov	r2, r3
 8009f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	212c      	movs	r1, #44	; 0x2c
 8009f52:	fb01 f303 	mul.w	r3, r1, r3
 8009f56:	4413      	add	r3, r2
 8009f58:	3361      	adds	r3, #97	; 0x61
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	b2d2      	uxtb	r2, r2
 8009f66:	4611      	mov	r1, r2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f009 fd14 	bl	8013996 <USB_HC_Halt>
 8009f6e:	e078      	b.n	800a062 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f009 f8b9 	bl	80130f2 <USB_ReadChInterrupts>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b08      	cmp	r3, #8
 8009f88:	d11a      	bne.n	8009fc0 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f96:	461a      	mov	r2, r3
 8009f98:	2308      	movs	r3, #8
 8009f9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	212c      	movs	r1, #44	; 0x2c
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3361      	adds	r3, #97	; 0x61
 8009faa:	2206      	movs	r2, #6
 8009fac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	b2d2      	uxtb	r2, r2
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f009 fcec 	bl	8013996 <USB_HC_Halt>
 8009fbe:	e050      	b.n	800a062 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f009 f891 	bl	80130f2 <USB_ReadChInterrupts>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fda:	d11b      	bne.n	800a014 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	212c      	movs	r1, #44	; 0x2c
 8009ff6:	fb01 f303 	mul.w	r3, r1, r3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3361      	adds	r3, #97	; 0x61
 8009ffe:	2209      	movs	r2, #9
 800a000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f009 fcc2 	bl	8013996 <USB_HC_Halt>
 800a012:	e026      	b.n	800a062 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f009 f867 	bl	80130f2 <USB_ReadChInterrupts>
 800a024:	4603      	mov	r3, r0
 800a026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02a:	2b80      	cmp	r3, #128	; 0x80
 800a02c:	d119      	bne.n	800a062 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	4413      	add	r3, r2
 800a036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03a:	461a      	mov	r2, r3
 800a03c:	2380      	movs	r3, #128	; 0x80
 800a03e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	212c      	movs	r1, #44	; 0x2c
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	4413      	add	r3, r2
 800a04c:	3361      	adds	r3, #97	; 0x61
 800a04e:	2207      	movs	r2, #7
 800a050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	b2d2      	uxtb	r2, r2
 800a05a:	4611      	mov	r1, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f009 fc9a 	bl	8013996 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f009 f840 	bl	80130f2 <USB_ReadChInterrupts>
 800a072:	4603      	mov	r3, r0
 800a074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a07c:	d112      	bne.n	800a0a4 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f009 fc84 	bl	8013996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	4413      	add	r3, r2
 800a096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09a:	461a      	mov	r2, r3
 800a09c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0a0:	6093      	str	r3, [r2, #8]
 800a0a2:	e325      	b.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f009 f81f 	bl	80130f2 <USB_ReadChInterrupts>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	f040 80e8 	bne.w	800a290 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2320      	movs	r3, #32
 800a0d0:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d019      	beq.n	800a10e <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	212c      	movs	r1, #44	; 0x2c
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	3348      	adds	r3, #72	; 0x48
 800a0e8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	0159      	lsls	r1, r3, #5
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	440b      	add	r3, r1
 800a0f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a0fc:	1ad2      	subs	r2, r2, r3
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	202c      	movs	r0, #44	; 0x2c
 800a104:	fb00 f303 	mul.w	r3, r0, r3
 800a108:	440b      	add	r3, r1
 800a10a:	3350      	adds	r3, #80	; 0x50
 800a10c:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	212c      	movs	r1, #44	; 0x2c
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	4413      	add	r3, r2
 800a11a:	3361      	adds	r3, #97	; 0x61
 800a11c:	2201      	movs	r2, #1
 800a11e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	212c      	movs	r1, #44	; 0x2c
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	335c      	adds	r3, #92	; 0x5c
 800a12e:	2200      	movs	r2, #0
 800a130:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a13e:	461a      	mov	r2, r3
 800a140:	2301      	movs	r3, #1
 800a142:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	212c      	movs	r1, #44	; 0x2c
 800a14a:	fb01 f303 	mul.w	r3, r1, r3
 800a14e:	4413      	add	r3, r2
 800a150:	333f      	adds	r3, #63	; 0x3f
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d009      	beq.n	800a16c <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	212c      	movs	r1, #44	; 0x2c
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	4413      	add	r3, r2
 800a164:	333f      	adds	r3, #63	; 0x3f
 800a166:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d111      	bne.n	800a190 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f009 fc0d 	bl	8013996 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	4413      	add	r3, r2
 800a184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a188:	461a      	mov	r2, r3
 800a18a:	2310      	movs	r3, #16
 800a18c:	6093      	str	r3, [r2, #8]
 800a18e:	e03a      	b.n	800a206 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	212c      	movs	r1, #44	; 0x2c
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	4413      	add	r3, r2
 800a19c:	333f      	adds	r3, #63	; 0x3f
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d009      	beq.n	800a1b8 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	212c      	movs	r1, #44	; 0x2c
 800a1aa:	fb01 f303 	mul.w	r3, r1, r3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	333f      	adds	r3, #63	; 0x3f
 800a1b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d126      	bne.n	800a206 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	212c      	movs	r1, #44	; 0x2c
 800a1de:	fb01 f303 	mul.w	r3, r1, r3
 800a1e2:	4413      	add	r3, r2
 800a1e4:	3360      	adds	r3, #96	; 0x60
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	b2d9      	uxtb	r1, r3
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	202c      	movs	r0, #44	; 0x2c
 800a1f4:	fb00 f303 	mul.w	r3, r0, r3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	3360      	adds	r3, #96	; 0x60
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f012 faed 	bl	801c7e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d12b      	bne.n	800a266 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	212c      	movs	r1, #44	; 0x2c
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	4413      	add	r3, r2
 800a21a:	3348      	adds	r3, #72	; 0x48
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	202c      	movs	r0, #44	; 0x2c
 800a224:	fb00 f202 	mul.w	r2, r0, r2
 800a228:	440a      	add	r2, r1
 800a22a:	3240      	adds	r2, #64	; 0x40
 800a22c:	8812      	ldrh	r2, [r2, #0]
 800a22e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 825a 	beq.w	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	212c      	movs	r1, #44	; 0x2c
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	3354      	adds	r3, #84	; 0x54
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	f083 0301 	eor.w	r3, r3, #1
 800a250:	b2d8      	uxtb	r0, r3
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	212c      	movs	r1, #44	; 0x2c
 800a258:	fb01 f303 	mul.w	r3, r1, r3
 800a25c:	4413      	add	r3, r2
 800a25e:	3354      	adds	r3, #84	; 0x54
 800a260:	4602      	mov	r2, r0
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	e244      	b.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	212c      	movs	r1, #44	; 0x2c
 800a26c:	fb01 f303 	mul.w	r3, r1, r3
 800a270:	4413      	add	r3, r2
 800a272:	3354      	adds	r3, #84	; 0x54
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	f083 0301 	eor.w	r3, r3, #1
 800a27a:	b2d8      	uxtb	r0, r3
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	212c      	movs	r1, #44	; 0x2c
 800a282:	fb01 f303 	mul.w	r3, r1, r3
 800a286:	4413      	add	r3, r2
 800a288:	3354      	adds	r3, #84	; 0x54
 800a28a:	4602      	mov	r2, r0
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	e22f      	b.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f008 ff29 	bl	80130f2 <USB_ReadChInterrupts>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d109      	bne.n	800a2be <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	6093      	str	r3, [r2, #8]
 800a2bc:	e218      	b.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	b2d2      	uxtb	r2, r2
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f008 ff12 	bl	80130f2 <USB_ReadChInterrupts>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	f040 816b 	bne.w	800a5b0 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	212c      	movs	r1, #44	; 0x2c
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3361      	adds	r3, #97	; 0x61
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d112      	bne.n	800a326 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	212c      	movs	r1, #44	; 0x2c
 800a306:	fb01 f303 	mul.w	r3, r1, r3
 800a30a:	4413      	add	r3, r2
 800a30c:	3361      	adds	r3, #97	; 0x61
 800a30e:	2202      	movs	r2, #2
 800a310:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	212c      	movs	r1, #44	; 0x2c
 800a318:	fb01 f303 	mul.w	r3, r1, r3
 800a31c:	4413      	add	r3, r2
 800a31e:	3360      	adds	r3, #96	; 0x60
 800a320:	2201      	movs	r2, #1
 800a322:	701a      	strb	r2, [r3, #0]
 800a324:	e135      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	212c      	movs	r1, #44	; 0x2c
 800a32c:	fb01 f303 	mul.w	r3, r1, r3
 800a330:	4413      	add	r3, r2
 800a332:	3361      	adds	r3, #97	; 0x61
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b06      	cmp	r3, #6
 800a338:	d112      	bne.n	800a360 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	212c      	movs	r1, #44	; 0x2c
 800a340:	fb01 f303 	mul.w	r3, r1, r3
 800a344:	4413      	add	r3, r2
 800a346:	3361      	adds	r3, #97	; 0x61
 800a348:	2202      	movs	r2, #2
 800a34a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	212c      	movs	r1, #44	; 0x2c
 800a352:	fb01 f303 	mul.w	r3, r1, r3
 800a356:	4413      	add	r3, r2
 800a358:	3360      	adds	r3, #96	; 0x60
 800a35a:	2205      	movs	r2, #5
 800a35c:	701a      	strb	r2, [r3, #0]
 800a35e:	e118      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	212c      	movs	r1, #44	; 0x2c
 800a366:	fb01 f303 	mul.w	r3, r1, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	3361      	adds	r3, #97	; 0x61
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b07      	cmp	r3, #7
 800a372:	d009      	beq.n	800a388 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	212c      	movs	r1, #44	; 0x2c
 800a37a:	fb01 f303 	mul.w	r3, r1, r3
 800a37e:	4413      	add	r3, r2
 800a380:	3361      	adds	r3, #97	; 0x61
 800a382:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a384:	2b09      	cmp	r3, #9
 800a386:	d159      	bne.n	800a43c <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	212c      	movs	r1, #44	; 0x2c
 800a38e:	fb01 f303 	mul.w	r3, r1, r3
 800a392:	4413      	add	r3, r2
 800a394:	3361      	adds	r3, #97	; 0x61
 800a396:	2202      	movs	r2, #2
 800a398:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	212c      	movs	r1, #44	; 0x2c
 800a3a0:	fb01 f303 	mul.w	r3, r1, r3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	335c      	adds	r3, #92	; 0x5c
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	202c      	movs	r0, #44	; 0x2c
 800a3b2:	fb00 f303 	mul.w	r3, r0, r3
 800a3b6:	440b      	add	r3, r1
 800a3b8:	335c      	adds	r3, #92	; 0x5c
 800a3ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	212c      	movs	r1, #44	; 0x2c
 800a3c2:	fb01 f303 	mul.w	r3, r1, r3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	335c      	adds	r3, #92	; 0x5c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d912      	bls.n	800a3f6 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	212c      	movs	r1, #44	; 0x2c
 800a3d6:	fb01 f303 	mul.w	r3, r1, r3
 800a3da:	4413      	add	r3, r2
 800a3dc:	335c      	adds	r3, #92	; 0x5c
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	212c      	movs	r1, #44	; 0x2c
 800a3e8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ec:	4413      	add	r3, r2
 800a3ee:	3360      	adds	r3, #96	; 0x60
 800a3f0:	2204      	movs	r2, #4
 800a3f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a3f4:	e0cd      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	212c      	movs	r1, #44	; 0x2c
 800a3fc:	fb01 f303 	mul.w	r3, r1, r3
 800a400:	4413      	add	r3, r2
 800a402:	3360      	adds	r3, #96	; 0x60
 800a404:	2202      	movs	r2, #2
 800a406:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a41e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a426:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a434:	461a      	mov	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a43a:	e0aa      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	212c      	movs	r1, #44	; 0x2c
 800a442:	fb01 f303 	mul.w	r3, r1, r3
 800a446:	4413      	add	r3, r2
 800a448:	3361      	adds	r3, #97	; 0x61
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d109      	bne.n	800a464 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	212c      	movs	r1, #44	; 0x2c
 800a456:	fb01 f303 	mul.w	r3, r1, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	3361      	adds	r3, #97	; 0x61
 800a45e:	2202      	movs	r2, #2
 800a460:	701a      	strb	r2, [r3, #0]
 800a462:	e096      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	212c      	movs	r1, #44	; 0x2c
 800a46a:	fb01 f303 	mul.w	r3, r1, r3
 800a46e:	4413      	add	r3, r2
 800a470:	3361      	adds	r3, #97	; 0x61
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	2b03      	cmp	r3, #3
 800a476:	d109      	bne.n	800a48c <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	212c      	movs	r1, #44	; 0x2c
 800a47e:	fb01 f303 	mul.w	r3, r1, r3
 800a482:	4413      	add	r3, r2
 800a484:	3361      	adds	r3, #97	; 0x61
 800a486:	2202      	movs	r2, #2
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e082      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	212c      	movs	r1, #44	; 0x2c
 800a492:	fb01 f303 	mul.w	r3, r1, r3
 800a496:	4413      	add	r3, r2
 800a498:	3361      	adds	r3, #97	; 0x61
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d13f      	bne.n	800a520 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	212c      	movs	r1, #44	; 0x2c
 800a4a6:	fb01 f303 	mul.w	r3, r1, r3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	3361      	adds	r3, #97	; 0x61
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	212c      	movs	r1, #44	; 0x2c
 800a4b8:	fb01 f303 	mul.w	r3, r1, r3
 800a4bc:	4413      	add	r3, r2
 800a4be:	3360      	adds	r3, #96	; 0x60
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	212c      	movs	r1, #44	; 0x2c
 800a4ca:	fb01 f303 	mul.w	r3, r1, r3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	333f      	adds	r3, #63	; 0x3f
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d009      	beq.n	800a4ec <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	212c      	movs	r1, #44	; 0x2c
 800a4de:	fb01 f303 	mul.w	r3, r1, r3
 800a4e2:	4413      	add	r3, r2
 800a4e4:	333f      	adds	r3, #63	; 0x3f
 800a4e6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d152      	bne.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a502:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a50a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	4413      	add	r3, r2
 800a514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a518:	461a      	mov	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	e038      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	212c      	movs	r1, #44	; 0x2c
 800a526:	fb01 f303 	mul.w	r3, r1, r3
 800a52a:	4413      	add	r3, r2
 800a52c:	3361      	adds	r3, #97	; 0x61
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b08      	cmp	r3, #8
 800a532:	d123      	bne.n	800a57c <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	212c      	movs	r1, #44	; 0x2c
 800a53a:	fb01 f303 	mul.w	r3, r1, r3
 800a53e:	4413      	add	r3, r2
 800a540:	3361      	adds	r3, #97	; 0x61
 800a542:	2202      	movs	r2, #2
 800a544:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	212c      	movs	r1, #44	; 0x2c
 800a54c:	fb01 f303 	mul.w	r3, r1, r3
 800a550:	4413      	add	r3, r2
 800a552:	335c      	adds	r3, #92	; 0x5c
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	202c      	movs	r0, #44	; 0x2c
 800a55e:	fb00 f303 	mul.w	r3, r0, r3
 800a562:	440b      	add	r3, r1
 800a564:	335c      	adds	r3, #92	; 0x5c
 800a566:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	212c      	movs	r1, #44	; 0x2c
 800a56e:	fb01 f303 	mul.w	r3, r1, r3
 800a572:	4413      	add	r3, r2
 800a574:	3360      	adds	r3, #96	; 0x60
 800a576:	2204      	movs	r2, #4
 800a578:	701a      	strb	r2, [r3, #0]
 800a57a:	e00a      	b.n	800a592 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	212c      	movs	r1, #44	; 0x2c
 800a582:	fb01 f303 	mul.w	r3, r1, r3
 800a586:	4413      	add	r3, r2
 800a588:	3361      	adds	r3, #97	; 0x61
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	f000 80ae 	beq.w	800a6ee <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	b2d9      	uxtb	r1, r3
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	202c      	movs	r0, #44	; 0x2c
 800a59c:	fb00 f303 	mul.w	r3, r0, r3
 800a5a0:	4413      	add	r3, r2
 800a5a2:	3360      	adds	r3, #96	; 0x60
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f012 f919 	bl	801c7e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a5ae:	e09f      	b.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	b2d2      	uxtb	r2, r2
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f008 fd99 	bl	80130f2 <USB_ReadChInterrupts>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c6:	2b40      	cmp	r3, #64	; 0x40
 800a5c8:	d123      	bne.n	800a612 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	2340      	movs	r3, #64	; 0x40
 800a5da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	212c      	movs	r1, #44	; 0x2c
 800a5e2:	fb01 f303 	mul.w	r3, r1, r3
 800a5e6:	4413      	add	r3, r2
 800a5e8:	3361      	adds	r3, #97	; 0x61
 800a5ea:	2205      	movs	r2, #5
 800a5ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	212c      	movs	r1, #44	; 0x2c
 800a5f4:	fb01 f303 	mul.w	r3, r1, r3
 800a5f8:	4413      	add	r3, r2
 800a5fa:	335c      	adds	r3, #92	; 0x5c
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f009 f9c3 	bl	8013996 <USB_HC_Halt>
 800a610:	e06e      	b.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	b2d2      	uxtb	r2, r2
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f008 fd68 	bl	80130f2 <USB_ReadChInterrupts>
 800a622:	4603      	mov	r3, r0
 800a624:	f003 0310 	and.w	r3, r3, #16
 800a628:	2b10      	cmp	r3, #16
 800a62a:	d161      	bne.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	212c      	movs	r1, #44	; 0x2c
 800a632:	fb01 f303 	mul.w	r3, r1, r3
 800a636:	4413      	add	r3, r2
 800a638:	333f      	adds	r3, #63	; 0x3f
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d11a      	bne.n	800a676 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	212c      	movs	r1, #44	; 0x2c
 800a646:	fb01 f303 	mul.w	r3, r1, r3
 800a64a:	4413      	add	r3, r2
 800a64c:	335c      	adds	r3, #92	; 0x5c
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	212c      	movs	r1, #44	; 0x2c
 800a658:	fb01 f303 	mul.w	r3, r1, r3
 800a65c:	4413      	add	r3, r2
 800a65e:	3361      	adds	r3, #97	; 0x61
 800a660:	2204      	movs	r2, #4
 800a662:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	b2d2      	uxtb	r2, r2
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f009 f991 	bl	8013996 <USB_HC_Halt>
 800a674:	e031      	b.n	800a6da <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	212c      	movs	r1, #44	; 0x2c
 800a67c:	fb01 f303 	mul.w	r3, r1, r3
 800a680:	4413      	add	r3, r2
 800a682:	333f      	adds	r3, #63	; 0x3f
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d009      	beq.n	800a69e <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	212c      	movs	r1, #44	; 0x2c
 800a690:	fb01 f303 	mul.w	r3, r1, r3
 800a694:	4413      	add	r3, r2
 800a696:	333f      	adds	r3, #63	; 0x3f
 800a698:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d11d      	bne.n	800a6da <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	212c      	movs	r1, #44	; 0x2c
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	4413      	add	r3, r2
 800a6aa:	335c      	adds	r3, #92	; 0x5c
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d110      	bne.n	800a6da <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	212c      	movs	r1, #44	; 0x2c
 800a6be:	fb01 f303 	mul.w	r3, r1, r3
 800a6c2:	4413      	add	r3, r2
 800a6c4:	3361      	adds	r3, #97	; 0x61
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f009 f95e 	bl	8013996 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	2310      	movs	r3, #16
 800a6ea:	6093      	str	r3, [r2, #8]
 800a6ec:	e000      	b.n	800a6f0 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800a6ee:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b088      	sub	sp, #32
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	460b      	mov	r3, r1
 800a700:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	b2d2      	uxtb	r2, r2
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f008 fce9 	bl	80130f2 <USB_ReadChInterrupts>
 800a720:	4603      	mov	r3, r0
 800a722:	f003 0304 	and.w	r3, r3, #4
 800a726:	2b04      	cmp	r3, #4
 800a728:	d11a      	bne.n	800a760 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	4413      	add	r3, r2
 800a732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a736:	461a      	mov	r2, r3
 800a738:	2304      	movs	r3, #4
 800a73a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	212c      	movs	r1, #44	; 0x2c
 800a742:	fb01 f303 	mul.w	r3, r1, r3
 800a746:	4413      	add	r3, r2
 800a748:	3361      	adds	r3, #97	; 0x61
 800a74a:	2207      	movs	r2, #7
 800a74c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	b2d2      	uxtb	r2, r2
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f009 f91c 	bl	8013996 <USB_HC_Halt>
 800a75e:	e393      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	4611      	mov	r1, r2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f008 fcc1 	bl	80130f2 <USB_ReadChInterrupts>
 800a770:	4603      	mov	r3, r0
 800a772:	f003 0320 	and.w	r3, r3, #32
 800a776:	2b20      	cmp	r3, #32
 800a778:	d137      	bne.n	800a7ea <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	4413      	add	r3, r2
 800a782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a786:	461a      	mov	r2, r3
 800a788:	2320      	movs	r3, #32
 800a78a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	212c      	movs	r1, #44	; 0x2c
 800a792:	fb01 f303 	mul.w	r3, r1, r3
 800a796:	4413      	add	r3, r2
 800a798:	333d      	adds	r3, #61	; 0x3d
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	f040 8373 	bne.w	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	212c      	movs	r1, #44	; 0x2c
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	333d      	adds	r3, #61	; 0x3d
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	212c      	movs	r1, #44	; 0x2c
 800a7ba:	fb01 f303 	mul.w	r3, r1, r3
 800a7be:	4413      	add	r3, r2
 800a7c0:	3360      	adds	r3, #96	; 0x60
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	212c      	movs	r1, #44	; 0x2c
 800a7cc:	fb01 f303 	mul.w	r3, r1, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3361      	adds	r3, #97	; 0x61
 800a7d4:	2203      	movs	r2, #3
 800a7d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f009 f8d7 	bl	8013996 <USB_HC_Halt>
 800a7e8:	e34e      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	b2d2      	uxtb	r2, r2
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f008 fc7c 	bl	80130f2 <USB_ReadChInterrupts>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a804:	d112      	bne.n	800a82c <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a812:	461a      	mov	r2, r3
 800a814:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a818:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	b2d2      	uxtb	r2, r2
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f009 f8b6 	bl	8013996 <USB_HC_Halt>
 800a82a:	e32d      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	4611      	mov	r1, r2
 800a836:	4618      	mov	r0, r3
 800a838:	f008 fc5b 	bl	80130f2 <USB_ReadChInterrupts>
 800a83c:	4603      	mov	r3, r0
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b01      	cmp	r3, #1
 800a844:	d142      	bne.n	800a8cc <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	212c      	movs	r1, #44	; 0x2c
 800a84c:	fb01 f303 	mul.w	r3, r1, r3
 800a850:	4413      	add	r3, r2
 800a852:	335c      	adds	r3, #92	; 0x5c
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	b2d2      	uxtb	r2, r2
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f008 fc45 	bl	80130f2 <USB_ReadChInterrupts>
 800a868:	4603      	mov	r3, r0
 800a86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86e:	2b40      	cmp	r3, #64	; 0x40
 800a870:	d111      	bne.n	800a896 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	212c      	movs	r1, #44	; 0x2c
 800a878:	fb01 f303 	mul.w	r3, r1, r3
 800a87c:	4413      	add	r3, r2
 800a87e:	333d      	adds	r3, #61	; 0x3d
 800a880:	2201      	movs	r2, #1
 800a882:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a890:	461a      	mov	r2, r3
 800a892:	2340      	movs	r3, #64	; 0x40
 800a894:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	212c      	movs	r1, #44	; 0x2c
 800a8ae:	fb01 f303 	mul.w	r3, r1, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3361      	adds	r3, #97	; 0x61
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	b2d2      	uxtb	r2, r2
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f009 f866 	bl	8013996 <USB_HC_Halt>
 800a8ca:	e2dd      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	b2d2      	uxtb	r2, r2
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f008 fc0b 	bl	80130f2 <USB_ReadChInterrupts>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e2:	2b40      	cmp	r3, #64	; 0x40
 800a8e4:	d12c      	bne.n	800a940 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	212c      	movs	r1, #44	; 0x2c
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	4413      	add	r3, r2
 800a8f2:	3361      	adds	r3, #97	; 0x61
 800a8f4:	2205      	movs	r2, #5
 800a8f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	212c      	movs	r1, #44	; 0x2c
 800a8fe:	fb01 f303 	mul.w	r3, r1, r3
 800a902:	4413      	add	r3, r2
 800a904:	333d      	adds	r3, #61	; 0x3d
 800a906:	2201      	movs	r2, #1
 800a908:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	212c      	movs	r1, #44	; 0x2c
 800a910:	fb01 f303 	mul.w	r3, r1, r3
 800a914:	4413      	add	r3, r2
 800a916:	335c      	adds	r3, #92	; 0x5c
 800a918:	2200      	movs	r2, #0
 800a91a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	b2d2      	uxtb	r2, r2
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f009 f835 	bl	8013996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	4413      	add	r3, r2
 800a934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a938:	461a      	mov	r2, r3
 800a93a:	2340      	movs	r3, #64	; 0x40
 800a93c:	6093      	str	r3, [r2, #8]
 800a93e:	e2a3      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f008 fbd1 	bl	80130f2 <USB_ReadChInterrupts>
 800a950:	4603      	mov	r3, r0
 800a952:	f003 0308 	and.w	r3, r3, #8
 800a956:	2b08      	cmp	r3, #8
 800a958:	d11a      	bne.n	800a990 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	4413      	add	r3, r2
 800a962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a966:	461a      	mov	r2, r3
 800a968:	2308      	movs	r3, #8
 800a96a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	212c      	movs	r1, #44	; 0x2c
 800a972:	fb01 f303 	mul.w	r3, r1, r3
 800a976:	4413      	add	r3, r2
 800a978:	3361      	adds	r3, #97	; 0x61
 800a97a:	2206      	movs	r2, #6
 800a97c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f009 f804 	bl	8013996 <USB_HC_Halt>
 800a98e:	e27b      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f008 fba9 	bl	80130f2 <USB_ReadChInterrupts>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f003 0310 	and.w	r3, r3, #16
 800a9a6:	2b10      	cmp	r3, #16
 800a9a8:	d140      	bne.n	800aa2c <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	212c      	movs	r1, #44	; 0x2c
 800a9b0:	fb01 f303 	mul.w	r3, r1, r3
 800a9b4:	4413      	add	r3, r2
 800a9b6:	335c      	adds	r3, #92	; 0x5c
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	212c      	movs	r1, #44	; 0x2c
 800a9c2:	fb01 f303 	mul.w	r3, r1, r3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3361      	adds	r3, #97	; 0x61
 800a9ca:	2204      	movs	r2, #4
 800a9cc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	212c      	movs	r1, #44	; 0x2c
 800a9d4:	fb01 f303 	mul.w	r3, r1, r3
 800a9d8:	4413      	add	r3, r2
 800a9da:	333d      	adds	r3, #61	; 0x3d
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d112      	bne.n	800aa08 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	212c      	movs	r1, #44	; 0x2c
 800a9e8:	fb01 f303 	mul.w	r3, r1, r3
 800a9ec:	4413      	add	r3, r2
 800a9ee:	333c      	adds	r3, #60	; 0x3c
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	212c      	movs	r1, #44	; 0x2c
 800a9fc:	fb01 f303 	mul.w	r3, r1, r3
 800aa00:	4413      	add	r3, r2
 800aa02:	333d      	adds	r3, #61	; 0x3d
 800aa04:	2201      	movs	r2, #1
 800aa06:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f008 ffbf 	bl	8013996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa24:	461a      	mov	r2, r3
 800aa26:	2310      	movs	r3, #16
 800aa28:	6093      	str	r3, [r2, #8]
 800aa2a:	e22d      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	b2d2      	uxtb	r2, r2
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f008 fb5b 	bl	80130f2 <USB_ReadChInterrupts>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa42:	2b80      	cmp	r3, #128	; 0x80
 800aa44:	d164      	bne.n	800ab10 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d111      	bne.n	800aa72 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	212c      	movs	r1, #44	; 0x2c
 800aa54:	fb01 f303 	mul.w	r3, r1, r3
 800aa58:	4413      	add	r3, r2
 800aa5a:	3361      	adds	r3, #97	; 0x61
 800aa5c:	2207      	movs	r2, #7
 800aa5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	b2d2      	uxtb	r2, r2
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f008 ff93 	bl	8013996 <USB_HC_Halt>
 800aa70:	e044      	b.n	800aafc <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	212c      	movs	r1, #44	; 0x2c
 800aa78:	fb01 f303 	mul.w	r3, r1, r3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	335c      	adds	r3, #92	; 0x5c
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	202c      	movs	r0, #44	; 0x2c
 800aa8a:	fb00 f303 	mul.w	r3, r0, r3
 800aa8e:	440b      	add	r3, r1
 800aa90:	335c      	adds	r3, #92	; 0x5c
 800aa92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	212c      	movs	r1, #44	; 0x2c
 800aa9a:	fb01 f303 	mul.w	r3, r1, r3
 800aa9e:	4413      	add	r3, r2
 800aaa0:	335c      	adds	r3, #92	; 0x5c
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d920      	bls.n	800aaea <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	212c      	movs	r1, #44	; 0x2c
 800aaae:	fb01 f303 	mul.w	r3, r1, r3
 800aab2:	4413      	add	r3, r2
 800aab4:	335c      	adds	r3, #92	; 0x5c
 800aab6:	2200      	movs	r2, #0
 800aab8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	212c      	movs	r1, #44	; 0x2c
 800aac0:	fb01 f303 	mul.w	r3, r1, r3
 800aac4:	4413      	add	r3, r2
 800aac6:	3360      	adds	r3, #96	; 0x60
 800aac8:	2204      	movs	r2, #4
 800aaca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	b2d9      	uxtb	r1, r3
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	202c      	movs	r0, #44	; 0x2c
 800aad6:	fb00 f303 	mul.w	r3, r0, r3
 800aada:	4413      	add	r3, r2
 800aadc:	3360      	adds	r3, #96	; 0x60
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f011 fe7c 	bl	801c7e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800aae8:	e008      	b.n	800aafc <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	212c      	movs	r1, #44	; 0x2c
 800aaf0:	fb01 f303 	mul.w	r3, r1, r3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	3360      	adds	r3, #96	; 0x60
 800aaf8:	2202      	movs	r2, #2
 800aafa:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab08:	461a      	mov	r2, r3
 800ab0a:	2380      	movs	r3, #128	; 0x80
 800ab0c:	6093      	str	r3, [r2, #8]
 800ab0e:	e1bb      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	b2d2      	uxtb	r2, r2
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f008 fae9 	bl	80130f2 <USB_ReadChInterrupts>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab2a:	d11b      	bne.n	800ab64 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	212c      	movs	r1, #44	; 0x2c
 800ab32:	fb01 f303 	mul.w	r3, r1, r3
 800ab36:	4413      	add	r3, r2
 800ab38:	3361      	adds	r3, #97	; 0x61
 800ab3a:	2209      	movs	r2, #9
 800ab3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	b2d2      	uxtb	r2, r2
 800ab46:	4611      	mov	r1, r2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f008 ff24 	bl	8013996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab60:	6093      	str	r3, [r2, #8]
 800ab62:	e191      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f008 fabf 	bl	80130f2 <USB_ReadChInterrupts>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	f040 8184 	bne.w	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	2302      	movs	r3, #2
 800ab90:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	212c      	movs	r1, #44	; 0x2c
 800ab98:	fb01 f303 	mul.w	r3, r1, r3
 800ab9c:	4413      	add	r3, r2
 800ab9e:	3361      	adds	r3, #97	; 0x61
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	f040 8087 	bne.w	800acb6 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	212c      	movs	r1, #44	; 0x2c
 800abae:	fb01 f303 	mul.w	r3, r1, r3
 800abb2:	4413      	add	r3, r2
 800abb4:	3361      	adds	r3, #97	; 0x61
 800abb6:	2202      	movs	r2, #2
 800abb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	212c      	movs	r1, #44	; 0x2c
 800abc0:	fb01 f303 	mul.w	r3, r1, r3
 800abc4:	4413      	add	r3, r2
 800abc6:	3360      	adds	r3, #96	; 0x60
 800abc8:	2201      	movs	r2, #1
 800abca:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	212c      	movs	r1, #44	; 0x2c
 800abd2:	fb01 f303 	mul.w	r3, r1, r3
 800abd6:	4413      	add	r3, r2
 800abd8:	333f      	adds	r3, #63	; 0x3f
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d00a      	beq.n	800abf6 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	212c      	movs	r1, #44	; 0x2c
 800abe6:	fb01 f303 	mul.w	r3, r1, r3
 800abea:	4413      	add	r3, r2
 800abec:	333f      	adds	r3, #63	; 0x3f
 800abee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	f040 8139 	bne.w	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d113      	bne.n	800ac26 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	212c      	movs	r1, #44	; 0x2c
 800ac04:	fb01 f303 	mul.w	r3, r1, r3
 800ac08:	4413      	add	r3, r2
 800ac0a:	3355      	adds	r3, #85	; 0x55
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	f083 0301 	eor.w	r3, r3, #1
 800ac12:	b2d8      	uxtb	r0, r3
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	212c      	movs	r1, #44	; 0x2c
 800ac1a:	fb01 f303 	mul.w	r3, r1, r3
 800ac1e:	4413      	add	r3, r2
 800ac20:	3355      	adds	r3, #85	; 0x55
 800ac22:	4602      	mov	r2, r0
 800ac24:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	f040 811c 	bne.w	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	212c      	movs	r1, #44	; 0x2c
 800ac36:	fb01 f303 	mul.w	r3, r1, r3
 800ac3a:	4413      	add	r3, r2
 800ac3c:	334c      	adds	r3, #76	; 0x4c
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 8111 	beq.w	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	212c      	movs	r1, #44	; 0x2c
 800ac4c:	fb01 f303 	mul.w	r3, r1, r3
 800ac50:	4413      	add	r3, r2
 800ac52:	334c      	adds	r3, #76	; 0x4c
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	202c      	movs	r0, #44	; 0x2c
 800ac5c:	fb00 f202 	mul.w	r2, r0, r2
 800ac60:	440a      	add	r2, r1
 800ac62:	3240      	adds	r2, #64	; 0x40
 800ac64:	8812      	ldrh	r2, [r2, #0]
 800ac66:	4413      	add	r3, r2
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	6879      	ldr	r1, [r7, #4]
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	202c      	movs	r0, #44	; 0x2c
 800ac70:	fb00 f202 	mul.w	r2, r0, r2
 800ac74:	440a      	add	r2, r1
 800ac76:	3240      	adds	r2, #64	; 0x40
 800ac78:	8812      	ldrh	r2, [r2, #0]
 800ac7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 80ee 	beq.w	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	212c      	movs	r1, #44	; 0x2c
 800ac92:	fb01 f303 	mul.w	r3, r1, r3
 800ac96:	4413      	add	r3, r2
 800ac98:	3355      	adds	r3, #85	; 0x55
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f083 0301 	eor.w	r3, r3, #1
 800aca0:	b2d8      	uxtb	r0, r3
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	212c      	movs	r1, #44	; 0x2c
 800aca8:	fb01 f303 	mul.w	r3, r1, r3
 800acac:	4413      	add	r3, r2
 800acae:	3355      	adds	r3, #85	; 0x55
 800acb0:	4602      	mov	r2, r0
 800acb2:	701a      	strb	r2, [r3, #0]
 800acb4:	e0d8      	b.n	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	212c      	movs	r1, #44	; 0x2c
 800acbc:	fb01 f303 	mul.w	r3, r1, r3
 800acc0:	4413      	add	r3, r2
 800acc2:	3361      	adds	r3, #97	; 0x61
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d109      	bne.n	800acde <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	212c      	movs	r1, #44	; 0x2c
 800acd0:	fb01 f303 	mul.w	r3, r1, r3
 800acd4:	4413      	add	r3, r2
 800acd6:	3361      	adds	r3, #97	; 0x61
 800acd8:	2202      	movs	r2, #2
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e0c4      	b.n	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	212c      	movs	r1, #44	; 0x2c
 800ace4:	fb01 f303 	mul.w	r3, r1, r3
 800ace8:	4413      	add	r3, r2
 800acea:	3361      	adds	r3, #97	; 0x61
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b04      	cmp	r3, #4
 800acf0:	d112      	bne.n	800ad18 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	212c      	movs	r1, #44	; 0x2c
 800acf8:	fb01 f303 	mul.w	r3, r1, r3
 800acfc:	4413      	add	r3, r2
 800acfe:	3361      	adds	r3, #97	; 0x61
 800ad00:	2202      	movs	r2, #2
 800ad02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	212c      	movs	r1, #44	; 0x2c
 800ad0a:	fb01 f303 	mul.w	r3, r1, r3
 800ad0e:	4413      	add	r3, r2
 800ad10:	3360      	adds	r3, #96	; 0x60
 800ad12:	2202      	movs	r2, #2
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	e0a7      	b.n	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	212c      	movs	r1, #44	; 0x2c
 800ad1e:	fb01 f303 	mul.w	r3, r1, r3
 800ad22:	4413      	add	r3, r2
 800ad24:	3361      	adds	r3, #97	; 0x61
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	d112      	bne.n	800ad52 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	212c      	movs	r1, #44	; 0x2c
 800ad32:	fb01 f303 	mul.w	r3, r1, r3
 800ad36:	4413      	add	r3, r2
 800ad38:	3361      	adds	r3, #97	; 0x61
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	212c      	movs	r1, #44	; 0x2c
 800ad44:	fb01 f303 	mul.w	r3, r1, r3
 800ad48:	4413      	add	r3, r2
 800ad4a:	3360      	adds	r3, #96	; 0x60
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e08a      	b.n	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	212c      	movs	r1, #44	; 0x2c
 800ad58:	fb01 f303 	mul.w	r3, r1, r3
 800ad5c:	4413      	add	r3, r2
 800ad5e:	3361      	adds	r3, #97	; 0x61
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b06      	cmp	r3, #6
 800ad64:	d112      	bne.n	800ad8c <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	212c      	movs	r1, #44	; 0x2c
 800ad6c:	fb01 f303 	mul.w	r3, r1, r3
 800ad70:	4413      	add	r3, r2
 800ad72:	3361      	adds	r3, #97	; 0x61
 800ad74:	2202      	movs	r2, #2
 800ad76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	212c      	movs	r1, #44	; 0x2c
 800ad7e:	fb01 f303 	mul.w	r3, r1, r3
 800ad82:	4413      	add	r3, r2
 800ad84:	3360      	adds	r3, #96	; 0x60
 800ad86:	2205      	movs	r2, #5
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e06d      	b.n	800ae68 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	212c      	movs	r1, #44	; 0x2c
 800ad92:	fb01 f303 	mul.w	r3, r1, r3
 800ad96:	4413      	add	r3, r2
 800ad98:	3361      	adds	r3, #97	; 0x61
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b07      	cmp	r3, #7
 800ad9e:	d009      	beq.n	800adb4 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	212c      	movs	r1, #44	; 0x2c
 800ada6:	fb01 f303 	mul.w	r3, r1, r3
 800adaa:	4413      	add	r3, r2
 800adac:	3361      	adds	r3, #97	; 0x61
 800adae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800adb0:	2b09      	cmp	r3, #9
 800adb2:	d168      	bne.n	800ae86 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	212c      	movs	r1, #44	; 0x2c
 800adba:	fb01 f303 	mul.w	r3, r1, r3
 800adbe:	4413      	add	r3, r2
 800adc0:	3361      	adds	r3, #97	; 0x61
 800adc2:	2202      	movs	r2, #2
 800adc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	212c      	movs	r1, #44	; 0x2c
 800adcc:	fb01 f303 	mul.w	r3, r1, r3
 800add0:	4413      	add	r3, r2
 800add2:	335c      	adds	r3, #92	; 0x5c
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	202c      	movs	r0, #44	; 0x2c
 800adde:	fb00 f303 	mul.w	r3, r0, r3
 800ade2:	440b      	add	r3, r1
 800ade4:	335c      	adds	r3, #92	; 0x5c
 800ade6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	212c      	movs	r1, #44	; 0x2c
 800adee:	fb01 f303 	mul.w	r3, r1, r3
 800adf2:	4413      	add	r3, r2
 800adf4:	335c      	adds	r3, #92	; 0x5c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d912      	bls.n	800ae22 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	212c      	movs	r1, #44	; 0x2c
 800ae02:	fb01 f303 	mul.w	r3, r1, r3
 800ae06:	4413      	add	r3, r2
 800ae08:	335c      	adds	r3, #92	; 0x5c
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	212c      	movs	r1, #44	; 0x2c
 800ae14:	fb01 f303 	mul.w	r3, r1, r3
 800ae18:	4413      	add	r3, r2
 800ae1a:	3360      	adds	r3, #96	; 0x60
 800ae1c:	2204      	movs	r2, #4
 800ae1e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800ae20:	e021      	b.n	800ae66 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	212c      	movs	r1, #44	; 0x2c
 800ae28:	fb01 f303 	mul.w	r3, r1, r3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	3360      	adds	r3, #96	; 0x60
 800ae30:	2202      	movs	r2, #2
 800ae32:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae4a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae52:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae60:	461a      	mov	r2, r3
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800ae66:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	b2d9      	uxtb	r1, r3
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	202c      	movs	r0, #44	; 0x2c
 800ae72:	fb00 f303 	mul.w	r3, r0, r3
 800ae76:	4413      	add	r3, r2
 800ae78:	3360      	adds	r3, #96	; 0x60
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f011 fcae 	bl	801c7e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800ae84:	e000      	b.n	800ae88 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 800ae86:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800ae88:	3720      	adds	r7, #32
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b08a      	sub	sp, #40	; 0x28
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	f003 030f 	and.w	r3, r3, #15
 800aeae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	0c5b      	lsrs	r3, r3, #17
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	091b      	lsrs	r3, r3, #4
 800aebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aec2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d004      	beq.n	800aed4 <HCD_RXQLVL_IRQHandler+0x46>
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b05      	cmp	r3, #5
 800aece:	f000 80a9 	beq.w	800b024 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800aed2:	e0aa      	b.n	800b02a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 80a6 	beq.w	800b028 <HCD_RXQLVL_IRQHandler+0x19a>
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	212c      	movs	r1, #44	; 0x2c
 800aee2:	fb01 f303 	mul.w	r3, r1, r3
 800aee6:	4413      	add	r3, r2
 800aee8:	3344      	adds	r3, #68	; 0x44
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 809b 	beq.w	800b028 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	212c      	movs	r1, #44	; 0x2c
 800aef8:	fb01 f303 	mul.w	r3, r1, r3
 800aefc:	4413      	add	r3, r2
 800aefe:	3350      	adds	r3, #80	; 0x50
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	441a      	add	r2, r3
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	202c      	movs	r0, #44	; 0x2c
 800af0c:	fb00 f303 	mul.w	r3, r0, r3
 800af10:	440b      	add	r3, r1
 800af12:	334c      	adds	r3, #76	; 0x4c
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d87a      	bhi.n	800b010 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	212c      	movs	r1, #44	; 0x2c
 800af24:	fb01 f303 	mul.w	r3, r1, r3
 800af28:	4413      	add	r3, r2
 800af2a:	3344      	adds	r3, #68	; 0x44
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	b292      	uxth	r2, r2
 800af32:	4619      	mov	r1, r3
 800af34:	f008 f872 	bl	801301c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	212c      	movs	r1, #44	; 0x2c
 800af3e:	fb01 f303 	mul.w	r3, r1, r3
 800af42:	4413      	add	r3, r2
 800af44:	3344      	adds	r3, #68	; 0x44
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	441a      	add	r2, r3
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	202c      	movs	r0, #44	; 0x2c
 800af52:	fb00 f303 	mul.w	r3, r0, r3
 800af56:	440b      	add	r3, r1
 800af58:	3344      	adds	r3, #68	; 0x44
 800af5a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	212c      	movs	r1, #44	; 0x2c
 800af62:	fb01 f303 	mul.w	r3, r1, r3
 800af66:	4413      	add	r3, r2
 800af68:	3350      	adds	r3, #80	; 0x50
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	441a      	add	r2, r3
 800af70:	6879      	ldr	r1, [r7, #4]
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	202c      	movs	r0, #44	; 0x2c
 800af76:	fb00 f303 	mul.w	r3, r0, r3
 800af7a:	440b      	add	r3, r1
 800af7c:	3350      	adds	r3, #80	; 0x50
 800af7e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	4413      	add	r3, r2
 800af88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	0cdb      	lsrs	r3, r3, #19
 800af90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af94:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	212c      	movs	r1, #44	; 0x2c
 800af9c:	fb01 f303 	mul.w	r3, r1, r3
 800afa0:	4413      	add	r3, r2
 800afa2:	3340      	adds	r3, #64	; 0x40
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	4293      	cmp	r3, r2
 800afac:	d13c      	bne.n	800b028 <HCD_RXQLVL_IRQHandler+0x19a>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d039      	beq.n	800b028 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	6a3b      	ldr	r3, [r7, #32]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800afca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afd2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afe0:	461a      	mov	r2, r3
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	212c      	movs	r1, #44	; 0x2c
 800afec:	fb01 f303 	mul.w	r3, r1, r3
 800aff0:	4413      	add	r3, r2
 800aff2:	3354      	adds	r3, #84	; 0x54
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	f083 0301 	eor.w	r3, r3, #1
 800affa:	b2d8      	uxtb	r0, r3
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	212c      	movs	r1, #44	; 0x2c
 800b002:	fb01 f303 	mul.w	r3, r1, r3
 800b006:	4413      	add	r3, r2
 800b008:	3354      	adds	r3, #84	; 0x54
 800b00a:	4602      	mov	r2, r0
 800b00c:	701a      	strb	r2, [r3, #0]
      break;
 800b00e:	e00b      	b.n	800b028 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	212c      	movs	r1, #44	; 0x2c
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	4413      	add	r3, r2
 800b01c:	3360      	adds	r3, #96	; 0x60
 800b01e:	2204      	movs	r2, #4
 800b020:	701a      	strb	r2, [r3, #0]
      break;
 800b022:	e001      	b.n	800b028 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800b024:	bf00      	nop
 800b026:	e000      	b.n	800b02a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800b028:	bf00      	nop
  }
}
 800b02a:	bf00      	nop
 800b02c:	3728      	adds	r7, #40	; 0x28
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b086      	sub	sp, #24
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b05e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	2b02      	cmp	r3, #2
 800b068:	d10b      	bne.n	800b082 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	2b01      	cmp	r3, #1
 800b072:	d102      	bne.n	800b07a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f011 fb97 	bl	801c7a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f043 0302 	orr.w	r3, r3, #2
 800b080:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f003 0308 	and.w	r3, r3, #8
 800b088:	2b08      	cmp	r3, #8
 800b08a:	d132      	bne.n	800b0f2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f043 0308 	orr.w	r3, r3, #8
 800b092:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f003 0304 	and.w	r3, r3, #4
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	d126      	bne.n	800b0ec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d113      	bne.n	800b0ce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b0ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0b0:	d106      	bne.n	800b0c0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2102      	movs	r1, #2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f008 f931 	bl	8013320 <USB_InitFSLSPClkSel>
 800b0be:	e011      	b.n	800b0e4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f008 f92a 	bl	8013320 <USB_InitFSLSPClkSel>
 800b0cc:	e00a      	b.n	800b0e4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d106      	bne.n	800b0e4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0dc:	461a      	mov	r2, r3
 800b0de:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b0e2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f011 fb8d 	bl	801c804 <HAL_HCD_PortEnabled_Callback>
 800b0ea:	e002      	b.n	800b0f2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f011 fb97 	bl	801c820 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f003 0320 	and.w	r3, r3, #32
 800b0f8:	2b20      	cmp	r3, #32
 800b0fa:	d103      	bne.n	800b104 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f043 0320 	orr.w	r3, r3, #32
 800b102:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b10a:	461a      	mov	r2, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	6013      	str	r3, [r2, #0]
}
 800b110:	bf00      	nop
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e07f      	b.n	800b22a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b00      	cmp	r3, #0
 800b134:	d106      	bne.n	800b144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7f7 fd82 	bl	8002c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2224      	movs	r2, #36	; 0x24
 800b148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 0201 	bic.w	r2, r2, #1
 800b15a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	689a      	ldr	r2, [r3, #8]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d107      	bne.n	800b192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	689a      	ldr	r2, [r3, #8]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b18e:	609a      	str	r2, [r3, #8]
 800b190:	e006      	b.n	800b1a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689a      	ldr	r2, [r3, #8]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b19e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d104      	bne.n	800b1b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6859      	ldr	r1, [r3, #4]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	4b1d      	ldr	r3, [pc, #116]	; (800b234 <HAL_I2C_Init+0x11c>)
 800b1be:	430b      	orrs	r3, r1
 800b1c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	691a      	ldr	r2, [r3, #16]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	69d9      	ldr	r1, [r3, #28]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6a1a      	ldr	r2, [r3, #32]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	430a      	orrs	r2, r1
 800b1fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f042 0201 	orr.w	r2, r2, #1
 800b20a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2220      	movs	r2, #32
 800b216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	02008000 	.word	0x02008000

0800b238 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e021      	b.n	800b28e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2224      	movs	r2, #36	; 0x24
 800b24e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0201 	bic.w	r2, r2, #1
 800b260:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7f7 fd98 	bl	8002d98 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	817b      	strh	r3, [r7, #10]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	813b      	strh	r3, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	f040 80f9 	bne.w	800b4b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2c0:	6a3b      	ldr	r3, [r7, #32]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <HAL_I2C_Mem_Write+0x34>
 800b2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d105      	bne.n	800b2d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e0ed      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d101      	bne.n	800b2e6 <HAL_I2C_Mem_Write+0x4e>
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e0e6      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b2ee:	f7fb feaf 	bl	8007050 <HAL_GetTick>
 800b2f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	2319      	movs	r3, #25
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 fad1 	bl	800b8a8 <I2C_WaitOnFlagUntilTimeout>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e0d1      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2221      	movs	r2, #33	; 0x21
 800b314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2240      	movs	r2, #64	; 0x40
 800b31c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6a3a      	ldr	r2, [r7, #32]
 800b32a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b338:	88f8      	ldrh	r0, [r7, #6]
 800b33a:	893a      	ldrh	r2, [r7, #8]
 800b33c:	8979      	ldrh	r1, [r7, #10]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	9301      	str	r3, [sp, #4]
 800b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	4603      	mov	r3, r0
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 f9e1 	bl	800b710 <I2C_RequestMemoryWrite>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e0a9      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b364:	b29b      	uxth	r3, r3
 800b366:	2bff      	cmp	r3, #255	; 0xff
 800b368:	d90e      	bls.n	800b388 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	22ff      	movs	r2, #255	; 0xff
 800b36e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b374:	b2da      	uxtb	r2, r3
 800b376:	8979      	ldrh	r1, [r7, #10]
 800b378:	2300      	movs	r3, #0
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 fc2d 	bl	800bbe0 <I2C_TransferConfig>
 800b386:	e00f      	b.n	800b3a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b396:	b2da      	uxtb	r2, r3
 800b398:	8979      	ldrh	r1, [r7, #10]
 800b39a:	2300      	movs	r3, #0
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f000 fc1c 	bl	800bbe0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f000 fabb 	bl	800b928 <I2C_WaitOnTXISFlagUntilTimeout>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e07b      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d034      	beq.n	800b460 <HAL_I2C_Mem_Write+0x1c8>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d130      	bne.n	800b460 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b404:	2200      	movs	r2, #0
 800b406:	2180      	movs	r1, #128	; 0x80
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f000 fa4d 	bl	800b8a8 <I2C_WaitOnFlagUntilTimeout>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e04d      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	2bff      	cmp	r3, #255	; 0xff
 800b420:	d90e      	bls.n	800b440 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	22ff      	movs	r2, #255	; 0xff
 800b426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	8979      	ldrh	r1, [r7, #10]
 800b430:	2300      	movs	r3, #0
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 fbd1 	bl	800bbe0 <I2C_TransferConfig>
 800b43e:	e00f      	b.n	800b460 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b444:	b29a      	uxth	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	8979      	ldrh	r1, [r7, #10]
 800b452:	2300      	movs	r3, #0
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 fbc0 	bl	800bbe0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b464:	b29b      	uxth	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d19e      	bne.n	800b3a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f000 fa9a 	bl	800b9a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e01a      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2220      	movs	r2, #32
 800b484:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6859      	ldr	r1, [r3, #4]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <HAL_I2C_Mem_Write+0x224>)
 800b492:	400b      	ands	r3, r1
 800b494:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2220      	movs	r2, #32
 800b49a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	e000      	b.n	800b4b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b4b2:	2302      	movs	r3, #2
  }
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	fe00e800 	.word	0xfe00e800

0800b4c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af02      	add	r7, sp, #8
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	817b      	strh	r3, [r7, #10]
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	813b      	strh	r3, [r7, #8]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	f040 80fd 	bne.w	800b6e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4e8:	6a3b      	ldr	r3, [r7, #32]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d002      	beq.n	800b4f4 <HAL_I2C_Mem_Read+0x34>
 800b4ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d105      	bne.n	800b500 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e0f1      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <HAL_I2C_Mem_Read+0x4e>
 800b50a:	2302      	movs	r3, #2
 800b50c:	e0ea      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b516:	f7fb fd9b 	bl	8007050 <HAL_GetTick>
 800b51a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	2319      	movs	r3, #25
 800b522:	2201      	movs	r2, #1
 800b524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 f9bd 	bl	800b8a8 <I2C_WaitOnFlagUntilTimeout>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e0d5      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2222      	movs	r2, #34	; 0x22
 800b53c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2240      	movs	r2, #64	; 0x40
 800b544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a3a      	ldr	r2, [r7, #32]
 800b552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b560:	88f8      	ldrh	r0, [r7, #6]
 800b562:	893a      	ldrh	r2, [r7, #8]
 800b564:	8979      	ldrh	r1, [r7, #10]
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	4603      	mov	r3, r0
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f921 	bl	800b7b8 <I2C_RequestMemoryRead>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e0ad      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	2bff      	cmp	r3, #255	; 0xff
 800b590:	d90e      	bls.n	800b5b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	22ff      	movs	r2, #255	; 0xff
 800b596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	8979      	ldrh	r1, [r7, #10]
 800b5a0:	4b52      	ldr	r3, [pc, #328]	; (800b6ec <HAL_I2C_Mem_Read+0x22c>)
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 fb19 	bl	800bbe0 <I2C_TransferConfig>
 800b5ae:	e00f      	b.n	800b5d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5be:	b2da      	uxtb	r2, r3
 800b5c0:	8979      	ldrh	r1, [r7, #10]
 800b5c2:	4b4a      	ldr	r3, [pc, #296]	; (800b6ec <HAL_I2C_Mem_Read+0x22c>)
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f000 fb08 	bl	800bbe0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2104      	movs	r1, #4
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f000 f964 	bl	800b8a8 <I2C_WaitOnFlagUntilTimeout>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e07c      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	b2d2      	uxtb	r2, r2
 800b5f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b606:	3b01      	subs	r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b612:	b29b      	uxth	r3, r3
 800b614:	3b01      	subs	r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b620:	b29b      	uxth	r3, r3
 800b622:	2b00      	cmp	r3, #0
 800b624:	d034      	beq.n	800b690 <HAL_I2C_Mem_Read+0x1d0>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d130      	bne.n	800b690 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	2200      	movs	r2, #0
 800b636:	2180      	movs	r1, #128	; 0x80
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 f935 	bl	800b8a8 <I2C_WaitOnFlagUntilTimeout>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e04d      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	2bff      	cmp	r3, #255	; 0xff
 800b650:	d90e      	bls.n	800b670 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	22ff      	movs	r2, #255	; 0xff
 800b656:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	8979      	ldrh	r1, [r7, #10]
 800b660:	2300      	movs	r3, #0
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 fab9 	bl	800bbe0 <I2C_TransferConfig>
 800b66e:	e00f      	b.n	800b690 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b674:	b29a      	uxth	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	8979      	ldrh	r1, [r7, #10]
 800b682:	2300      	movs	r3, #0
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 faa8 	bl	800bbe0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b694:	b29b      	uxth	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d19a      	bne.n	800b5d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f000 f982 	bl	800b9a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e01a      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6859      	ldr	r1, [r3, #4]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	4b0b      	ldr	r3, [pc, #44]	; (800b6f0 <HAL_I2C_Mem_Read+0x230>)
 800b6c2:	400b      	ands	r3, r1
 800b6c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e000      	b.n	800b6e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b6e2:	2302      	movs	r3, #2
  }
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	80002400 	.word	0x80002400
 800b6f0:	fe00e800 	.word	0xfe00e800

0800b6f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b702:	b2db      	uxtb	r3, r3
}
 800b704:	4618      	mov	r0, r3
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af02      	add	r7, sp, #8
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	4608      	mov	r0, r1
 800b71a:	4611      	mov	r1, r2
 800b71c:	461a      	mov	r2, r3
 800b71e:	4603      	mov	r3, r0
 800b720:	817b      	strh	r3, [r7, #10]
 800b722:	460b      	mov	r3, r1
 800b724:	813b      	strh	r3, [r7, #8]
 800b726:	4613      	mov	r3, r2
 800b728:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b72a:	88fb      	ldrh	r3, [r7, #6]
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	8979      	ldrh	r1, [r7, #10]
 800b730:	4b20      	ldr	r3, [pc, #128]	; (800b7b4 <I2C_RequestMemoryWrite+0xa4>)
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fa51 	bl	800bbe0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b73e:	69fa      	ldr	r2, [r7, #28]
 800b740:	69b9      	ldr	r1, [r7, #24]
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 f8f0 	bl	800b928 <I2C_WaitOnTXISFlagUntilTimeout>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e02c      	b.n	800b7ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b752:	88fb      	ldrh	r3, [r7, #6]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d105      	bne.n	800b764 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b758:	893b      	ldrh	r3, [r7, #8]
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	629a      	str	r2, [r3, #40]	; 0x28
 800b762:	e015      	b.n	800b790 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b764:	893b      	ldrh	r3, [r7, #8]
 800b766:	0a1b      	lsrs	r3, r3, #8
 800b768:	b29b      	uxth	r3, r3
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b772:	69fa      	ldr	r2, [r7, #28]
 800b774:	69b9      	ldr	r1, [r7, #24]
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f000 f8d6 	bl	800b928 <I2C_WaitOnTXISFlagUntilTimeout>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e012      	b.n	800b7ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b786:	893b      	ldrh	r3, [r7, #8]
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	2200      	movs	r2, #0
 800b798:	2180      	movs	r1, #128	; 0x80
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 f884 	bl	800b8a8 <I2C_WaitOnFlagUntilTimeout>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	80002000 	.word	0x80002000

0800b7b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af02      	add	r7, sp, #8
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	817b      	strh	r3, [r7, #10]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	813b      	strh	r3, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	8979      	ldrh	r1, [r7, #10]
 800b7d8:	4b20      	ldr	r3, [pc, #128]	; (800b85c <I2C_RequestMemoryRead+0xa4>)
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 f9fe 	bl	800bbe0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7e4:	69fa      	ldr	r2, [r7, #28]
 800b7e6:	69b9      	ldr	r1, [r7, #24]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 f89d 	bl	800b928 <I2C_WaitOnTXISFlagUntilTimeout>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e02c      	b.n	800b852 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b7f8:	88fb      	ldrh	r3, [r7, #6]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d105      	bne.n	800b80a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b7fe:	893b      	ldrh	r3, [r7, #8]
 800b800:	b2da      	uxtb	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	629a      	str	r2, [r3, #40]	; 0x28
 800b808:	e015      	b.n	800b836 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b80a:	893b      	ldrh	r3, [r7, #8]
 800b80c:	0a1b      	lsrs	r3, r3, #8
 800b80e:	b29b      	uxth	r3, r3
 800b810:	b2da      	uxtb	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b818:	69fa      	ldr	r2, [r7, #28]
 800b81a:	69b9      	ldr	r1, [r7, #24]
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 f883 	bl	800b928 <I2C_WaitOnTXISFlagUntilTimeout>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e012      	b.n	800b852 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b82c:	893b      	ldrh	r3, [r7, #8]
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	2200      	movs	r2, #0
 800b83e:	2140      	movs	r1, #64	; 0x40
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f831 	bl	800b8a8 <I2C_WaitOnFlagUntilTimeout>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	80002000 	.word	0x80002000

0800b860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b02      	cmp	r3, #2
 800b874:	d103      	bne.n	800b87e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d007      	beq.n	800b89c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	699a      	ldr	r2, [r3, #24]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f042 0201 	orr.w	r2, r2, #1
 800b89a:	619a      	str	r2, [r3, #24]
  }
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	603b      	str	r3, [r7, #0]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8b8:	e022      	b.n	800b900 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c0:	d01e      	beq.n	800b900 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8c2:	f7fb fbc5 	bl	8007050 <HAL_GetTick>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d302      	bcc.n	800b8d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d113      	bne.n	800b900 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8dc:	f043 0220 	orr.w	r2, r3, #32
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e00f      	b.n	800b920 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	699a      	ldr	r2, [r3, #24]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	4013      	ands	r3, r2
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	bf0c      	ite	eq
 800b910:	2301      	moveq	r3, #1
 800b912:	2300      	movne	r3, #0
 800b914:	b2db      	uxtb	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d0cd      	beq.n	800b8ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b934:	e02c      	b.n	800b990 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	68b9      	ldr	r1, [r7, #8]
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 f870 	bl	800ba20 <I2C_IsErrorOccurred>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e02a      	b.n	800b9a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b950:	d01e      	beq.n	800b990 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b952:	f7fb fb7d 	bl	8007050 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d302      	bcc.n	800b968 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d113      	bne.n	800b990 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96c:	f043 0220 	orr.w	r2, r3, #32
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2220      	movs	r2, #32
 800b978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	e007      	b.n	800b9a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d1cb      	bne.n	800b936 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9b4:	e028      	b.n	800ba08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	68b9      	ldr	r1, [r7, #8]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 f830 	bl	800ba20 <I2C_IsErrorOccurred>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e026      	b.n	800ba18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ca:	f7fb fb41 	bl	8007050 <HAL_GetTick>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d302      	bcc.n	800b9e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d113      	bne.n	800ba08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e4:	f043 0220 	orr.w	r2, r3, #32
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e007      	b.n	800ba18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b20      	cmp	r3, #32
 800ba14:	d1cf      	bne.n	800b9b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	f003 0310 	and.w	r3, r3, #16
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d068      	beq.n	800bb1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2210      	movs	r2, #16
 800ba52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba54:	e049      	b.n	800baea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5c:	d045      	beq.n	800baea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ba5e:	f7fb faf7 	bl	8007050 <HAL_GetTick>
 800ba62:	4602      	mov	r2, r0
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d302      	bcc.n	800ba74 <I2C_IsErrorOccurred+0x54>
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d13a      	bne.n	800baea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba96:	d121      	bne.n	800badc <I2C_IsErrorOccurred+0xbc>
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba9e:	d01d      	beq.n	800badc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800baa0:	7cfb      	ldrb	r3, [r7, #19]
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	d01a      	beq.n	800badc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bab4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bab6:	f7fb facb 	bl	8007050 <HAL_GetTick>
 800baba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800babc:	e00e      	b.n	800badc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800babe:	f7fb fac7 	bl	8007050 <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b19      	cmp	r3, #25
 800baca:	d907      	bls.n	800badc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	f043 0320 	orr.w	r3, r3, #32
 800bad2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800bada:	e006      	b.n	800baea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	f003 0320 	and.w	r3, r3, #32
 800bae6:	2b20      	cmp	r3, #32
 800bae8:	d1e9      	bne.n	800babe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	f003 0320 	and.w	r3, r3, #32
 800baf4:	2b20      	cmp	r3, #32
 800baf6:	d003      	beq.n	800bb00 <I2C_IsErrorOccurred+0xe0>
 800baf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d0aa      	beq.n	800ba56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d103      	bne.n	800bb10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	f043 0304 	orr.w	r3, r3, #4
 800bb16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00b      	beq.n	800bb48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	f043 0301 	orr.w	r3, r3, #1
 800bb36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00b      	beq.n	800bb6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	f043 0308 	orr.w	r3, r3, #8
 800bb58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00b      	beq.n	800bb8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	f043 0302 	orr.w	r3, r3, #2
 800bb7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800bb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d01c      	beq.n	800bbce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff fe63 	bl	800b860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6859      	ldr	r1, [r3, #4]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	4b0d      	ldr	r3, [pc, #52]	; (800bbdc <I2C_IsErrorOccurred+0x1bc>)
 800bba6:	400b      	ands	r3, r1
 800bba8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	431a      	orrs	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2220      	movs	r2, #32
 800bbba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800bbce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3728      	adds	r7, #40	; 0x28
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	fe00e800 	.word	0xfe00e800

0800bbe0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	817b      	strh	r3, [r7, #10]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbf2:	897b      	ldrh	r3, [r7, #10]
 800bbf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bbf8:	7a7b      	ldrb	r3, [r7, #9]
 800bbfa:	041b      	lsls	r3, r3, #16
 800bbfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bc00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bc06:	6a3b      	ldr	r3, [r7, #32]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	0d5b      	lsrs	r3, r3, #21
 800bc1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bc1e:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <I2C_TransferConfig+0x60>)
 800bc20:	430b      	orrs	r3, r1
 800bc22:	43db      	mvns	r3, r3
 800bc24:	ea02 0103 	and.w	r1, r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	430a      	orrs	r2, r1
 800bc30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bc32:	bf00      	nop
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	03ff63ff 	.word	0x03ff63ff

0800bc44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b20      	cmp	r3, #32
 800bc58:	d138      	bne.n	800bccc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d101      	bne.n	800bc68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bc64:	2302      	movs	r3, #2
 800bc66:	e032      	b.n	800bcce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2224      	movs	r2, #36	; 0x24
 800bc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0201 	bic.w	r2, r2, #1
 800bc86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6819      	ldr	r1, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f042 0201 	orr.w	r2, r2, #1
 800bcb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e000      	b.n	800bcce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bccc:	2302      	movs	r3, #2
  }
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b085      	sub	sp, #20
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	d139      	bne.n	800bd64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d101      	bne.n	800bcfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	e033      	b.n	800bd66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2224      	movs	r2, #36	; 0x24
 800bd0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0201 	bic.w	r2, r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bd2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	021b      	lsls	r3, r3, #8
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f042 0201 	orr.w	r2, r2, #1
 800bd4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2220      	movs	r2, #32
 800bd54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	e000      	b.n	800bd66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bd64:	2302      	movs	r3, #2
  }
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
	...

0800bd74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e0bf      	b.n	800bf06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7f7 f838 	bl	8002e10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2202      	movs	r2, #2
 800bda4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800bdb6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6999      	ldr	r1, [r3, #24]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bdcc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6899      	ldr	r1, [r3, #8]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	4b4a      	ldr	r3, [pc, #296]	; (800bf10 <HAL_LTDC_Init+0x19c>)
 800bde8:	400b      	ands	r3, r1
 800bdea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	041b      	lsls	r3, r3, #16
 800bdf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6899      	ldr	r1, [r3, #8]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	431a      	orrs	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	430a      	orrs	r2, r1
 800be08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68d9      	ldr	r1, [r3, #12]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	4b3e      	ldr	r3, [pc, #248]	; (800bf10 <HAL_LTDC_Init+0x19c>)
 800be16:	400b      	ands	r3, r1
 800be18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	041b      	lsls	r3, r3, #16
 800be20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68d9      	ldr	r1, [r3, #12]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a1a      	ldr	r2, [r3, #32]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	431a      	orrs	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	430a      	orrs	r2, r1
 800be36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6919      	ldr	r1, [r3, #16]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b33      	ldr	r3, [pc, #204]	; (800bf10 <HAL_LTDC_Init+0x19c>)
 800be44:	400b      	ands	r3, r1
 800be46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4c:	041b      	lsls	r3, r3, #16
 800be4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6919      	ldr	r1, [r3, #16]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	431a      	orrs	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6959      	ldr	r1, [r3, #20]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	4b27      	ldr	r3, [pc, #156]	; (800bf10 <HAL_LTDC_Init+0x19c>)
 800be72:	400b      	ands	r3, r1
 800be74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7a:	041b      	lsls	r3, r3, #16
 800be7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6959      	ldr	r1, [r3, #20]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	431a      	orrs	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	430a      	orrs	r2, r1
 800be92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be9a:	021b      	lsls	r3, r3, #8
 800be9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bea4:	041b      	lsls	r3, r3, #16
 800bea6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800beb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800beca:	431a      	orrs	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	430a      	orrs	r2, r1
 800bed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f042 0206 	orr.w	r2, r2, #6
 800bee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	699a      	ldr	r2, [r3, #24]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f042 0201 	orr.w	r2, r2, #1
 800bef2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	f000f800 	.word	0xf000f800

0800bf14 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f003 0304 	and.w	r3, r3, #4
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d023      	beq.n	800bf7e <HAL_LTDC_IRQHandler+0x6a>
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01e      	beq.n	800bf7e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f022 0204 	bic.w	r2, r2, #4
 800bf4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2204      	movs	r2, #4
 800bf56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf5e:	f043 0201 	orr.w	r2, r3, #1
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2204      	movs	r2, #4
 800bf6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f86f 	bl	800c05c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d023      	beq.n	800bfd0 <HAL_LTDC_IRQHandler+0xbc>
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d01e      	beq.n	800bfd0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f022 0202 	bic.w	r2, r2, #2
 800bfa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfb0:	f043 0202 	orr.w	r2, r3, #2
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2204      	movs	r2, #4
 800bfbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f846 	bl	800c05c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d01b      	beq.n	800c012 <HAL_LTDC_IRQHandler+0xfe>
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d016      	beq.n	800c012 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f022 0201 	bic.w	r2, r2, #1
 800bff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2201      	movs	r2, #1
 800bffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f82f 	bl	800c070 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f003 0308 	and.w	r3, r3, #8
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d01b      	beq.n	800c054 <HAL_LTDC_IRQHandler+0x140>
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f003 0308 	and.w	r3, r3, #8
 800c022:	2b00      	cmp	r3, #0
 800c024:	d016      	beq.n	800c054 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f022 0208 	bic.w	r2, r2, #8
 800c034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2208      	movs	r2, #8
 800c03c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2201      	movs	r2, #1
 800c042:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f818 	bl	800c084 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c054:	bf00      	nop
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c098:	b5b0      	push	{r4, r5, r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d101      	bne.n	800c0b2 <HAL_LTDC_ConfigLayer+0x1a>
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e02c      	b.n	800c10c <HAL_LTDC_ConfigLayer+0x74>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2134      	movs	r1, #52	; 0x34
 800c0c8:	fb01 f303 	mul.w	r3, r1, r3
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	461d      	mov	r5, r3
 800c0d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0e4:	682b      	ldr	r3, [r5, #0]
 800c0e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	68b9      	ldr	r1, [r7, #8]
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f000 f81f 	bl	800c130 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bdb0      	pop	{r4, r5, r7, pc}

0800c114 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c122:	b2db      	uxtb	r3, r3
}
 800c124:	4618      	mov	r0, r3
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c130:	b480      	push	{r7}
 800c132:	b089      	sub	sp, #36	; 0x24
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	0c1b      	lsrs	r3, r3, #16
 800c148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c14c:	4413      	add	r3, r2
 800c14e:	041b      	lsls	r3, r3, #16
 800c150:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	01db      	lsls	r3, r3, #7
 800c15c:	4413      	add	r3, r2
 800c15e:	3384      	adds	r3, #132	; 0x84
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	6812      	ldr	r2, [r2, #0]
 800c166:	4611      	mov	r1, r2
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	01d2      	lsls	r2, r2, #7
 800c16c:	440a      	add	r2, r1
 800c16e:	3284      	adds	r2, #132	; 0x84
 800c170:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c174:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	0c1b      	lsrs	r3, r3, #16
 800c182:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c186:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c188:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4619      	mov	r1, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	01db      	lsls	r3, r3, #7
 800c194:	440b      	add	r3, r1
 800c196:	3384      	adds	r3, #132	; 0x84
 800c198:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c19e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	68da      	ldr	r2, [r3, #12]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1ae:	4413      	add	r3, r2
 800c1b0:	041b      	lsls	r3, r3, #16
 800c1b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	01db      	lsls	r3, r3, #7
 800c1be:	4413      	add	r3, r2
 800c1c0:	3384      	adds	r3, #132	; 0x84
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	6812      	ldr	r2, [r2, #0]
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	01d2      	lsls	r2, r2, #7
 800c1ce:	440a      	add	r2, r1
 800c1d0:	3284      	adds	r2, #132	; 0x84
 800c1d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c1d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	689a      	ldr	r2, [r3, #8]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1e6:	4413      	add	r3, r2
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	01db      	lsls	r3, r3, #7
 800c1f4:	440b      	add	r3, r1
 800c1f6:	3384      	adds	r3, #132	; 0x84
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	461a      	mov	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	01db      	lsls	r3, r3, #7
 800c20a:	4413      	add	r3, r2
 800c20c:	3384      	adds	r3, #132	; 0x84
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	6812      	ldr	r2, [r2, #0]
 800c214:	4611      	mov	r1, r2
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	01d2      	lsls	r2, r2, #7
 800c21a:	440a      	add	r2, r1
 800c21c:	3284      	adds	r2, #132	; 0x84
 800c21e:	f023 0307 	bic.w	r3, r3, #7
 800c222:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	01db      	lsls	r3, r3, #7
 800c22e:	4413      	add	r3, r2
 800c230:	3384      	adds	r3, #132	; 0x84
 800c232:	461a      	mov	r2, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c240:	021b      	lsls	r3, r3, #8
 800c242:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c24a:	041b      	lsls	r3, r3, #16
 800c24c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	061b      	lsls	r3, r3, #24
 800c254:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	01db      	lsls	r3, r3, #7
 800c260:	4413      	add	r3, r2
 800c262:	3384      	adds	r3, #132	; 0x84
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	01db      	lsls	r3, r3, #7
 800c270:	4413      	add	r3, r2
 800c272:	3384      	adds	r3, #132	; 0x84
 800c274:	461a      	mov	r2, r3
 800c276:	2300      	movs	r3, #0
 800c278:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c280:	461a      	mov	r2, r3
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	431a      	orrs	r2, r3
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	431a      	orrs	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4619      	mov	r1, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	01db      	lsls	r3, r3, #7
 800c294:	440b      	add	r3, r1
 800c296:	3384      	adds	r3, #132	; 0x84
 800c298:	4619      	mov	r1, r3
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	01db      	lsls	r3, r3, #7
 800c2aa:	4413      	add	r3, r2
 800c2ac:	3384      	adds	r3, #132	; 0x84
 800c2ae:	695b      	ldr	r3, [r3, #20]
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	6812      	ldr	r2, [r2, #0]
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	01d2      	lsls	r2, r2, #7
 800c2ba:	440a      	add	r2, r1
 800c2bc:	3284      	adds	r2, #132	; 0x84
 800c2be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	01db      	lsls	r3, r3, #7
 800c2ce:	4413      	add	r3, r2
 800c2d0:	3384      	adds	r3, #132	; 0x84
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	01db      	lsls	r3, r3, #7
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3384      	adds	r3, #132	; 0x84
 800c2e8:	69da      	ldr	r2, [r3, #28]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	01db      	lsls	r3, r3, #7
 800c2f4:	440b      	add	r3, r1
 800c2f6:	3384      	adds	r3, #132	; 0x84
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4b58      	ldr	r3, [pc, #352]	; (800c45c <LTDC_SetConfig+0x32c>)
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	6a1b      	ldr	r3, [r3, #32]
 800c308:	68f9      	ldr	r1, [r7, #12]
 800c30a:	6809      	ldr	r1, [r1, #0]
 800c30c:	4608      	mov	r0, r1
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	01c9      	lsls	r1, r1, #7
 800c312:	4401      	add	r1, r0
 800c314:	3184      	adds	r1, #132	; 0x84
 800c316:	4313      	orrs	r3, r2
 800c318:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	01db      	lsls	r3, r3, #7
 800c324:	4413      	add	r3, r2
 800c326:	3384      	adds	r3, #132	; 0x84
 800c328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	01db      	lsls	r3, r3, #7
 800c334:	4413      	add	r3, r2
 800c336:	3384      	adds	r3, #132	; 0x84
 800c338:	461a      	mov	r2, r3
 800c33a:	2300      	movs	r3, #0
 800c33c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	01db      	lsls	r3, r3, #7
 800c348:	4413      	add	r3, r2
 800c34a:	3384      	adds	r3, #132	; 0x84
 800c34c:	461a      	mov	r2, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c352:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d102      	bne.n	800c362 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800c35c:	2304      	movs	r3, #4
 800c35e:	61fb      	str	r3, [r7, #28]
 800c360:	e01b      	b.n	800c39a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d102      	bne.n	800c370 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800c36a:	2303      	movs	r3, #3
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	e014      	b.n	800c39a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	2b04      	cmp	r3, #4
 800c376:	d00b      	beq.n	800c390 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d007      	beq.n	800c390 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c384:	2b03      	cmp	r3, #3
 800c386:	d003      	beq.n	800c390 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c38c:	2b07      	cmp	r3, #7
 800c38e:	d102      	bne.n	800c396 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800c390:	2302      	movs	r3, #2
 800c392:	61fb      	str	r3, [r7, #28]
 800c394:	e001      	b.n	800c39a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800c396:	2301      	movs	r3, #1
 800c398:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	01db      	lsls	r3, r3, #7
 800c3a4:	4413      	add	r3, r2
 800c3a6:	3384      	adds	r3, #132	; 0x84
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	6812      	ldr	r2, [r2, #0]
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	01d2      	lsls	r2, r2, #7
 800c3b4:	440a      	add	r2, r1
 800c3b6:	3284      	adds	r2, #132	; 0x84
 800c3b8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c3bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	fb02 f303 	mul.w	r3, r2, r3
 800c3c8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	6859      	ldr	r1, [r3, #4]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	1acb      	subs	r3, r1, r3
 800c3d4:	69f9      	ldr	r1, [r7, #28]
 800c3d6:	fb01 f303 	mul.w	r3, r1, r3
 800c3da:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c3dc:	68f9      	ldr	r1, [r7, #12]
 800c3de:	6809      	ldr	r1, [r1, #0]
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	01c9      	lsls	r1, r1, #7
 800c3e6:	4401      	add	r1, r0
 800c3e8:	3184      	adds	r1, #132	; 0x84
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	01db      	lsls	r3, r3, #7
 800c3f8:	4413      	add	r3, r2
 800c3fa:	3384      	adds	r3, #132	; 0x84
 800c3fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4619      	mov	r1, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	01db      	lsls	r3, r3, #7
 800c408:	440b      	add	r3, r1
 800c40a:	3384      	adds	r3, #132	; 0x84
 800c40c:	4619      	mov	r1, r3
 800c40e:	4b14      	ldr	r3, [pc, #80]	; (800c460 <LTDC_SetConfig+0x330>)
 800c410:	4013      	ands	r3, r2
 800c412:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	461a      	mov	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	01db      	lsls	r3, r3, #7
 800c41e:	4413      	add	r3, r2
 800c420:	3384      	adds	r3, #132	; 0x84
 800c422:	461a      	mov	r2, r3
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c428:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	01db      	lsls	r3, r3, #7
 800c434:	4413      	add	r3, r2
 800c436:	3384      	adds	r3, #132	; 0x84
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	6812      	ldr	r2, [r2, #0]
 800c43e:	4611      	mov	r1, r2
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	01d2      	lsls	r2, r2, #7
 800c444:	440a      	add	r2, r1
 800c446:	3284      	adds	r2, #132	; 0x84
 800c448:	f043 0301 	orr.w	r3, r3, #1
 800c44c:	6013      	str	r3, [r2, #0]
}
 800c44e:	bf00      	nop
 800c450:	3724      	adds	r7, #36	; 0x24
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	fffff8f8 	.word	0xfffff8f8
 800c460:	fffff800 	.word	0xfffff800

0800c464 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c464:	b480      	push	{r7}
 800c466:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c468:	4b05      	ldr	r3, [pc, #20]	; (800c480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a04      	ldr	r2, [pc, #16]	; (800c480 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c46e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c472:	6013      	str	r3, [r2, #0]
}
 800c474:	bf00      	nop
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	40007000 	.word	0x40007000

0800c484 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c48e:	4b23      	ldr	r3, [pc, #140]	; (800c51c <HAL_PWREx_EnableOverDrive+0x98>)
 800c490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c492:	4a22      	ldr	r2, [pc, #136]	; (800c51c <HAL_PWREx_EnableOverDrive+0x98>)
 800c494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c498:	6413      	str	r3, [r2, #64]	; 0x40
 800c49a:	4b20      	ldr	r3, [pc, #128]	; (800c51c <HAL_PWREx_EnableOverDrive+0x98>)
 800c49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4a2:	603b      	str	r3, [r7, #0]
 800c4a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c4a6:	4b1e      	ldr	r3, [pc, #120]	; (800c520 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a1d      	ldr	r2, [pc, #116]	; (800c520 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c4b2:	f7fa fdcd 	bl	8007050 <HAL_GetTick>
 800c4b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c4b8:	e009      	b.n	800c4ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c4ba:	f7fa fdc9 	bl	8007050 <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4c8:	d901      	bls.n	800c4ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e022      	b.n	800c514 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c4ce:	4b14      	ldr	r3, [pc, #80]	; (800c520 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4da:	d1ee      	bne.n	800c4ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c4dc:	4b10      	ldr	r3, [pc, #64]	; (800c520 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a0f      	ldr	r2, [pc, #60]	; (800c520 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c4e8:	f7fa fdb2 	bl	8007050 <HAL_GetTick>
 800c4ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4ee:	e009      	b.n	800c504 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c4f0:	f7fa fdae 	bl	8007050 <HAL_GetTick>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4fe:	d901      	bls.n	800c504 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c500:	2303      	movs	r3, #3
 800c502:	e007      	b.n	800c514 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c504:	4b06      	ldr	r3, [pc, #24]	; (800c520 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c50c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c510:	d1ee      	bne.n	800c4f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	40023800 	.word	0x40023800
 800c520:	40007000 	.word	0x40007000

0800c524 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af02      	add	r7, sp, #8
 800c52a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c52c:	f7fa fd90 	bl	8007050 <HAL_GetTick>
 800c530:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e067      	b.n	800c60c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c542:	b2db      	uxtb	r3, r3
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10b      	bne.n	800c560 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7f6 fd25 	bl	8002fa0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c556:	f241 3188 	movw	r1, #5000	; 0x1388
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f85e 	bl	800c61c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	3b01      	subs	r3, #1
 800c570:	021a      	lsls	r2, r3, #8
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	430a      	orrs	r2, r1
 800c578:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	2120      	movs	r1, #32
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f856 	bl	800c638 <QSPI_WaitFlagStateUntilTimeout>
 800c58c:	4603      	mov	r3, r0
 800c58e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c590:	7afb      	ldrb	r3, [r7, #11]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d135      	bne.n	800c602 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	4b1d      	ldr	r3, [pc, #116]	; (800c614 <HAL_QSPI_Init+0xf0>)
 800c59e:	4013      	ands	r3, r2
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	6852      	ldr	r2, [r2, #4]
 800c5a4:	0611      	lsls	r1, r2, #24
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	68d2      	ldr	r2, [r2, #12]
 800c5aa:	4311      	orrs	r1, r2
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	69d2      	ldr	r2, [r2, #28]
 800c5b0:	4311      	orrs	r1, r2
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	6a12      	ldr	r2, [r2, #32]
 800c5b6:	4311      	orrs	r1, r2
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	6812      	ldr	r2, [r2, #0]
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	4b14      	ldr	r3, [pc, #80]	; (800c618 <HAL_QSPI_Init+0xf4>)
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	6912      	ldr	r2, [r2, #16]
 800c5ce:	0411      	lsls	r1, r2, #16
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	6952      	ldr	r2, [r2, #20]
 800c5d4:	4311      	orrs	r1, r2
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	6992      	ldr	r2, [r2, #24]
 800c5da:	4311      	orrs	r1, r2
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	430b      	orrs	r3, r1
 800c5e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 0201 	orr.w	r2, r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c60a:	7afb      	ldrb	r3, [r7, #11]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	00ffff2f 	.word	0x00ffff2f
 800c618:	ffe0f8fe 	.word	0xffe0f8fe

0800c61c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	603b      	str	r3, [r7, #0]
 800c644:	4613      	mov	r3, r2
 800c646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c648:	e01a      	b.n	800c680 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c650:	d016      	beq.n	800c680 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c652:	f7fa fcfd 	bl	8007050 <HAL_GetTick>
 800c656:	4602      	mov	r2, r0
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d302      	bcc.n	800c668 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10b      	bne.n	800c680 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2204      	movs	r2, #4
 800c66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c674:	f043 0201 	orr.w	r2, r3, #1
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e00e      	b.n	800c69e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	689a      	ldr	r2, [r3, #8]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	4013      	ands	r3, r2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bf14      	ite	ne
 800c68e:	2301      	movne	r3, #1
 800c690:	2300      	moveq	r3, #0
 800c692:	b2db      	uxtb	r3, r3
 800c694:	461a      	mov	r2, r3
 800c696:	79fb      	ldrb	r3, [r7, #7]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d1d6      	bne.n	800c64a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
	...

0800c6a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e291      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 8087 	beq.w	800c7da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c6cc:	4b96      	ldr	r3, [pc, #600]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f003 030c 	and.w	r3, r3, #12
 800c6d4:	2b04      	cmp	r3, #4
 800c6d6:	d00c      	beq.n	800c6f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6d8:	4b93      	ldr	r3, [pc, #588]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f003 030c 	and.w	r3, r3, #12
 800c6e0:	2b08      	cmp	r3, #8
 800c6e2:	d112      	bne.n	800c70a <HAL_RCC_OscConfig+0x62>
 800c6e4:	4b90      	ldr	r3, [pc, #576]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6f0:	d10b      	bne.n	800c70a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6f2:	4b8d      	ldr	r3, [pc, #564]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d06c      	beq.n	800c7d8 <HAL_RCC_OscConfig+0x130>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d168      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	e26b      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c712:	d106      	bne.n	800c722 <HAL_RCC_OscConfig+0x7a>
 800c714:	4b84      	ldr	r3, [pc, #528]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a83      	ldr	r2, [pc, #524]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c71a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	e02e      	b.n	800c780 <HAL_RCC_OscConfig+0xd8>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10c      	bne.n	800c744 <HAL_RCC_OscConfig+0x9c>
 800c72a:	4b7f      	ldr	r3, [pc, #508]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a7e      	ldr	r2, [pc, #504]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	4b7c      	ldr	r3, [pc, #496]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a7b      	ldr	r2, [pc, #492]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c73c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	e01d      	b.n	800c780 <HAL_RCC_OscConfig+0xd8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c74c:	d10c      	bne.n	800c768 <HAL_RCC_OscConfig+0xc0>
 800c74e:	4b76      	ldr	r3, [pc, #472]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a75      	ldr	r2, [pc, #468]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	4b73      	ldr	r3, [pc, #460]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a72      	ldr	r2, [pc, #456]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	e00b      	b.n	800c780 <HAL_RCC_OscConfig+0xd8>
 800c768:	4b6f      	ldr	r3, [pc, #444]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a6e      	ldr	r2, [pc, #440]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c76e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c772:	6013      	str	r3, [r2, #0]
 800c774:	4b6c      	ldr	r3, [pc, #432]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a6b      	ldr	r2, [pc, #428]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c77a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c77e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d013      	beq.n	800c7b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c788:	f7fa fc62 	bl	8007050 <HAL_GetTick>
 800c78c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c78e:	e008      	b.n	800c7a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c790:	f7fa fc5e 	bl	8007050 <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	2b64      	cmp	r3, #100	; 0x64
 800c79c:	d901      	bls.n	800c7a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e21f      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7a2:	4b61      	ldr	r3, [pc, #388]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0f0      	beq.n	800c790 <HAL_RCC_OscConfig+0xe8>
 800c7ae:	e014      	b.n	800c7da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7b0:	f7fa fc4e 	bl	8007050 <HAL_GetTick>
 800c7b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7b6:	e008      	b.n	800c7ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c7b8:	f7fa fc4a 	bl	8007050 <HAL_GetTick>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	2b64      	cmp	r3, #100	; 0x64
 800c7c4:	d901      	bls.n	800c7ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	e20b      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7ca:	4b57      	ldr	r3, [pc, #348]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1f0      	bne.n	800c7b8 <HAL_RCC_OscConfig+0x110>
 800c7d6:	e000      	b.n	800c7da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 0302 	and.w	r3, r3, #2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d069      	beq.n	800c8ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c7e6:	4b50      	ldr	r3, [pc, #320]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f003 030c 	and.w	r3, r3, #12
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00b      	beq.n	800c80a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7f2:	4b4d      	ldr	r3, [pc, #308]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f003 030c 	and.w	r3, r3, #12
 800c7fa:	2b08      	cmp	r3, #8
 800c7fc:	d11c      	bne.n	800c838 <HAL_RCC_OscConfig+0x190>
 800c7fe:	4b4a      	ldr	r3, [pc, #296]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d116      	bne.n	800c838 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c80a:	4b47      	ldr	r3, [pc, #284]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b00      	cmp	r3, #0
 800c814:	d005      	beq.n	800c822 <HAL_RCC_OscConfig+0x17a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d001      	beq.n	800c822 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e1df      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c822:	4b41      	ldr	r3, [pc, #260]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	493d      	ldr	r1, [pc, #244]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c832:	4313      	orrs	r3, r2
 800c834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c836:	e040      	b.n	800c8ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d023      	beq.n	800c888 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c840:	4b39      	ldr	r3, [pc, #228]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a38      	ldr	r2, [pc, #224]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c846:	f043 0301 	orr.w	r3, r3, #1
 800c84a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c84c:	f7fa fc00 	bl	8007050 <HAL_GetTick>
 800c850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c852:	e008      	b.n	800c866 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c854:	f7fa fbfc 	bl	8007050 <HAL_GetTick>
 800c858:	4602      	mov	r2, r0
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d901      	bls.n	800c866 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c862:	2303      	movs	r3, #3
 800c864:	e1bd      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c866:	4b30      	ldr	r3, [pc, #192]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0f0      	beq.n	800c854 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c872:	4b2d      	ldr	r3, [pc, #180]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	4929      	ldr	r1, [pc, #164]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c882:	4313      	orrs	r3, r2
 800c884:	600b      	str	r3, [r1, #0]
 800c886:	e018      	b.n	800c8ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c888:	4b27      	ldr	r3, [pc, #156]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a26      	ldr	r2, [pc, #152]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c88e:	f023 0301 	bic.w	r3, r3, #1
 800c892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c894:	f7fa fbdc 	bl	8007050 <HAL_GetTick>
 800c898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c89a:	e008      	b.n	800c8ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c89c:	f7fa fbd8 	bl	8007050 <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d901      	bls.n	800c8ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e199      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8ae:	4b1e      	ldr	r3, [pc, #120]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0302 	and.w	r3, r3, #2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f0      	bne.n	800c89c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0308 	and.w	r3, r3, #8
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d038      	beq.n	800c938 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d019      	beq.n	800c902 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c8ce:	4b16      	ldr	r3, [pc, #88]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8d4:	f043 0301 	orr.w	r3, r3, #1
 800c8d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8da:	f7fa fbb9 	bl	8007050 <HAL_GetTick>
 800c8de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8e0:	e008      	b.n	800c8f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c8e2:	f7fa fbb5 	bl	8007050 <HAL_GetTick>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d901      	bls.n	800c8f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e176      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8f4:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0f0      	beq.n	800c8e2 <HAL_RCC_OscConfig+0x23a>
 800c900:	e01a      	b.n	800c938 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c902:	4b09      	ldr	r3, [pc, #36]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c906:	4a08      	ldr	r2, [pc, #32]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c908:	f023 0301 	bic.w	r3, r3, #1
 800c90c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c90e:	f7fa fb9f 	bl	8007050 <HAL_GetTick>
 800c912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c914:	e00a      	b.n	800c92c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c916:	f7fa fb9b 	bl	8007050 <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	2b02      	cmp	r3, #2
 800c922:	d903      	bls.n	800c92c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e15c      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
 800c928:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c92c:	4b91      	ldr	r3, [pc, #580]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1ee      	bne.n	800c916 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0304 	and.w	r3, r3, #4
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 80a4 	beq.w	800ca8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c946:	4b8b      	ldr	r3, [pc, #556]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10d      	bne.n	800c96e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c952:	4b88      	ldr	r3, [pc, #544]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c956:	4a87      	ldr	r2, [pc, #540]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c95c:	6413      	str	r3, [r2, #64]	; 0x40
 800c95e:	4b85      	ldr	r3, [pc, #532]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c966:	60bb      	str	r3, [r7, #8]
 800c968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c96a:	2301      	movs	r3, #1
 800c96c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c96e:	4b82      	ldr	r3, [pc, #520]	; (800cb78 <HAL_RCC_OscConfig+0x4d0>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c976:	2b00      	cmp	r3, #0
 800c978:	d118      	bne.n	800c9ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c97a:	4b7f      	ldr	r3, [pc, #508]	; (800cb78 <HAL_RCC_OscConfig+0x4d0>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a7e      	ldr	r2, [pc, #504]	; (800cb78 <HAL_RCC_OscConfig+0x4d0>)
 800c980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c986:	f7fa fb63 	bl	8007050 <HAL_GetTick>
 800c98a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c98c:	e008      	b.n	800c9a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c98e:	f7fa fb5f 	bl	8007050 <HAL_GetTick>
 800c992:	4602      	mov	r2, r0
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	2b64      	cmp	r3, #100	; 0x64
 800c99a:	d901      	bls.n	800c9a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c99c:	2303      	movs	r3, #3
 800c99e:	e120      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c9a0:	4b75      	ldr	r3, [pc, #468]	; (800cb78 <HAL_RCC_OscConfig+0x4d0>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0f0      	beq.n	800c98e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d106      	bne.n	800c9c2 <HAL_RCC_OscConfig+0x31a>
 800c9b4:	4b6f      	ldr	r3, [pc, #444]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b8:	4a6e      	ldr	r2, [pc, #440]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	6713      	str	r3, [r2, #112]	; 0x70
 800c9c0:	e02d      	b.n	800ca1e <HAL_RCC_OscConfig+0x376>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10c      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x33c>
 800c9ca:	4b6a      	ldr	r3, [pc, #424]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ce:	4a69      	ldr	r2, [pc, #420]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9d0:	f023 0301 	bic.w	r3, r3, #1
 800c9d4:	6713      	str	r3, [r2, #112]	; 0x70
 800c9d6:	4b67      	ldr	r3, [pc, #412]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	4a66      	ldr	r2, [pc, #408]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9dc:	f023 0304 	bic.w	r3, r3, #4
 800c9e0:	6713      	str	r3, [r2, #112]	; 0x70
 800c9e2:	e01c      	b.n	800ca1e <HAL_RCC_OscConfig+0x376>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	2b05      	cmp	r3, #5
 800c9ea:	d10c      	bne.n	800ca06 <HAL_RCC_OscConfig+0x35e>
 800c9ec:	4b61      	ldr	r3, [pc, #388]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f0:	4a60      	ldr	r2, [pc, #384]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9f2:	f043 0304 	orr.w	r3, r3, #4
 800c9f6:	6713      	str	r3, [r2, #112]	; 0x70
 800c9f8:	4b5e      	ldr	r3, [pc, #376]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9fc:	4a5d      	ldr	r2, [pc, #372]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	6713      	str	r3, [r2, #112]	; 0x70
 800ca04:	e00b      	b.n	800ca1e <HAL_RCC_OscConfig+0x376>
 800ca06:	4b5b      	ldr	r3, [pc, #364]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0a:	4a5a      	ldr	r2, [pc, #360]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca0c:	f023 0301 	bic.w	r3, r3, #1
 800ca10:	6713      	str	r3, [r2, #112]	; 0x70
 800ca12:	4b58      	ldr	r3, [pc, #352]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca16:	4a57      	ldr	r2, [pc, #348]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca18:	f023 0304 	bic.w	r3, r3, #4
 800ca1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d015      	beq.n	800ca52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca26:	f7fa fb13 	bl	8007050 <HAL_GetTick>
 800ca2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca2c:	e00a      	b.n	800ca44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca2e:	f7fa fb0f 	bl	8007050 <HAL_GetTick>
 800ca32:	4602      	mov	r2, r0
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d901      	bls.n	800ca44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e0ce      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca44:	4b4b      	ldr	r3, [pc, #300]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca48:	f003 0302 	and.w	r3, r3, #2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0ee      	beq.n	800ca2e <HAL_RCC_OscConfig+0x386>
 800ca50:	e014      	b.n	800ca7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca52:	f7fa fafd 	bl	8007050 <HAL_GetTick>
 800ca56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca58:	e00a      	b.n	800ca70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca5a:	f7fa faf9 	bl	8007050 <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d901      	bls.n	800ca70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	e0b8      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca70:	4b40      	ldr	r3, [pc, #256]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca74:	f003 0302 	and.w	r3, r3, #2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1ee      	bne.n	800ca5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d105      	bne.n	800ca8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca82:	4b3c      	ldr	r3, [pc, #240]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	4a3b      	ldr	r2, [pc, #236]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 80a4 	beq.w	800cbe0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca98:	4b36      	ldr	r3, [pc, #216]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f003 030c 	and.w	r3, r3, #12
 800caa0:	2b08      	cmp	r3, #8
 800caa2:	d06b      	beq.n	800cb7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	699b      	ldr	r3, [r3, #24]
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d149      	bne.n	800cb40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caac:	4b31      	ldr	r3, [pc, #196]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a30      	ldr	r2, [pc, #192]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cab8:	f7fa faca 	bl	8007050 <HAL_GetTick>
 800cabc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cabe:	e008      	b.n	800cad2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cac0:	f7fa fac6 	bl	8007050 <HAL_GetTick>
 800cac4:	4602      	mov	r2, r0
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d901      	bls.n	800cad2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e087      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cad2:	4b28      	ldr	r3, [pc, #160]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1f0      	bne.n	800cac0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	69da      	ldr	r2, [r3, #28]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	431a      	orrs	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caec:	019b      	lsls	r3, r3, #6
 800caee:	431a      	orrs	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf4:	085b      	lsrs	r3, r3, #1
 800caf6:	3b01      	subs	r3, #1
 800caf8:	041b      	lsls	r3, r3, #16
 800cafa:	431a      	orrs	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb00:	061b      	lsls	r3, r3, #24
 800cb02:	4313      	orrs	r3, r2
 800cb04:	4a1b      	ldr	r2, [pc, #108]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cb06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb0c:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a18      	ldr	r2, [pc, #96]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cb12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb18:	f7fa fa9a 	bl	8007050 <HAL_GetTick>
 800cb1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb1e:	e008      	b.n	800cb32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb20:	f7fa fa96 	bl	8007050 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d901      	bls.n	800cb32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e057      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb32:	4b10      	ldr	r3, [pc, #64]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0f0      	beq.n	800cb20 <HAL_RCC_OscConfig+0x478>
 800cb3e:	e04f      	b.n	800cbe0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb40:	4b0c      	ldr	r3, [pc, #48]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a0b      	ldr	r2, [pc, #44]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cb46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4c:	f7fa fa80 	bl	8007050 <HAL_GetTick>
 800cb50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb52:	e008      	b.n	800cb66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb54:	f7fa fa7c 	bl	8007050 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d901      	bls.n	800cb66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e03d      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb66:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <HAL_RCC_OscConfig+0x4cc>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1f0      	bne.n	800cb54 <HAL_RCC_OscConfig+0x4ac>
 800cb72:	e035      	b.n	800cbe0 <HAL_RCC_OscConfig+0x538>
 800cb74:	40023800 	.word	0x40023800
 800cb78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800cb7c:	4b1b      	ldr	r3, [pc, #108]	; (800cbec <HAL_RCC_OscConfig+0x544>)
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d028      	beq.n	800cbdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d121      	bne.n	800cbdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d11a      	bne.n	800cbdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cbac:	4013      	ands	r3, r2
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cbb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d111      	bne.n	800cbdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc2:	085b      	lsrs	r3, r3, #1
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d107      	bne.n	800cbdc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d001      	beq.n	800cbe0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e000      	b.n	800cbe2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	40023800 	.word	0x40023800

0800cbf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e0d0      	b.n	800cdaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cc08:	4b6a      	ldr	r3, [pc, #424]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 030f 	and.w	r3, r3, #15
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d910      	bls.n	800cc38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc16:	4b67      	ldr	r3, [pc, #412]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f023 020f 	bic.w	r2, r3, #15
 800cc1e:	4965      	ldr	r1, [pc, #404]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc26:	4b63      	ldr	r3, [pc, #396]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 030f 	and.w	r3, r3, #15
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d001      	beq.n	800cc38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	e0b8      	b.n	800cdaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0302 	and.w	r3, r3, #2
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d020      	beq.n	800cc86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f003 0304 	and.w	r3, r3, #4
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc50:	4b59      	ldr	r3, [pc, #356]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	4a58      	ldr	r2, [pc, #352]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cc56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cc5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 0308 	and.w	r3, r3, #8
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d005      	beq.n	800cc74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cc68:	4b53      	ldr	r3, [pc, #332]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	4a52      	ldr	r2, [pc, #328]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cc6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cc72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc74:	4b50      	ldr	r3, [pc, #320]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	494d      	ldr	r1, [pc, #308]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cc82:	4313      	orrs	r3, r2
 800cc84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d040      	beq.n	800cd14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d107      	bne.n	800ccaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc9a:	4b47      	ldr	r3, [pc, #284]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d115      	bne.n	800ccd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e07f      	b.n	800cdaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d107      	bne.n	800ccc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ccb2:	4b41      	ldr	r3, [pc, #260]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d109      	bne.n	800ccd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e073      	b.n	800cdaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccc2:	4b3d      	ldr	r3, [pc, #244]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 0302 	and.w	r3, r3, #2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e06b      	b.n	800cdaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ccd2:	4b39      	ldr	r3, [pc, #228]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	f023 0203 	bic.w	r2, r3, #3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	4936      	ldr	r1, [pc, #216]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cce0:	4313      	orrs	r3, r2
 800cce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cce4:	f7fa f9b4 	bl	8007050 <HAL_GetTick>
 800cce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccea:	e00a      	b.n	800cd02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ccec:	f7fa f9b0 	bl	8007050 <HAL_GetTick>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d901      	bls.n	800cd02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e053      	b.n	800cdaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd02:	4b2d      	ldr	r3, [pc, #180]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f003 020c 	and.w	r2, r3, #12
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d1eb      	bne.n	800ccec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cd14:	4b27      	ldr	r3, [pc, #156]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 030f 	and.w	r3, r3, #15
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d210      	bcs.n	800cd44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd22:	4b24      	ldr	r3, [pc, #144]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f023 020f 	bic.w	r2, r3, #15
 800cd2a:	4922      	ldr	r1, [pc, #136]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd32:	4b20      	ldr	r3, [pc, #128]	; (800cdb4 <HAL_RCC_ClockConfig+0x1c4>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 030f 	and.w	r3, r3, #15
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d001      	beq.n	800cd44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	e032      	b.n	800cdaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 0304 	and.w	r3, r3, #4
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d008      	beq.n	800cd62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd50:	4b19      	ldr	r3, [pc, #100]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	4916      	ldr	r1, [pc, #88]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f003 0308 	and.w	r3, r3, #8
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d009      	beq.n	800cd82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cd6e:	4b12      	ldr	r3, [pc, #72]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	00db      	lsls	r3, r3, #3
 800cd7c:	490e      	ldr	r1, [pc, #56]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cd82:	f000 f821 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 800cd86:	4602      	mov	r2, r0
 800cd88:	4b0b      	ldr	r3, [pc, #44]	; (800cdb8 <HAL_RCC_ClockConfig+0x1c8>)
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	091b      	lsrs	r3, r3, #4
 800cd8e:	f003 030f 	and.w	r3, r3, #15
 800cd92:	490a      	ldr	r1, [pc, #40]	; (800cdbc <HAL_RCC_ClockConfig+0x1cc>)
 800cd94:	5ccb      	ldrb	r3, [r1, r3]
 800cd96:	fa22 f303 	lsr.w	r3, r2, r3
 800cd9a:	4a09      	ldr	r2, [pc, #36]	; (800cdc0 <HAL_RCC_ClockConfig+0x1d0>)
 800cd9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cd9e:	4b09      	ldr	r3, [pc, #36]	; (800cdc4 <HAL_RCC_ClockConfig+0x1d4>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7f6 fefe 	bl	8003ba4 <HAL_InitTick>

  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	40023c00 	.word	0x40023c00
 800cdb8:	40023800 	.word	0x40023800
 800cdbc:	0801d8ec 	.word	0x0801d8ec
 800cdc0:	20000010 	.word	0x20000010
 800cdc4:	20000054 	.word	0x20000054

0800cdc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cdc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdcc:	b090      	sub	sp, #64	; 0x40
 800cdce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdd8:	2300      	movs	r3, #0
 800cdda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cde0:	4b59      	ldr	r3, [pc, #356]	; (800cf48 <HAL_RCC_GetSysClockFreq+0x180>)
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	f003 030c 	and.w	r3, r3, #12
 800cde8:	2b08      	cmp	r3, #8
 800cdea:	d00d      	beq.n	800ce08 <HAL_RCC_GetSysClockFreq+0x40>
 800cdec:	2b08      	cmp	r3, #8
 800cdee:	f200 80a1 	bhi.w	800cf34 <HAL_RCC_GetSysClockFreq+0x16c>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d002      	beq.n	800cdfc <HAL_RCC_GetSysClockFreq+0x34>
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d003      	beq.n	800ce02 <HAL_RCC_GetSysClockFreq+0x3a>
 800cdfa:	e09b      	b.n	800cf34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cdfc:	4b53      	ldr	r3, [pc, #332]	; (800cf4c <HAL_RCC_GetSysClockFreq+0x184>)
 800cdfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ce00:	e09b      	b.n	800cf3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ce02:	4b53      	ldr	r3, [pc, #332]	; (800cf50 <HAL_RCC_GetSysClockFreq+0x188>)
 800ce04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ce06:	e098      	b.n	800cf3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ce08:	4b4f      	ldr	r3, [pc, #316]	; (800cf48 <HAL_RCC_GetSysClockFreq+0x180>)
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce10:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ce12:	4b4d      	ldr	r3, [pc, #308]	; (800cf48 <HAL_RCC_GetSysClockFreq+0x180>)
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d028      	beq.n	800ce70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce1e:	4b4a      	ldr	r3, [pc, #296]	; (800cf48 <HAL_RCC_GetSysClockFreq+0x180>)
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	099b      	lsrs	r3, r3, #6
 800ce24:	2200      	movs	r2, #0
 800ce26:	623b      	str	r3, [r7, #32]
 800ce28:	627a      	str	r2, [r7, #36]	; 0x24
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ce30:	2100      	movs	r1, #0
 800ce32:	4b47      	ldr	r3, [pc, #284]	; (800cf50 <HAL_RCC_GetSysClockFreq+0x188>)
 800ce34:	fb03 f201 	mul.w	r2, r3, r1
 800ce38:	2300      	movs	r3, #0
 800ce3a:	fb00 f303 	mul.w	r3, r0, r3
 800ce3e:	4413      	add	r3, r2
 800ce40:	4a43      	ldr	r2, [pc, #268]	; (800cf50 <HAL_RCC_GetSysClockFreq+0x188>)
 800ce42:	fba0 1202 	umull	r1, r2, r0, r2
 800ce46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce48:	460a      	mov	r2, r1
 800ce4a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ce4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce4e:	4413      	add	r3, r2
 800ce50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce54:	2200      	movs	r2, #0
 800ce56:	61bb      	str	r3, [r7, #24]
 800ce58:	61fa      	str	r2, [r7, #28]
 800ce5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ce62:	f7f3 fa25 	bl	80002b0 <__aeabi_uldivmod>
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce6e:	e053      	b.n	800cf18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce70:	4b35      	ldr	r3, [pc, #212]	; (800cf48 <HAL_RCC_GetSysClockFreq+0x180>)
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	099b      	lsrs	r3, r3, #6
 800ce76:	2200      	movs	r2, #0
 800ce78:	613b      	str	r3, [r7, #16]
 800ce7a:	617a      	str	r2, [r7, #20]
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ce82:	f04f 0b00 	mov.w	fp, #0
 800ce86:	4652      	mov	r2, sl
 800ce88:	465b      	mov	r3, fp
 800ce8a:	f04f 0000 	mov.w	r0, #0
 800ce8e:	f04f 0100 	mov.w	r1, #0
 800ce92:	0159      	lsls	r1, r3, #5
 800ce94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce98:	0150      	lsls	r0, r2, #5
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	ebb2 080a 	subs.w	r8, r2, sl
 800cea2:	eb63 090b 	sbc.w	r9, r3, fp
 800cea6:	f04f 0200 	mov.w	r2, #0
 800ceaa:	f04f 0300 	mov.w	r3, #0
 800ceae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ceb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ceb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ceba:	ebb2 0408 	subs.w	r4, r2, r8
 800cebe:	eb63 0509 	sbc.w	r5, r3, r9
 800cec2:	f04f 0200 	mov.w	r2, #0
 800cec6:	f04f 0300 	mov.w	r3, #0
 800ceca:	00eb      	lsls	r3, r5, #3
 800cecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ced0:	00e2      	lsls	r2, r4, #3
 800ced2:	4614      	mov	r4, r2
 800ced4:	461d      	mov	r5, r3
 800ced6:	eb14 030a 	adds.w	r3, r4, sl
 800ceda:	603b      	str	r3, [r7, #0]
 800cedc:	eb45 030b 	adc.w	r3, r5, fp
 800cee0:	607b      	str	r3, [r7, #4]
 800cee2:	f04f 0200 	mov.w	r2, #0
 800cee6:	f04f 0300 	mov.w	r3, #0
 800ceea:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ceee:	4629      	mov	r1, r5
 800cef0:	028b      	lsls	r3, r1, #10
 800cef2:	4621      	mov	r1, r4
 800cef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cef8:	4621      	mov	r1, r4
 800cefa:	028a      	lsls	r2, r1, #10
 800cefc:	4610      	mov	r0, r2
 800cefe:	4619      	mov	r1, r3
 800cf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf02:	2200      	movs	r2, #0
 800cf04:	60bb      	str	r3, [r7, #8]
 800cf06:	60fa      	str	r2, [r7, #12]
 800cf08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf0c:	f7f3 f9d0 	bl	80002b0 <__aeabi_uldivmod>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4613      	mov	r3, r2
 800cf16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <HAL_RCC_GetSysClockFreq+0x180>)
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	0c1b      	lsrs	r3, r3, #16
 800cf1e:	f003 0303 	and.w	r3, r3, #3
 800cf22:	3301      	adds	r3, #1
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800cf28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cf32:	e002      	b.n	800cf3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cf34:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <HAL_RCC_GetSysClockFreq+0x184>)
 800cf36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cf38:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3740      	adds	r7, #64	; 0x40
 800cf40:	46bd      	mov	sp, r7
 800cf42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf46:	bf00      	nop
 800cf48:	40023800 	.word	0x40023800
 800cf4c:	00f42400 	.word	0x00f42400
 800cf50:	017d7840 	.word	0x017d7840

0800cf54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf54:	b480      	push	{r7}
 800cf56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf58:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	20000010 	.word	0x20000010

0800cf6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cf70:	f7ff fff0 	bl	800cf54 <HAL_RCC_GetHCLKFreq>
 800cf74:	4602      	mov	r2, r0
 800cf76:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	0a9b      	lsrs	r3, r3, #10
 800cf7c:	f003 0307 	and.w	r3, r3, #7
 800cf80:	4903      	ldr	r1, [pc, #12]	; (800cf90 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf82:	5ccb      	ldrb	r3, [r1, r3]
 800cf84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	40023800 	.word	0x40023800
 800cf90:	0801d8fc 	.word	0x0801d8fc

0800cf94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cf98:	f7ff ffdc 	bl	800cf54 <HAL_RCC_GetHCLKFreq>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	0b5b      	lsrs	r3, r3, #13
 800cfa4:	f003 0307 	and.w	r3, r3, #7
 800cfa8:	4903      	ldr	r1, [pc, #12]	; (800cfb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cfaa:	5ccb      	ldrb	r3, [r1, r3]
 800cfac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	40023800 	.word	0x40023800
 800cfb8:	0801d8fc 	.word	0x0801d8fc

0800cfbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	220f      	movs	r2, #15
 800cfca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cfcc:	4b12      	ldr	r3, [pc, #72]	; (800d018 <HAL_RCC_GetClockConfig+0x5c>)
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	f003 0203 	and.w	r2, r3, #3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cfd8:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <HAL_RCC_GetClockConfig+0x5c>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <HAL_RCC_GetClockConfig+0x5c>)
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cff0:	4b09      	ldr	r3, [pc, #36]	; (800d018 <HAL_RCC_GetClockConfig+0x5c>)
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	08db      	lsrs	r3, r3, #3
 800cff6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <HAL_RCC_GetClockConfig+0x60>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 020f 	and.w	r2, r3, #15
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	601a      	str	r2, [r3, #0]
}
 800d00a:	bf00      	nop
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	40023800 	.word	0x40023800
 800d01c:	40023c00 	.word	0x40023c00

0800d020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b088      	sub	sp, #32
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d034:	2300      	movs	r3, #0
 800d036:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d012      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d048:	4b69      	ldr	r3, [pc, #420]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	4a68      	ldr	r2, [pc, #416]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d04e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d052:	6093      	str	r3, [r2, #8]
 800d054:	4b66      	ldr	r3, [pc, #408]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d056:	689a      	ldr	r2, [r3, #8]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05c:	4964      	ldr	r1, [pc, #400]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d05e:	4313      	orrs	r3, r2
 800d060:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d066:	2b00      	cmp	r3, #0
 800d068:	d101      	bne.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d06a:	2301      	movs	r3, #1
 800d06c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d017      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d07a:	4b5d      	ldr	r3, [pc, #372]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d080:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d088:	4959      	ldr	r1, [pc, #356]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d098:	d101      	bne.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d09a:	2301      	movs	r3, #1
 800d09c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d017      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d0b6:	4b4e      	ldr	r3, [pc, #312]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c4:	494a      	ldr	r1, [pc, #296]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0d4:	d101      	bne.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 0320 	and.w	r3, r3, #32
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 808b 	beq.w	800d21a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d104:	4b3a      	ldr	r3, [pc, #232]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d108:	4a39      	ldr	r2, [pc, #228]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d10a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d10e:	6413      	str	r3, [r2, #64]	; 0x40
 800d110:	4b37      	ldr	r3, [pc, #220]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d118:	60bb      	str	r3, [r7, #8]
 800d11a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d11c:	4b35      	ldr	r3, [pc, #212]	; (800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a34      	ldr	r2, [pc, #208]	; (800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d128:	f7f9 ff92 	bl	8007050 <HAL_GetTick>
 800d12c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d12e:	e008      	b.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d130:	f7f9 ff8e 	bl	8007050 <HAL_GetTick>
 800d134:	4602      	mov	r2, r0
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	2b64      	cmp	r3, #100	; 0x64
 800d13c:	d901      	bls.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d13e:	2303      	movs	r3, #3
 800d140:	e357      	b.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d142:	4b2c      	ldr	r3, [pc, #176]	; (800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d0f0      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d14e:	4b28      	ldr	r3, [pc, #160]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d156:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d035      	beq.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d166:	693a      	ldr	r2, [r7, #16]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d02e      	beq.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d16c:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d174:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d176:	4b1e      	ldr	r3, [pc, #120]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17a:	4a1d      	ldr	r2, [pc, #116]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d180:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d182:	4b1b      	ldr	r3, [pc, #108]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d186:	4a1a      	ldr	r2, [pc, #104]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d18c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d18e:	4a18      	ldr	r2, [pc, #96]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d194:	4b16      	ldr	r3, [pc, #88]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d198:	f003 0301 	and.w	r3, r3, #1
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d114      	bne.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1a0:	f7f9 ff56 	bl	8007050 <HAL_GetTick>
 800d1a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1a6:	e00a      	b.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d1a8:	f7f9 ff52 	bl	8007050 <HAL_GetTick>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d901      	bls.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e319      	b.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1be:	4b0c      	ldr	r3, [pc, #48]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c2:	f003 0302 	and.w	r3, r3, #2
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0ee      	beq.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1d6:	d111      	bne.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d1d8:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d1e4:	4b04      	ldr	r3, [pc, #16]	; (800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d1e6:	400b      	ands	r3, r1
 800d1e8:	4901      	ldr	r1, [pc, #4]	; (800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	608b      	str	r3, [r1, #8]
 800d1ee:	e00b      	b.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d1f0:	40023800 	.word	0x40023800
 800d1f4:	40007000 	.word	0x40007000
 800d1f8:	0ffffcff 	.word	0x0ffffcff
 800d1fc:	4baa      	ldr	r3, [pc, #680]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	4aa9      	ldr	r2, [pc, #676]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d202:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d206:	6093      	str	r3, [r2, #8]
 800d208:	4ba7      	ldr	r3, [pc, #668]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d20a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d214:	49a4      	ldr	r1, [pc, #656]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d216:	4313      	orrs	r3, r2
 800d218:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 0310 	and.w	r3, r3, #16
 800d222:	2b00      	cmp	r3, #0
 800d224:	d010      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d226:	4ba0      	ldr	r3, [pc, #640]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d22c:	4a9e      	ldr	r2, [pc, #632]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d22e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d232:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d236:	4b9c      	ldr	r3, [pc, #624]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d238:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d240:	4999      	ldr	r1, [pc, #612]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d242:	4313      	orrs	r3, r2
 800d244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00a      	beq.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d254:	4b94      	ldr	r3, [pc, #592]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d25a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d262:	4991      	ldr	r1, [pc, #580]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d264:	4313      	orrs	r3, r2
 800d266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00a      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d276:	4b8c      	ldr	r3, [pc, #560]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d284:	4988      	ldr	r1, [pc, #544]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d286:	4313      	orrs	r3, r2
 800d288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00a      	beq.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d298:	4b83      	ldr	r3, [pc, #524]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d29e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a6:	4980      	ldr	r1, [pc, #512]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00a      	beq.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d2ba:	4b7b      	ldr	r3, [pc, #492]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c8:	4977      	ldr	r1, [pc, #476]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00a      	beq.n	800d2f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d2dc:	4b72      	ldr	r3, [pc, #456]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e2:	f023 0203 	bic.w	r2, r3, #3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ea:	496f      	ldr	r1, [pc, #444]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00a      	beq.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d2fe:	4b6a      	ldr	r3, [pc, #424]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d304:	f023 020c 	bic.w	r2, r3, #12
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d30c:	4966      	ldr	r1, [pc, #408]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d30e:	4313      	orrs	r3, r2
 800d310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00a      	beq.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d320:	4b61      	ldr	r3, [pc, #388]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d326:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d32e:	495e      	ldr	r1, [pc, #376]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d330:	4313      	orrs	r3, r2
 800d332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00a      	beq.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d342:	4b59      	ldr	r3, [pc, #356]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d348:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d350:	4955      	ldr	r1, [pc, #340]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d352:	4313      	orrs	r3, r2
 800d354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00a      	beq.n	800d37a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d364:	4b50      	ldr	r3, [pc, #320]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d36a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d372:	494d      	ldr	r1, [pc, #308]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d374:	4313      	orrs	r3, r2
 800d376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00a      	beq.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d386:	4b48      	ldr	r3, [pc, #288]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d38c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d394:	4944      	ldr	r1, [pc, #272]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d396:	4313      	orrs	r3, r2
 800d398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00a      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d3a8:	4b3f      	ldr	r3, [pc, #252]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3b6:	493c      	ldr	r1, [pc, #240]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00a      	beq.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d3ca:	4b37      	ldr	r3, [pc, #220]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3d8:	4933      	ldr	r1, [pc, #204]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00a      	beq.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d3ec:	4b2e      	ldr	r3, [pc, #184]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3fa:	492b      	ldr	r1, [pc, #172]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d011      	beq.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d40e:	4b26      	ldr	r3, [pc, #152]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d414:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d41c:	4922      	ldr	r1, [pc, #136]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d41e:	4313      	orrs	r3, r2
 800d420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d42c:	d101      	bne.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d42e:	2301      	movs	r3, #1
 800d430:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f003 0308 	and.w	r3, r3, #8
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d43e:	2301      	movs	r3, #1
 800d440:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00a      	beq.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d44e:	4b16      	ldr	r3, [pc, #88]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d454:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d45c:	4912      	ldr	r1, [pc, #72]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d45e:	4313      	orrs	r3, r2
 800d460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00b      	beq.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d470:	4b0d      	ldr	r3, [pc, #52]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d476:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d480:	4909      	ldr	r1, [pc, #36]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d482:	4313      	orrs	r3, r2
 800d484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d006      	beq.n	800d49c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 80d9 	beq.w	800d64e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d49c:	4b02      	ldr	r3, [pc, #8]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a01      	ldr	r2, [pc, #4]	; (800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d4a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d4a6:	e001      	b.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d4a8:	40023800 	.word	0x40023800
 800d4ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4ae:	f7f9 fdcf 	bl	8007050 <HAL_GetTick>
 800d4b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d4b4:	e008      	b.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d4b6:	f7f9 fdcb 	bl	8007050 <HAL_GetTick>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	2b64      	cmp	r3, #100	; 0x64
 800d4c2:	d901      	bls.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d4c4:	2303      	movs	r3, #3
 800d4c6:	e194      	b.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d4c8:	4b6c      	ldr	r3, [pc, #432]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1f0      	bne.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d021      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d11d      	bne.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d4e8:	4b64      	ldr	r3, [pc, #400]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4ee:	0c1b      	lsrs	r3, r3, #16
 800d4f0:	f003 0303 	and.w	r3, r3, #3
 800d4f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d4f6:	4b61      	ldr	r3, [pc, #388]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4fc:	0e1b      	lsrs	r3, r3, #24
 800d4fe:	f003 030f 	and.w	r3, r3, #15
 800d502:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	019a      	lsls	r2, r3, #6
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	041b      	lsls	r3, r3, #16
 800d50e:	431a      	orrs	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	061b      	lsls	r3, r3, #24
 800d514:	431a      	orrs	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	071b      	lsls	r3, r3, #28
 800d51c:	4957      	ldr	r1, [pc, #348]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d51e:	4313      	orrs	r3, r2
 800d520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d004      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d538:	d00a      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d542:	2b00      	cmp	r3, #0
 800d544:	d02e      	beq.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d54e:	d129      	bne.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d550:	4b4a      	ldr	r3, [pc, #296]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d556:	0c1b      	lsrs	r3, r3, #16
 800d558:	f003 0303 	and.w	r3, r3, #3
 800d55c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d55e:	4b47      	ldr	r3, [pc, #284]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d564:	0f1b      	lsrs	r3, r3, #28
 800d566:	f003 0307 	and.w	r3, r3, #7
 800d56a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	019a      	lsls	r2, r3, #6
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	041b      	lsls	r3, r3, #16
 800d576:	431a      	orrs	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	061b      	lsls	r3, r3, #24
 800d57e:	431a      	orrs	r2, r3
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	071b      	lsls	r3, r3, #28
 800d584:	493d      	ldr	r1, [pc, #244]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d586:	4313      	orrs	r3, r2
 800d588:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d58c:	4b3b      	ldr	r3, [pc, #236]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d58e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d592:	f023 021f 	bic.w	r2, r3, #31
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	3b01      	subs	r3, #1
 800d59c:	4937      	ldr	r1, [pc, #220]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d01d      	beq.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d5b0:	4b32      	ldr	r3, [pc, #200]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5b6:	0e1b      	lsrs	r3, r3, #24
 800d5b8:	f003 030f 	and.w	r3, r3, #15
 800d5bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d5be:	4b2f      	ldr	r3, [pc, #188]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5c4:	0f1b      	lsrs	r3, r3, #28
 800d5c6:	f003 0307 	and.w	r3, r3, #7
 800d5ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	019a      	lsls	r2, r3, #6
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	041b      	lsls	r3, r3, #16
 800d5d8:	431a      	orrs	r2, r3
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	061b      	lsls	r3, r3, #24
 800d5de:	431a      	orrs	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	071b      	lsls	r3, r3, #28
 800d5e4:	4925      	ldr	r1, [pc, #148]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d011      	beq.n	800d61c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	019a      	lsls	r2, r3, #6
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	041b      	lsls	r3, r3, #16
 800d604:	431a      	orrs	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	061b      	lsls	r3, r3, #24
 800d60c:	431a      	orrs	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	071b      	lsls	r3, r3, #28
 800d614:	4919      	ldr	r1, [pc, #100]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d616:	4313      	orrs	r3, r2
 800d618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d61c:	4b17      	ldr	r3, [pc, #92]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a16      	ldr	r2, [pc, #88]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d628:	f7f9 fd12 	bl	8007050 <HAL_GetTick>
 800d62c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d62e:	e008      	b.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d630:	f7f9 fd0e 	bl	8007050 <HAL_GetTick>
 800d634:	4602      	mov	r2, r0
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	2b64      	cmp	r3, #100	; 0x64
 800d63c:	d901      	bls.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d63e:	2303      	movs	r3, #3
 800d640:	e0d7      	b.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d642:	4b0e      	ldr	r3, [pc, #56]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d0f0      	beq.n	800d630 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	2b01      	cmp	r3, #1
 800d652:	f040 80cd 	bne.w	800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d656:	4b09      	ldr	r3, [pc, #36]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a08      	ldr	r2, [pc, #32]	; (800d67c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d65c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d662:	f7f9 fcf5 	bl	8007050 <HAL_GetTick>
 800d666:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d668:	e00a      	b.n	800d680 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d66a:	f7f9 fcf1 	bl	8007050 <HAL_GetTick>
 800d66e:	4602      	mov	r2, r0
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	2b64      	cmp	r3, #100	; 0x64
 800d676:	d903      	bls.n	800d680 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d678:	2303      	movs	r3, #3
 800d67a:	e0ba      	b.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d67c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d680:	4b5e      	ldr	r3, [pc, #376]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d68c:	d0ed      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d696:	2b00      	cmp	r3, #0
 800d698:	d003      	beq.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d009      	beq.n	800d6b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d02e      	beq.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d12a      	bne.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d6b6:	4b51      	ldr	r3, [pc, #324]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6bc:	0c1b      	lsrs	r3, r3, #16
 800d6be:	f003 0303 	and.w	r3, r3, #3
 800d6c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d6c4:	4b4d      	ldr	r3, [pc, #308]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ca:	0f1b      	lsrs	r3, r3, #28
 800d6cc:	f003 0307 	and.w	r3, r3, #7
 800d6d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	019a      	lsls	r2, r3, #6
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	041b      	lsls	r3, r3, #16
 800d6dc:	431a      	orrs	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	061b      	lsls	r3, r3, #24
 800d6e4:	431a      	orrs	r2, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	071b      	lsls	r3, r3, #28
 800d6ea:	4944      	ldr	r1, [pc, #272]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d6f2:	4b42      	ldr	r3, [pc, #264]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d6f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d700:	3b01      	subs	r3, #1
 800d702:	021b      	lsls	r3, r3, #8
 800d704:	493d      	ldr	r1, [pc, #244]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d706:	4313      	orrs	r3, r2
 800d708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d714:	2b00      	cmp	r3, #0
 800d716:	d022      	beq.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d71c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d720:	d11d      	bne.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d722:	4b36      	ldr	r3, [pc, #216]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d728:	0e1b      	lsrs	r3, r3, #24
 800d72a:	f003 030f 	and.w	r3, r3, #15
 800d72e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d730:	4b32      	ldr	r3, [pc, #200]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d736:	0f1b      	lsrs	r3, r3, #28
 800d738:	f003 0307 	and.w	r3, r3, #7
 800d73c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	695b      	ldr	r3, [r3, #20]
 800d742:	019a      	lsls	r2, r3, #6
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6a1b      	ldr	r3, [r3, #32]
 800d748:	041b      	lsls	r3, r3, #16
 800d74a:	431a      	orrs	r2, r3
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	061b      	lsls	r3, r3, #24
 800d750:	431a      	orrs	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	071b      	lsls	r3, r3, #28
 800d756:	4929      	ldr	r1, [pc, #164]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d758:	4313      	orrs	r3, r2
 800d75a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f003 0308 	and.w	r3, r3, #8
 800d766:	2b00      	cmp	r3, #0
 800d768:	d028      	beq.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d76a:	4b24      	ldr	r3, [pc, #144]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d770:	0e1b      	lsrs	r3, r3, #24
 800d772:	f003 030f 	and.w	r3, r3, #15
 800d776:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d778:	4b20      	ldr	r3, [pc, #128]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d77e:	0c1b      	lsrs	r3, r3, #16
 800d780:	f003 0303 	and.w	r3, r3, #3
 800d784:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	695b      	ldr	r3, [r3, #20]
 800d78a:	019a      	lsls	r2, r3, #6
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	041b      	lsls	r3, r3, #16
 800d790:	431a      	orrs	r2, r3
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	061b      	lsls	r3, r3, #24
 800d796:	431a      	orrs	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	69db      	ldr	r3, [r3, #28]
 800d79c:	071b      	lsls	r3, r3, #28
 800d79e:	4917      	ldr	r1, [pc, #92]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d7a6:	4b15      	ldr	r3, [pc, #84]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	4911      	ldr	r1, [pc, #68]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d7bc:	4b0f      	ldr	r3, [pc, #60]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a0e      	ldr	r2, [pc, #56]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d7c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7c8:	f7f9 fc42 	bl	8007050 <HAL_GetTick>
 800d7cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d7ce:	e008      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d7d0:	f7f9 fc3e 	bl	8007050 <HAL_GetTick>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	2b64      	cmp	r3, #100	; 0x64
 800d7dc:	d901      	bls.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d7de:	2303      	movs	r3, #3
 800d7e0:	e007      	b.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d7e2:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7ee:	d1ef      	bne.n	800d7d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3720      	adds	r7, #32
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	40023800 	.word	0x40023800

0800d800 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a80      	ldr	r2, [pc, #512]	; (800da10 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800d810:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800d812:	4b80      	ldr	r3, [pc, #512]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d818:	099b      	lsrs	r3, r3, #6
 800d81a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d822:	4b7c      	ldr	r3, [pc, #496]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d828:	0c1b      	lsrs	r3, r3, #16
 800d82a:	f003 0203 	and.w	r2, r3, #3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d832:	4b78      	ldr	r3, [pc, #480]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d838:	0e1b      	lsrs	r3, r3, #24
 800d83a:	f003 020f 	and.w	r2, r3, #15
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d842:	4b74      	ldr	r3, [pc, #464]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d848:	0f1b      	lsrs	r3, r3, #28
 800d84a:	f003 0207 	and.w	r2, r3, #7
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800d852:	4b70      	ldr	r3, [pc, #448]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d858:	099b      	lsrs	r3, r3, #6
 800d85a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d862:	4b6c      	ldr	r3, [pc, #432]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d868:	0c1b      	lsrs	r3, r3, #16
 800d86a:	f003 0203 	and.w	r2, r3, #3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d872:	4b68      	ldr	r3, [pc, #416]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d878:	0e1b      	lsrs	r3, r3, #24
 800d87a:	f003 020f 	and.w	r2, r3, #15
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d882:	4b64      	ldr	r3, [pc, #400]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d888:	0f1b      	lsrs	r3, r3, #28
 800d88a:	f003 0207 	and.w	r2, r3, #7
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800d892:	4b60      	ldr	r3, [pc, #384]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d898:	f003 021f 	and.w	r2, r3, #31
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800d8a0:	4b5c      	ldr	r3, [pc, #368]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8a6:	0a1b      	lsrs	r3, r3, #8
 800d8a8:	f003 021f 	and.w	r2, r3, #31
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800d8b0:	4b58      	ldr	r3, [pc, #352]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8b6:	0c1b      	lsrs	r3, r3, #16
 800d8b8:	f003 0203 	and.w	r2, r3, #3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800d8c0:	4b54      	ldr	r3, [pc, #336]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8c6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800d8ce:	4b51      	ldr	r3, [pc, #324]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800d8dc:	4b4d      	ldr	r3, [pc, #308]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800d8e8:	4b4a      	ldr	r3, [pc, #296]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800d8f6:	4b47      	ldr	r3, [pc, #284]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8fc:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800d904:	4b43      	ldr	r3, [pc, #268]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d90a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800d912:	4b40      	ldr	r3, [pc, #256]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d918:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800d920:	4b3c      	ldr	r3, [pc, #240]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d926:	f003 0203 	and.w	r2, r3, #3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800d92e:	4b39      	ldr	r3, [pc, #228]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d934:	f003 020c 	and.w	r2, r3, #12
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800d93c:	4b35      	ldr	r3, [pc, #212]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d942:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800d94a:	4b32      	ldr	r3, [pc, #200]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d950:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800d958:	4b2e      	ldr	r3, [pc, #184]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d95e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800d966:	4b2b      	ldr	r3, [pc, #172]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d96c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800d974:	4b27      	ldr	r3, [pc, #156]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d97a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800d982:	4b24      	ldr	r3, [pc, #144]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d988:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d990:	4b20      	ldr	r3, [pc, #128]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d996:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800d99e:	4b1d      	ldr	r3, [pc, #116]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9a4:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800d9ac:	4b19      	ldr	r3, [pc, #100]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9b2:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800d9ba:	4b16      	ldr	r3, [pc, #88]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800d9ca:	4b12      	ldr	r3, [pc, #72]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d9d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800d9d4:	4b0f      	ldr	r3, [pc, #60]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9d8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	431a      	orrs	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800d9e4:	4b0b      	ldr	r3, [pc, #44]	; (800da14 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d9e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d103      	bne.n	800d9fa <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800d9f8:	e003      	b.n	800da02 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da00:	639a      	str	r2, [r3, #56]	; 0x38
}
 800da02:	bf00      	nop
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	00fffff1 	.word	0x00fffff1
 800da14:	40023800 	.word	0x40023800

0800da18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800da18:	b480      	push	{r7}
 800da1a:	b087      	sub	sp, #28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800da20:	2300      	movs	r3, #0
 800da22:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800da24:	2300      	movs	r3, #0
 800da26:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800da28:	2300      	movs	r3, #0
 800da2a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da36:	f040 808c 	bne.w	800db52 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800da3a:	4b95      	ldr	r3, [pc, #596]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da40:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800da48:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da50:	d07c      	beq.n	800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da58:	d87d      	bhi.n	800db56 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d004      	beq.n	800da6a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da66:	d039      	beq.n	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800da68:	e075      	b.n	800db56 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800da6a:	4b89      	ldr	r3, [pc, #548]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da72:	2b00      	cmp	r3, #0
 800da74:	d108      	bne.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800da76:	4b86      	ldr	r3, [pc, #536]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da7e:	4a85      	ldr	r2, [pc, #532]	; (800dc94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800da80:	fbb2 f3f3 	udiv	r3, r2, r3
 800da84:	613b      	str	r3, [r7, #16]
 800da86:	e007      	b.n	800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800da88:	4b81      	ldr	r3, [pc, #516]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da90:	4a81      	ldr	r2, [pc, #516]	; (800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800da92:	fbb2 f3f3 	udiv	r3, r2, r3
 800da96:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800da98:	4b7d      	ldr	r3, [pc, #500]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800da9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da9e:	0e1b      	lsrs	r3, r3, #24
 800daa0:	f003 030f 	and.w	r3, r3, #15
 800daa4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800daa6:	4b7a      	ldr	r3, [pc, #488]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800daa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daac:	099b      	lsrs	r3, r3, #6
 800daae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	fb03 f202 	mul.w	r2, r3, r2
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	fbb2 f3f3 	udiv	r3, r2, r3
 800dabe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800dac0:	4b73      	ldr	r3, [pc, #460]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	f003 031f 	and.w	r3, r3, #31
 800dacc:	3301      	adds	r3, #1
 800dace:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad8:	617b      	str	r3, [r7, #20]
        break;
 800dada:	e03d      	b.n	800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800dadc:	4b6c      	ldr	r3, [pc, #432]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d108      	bne.n	800dafa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800dae8:	4b69      	ldr	r3, [pc, #420]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daf0:	4a68      	ldr	r2, [pc, #416]	; (800dc94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800daf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf6:	613b      	str	r3, [r7, #16]
 800daf8:	e007      	b.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800dafa:	4b65      	ldr	r3, [pc, #404]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db02:	4a65      	ldr	r2, [pc, #404]	; (800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800db04:	fbb2 f3f3 	udiv	r3, r2, r3
 800db08:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800db0a:	4b61      	ldr	r3, [pc, #388]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db10:	0e1b      	lsrs	r3, r3, #24
 800db12:	f003 030f 	and.w	r3, r3, #15
 800db16:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800db18:	4b5d      	ldr	r3, [pc, #372]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db1e:	099b      	lsrs	r3, r3, #6
 800db20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db24:	693a      	ldr	r2, [r7, #16]
 800db26:	fb03 f202 	mul.w	r2, r3, r2
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db30:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800db32:	4b57      	ldr	r3, [pc, #348]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db38:	f003 031f 	and.w	r3, r3, #31
 800db3c:	3301      	adds	r3, #1
 800db3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800db40:	697a      	ldr	r2, [r7, #20]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	fbb2 f3f3 	udiv	r3, r2, r3
 800db48:	617b      	str	r3, [r7, #20]
        break;
 800db4a:	e005      	b.n	800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800db4c:	4b53      	ldr	r3, [pc, #332]	; (800dc9c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800db4e:	617b      	str	r3, [r7, #20]
        break;
 800db50:	e002      	b.n	800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800db52:	bf00      	nop
 800db54:	e000      	b.n	800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800db56:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db5e:	f040 808c 	bne.w	800dc7a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800db62:	4b4b      	ldr	r3, [pc, #300]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db68:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800db70:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db78:	d07c      	beq.n	800dc74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db80:	d87d      	bhi.n	800dc7e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d004      	beq.n	800db92 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db8e:	d039      	beq.n	800dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800db90:	e075      	b.n	800dc7e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800db92:	4b3f      	ldr	r3, [pc, #252]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d108      	bne.n	800dbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800db9e:	4b3c      	ldr	r3, [pc, #240]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dba6:	4a3b      	ldr	r2, [pc, #236]	; (800dc94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dba8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbac:	613b      	str	r3, [r7, #16]
 800dbae:	e007      	b.n	800dbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800dbb0:	4b37      	ldr	r3, [pc, #220]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbb8:	4a37      	ldr	r2, [pc, #220]	; (800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dbba:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbbe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800dbc0:	4b33      	ldr	r3, [pc, #204]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbc6:	0e1b      	lsrs	r3, r3, #24
 800dbc8:	f003 030f 	and.w	r3, r3, #15
 800dbcc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800dbce:	4b30      	ldr	r3, [pc, #192]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbd4:	099b      	lsrs	r3, r3, #6
 800dbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	fb03 f202 	mul.w	r2, r3, r2
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbe6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800dbe8:	4b29      	ldr	r3, [pc, #164]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	f003 031f 	and.w	r3, r3, #31
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc00:	617b      	str	r3, [r7, #20]
        break;
 800dc02:	e03d      	b.n	800dc80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800dc04:	4b22      	ldr	r3, [pc, #136]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d108      	bne.n	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800dc10:	4b1f      	ldr	r3, [pc, #124]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc18:	4a1e      	ldr	r2, [pc, #120]	; (800dc94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dc1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc1e:	613b      	str	r3, [r7, #16]
 800dc20:	e007      	b.n	800dc32 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800dc22:	4b1b      	ldr	r3, [pc, #108]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc2a:	4a1b      	ldr	r2, [pc, #108]	; (800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dc2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc30:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800dc32:	4b17      	ldr	r3, [pc, #92]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc38:	0e1b      	lsrs	r3, r3, #24
 800dc3a:	f003 030f 	and.w	r3, r3, #15
 800dc3e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800dc40:	4b13      	ldr	r3, [pc, #76]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc46:	099b      	lsrs	r3, r3, #6
 800dc48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	fb03 f202 	mul.w	r2, r3, r2
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc58:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800dc5a:	4b0d      	ldr	r3, [pc, #52]	; (800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc60:	f003 031f 	and.w	r3, r3, #31
 800dc64:	3301      	adds	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800dc68:	697a      	ldr	r2, [r7, #20]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc70:	617b      	str	r3, [r7, #20]
        break;
 800dc72:	e005      	b.n	800dc80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800dc74:	4b09      	ldr	r3, [pc, #36]	; (800dc9c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800dc76:	617b      	str	r3, [r7, #20]
        break;
 800dc78:	e002      	b.n	800dc80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800dc7a:	bf00      	nop
 800dc7c:	e000      	b.n	800dc80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800dc7e:	bf00      	nop

  return frequency;
 800dc80:	697b      	ldr	r3, [r7, #20]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	40023800 	.word	0x40023800
 800dc94:	00f42400 	.word	0x00f42400
 800dc98:	017d7840 	.word	0x017d7840
 800dc9c:	00bb8000 	.word	0x00bb8000

0800dca0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d101      	bne.n	800dcb6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e071      	b.n	800dd9a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	7f5b      	ldrb	r3, [r3, #29]
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d105      	bne.n	800dccc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7f5 f9fa 	bl	80030c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2202      	movs	r2, #2
 800dcd0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	f003 0310 	and.w	r3, r3, #16
 800dcdc:	2b10      	cmp	r3, #16
 800dcde:	d053      	beq.n	800dd88 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	22ca      	movs	r2, #202	; 0xca
 800dce6:	625a      	str	r2, [r3, #36]	; 0x24
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2253      	movs	r2, #83	; 0x53
 800dcee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fac9 	bl	800e288 <RTC_EnterInitMode>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d12a      	bne.n	800dd56 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6899      	ldr	r1, [r3, #8]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4b26      	ldr	r3, [pc, #152]	; (800dda4 <HAL_RTC_Init+0x104>)
 800dd0c:	400b      	ands	r3, r1
 800dd0e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6899      	ldr	r1, [r3, #8]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	431a      	orrs	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	695b      	ldr	r3, [r3, #20]
 800dd24:	431a      	orrs	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	430a      	orrs	r2, r1
 800dd2c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	68d2      	ldr	r2, [r2, #12]
 800dd36:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6919      	ldr	r1, [r3, #16]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	041a      	lsls	r2, r3, #16
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	430a      	orrs	r2, r1
 800dd4a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fad2 	bl	800e2f6 <RTC_ExitInitMode>
 800dd52:	4603      	mov	r3, r0
 800dd54:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dd56:	7bfb      	ldrb	r3, [r7, #15]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d110      	bne.n	800dd7e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f022 0208 	bic.w	r2, r2, #8
 800dd6a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	699a      	ldr	r2, [r3, #24]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	22ff      	movs	r2, #255	; 0xff
 800dd84:	625a      	str	r2, [r3, #36]	; 0x24
 800dd86:	e001      	b.n	800dd8c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d102      	bne.n	800dd98 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2201      	movs	r2, #1
 800dd96:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	ff8fffbf 	.word	0xff8fffbf

0800dda8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dda8:	b590      	push	{r4, r7, lr}
 800ddaa:	b087      	sub	sp, #28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	7f1b      	ldrb	r3, [r3, #28]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d101      	bne.n	800ddc4 <HAL_RTC_SetTime+0x1c>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e085      	b.n	800ded0 <HAL_RTC_SetTime+0x128>
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2202      	movs	r2, #2
 800ddce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d126      	bne.n	800de24 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d102      	bne.n	800ddea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2200      	movs	r2, #0
 800dde8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 faa6 	bl	800e340 <RTC_ByteToBcd2>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	785b      	ldrb	r3, [r3, #1]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 fa9f 	bl	800e340 <RTC_ByteToBcd2>
 800de02:	4603      	mov	r3, r0
 800de04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800de06:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	789b      	ldrb	r3, [r3, #2]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 fa97 	bl	800e340 <RTC_ByteToBcd2>
 800de12:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800de14:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	78db      	ldrb	r3, [r3, #3]
 800de1c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800de1e:	4313      	orrs	r3, r2
 800de20:	617b      	str	r3, [r7, #20]
 800de22:	e018      	b.n	800de56 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d102      	bne.n	800de38 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2200      	movs	r2, #0
 800de36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	785b      	ldrb	r3, [r3, #1]
 800de42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800de44:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800de4a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	78db      	ldrb	r3, [r3, #3]
 800de50:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800de52:	4313      	orrs	r3, r2
 800de54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	22ca      	movs	r2, #202	; 0xca
 800de5c:	625a      	str	r2, [r3, #36]	; 0x24
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2253      	movs	r2, #83	; 0x53
 800de64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f000 fa0e 	bl	800e288 <RTC_EnterInitMode>
 800de6c:	4603      	mov	r3, r0
 800de6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800de70:	7cfb      	ldrb	r3, [r7, #19]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d11e      	bne.n	800deb4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	6979      	ldr	r1, [r7, #20]
 800de7c:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <HAL_RTC_SetTime+0x130>)
 800de7e:	400b      	ands	r3, r1
 800de80:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	689a      	ldr	r2, [r3, #8]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800de90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6899      	ldr	r1, [r3, #8]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	68da      	ldr	r2, [r3, #12]
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	430a      	orrs	r2, r1
 800dea8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f000 fa23 	bl	800e2f6 <RTC_ExitInitMode>
 800deb0:	4603      	mov	r3, r0
 800deb2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800deb4:	7cfb      	ldrb	r3, [r7, #19]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d102      	bne.n	800dec0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2201      	movs	r2, #1
 800debe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	22ff      	movs	r2, #255	; 0xff
 800dec6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2200      	movs	r2, #0
 800decc:	771a      	strb	r2, [r3, #28]

  return status;
 800dece:	7cfb      	ldrb	r3, [r7, #19]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	371c      	adds	r7, #28
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd90      	pop	{r4, r7, pc}
 800ded8:	007f7f7f 	.word	0x007f7f7f

0800dedc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dedc:	b590      	push	{r4, r7, lr}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800dee8:	2300      	movs	r3, #0
 800deea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	7f1b      	ldrb	r3, [r3, #28]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d101      	bne.n	800def8 <HAL_RTC_SetDate+0x1c>
 800def4:	2302      	movs	r3, #2
 800def6:	e06f      	b.n	800dfd8 <HAL_RTC_SetDate+0xfc>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2201      	movs	r2, #1
 800defc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2202      	movs	r2, #2
 800df02:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10e      	bne.n	800df28 <HAL_RTC_SetDate+0x4c>
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	f003 0310 	and.w	r3, r3, #16
 800df12:	2b00      	cmp	r3, #0
 800df14:	d008      	beq.n	800df28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	785b      	ldrb	r3, [r3, #1]
 800df1a:	f023 0310 	bic.w	r3, r3, #16
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	330a      	adds	r3, #10
 800df22:	b2da      	uxtb	r2, r3
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d11c      	bne.n	800df68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	78db      	ldrb	r3, [r3, #3]
 800df32:	4618      	mov	r0, r3
 800df34:	f000 fa04 	bl	800e340 <RTC_ByteToBcd2>
 800df38:	4603      	mov	r3, r0
 800df3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	4618      	mov	r0, r3
 800df42:	f000 f9fd 	bl	800e340 <RTC_ByteToBcd2>
 800df46:	4603      	mov	r3, r0
 800df48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	789b      	ldrb	r3, [r3, #2]
 800df50:	4618      	mov	r0, r3
 800df52:	f000 f9f5 	bl	800e340 <RTC_ByteToBcd2>
 800df56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800df58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800df62:	4313      	orrs	r3, r2
 800df64:	617b      	str	r3, [r7, #20]
 800df66:	e00e      	b.n	800df86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	78db      	ldrb	r3, [r3, #3]
 800df6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800df74:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800df7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800df82:	4313      	orrs	r3, r2
 800df84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	22ca      	movs	r2, #202	; 0xca
 800df8c:	625a      	str	r2, [r3, #36]	; 0x24
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2253      	movs	r2, #83	; 0x53
 800df94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800df96:	68f8      	ldr	r0, [r7, #12]
 800df98:	f000 f976 	bl	800e288 <RTC_EnterInitMode>
 800df9c:	4603      	mov	r3, r0
 800df9e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800dfa0:	7cfb      	ldrb	r3, [r7, #19]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10a      	bne.n	800dfbc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	6979      	ldr	r1, [r7, #20]
 800dfac:	4b0c      	ldr	r3, [pc, #48]	; (800dfe0 <HAL_RTC_SetDate+0x104>)
 800dfae:	400b      	ands	r3, r1
 800dfb0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f000 f99f 	bl	800e2f6 <RTC_ExitInitMode>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800dfbc:	7cfb      	ldrb	r3, [r7, #19]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	22ff      	movs	r2, #255	; 0xff
 800dfce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	771a      	strb	r2, [r3, #28]

  return status;
 800dfd6:	7cfb      	ldrb	r3, [r7, #19]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	371c      	adds	r7, #28
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd90      	pop	{r4, r7, pc}
 800dfe0:	00ffff3f 	.word	0x00ffff3f

0800dfe4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800dfe4:	b590      	push	{r4, r7, lr}
 800dfe6:	b089      	sub	sp, #36	; 0x24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800dff0:	2300      	movs	r3, #0
 800dff2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800dff4:	2300      	movs	r3, #0
 800dff6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	7f1b      	ldrb	r3, [r3, #28]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d101      	bne.n	800e008 <HAL_RTC_SetAlarm+0x24>
 800e004:	2302      	movs	r3, #2
 800e006:	e113      	b.n	800e230 <HAL_RTC_SetAlarm+0x24c>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2201      	movs	r2, #1
 800e00c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2202      	movs	r2, #2
 800e012:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d137      	bne.n	800e08a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e024:	2b00      	cmp	r3, #0
 800e026:	d102      	bne.n	800e02e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2200      	movs	r2, #0
 800e02c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	4618      	mov	r0, r3
 800e034:	f000 f984 	bl	800e340 <RTC_ByteToBcd2>
 800e038:	4603      	mov	r3, r0
 800e03a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	785b      	ldrb	r3, [r3, #1]
 800e040:	4618      	mov	r0, r3
 800e042:	f000 f97d 	bl	800e340 <RTC_ByteToBcd2>
 800e046:	4603      	mov	r3, r0
 800e048:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800e04a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	789b      	ldrb	r3, [r3, #2]
 800e050:	4618      	mov	r0, r3
 800e052:	f000 f975 	bl	800e340 <RTC_ByteToBcd2>
 800e056:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e058:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	78db      	ldrb	r3, [r3, #3]
 800e060:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800e062:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 f967 	bl	800e340 <RTC_ByteToBcd2>
 800e072:	4603      	mov	r3, r0
 800e074:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800e076:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800e07e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800e084:	4313      	orrs	r3, r2
 800e086:	61fb      	str	r3, [r7, #28]
 800e088:	e023      	b.n	800e0d2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e094:	2b00      	cmp	r3, #0
 800e096:	d102      	bne.n	800e09e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2200      	movs	r2, #0
 800e09c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	785b      	ldrb	r3, [r3, #1]
 800e0a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800e0aa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800e0ac:	68ba      	ldr	r2, [r7, #8]
 800e0ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800e0b0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	78db      	ldrb	r3, [r3, #3]
 800e0b6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800e0b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e0c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800e0c2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800e0c8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	22ca      	movs	r2, #202	; 0xca
 800e0e4:	625a      	str	r2, [r3, #36]	; 0x24
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2253      	movs	r2, #83	; 0x53
 800e0ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0f6:	d148      	bne.n	800e18a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	689a      	ldr	r2, [r3, #8]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e106:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	689a      	ldr	r2, [r3, #8]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e116:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800e128:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e12a:	f7f8 ff91 	bl	8007050 <HAL_GetTick>
 800e12e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e130:	e013      	b.n	800e15a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e132:	f7f8 ff8d 	bl	8007050 <HAL_GetTick>
 800e136:	4602      	mov	r2, r0
 800e138:	69bb      	ldr	r3, [r7, #24]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e140:	d90b      	bls.n	800e15a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	22ff      	movs	r2, #255	; 0xff
 800e148:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2203      	movs	r2, #3
 800e14e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2200      	movs	r2, #0
 800e154:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e156:	2303      	movs	r3, #3
 800e158:	e06a      	b.n	800e230 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	f003 0301 	and.w	r3, r3, #1
 800e164:	2b00      	cmp	r3, #0
 800e166:	d0e4      	beq.n	800e132 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	69fa      	ldr	r2, [r7, #28]
 800e16e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	689a      	ldr	r2, [r3, #8]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e186:	609a      	str	r2, [r3, #8]
 800e188:	e047      	b.n	800e21a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	689a      	ldr	r2, [r3, #8]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e198:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	689a      	ldr	r2, [r3, #8]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e1a8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	b2da      	uxtb	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 800e1ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e1bc:	f7f8 ff48 	bl	8007050 <HAL_GetTick>
 800e1c0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e1c2:	e013      	b.n	800e1ec <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e1c4:	f7f8 ff44 	bl	8007050 <HAL_GetTick>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	1ad3      	subs	r3, r2, r3
 800e1ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1d2:	d90b      	bls.n	800e1ec <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	22ff      	movs	r2, #255	; 0xff
 800e1da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2203      	movs	r2, #3
 800e1e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	e021      	b.n	800e230 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	f003 0302 	and.w	r3, r3, #2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0e4      	beq.n	800e1c4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	69fa      	ldr	r2, [r7, #28]
 800e200:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e218:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	22ff      	movs	r2, #255	; 0xff
 800e220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2201      	movs	r2, #1
 800e226:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2200      	movs	r2, #0
 800e22c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3724      	adds	r7, #36	; 0x24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd90      	pop	{r4, r7, pc}

0800e238 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e240:	2300      	movs	r3, #0
 800e242:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	68da      	ldr	r2, [r3, #12]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e252:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e254:	f7f8 fefc 	bl	8007050 <HAL_GetTick>
 800e258:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e25a:	e009      	b.n	800e270 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e25c:	f7f8 fef8 	bl	8007050 <HAL_GetTick>
 800e260:	4602      	mov	r2, r0
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e26a:	d901      	bls.n	800e270 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e26c:	2303      	movs	r3, #3
 800e26e:	e007      	b.n	800e280 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	f003 0320 	and.w	r3, r3, #32
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d0ee      	beq.n	800e25c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e290:	2300      	movs	r3, #0
 800e292:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d122      	bne.n	800e2ec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68da      	ldr	r2, [r3, #12]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e2b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e2b6:	f7f8 fecb 	bl	8007050 <HAL_GetTick>
 800e2ba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800e2bc:	e00c      	b.n	800e2d8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e2be:	f7f8 fec7 	bl	8007050 <HAL_GetTick>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e2cc:	d904      	bls.n	800e2d8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2204      	movs	r2, #4
 800e2d2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d102      	bne.n	800e2ec <RTC_EnterInitMode+0x64>
 800e2e6:	7bfb      	ldrb	r3, [r7, #15]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d1e8      	bne.n	800e2be <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800e2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e310:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	f003 0320 	and.w	r3, r3, #32
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10a      	bne.n	800e336 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7ff ff89 	bl	800e238 <HAL_RTC_WaitForSynchro>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d004      	beq.n	800e336 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2204      	movs	r2, #4
 800e330:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800e332:	2301      	movs	r3, #1
 800e334:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800e336:	7bfb      	ldrb	r3, [r7, #15]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e34a:	2300      	movs	r3, #0
 800e34c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800e34e:	e005      	b.n	800e35c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	3301      	adds	r3, #1
 800e354:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	3b0a      	subs	r3, #10
 800e35a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800e35c:	79fb      	ldrb	r3, [r7, #7]
 800e35e:	2b09      	cmp	r3, #9
 800e360:	d8f6      	bhi.n	800e350 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	b2db      	uxtb	r3, r3
 800e366:	011b      	lsls	r3, r3, #4
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	4313      	orrs	r3, r2
 800e36e:	b2db      	uxtb	r3, r3
}
 800e370:	4618      	mov	r0, r3
 800e372:	3714      	adds	r7, #20
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b087      	sub	sp, #28
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800e388:	2300      	movs	r3, #0
 800e38a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	7f1b      	ldrb	r3, [r3, #28]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d101      	bne.n	800e398 <HAL_RTCEx_SetTimeStamp+0x1c>
 800e394:	2302      	movs	r3, #2
 800e396:	e050      	b.n	800e43a <HAL_RTCEx_SetTimeStamp+0xbe>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2201      	movs	r2, #1
 800e39c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2202      	movs	r2, #2
 800e3a2:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f022 0206 	bic.w	r2, r2, #6
 800e3b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	430a      	orrs	r2, r1
 800e3c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	689a      	ldr	r2, [r3, #8]
 800e3ca:	4b1f      	ldr	r3, [pc, #124]	; (800e448 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800e3cc:	4013      	ands	r3, r2
 800e3ce:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800e3d0:	697a      	ldr	r2, [r7, #20]
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	22ca      	movs	r2, #202	; 0xca
 800e3de:	625a      	str	r2, [r3, #36]	; 0x24
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2253      	movs	r2, #83	; 0x53
 800e3e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800e400:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800e412:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	689a      	ldr	r2, [r3, #8]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e422:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	22ff      	movs	r2, #255	; 0xff
 800e42a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2201      	movs	r2, #1
 800e430:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2200      	movs	r2, #0
 800e436:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	371c      	adds	r7, #28
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	fffff7f7 	.word	0xfffff7f7

0800e44c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800e454:	2300      	movs	r3, #0
 800e456:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800e458:	2300      	movs	r3, #0
 800e45a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800e45c:	2300      	movs	r3, #0
 800e45e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800e466:	2301      	movs	r3, #1
 800e468:	e156      	b.n	800e718 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7f5 fa58 	bl	8003934 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2202      	movs	r2, #2
 800e488:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 fb85 	bl	800eb9c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	2b02      	cmp	r3, #2
 800e498:	d00c      	beq.n	800e4b4 <HAL_SAI_Init+0x68>
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d80d      	bhi.n	800e4ba <HAL_SAI_Init+0x6e>
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <HAL_SAI_Init+0x5c>
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d003      	beq.n	800e4ae <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800e4a6:	e008      	b.n	800e4ba <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	61fb      	str	r3, [r7, #28]
      break;
 800e4ac:	e006      	b.n	800e4bc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e4ae:	2310      	movs	r3, #16
 800e4b0:	61fb      	str	r3, [r7, #28]
      break;
 800e4b2:	e003      	b.n	800e4bc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e4b4:	2320      	movs	r3, #32
 800e4b6:	61fb      	str	r3, [r7, #28]
      break;
 800e4b8:	e000      	b.n	800e4bc <HAL_SAI_Init+0x70>
      break;
 800e4ba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	d81e      	bhi.n	800e502 <HAL_SAI_Init+0xb6>
 800e4c4:	a201      	add	r2, pc, #4	; (adr r2, 800e4cc <HAL_SAI_Init+0x80>)
 800e4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ca:	bf00      	nop
 800e4cc:	0800e4dd 	.word	0x0800e4dd
 800e4d0:	0800e4e3 	.word	0x0800e4e3
 800e4d4:	0800e4eb 	.word	0x0800e4eb
 800e4d8:	0800e4f3 	.word	0x0800e4f3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	617b      	str	r3, [r7, #20]
    }
    break;
 800e4e0:	e010      	b.n	800e504 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4e6:	617b      	str	r3, [r7, #20]
    }
    break;
 800e4e8:	e00c      	b.n	800e504 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e4ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4ee:	617b      	str	r3, [r7, #20]
    }
    break;
 800e4f0:	e008      	b.n	800e504 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e4f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4f6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	f043 0301 	orr.w	r3, r3, #1
 800e4fe:	61fb      	str	r3, [r7, #28]
    }
    break;
 800e500:	e000      	b.n	800e504 <HAL_SAI_Init+0xb8>
    default:
      break;
 800e502:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a85      	ldr	r2, [pc, #532]	; (800e720 <HAL_SAI_Init+0x2d4>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d004      	beq.n	800e518 <HAL_SAI_Init+0xcc>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a84      	ldr	r2, [pc, #528]	; (800e724 <HAL_SAI_Init+0x2d8>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d103      	bne.n	800e520 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800e518:	4a83      	ldr	r2, [pc, #524]	; (800e728 <HAL_SAI_Init+0x2dc>)
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	6013      	str	r3, [r2, #0]
 800e51e:	e002      	b.n	800e526 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e520:	4a82      	ldr	r2, [pc, #520]	; (800e72c <HAL_SAI_Init+0x2e0>)
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	69db      	ldr	r3, [r3, #28]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d04c      	beq.n	800e5c8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a7a      	ldr	r2, [pc, #488]	; (800e720 <HAL_SAI_Init+0x2d4>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d004      	beq.n	800e546 <HAL_SAI_Init+0xfa>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a78      	ldr	r2, [pc, #480]	; (800e724 <HAL_SAI_Init+0x2d8>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d104      	bne.n	800e550 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e546:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e54a:	f7ff fa65 	bl	800da18 <HAL_RCCEx_GetPeriphCLKFreq>
 800e54e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a76      	ldr	r2, [pc, #472]	; (800e730 <HAL_SAI_Init+0x2e4>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d004      	beq.n	800e564 <HAL_SAI_Init+0x118>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4a75      	ldr	r2, [pc, #468]	; (800e734 <HAL_SAI_Init+0x2e8>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d104      	bne.n	800e56e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e564:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e568:	f7ff fa56 	bl	800da18 <HAL_RCCEx_GetPeriphCLKFreq>
 800e56c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	4613      	mov	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4413      	add	r3, r2
 800e576:	005b      	lsls	r3, r3, #1
 800e578:	461a      	mov	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	69db      	ldr	r3, [r3, #28]
 800e57e:	025b      	lsls	r3, r3, #9
 800e580:	fbb2 f3f3 	udiv	r3, r2, r3
 800e584:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	4a6b      	ldr	r2, [pc, #428]	; (800e738 <HAL_SAI_Init+0x2ec>)
 800e58a:	fba2 2303 	umull	r2, r3, r2, r3
 800e58e:	08da      	lsrs	r2, r3, #3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800e594:	68f9      	ldr	r1, [r7, #12]
 800e596:	4b68      	ldr	r3, [pc, #416]	; (800e738 <HAL_SAI_Init+0x2ec>)
 800e598:	fba3 2301 	umull	r2, r3, r3, r1
 800e59c:	08da      	lsrs	r2, r3, #3
 800e59e:	4613      	mov	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	005b      	lsls	r3, r3, #1
 800e5a6:	1aca      	subs	r2, r1, r3
 800e5a8:	2a08      	cmp	r2, #8
 800e5aa:	d904      	bls.n	800e5b6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a1b      	ldr	r3, [r3, #32]
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ba:	2b04      	cmp	r3, #4
 800e5bc:	d104      	bne.n	800e5c8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	085a      	lsrs	r2, r3, #1
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <HAL_SAI_Init+0x18c>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d109      	bne.n	800e5ec <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d101      	bne.n	800e5e4 <HAL_SAI_Init+0x198>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	e001      	b.n	800e5e8 <HAL_SAI_Init+0x19c>
 800e5e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5e8:	61bb      	str	r3, [r7, #24]
 800e5ea:	e008      	b.n	800e5fe <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d102      	bne.n	800e5fa <HAL_SAI_Init+0x1ae>
 800e5f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5f8:	e000      	b.n	800e5fc <HAL_SAI_Init+0x1b0>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6819      	ldr	r1, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	4b4c      	ldr	r3, [pc, #304]	; (800e73c <HAL_SAI_Init+0x2f0>)
 800e60a:	400b      	ands	r3, r1
 800e60c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	6819      	ldr	r1, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e622:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e628:	431a      	orrs	r2, r3
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800e636:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e642:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a1b      	ldr	r3, [r3, #32]
 800e648:	051b      	lsls	r3, r3, #20
 800e64a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	430a      	orrs	r2, r1
 800e652:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	6859      	ldr	r1, [r3, #4]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	4b38      	ldr	r3, [pc, #224]	; (800e740 <HAL_SAI_Init+0x2f4>)
 800e660:	400b      	ands	r3, r1
 800e662:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	6859      	ldr	r1, [r3, #4]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	699a      	ldr	r2, [r3, #24]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e672:	431a      	orrs	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e678:	431a      	orrs	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	430a      	orrs	r2, r1
 800e680:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6899      	ldr	r1, [r3, #8]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	4b2d      	ldr	r3, [pc, #180]	; (800e744 <HAL_SAI_Init+0x2f8>)
 800e68e:	400b      	ands	r3, r1
 800e690:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	6899      	ldr	r1, [r3, #8]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800e6a2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800e6a8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800e6ae:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e6b8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	430a      	orrs	r2, r1
 800e6c0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68d9      	ldr	r1, [r3, #12]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e6d0:	400b      	ands	r3, r1
 800e6d2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	68d9      	ldr	r1, [r3, #12]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6e2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6e8:	041b      	lsls	r3, r3, #16
 800e6ea:	431a      	orrs	r2, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	021b      	lsls	r3, r3, #8
 800e6f4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	430a      	orrs	r2, r1
 800e6fc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3720      	adds	r7, #32
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	40015804 	.word	0x40015804
 800e724:	40015824 	.word	0x40015824
 800e728:	40015800 	.word	0x40015800
 800e72c:	40015c00 	.word	0x40015c00
 800e730:	40015c04 	.word	0x40015c04
 800e734:	40015c24 	.word	0x40015c24
 800e738:	cccccccd 	.word	0xcccccccd
 800e73c:	ff05c010 	.word	0xff05c010
 800e740:	ffff1ff0 	.word	0xffff1ff0
 800e744:	fff88000 	.word	0xfff88000

0800e748 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	e027      	b.n	800e7aa <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2202      	movs	r2, #2
 800e75e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2200      	movs	r2, #0
 800e768:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f04f 32ff 	mov.w	r2, #4294967295
 800e772:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 fa11 	bl	800eb9c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f042 0208 	orr.w	r2, r2, #8
 800e788:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7f5 f9b0 	bl	8003af0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d101      	bne.n	800e7cc <HAL_SAI_DMAStop+0x1a>
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	e061      	b.n	800e890 <HAL_SAI_DMAStop+0xde>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e7e2:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01c      	beq.n	800e826 <HAL_SAI_DMAStop+0x74>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b12      	cmp	r3, #18
 800e7f6:	d116      	bne.n	800e826 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7f9 fa9d 	bl	8007d3c <HAL_DMA_Abort>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00e      	beq.n	800e826 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e80e:	2b80      	cmp	r3, #128	; 0x80
 800e810:	d009      	beq.n	800e826 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e81c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d01c      	beq.n	800e868 <HAL_SAI_DMAStop+0xb6>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b22      	cmp	r3, #34	; 0x22
 800e838:	d116      	bne.n	800e868 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f9 fa7c 	bl	8007d3c <HAL_DMA_Abort>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00e      	beq.n	800e868 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e850:	2b80      	cmp	r3, #128	; 0x80
 800e852:	d009      	beq.n	800e868 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 800e854:	2301      	movs	r3, #1
 800e856:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e85e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f997 	bl	800eb9c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f042 0208 	orr.w	r2, r2, #8
 800e87c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800e88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800e8a6:	f7f8 fbd3 	bl	8007050 <HAL_GetTick>
 800e8aa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d002      	beq.n	800e8b8 <HAL_SAI_Transmit_DMA+0x20>
 800e8b2:	88fb      	ldrh	r3, [r7, #6]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d101      	bne.n	800e8bc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e093      	b.n	800e9e4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	f040 808c 	bne.w	800e9e2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d101      	bne.n	800e8d8 <HAL_SAI_Transmit_DMA+0x40>
 800e8d4:	2302      	movs	r3, #2
 800e8d6:	e085      	b.n	800e9e4 <HAL_SAI_Transmit_DMA+0x14c>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	88fa      	ldrh	r2, [r7, #6]
 800e8ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	88fa      	ldrh	r2, [r7, #6]
 800e8f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2212      	movs	r2, #18
 800e902:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e90a:	4a38      	ldr	r2, [pc, #224]	; (800e9ec <HAL_SAI_Transmit_DMA+0x154>)
 800e90c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e912:	4a37      	ldr	r2, [pc, #220]	; (800e9f0 <HAL_SAI_Transmit_DMA+0x158>)
 800e914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91a:	4a36      	ldr	r2, [pc, #216]	; (800e9f4 <HAL_SAI_Transmit_DMA+0x15c>)
 800e91c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e922:	2200      	movs	r2, #0
 800e924:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e92e:	4619      	mov	r1, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	331c      	adds	r3, #28
 800e936:	461a      	mov	r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e93e:	f7f9 f99d 	bl	8007c7c <HAL_DMA_Start_IT>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d005      	beq.n	800e954 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e047      	b.n	800e9e4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e954:	2100      	movs	r1, #0
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f000 f8ea 	bl	800eb30 <SAI_InterruptFlag>
 800e95c:	4601      	mov	r1, r0
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	691a      	ldr	r2, [r3, #16]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	430a      	orrs	r2, r1
 800e96a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e97a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e97c:	e015      	b.n	800e9aa <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e97e:	f7f8 fb67 	bl	8007050 <HAL_GetTick>
 800e982:	4602      	mov	r2, r0
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e98c:	d90d      	bls.n	800e9aa <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	e01c      	b.n	800e9e4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d0e2      	beq.n	800e97e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d107      	bne.n	800e9d6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e9d4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e000      	b.n	800e9e4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800e9e2:	2302      	movs	r3, #2
  }
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3718      	adds	r7, #24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	0800ec6d 	.word	0x0800ec6d
 800e9f0:	0800ec0d 	.word	0x0800ec0d
 800e9f4:	0800ed05 	.word	0x0800ed05

0800e9f8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	4613      	mov	r3, r2
 800ea04:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <HAL_SAI_Receive_DMA+0x1a>
 800ea0c:	88fb      	ldrh	r3, [r7, #6]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d101      	bne.n	800ea16 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e074      	b.n	800eb00 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d16d      	bne.n	800eafe <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d101      	bne.n	800ea30 <HAL_SAI_Receive_DMA+0x38>
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	e067      	b.n	800eb00 <HAL_SAI_Receive_DMA+0x108>
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	88fa      	ldrh	r2, [r7, #6]
 800ea42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	88fa      	ldrh	r2, [r7, #6]
 800ea4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2222      	movs	r2, #34	; 0x22
 800ea5a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea62:	4a29      	ldr	r2, [pc, #164]	; (800eb08 <HAL_SAI_Receive_DMA+0x110>)
 800ea64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea6a:	4a28      	ldr	r2, [pc, #160]	; (800eb0c <HAL_SAI_Receive_DMA+0x114>)
 800ea6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea72:	4a27      	ldr	r2, [pc, #156]	; (800eb10 <HAL_SAI_Receive_DMA+0x118>)
 800ea74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	331c      	adds	r3, #28
 800ea88:	4619      	mov	r1, r3
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea8e:	461a      	mov	r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ea96:	f7f9 f8f1 	bl	8007c7c <HAL_DMA_Start_IT>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d005      	beq.n	800eaac <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e029      	b.n	800eb00 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800eaac:	2100      	movs	r1, #0
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f000 f83e 	bl	800eb30 <SAI_InterruptFlag>
 800eab4:	4601      	mov	r1, r0
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	691a      	ldr	r2, [r3, #16]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	430a      	orrs	r2, r1
 800eac2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ead2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d107      	bne.n	800eaf2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eaf0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	e000      	b.n	800eb00 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800eafe:	2302      	movs	r3, #2
  }
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	0800ece9 	.word	0x0800ece9
 800eb0c:	0800ec89 	.word	0x0800ec89
 800eb10:	0800ed05 	.word	0x0800ed05

0800eb14 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800eb22:	b2db      	uxtb	r3, r3
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d103      	bne.n	800eb4c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f043 0308 	orr.w	r3, r3, #8
 800eb4a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb50:	2b08      	cmp	r3, #8
 800eb52:	d10b      	bne.n	800eb6c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800eb58:	2b03      	cmp	r3, #3
 800eb5a:	d003      	beq.n	800eb64 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d103      	bne.n	800eb6c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f043 0310 	orr.w	r3, r3, #16
 800eb6a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	2b03      	cmp	r3, #3
 800eb72:	d003      	beq.n	800eb7c <SAI_InterruptFlag+0x4c>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d104      	bne.n	800eb86 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	e003      	b.n	800eb8e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f043 0304 	orr.w	r3, r3, #4
 800eb8c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3714      	adds	r7, #20
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800eba4:	4b17      	ldr	r3, [pc, #92]	; (800ec04 <SAI_Disable+0x68>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a17      	ldr	r2, [pc, #92]	; (800ec08 <SAI_Disable+0x6c>)
 800ebaa:	fba2 2303 	umull	r2, r3, r2, r3
 800ebae:	0b1b      	lsrs	r3, r3, #12
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ebc6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	1e5a      	subs	r2, r3, #1
 800ebcc:	60fa      	str	r2, [r7, #12]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10a      	bne.n	800ebe8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	72fb      	strb	r3, [r7, #11]
      break;
 800ebe6:	e006      	b.n	800ebf6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1e8      	bne.n	800ebc8 <SAI_Disable+0x2c>

  return status;
 800ebf6:	7afb      	ldrb	r3, [r7, #11]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3714      	adds	r7, #20
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr
 800ec04:	20000010 	.word	0x20000010
 800ec08:	95cbec1b 	.word	0x95cbec1b

0800ec0c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec18:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	69db      	ldr	r3, [r3, #28]
 800ec1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec22:	d01c      	beq.n	800ec5e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ec3a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	f7ff ff76 	bl	800eb30 <SAI_InterruptFlag>
 800ec44:	4603      	mov	r3, r0
 800ec46:	43d9      	mvns	r1, r3
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	691a      	ldr	r2, [r3, #16]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	400a      	ands	r2, r1
 800ec54:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f7f6 feb6 	bl	80059d0 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ec64:	bf00      	nop
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f7f6 feb2 	bl	80059e4 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ec80:	bf00      	nop
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec94:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	69db      	ldr	r3, [r3, #28]
 800ec9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec9e:	d01c      	beq.n	800ecda <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ecae:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ecb8:	2100      	movs	r1, #0
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f7ff ff38 	bl	800eb30 <SAI_InterruptFlag>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	43d9      	mvns	r1, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	691a      	ldr	r2, [r3, #16]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	400a      	ands	r2, r1
 800ecd0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f7f7 f900 	bl	8005ee0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ece0:	bf00      	nop
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7f7 f8fc 	bl	8005ef4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ecfc:	bf00      	nop
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed10:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d004      	beq.n	800ed36 <SAI_DMAError+0x32>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d112      	bne.n	800ed5c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ed44:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7ff ff28 	bl	800eb9c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7f6 fe4b 	bl	80059f8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed62:	bf00      	nop
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b082      	sub	sp, #8
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d101      	bne.n	800ed7c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e022      	b.n	800edc2 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d105      	bne.n	800ed94 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7f4 f9c4 	bl	800311c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2203      	movs	r2, #3
 800ed98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f815 	bl	800edcc <HAL_SD_InitCard>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d001      	beq.n	800edac <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800eda8:	2301      	movs	r3, #1
 800edaa:	e00a      	b.n	800edc2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800edc0:	2300      	movs	r3, #0
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3708      	adds	r7, #8
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
	...

0800edcc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800edcc:	b5b0      	push	{r4, r5, r7, lr}
 800edce:	b08e      	sub	sp, #56	; 0x38
 800edd0:	af04      	add	r7, sp, #16
 800edd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800edd4:	2300      	movs	r3, #0
 800edd6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800edd8:	2300      	movs	r3, #0
 800edda:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800eddc:	2300      	movs	r3, #0
 800edde:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ede0:	2300      	movs	r3, #0
 800ede2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ede4:	2300      	movs	r3, #0
 800ede6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ede8:	2376      	movs	r3, #118	; 0x76
 800edea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681d      	ldr	r5, [r3, #0]
 800edf0:	466c      	mov	r4, sp
 800edf2:	f107 0314 	add.w	r3, r7, #20
 800edf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800edfe:	f107 0308 	add.w	r3, r7, #8
 800ee02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee04:	4628      	mov	r0, r5
 800ee06:	f003 fa2b 	bl	8012260 <SDMMC_Init>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ee10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e059      	b.n	800eed0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee2a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f003 fa5f 	bl	80122f4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	685a      	ldr	r2, [r3, #4]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee44:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800ee46:	2002      	movs	r0, #2
 800ee48:	f7f8 f90e 	bl	8007068 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fff3 	bl	800fe38 <SD_PowerON>
 800ee52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee54:	6a3b      	ldr	r3, [r7, #32]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00b      	beq.n	800ee72 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	431a      	orrs	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e02e      	b.n	800eed0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 ff12 	bl	800fc9c <SD_InitCard>
 800ee78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee7a:	6a3b      	ldr	r3, [r7, #32]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00b      	beq.n	800ee98 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	431a      	orrs	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ee94:	2301      	movs	r3, #1
 800ee96:	e01b      	b.n	800eed0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eea0:	4618      	mov	r0, r3
 800eea2:	f003 fab9 	bl	8012418 <SDMMC_CmdBlockLength>
 800eea6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eea8:	6a3b      	ldr	r3, [r7, #32]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00f      	beq.n	800eece <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a09      	ldr	r2, [pc, #36]	; (800eed8 <HAL_SD_InitCard+0x10c>)
 800eeb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eeba:	6a3b      	ldr	r3, [r7, #32]
 800eebc:	431a      	orrs	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2201      	movs	r2, #1
 800eec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e000      	b.n	800eed0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3728      	adds	r7, #40	; 0x28
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bdb0      	pop	{r4, r5, r7, pc}
 800eed8:	004005ff 	.word	0x004005ff

0800eedc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08c      	sub	sp, #48	; 0x30
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d107      	bne.n	800ef04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ef00:	2301      	movs	r3, #1
 800ef02:	e0c3      	b.n	800f08c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	f040 80bc 	bne.w	800f08a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2200      	movs	r2, #0
 800ef16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ef18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	441a      	add	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d907      	bls.n	800ef36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e0aa      	b.n	800f08c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2203      	movs	r2, #3
 800ef3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2200      	movs	r2, #0
 800ef44:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ef54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef5a:	4a4e      	ldr	r2, [pc, #312]	; (800f094 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ef5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef62:	4a4d      	ldr	r2, [pc, #308]	; (800f098 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ef64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef72:	2200      	movs	r2, #0
 800ef74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef86:	689a      	ldr	r2, [r3, #8]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	430a      	orrs	r2, r1
 800ef90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	3380      	adds	r3, #128	; 0x80
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	025b      	lsls	r3, r3, #9
 800efa4:	089b      	lsrs	r3, r3, #2
 800efa6:	f7f8 fe69 	bl	8007c7c <HAL_DMA_Start_IT>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d017      	beq.n	800efe0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800efbe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a35      	ldr	r2, [pc, #212]	; (800f09c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800efc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2201      	movs	r2, #1
 800efd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800efdc:	2301      	movs	r3, #1
 800efde:	e055      	b.n	800f08c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f042 0208 	orr.w	r2, r2, #8
 800efee:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d002      	beq.n	800effe <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	025b      	lsls	r3, r3, #9
 800effc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800effe:	f04f 33ff 	mov.w	r3, #4294967295
 800f002:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	025b      	lsls	r3, r3, #9
 800f008:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f00a:	2390      	movs	r3, #144	; 0x90
 800f00c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f00e:	2302      	movs	r3, #2
 800f010:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f012:	2300      	movs	r3, #0
 800f014:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f016:	2301      	movs	r3, #1
 800f018:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f107 0210 	add.w	r2, r7, #16
 800f022:	4611      	mov	r1, r2
 800f024:	4618      	mov	r0, r3
 800f026:	f003 f9cb 	bl	80123c0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d90a      	bls.n	800f046 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2282      	movs	r2, #130	; 0x82
 800f034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f03c:	4618      	mov	r0, r3
 800f03e:	f003 fa2f 	bl	80124a0 <SDMMC_CmdReadMultiBlock>
 800f042:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f044:	e009      	b.n	800f05a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2281      	movs	r2, #129	; 0x81
 800f04a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f052:	4618      	mov	r0, r3
 800f054:	f003 fa02 	bl	801245c <SDMMC_CmdReadSingleBlock>
 800f058:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d012      	beq.n	800f086 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a0d      	ldr	r2, [pc, #52]	; (800f09c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f066:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06e:	431a      	orrs	r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2200      	movs	r2, #0
 800f080:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	e002      	b.n	800f08c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f086:	2300      	movs	r3, #0
 800f088:	e000      	b.n	800f08c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f08a:	2302      	movs	r3, #2
  }
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3730      	adds	r7, #48	; 0x30
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	0800faab 	.word	0x0800faab
 800f098:	0800fb1d 	.word	0x0800fb1d
 800f09c:	004005ff 	.word	0x004005ff

0800f0a0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b08c      	sub	sp, #48	; 0x30
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
 800f0ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d107      	bne.n	800f0c8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e0c6      	b.n	800f256 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	f040 80bf 	bne.w	800f254 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f0dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	441a      	add	r2, r3
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d907      	bls.n	800f0fa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e0ad      	b.n	800f256 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2203      	movs	r2, #3
 800f0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2200      	movs	r2, #0
 800f108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f042 021a 	orr.w	r2, r2, #26
 800f118:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f11e:	4a50      	ldr	r2, [pc, #320]	; (800f260 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f126:	4a4f      	ldr	r2, [pc, #316]	; (800f264 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f128:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f12e:	2200      	movs	r2, #0
 800f130:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f136:	2b01      	cmp	r3, #1
 800f138:	d002      	beq.n	800f140 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13c:	025b      	lsls	r3, r3, #9
 800f13e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b01      	cmp	r3, #1
 800f144:	d90a      	bls.n	800f15c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	22a0      	movs	r2, #160	; 0xa0
 800f14a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f152:	4618      	mov	r0, r3
 800f154:	f003 f9e8 	bl	8012528 <SDMMC_CmdWriteMultiBlock>
 800f158:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f15a:	e009      	b.n	800f170 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2290      	movs	r2, #144	; 0x90
 800f160:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f168:	4618      	mov	r0, r3
 800f16a:	f003 f9bb 	bl	80124e4 <SDMMC_CmdWriteSingleBlock>
 800f16e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f172:	2b00      	cmp	r3, #0
 800f174:	d012      	beq.n	800f19c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a3b      	ldr	r2, [pc, #236]	; (800f268 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f17c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f184:	431a      	orrs	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2201      	movs	r2, #1
 800f18e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2200      	movs	r2, #0
 800f196:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	e05c      	b.n	800f256 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f042 0208 	orr.w	r2, r2, #8
 800f1aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1b0:	2240      	movs	r2, #64	; 0x40
 800f1b2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1c4:	689a      	ldr	r2, [r3, #8]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	430a      	orrs	r2, r1
 800f1ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f1d4:	68b9      	ldr	r1, [r7, #8]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3380      	adds	r3, #128	; 0x80
 800f1dc:	461a      	mov	r2, r3
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	025b      	lsls	r3, r3, #9
 800f1e2:	089b      	lsrs	r3, r3, #2
 800f1e4:	f7f8 fd4a 	bl	8007c7c <HAL_DMA_Start_IT>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d01a      	beq.n	800f224 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f022 021a 	bic.w	r2, r2, #26
 800f1fc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4a19      	ldr	r2, [pc, #100]	; (800f268 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2201      	movs	r2, #1
 800f216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f220:	2301      	movs	r3, #1
 800f222:	e018      	b.n	800f256 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f224:	f04f 33ff 	mov.w	r3, #4294967295
 800f228:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	025b      	lsls	r3, r3, #9
 800f22e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f230:	2390      	movs	r3, #144	; 0x90
 800f232:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f234:	2300      	movs	r3, #0
 800f236:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f238:	2300      	movs	r3, #0
 800f23a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f23c:	2301      	movs	r3, #1
 800f23e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f107 0210 	add.w	r2, r7, #16
 800f248:	4611      	mov	r1, r2
 800f24a:	4618      	mov	r0, r3
 800f24c:	f003 f8b8 	bl	80123c0 <SDMMC_ConfigData>

      return HAL_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	e000      	b.n	800f256 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f254:	2302      	movs	r3, #2
  }
}
 800f256:	4618      	mov	r0, r3
 800f258:	3730      	adds	r7, #48	; 0x30
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	0800fa81 	.word	0x0800fa81
 800f264:	0800fb1d 	.word	0x0800fb1d
 800f268:	004005ff 	.word	0x004005ff

0800f26c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f278:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f284:	2b00      	cmp	r3, #0
 800f286:	d008      	beq.n	800f29a <HAL_SD_IRQHandler+0x2e>
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f003 0308 	and.w	r3, r3, #8
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d003      	beq.n	800f29a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 ffef 	bl	8010276 <SD_Read_IT>
 800f298:	e15a      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 808d 	beq.w	800f3c4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f2b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	4b9a      	ldr	r3, [pc, #616]	; (800f528 <HAL_SD_IRQHandler+0x2bc>)
 800f2c0:	400b      	ands	r3, r1
 800f2c2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f022 0201 	bic.w	r2, r2, #1
 800f2d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f003 0308 	and.w	r3, r3, #8
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d039      	beq.n	800f352 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f003 0302 	and.w	r3, r3, #2
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d104      	bne.n	800f2f2 <HAL_SD_IRQHandler+0x86>
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f003 0320 	and.w	r3, r3, #32
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d011      	beq.n	800f316 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f003 f938 	bl	801256c <SDMMC_CmdStopTransfer>
 800f2fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d008      	beq.n	800f316 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	431a      	orrs	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 f921 	bl	800f558 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f240 523a 	movw	r2, #1338	; 0x53a
 800f31e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2201      	movs	r2, #1
 800f324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f003 0301 	and.w	r3, r3, #1
 800f334:	2b00      	cmp	r3, #0
 800f336:	d104      	bne.n	800f342 <HAL_SD_IRQHandler+0xd6>
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f003 0302 	and.w	r3, r3, #2
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f004 fd98 	bl	8013e78 <HAL_SD_RxCpltCallback>
 800f348:	e102      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f004 fd8a 	bl	8013e64 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f350:	e0fe      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f000 80f9 	beq.w	800f550 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f003 0320 	and.w	r3, r3, #32
 800f364:	2b00      	cmp	r3, #0
 800f366:	d011      	beq.n	800f38c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f003 f8fd 	bl	801256c <SDMMC_CmdStopTransfer>
 800f372:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d008      	beq.n	800f38c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	431a      	orrs	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 f8e6 	bl	800f558 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	f040 80dc 	bne.w	800f550 <HAL_SD_IRQHandler+0x2e4>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f003 0302 	and.w	r3, r3, #2
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f040 80d6 	bne.w	800f550 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f022 0208 	bic.w	r2, r2, #8
 800f3b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f004 fd51 	bl	8013e64 <HAL_SD_TxCpltCallback>
}
 800f3c2:	e0c5      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d008      	beq.n	800f3e4 <HAL_SD_IRQHandler+0x178>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f003 0308 	and.w	r3, r3, #8
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d003      	beq.n	800f3e4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 ff9b 	bl	8010318 <SD_Write_IT>
 800f3e2:	e0b5      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ea:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 80ae 	beq.w	800f550 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3fa:	f003 0302 	and.w	r3, r3, #2
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d005      	beq.n	800f40e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f406:	f043 0202 	orr.w	r2, r3, #2
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f414:	f003 0308 	and.w	r3, r3, #8
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f420:	f043 0208 	orr.w	r2, r3, #8
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f42e:	f003 0320 	and.w	r3, r3, #32
 800f432:	2b00      	cmp	r3, #0
 800f434:	d005      	beq.n	800f442 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f43a:	f043 0220 	orr.w	r2, r3, #32
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f448:	f003 0310 	and.w	r3, r3, #16
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d005      	beq.n	800f45c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f454:	f043 0210 	orr.w	r2, r3, #16
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f240 523a 	movw	r2, #1338	; 0x53a
 800f464:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f474:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f003 f876 	bl	801256c <SDMMC_CmdStopTransfer>
 800f480:	4602      	mov	r2, r0
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f486:	431a      	orrs	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f003 0308 	and.w	r3, r3, #8
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00a      	beq.n	800f4ac <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2201      	movs	r2, #1
 800f49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f857 	bl	800f558 <HAL_SD_ErrorCallback>
}
 800f4aa:	e051      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d04c      	beq.n	800f550 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f003 0310 	and.w	r3, r3, #16
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d104      	bne.n	800f4ca <HAL_SD_IRQHandler+0x25e>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f003 0320 	and.w	r3, r3, #32
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d011      	beq.n	800f4ee <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ce:	4a17      	ldr	r2, [pc, #92]	; (800f52c <HAL_SD_IRQHandler+0x2c0>)
 800f4d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7f8 fca0 	bl	8007e1c <HAL_DMA_Abort_IT>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d036      	beq.n	800f550 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 fb6a 	bl	800fbc0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800f4ec:	e030      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d104      	bne.n	800f502 <HAL_SD_IRQHandler+0x296>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f003 0302 	and.w	r3, r3, #2
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d018      	beq.n	800f534 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f506:	4a0a      	ldr	r2, [pc, #40]	; (800f530 <HAL_SD_IRQHandler+0x2c4>)
 800f508:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f8 fc84 	bl	8007e1c <HAL_DMA_Abort_IT>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d01a      	beq.n	800f550 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51e:	4618      	mov	r0, r3
 800f520:	f000 fb85 	bl	800fc2e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800f524:	e014      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
 800f526:	bf00      	nop
 800f528:	ffff3ec5 	.word	0xffff3ec5
 800f52c:	0800fbc1 	.word	0x0800fbc1
 800f530:	0800fc2f 	.word	0x0800fc2f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2201      	movs	r2, #1
 800f53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f004 fc81 	bl	8013e50 <HAL_SD_AbortCallback>
}
 800f54e:	e7ff      	b.n	800f550 <HAL_SD_IRQHandler+0x2e4>
 800f550:	bf00      	nop
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f560:	bf00      	nop
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f57a:	0f9b      	lsrs	r3, r3, #30
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f586:	0e9b      	lsrs	r3, r3, #26
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	f003 030f 	and.w	r3, r3, #15
 800f58e:	b2da      	uxtb	r2, r3
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f598:	0e1b      	lsrs	r3, r3, #24
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	f003 0303 	and.w	r3, r3, #3
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5aa:	0c1b      	lsrs	r3, r3, #16
 800f5ac:	b2da      	uxtb	r2, r3
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5b6:	0a1b      	lsrs	r3, r3, #8
 800f5b8:	b2da      	uxtb	r2, r3
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5c2:	b2da      	uxtb	r2, r3
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5cc:	0d1b      	lsrs	r3, r3, #20
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5d8:	0c1b      	lsrs	r3, r3, #16
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	f003 030f 	and.w	r3, r3, #15
 800f5e0:	b2da      	uxtb	r2, r3
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5ea:	0bdb      	lsrs	r3, r3, #15
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	f003 0301 	and.w	r3, r3, #1
 800f5f2:	b2da      	uxtb	r2, r3
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5fc:	0b9b      	lsrs	r3, r3, #14
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	f003 0301 	and.w	r3, r3, #1
 800f604:	b2da      	uxtb	r2, r3
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f60e:	0b5b      	lsrs	r3, r3, #13
 800f610:	b2db      	uxtb	r3, r3
 800f612:	f003 0301 	and.w	r3, r3, #1
 800f616:	b2da      	uxtb	r2, r3
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f620:	0b1b      	lsrs	r3, r3, #12
 800f622:	b2db      	uxtb	r3, r3
 800f624:	f003 0301 	and.w	r3, r3, #1
 800f628:	b2da      	uxtb	r2, r3
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	2200      	movs	r2, #0
 800f632:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d163      	bne.n	800f704 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f640:	009a      	lsls	r2, r3, #2
 800f642:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f646:	4013      	ands	r3, r2
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f64c:	0f92      	lsrs	r2, r2, #30
 800f64e:	431a      	orrs	r2, r3
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f658:	0edb      	lsrs	r3, r3, #27
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	f003 0307 	and.w	r3, r3, #7
 800f660:	b2da      	uxtb	r2, r3
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f66a:	0e1b      	lsrs	r3, r3, #24
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	f003 0307 	and.w	r3, r3, #7
 800f672:	b2da      	uxtb	r2, r3
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f67c:	0d5b      	lsrs	r3, r3, #21
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	f003 0307 	and.w	r3, r3, #7
 800f684:	b2da      	uxtb	r2, r3
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f68e:	0c9b      	lsrs	r3, r3, #18
 800f690:	b2db      	uxtb	r3, r3
 800f692:	f003 0307 	and.w	r3, r3, #7
 800f696:	b2da      	uxtb	r2, r3
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6a0:	0bdb      	lsrs	r3, r3, #15
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	f003 0307 	and.w	r3, r3, #7
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	691b      	ldr	r3, [r3, #16]
 800f6b2:	1c5a      	adds	r2, r3, #1
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	7e1b      	ldrb	r3, [r3, #24]
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	f003 0307 	and.w	r3, r3, #7
 800f6c2:	3302      	adds	r3, #2
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f6ce:	fb03 f202 	mul.w	r2, r3, r2
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	7a1b      	ldrb	r3, [r3, #8]
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	f003 030f 	and.w	r3, r3, #15
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	409a      	lsls	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f6f0:	0a52      	lsrs	r2, r2, #9
 800f6f2:	fb03 f202 	mul.w	r2, r3, r2
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f700:	661a      	str	r2, [r3, #96]	; 0x60
 800f702:	e031      	b.n	800f768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d11d      	bne.n	800f748 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f710:	041b      	lsls	r3, r3, #16
 800f712:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f71a:	0c1b      	lsrs	r3, r3, #16
 800f71c:	431a      	orrs	r2, r3
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	691b      	ldr	r3, [r3, #16]
 800f726:	3301      	adds	r3, #1
 800f728:	029a      	lsls	r2, r3, #10
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f73c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	661a      	str	r2, [r3, #96]	; 0x60
 800f746:	e00f      	b.n	800f768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a58      	ldr	r2, [pc, #352]	; (800f8b0 <HAL_SD_GetCardCSD+0x344>)
 800f74e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2201      	movs	r2, #1
 800f760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f764:	2301      	movs	r3, #1
 800f766:	e09d      	b.n	800f8a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f76c:	0b9b      	lsrs	r3, r3, #14
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	f003 0301 	and.w	r3, r3, #1
 800f774:	b2da      	uxtb	r2, r3
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f77e:	09db      	lsrs	r3, r3, #7
 800f780:	b2db      	uxtb	r3, r3
 800f782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f786:	b2da      	uxtb	r2, r3
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f790:	b2db      	uxtb	r3, r3
 800f792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f796:	b2da      	uxtb	r2, r3
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7a0:	0fdb      	lsrs	r3, r3, #31
 800f7a2:	b2da      	uxtb	r2, r3
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ac:	0f5b      	lsrs	r3, r3, #29
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	f003 0303 	and.w	r3, r3, #3
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7be:	0e9b      	lsrs	r3, r3, #26
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	f003 0307 	and.w	r3, r3, #7
 800f7c6:	b2da      	uxtb	r2, r3
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d0:	0d9b      	lsrs	r3, r3, #22
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	f003 030f 	and.w	r3, r3, #15
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7e2:	0d5b      	lsrs	r3, r3, #21
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	f003 0301 	and.w	r3, r3, #1
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7fe:	0c1b      	lsrs	r3, r3, #16
 800f800:	b2db      	uxtb	r3, r3
 800f802:	f003 0301 	and.w	r3, r3, #1
 800f806:	b2da      	uxtb	r2, r3
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f812:	0bdb      	lsrs	r3, r3, #15
 800f814:	b2db      	uxtb	r3, r3
 800f816:	f003 0301 	and.w	r3, r3, #1
 800f81a:	b2da      	uxtb	r2, r3
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f826:	0b9b      	lsrs	r3, r3, #14
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	f003 0301 	and.w	r3, r3, #1
 800f82e:	b2da      	uxtb	r2, r3
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f83a:	0b5b      	lsrs	r3, r3, #13
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	b2da      	uxtb	r2, r3
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f84e:	0b1b      	lsrs	r3, r3, #12
 800f850:	b2db      	uxtb	r3, r3
 800f852:	f003 0301 	and.w	r3, r3, #1
 800f856:	b2da      	uxtb	r2, r3
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f862:	0a9b      	lsrs	r3, r3, #10
 800f864:	b2db      	uxtb	r3, r3
 800f866:	f003 0303 	and.w	r3, r3, #3
 800f86a:	b2da      	uxtb	r2, r3
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f876:	0a1b      	lsrs	r3, r3, #8
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	f003 0303 	and.w	r3, r3, #3
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f88a:	085b      	lsrs	r3, r3, #1
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f892:	b2da      	uxtb	r2, r3
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	2201      	movs	r2, #1
 800f89e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr
 800f8b0:	004005ff 	.word	0x004005ff

0800f8b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f90c:	b5b0      	push	{r4, r5, r7, lr}
 800f90e:	b08e      	sub	sp, #56	; 0x38
 800f910:	af04      	add	r7, sp, #16
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2203      	movs	r2, #3
 800f920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f928:	2b03      	cmp	r3, #3
 800f92a:	d02e      	beq.n	800f98a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f932:	d106      	bne.n	800f942 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f938:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	639a      	str	r2, [r3, #56]	; 0x38
 800f940:	e029      	b.n	800f996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f948:	d10a      	bne.n	800f960 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 fb2a 	bl	800ffa4 <SD_WideBus_Enable>
 800f950:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	431a      	orrs	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	639a      	str	r2, [r3, #56]	; 0x38
 800f95e:	e01a      	b.n	800f996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d10a      	bne.n	800f97c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 fb67 	bl	801003a <SD_WideBus_Disable>
 800f96c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f972:	6a3b      	ldr	r3, [r7, #32]
 800f974:	431a      	orrs	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	639a      	str	r2, [r3, #56]	; 0x38
 800f97a:	e00c      	b.n	800f996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f980:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	639a      	str	r2, [r3, #56]	; 0x38
 800f988:	e005      	b.n	800f996 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f98e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d00b      	beq.n	800f9b6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a26      	ldr	r2, [pc, #152]	; (800fa3c <HAL_SD_ConfigWideBusOperation+0x130>)
 800f9a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9b4:	e01f      	b.n	800f9f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	695b      	ldr	r3, [r3, #20]
 800f9d0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	699b      	ldr	r3, [r3, #24]
 800f9d6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681d      	ldr	r5, [r3, #0]
 800f9dc:	466c      	mov	r4, sp
 800f9de:	f107 0314 	add.w	r3, r7, #20
 800f9e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f9ea:	f107 0308 	add.w	r3, r7, #8
 800f9ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	f002 fc35 	bl	8012260 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f002 fd0a 	bl	8012418 <SDMMC_CmdBlockLength>
 800fa04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa06:	6a3b      	ldr	r3, [r7, #32]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00c      	beq.n	800fa26 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4a0a      	ldr	r2, [pc, #40]	; (800fa3c <HAL_SD_ConfigWideBusOperation+0x130>)
 800fa12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa18:	6a3b      	ldr	r3, [r7, #32]
 800fa1a:	431a      	orrs	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800fa20:	2301      	movs	r3, #1
 800fa22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2201      	movs	r2, #1
 800fa2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800fa2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3728      	adds	r7, #40	; 0x28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bdb0      	pop	{r4, r5, r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	004005ff 	.word	0x004005ff

0800fa40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800fa4c:	f107 030c 	add.w	r3, r7, #12
 800fa50:	4619      	mov	r1, r3
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fa7e 	bl	800ff54 <SD_SendStatus>
 800fa58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d005      	beq.n	800fa6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	431a      	orrs	r2, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	0a5b      	lsrs	r3, r3, #9
 800fa70:	f003 030f 	and.w	r3, r3, #15
 800fa74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800fa76:	693b      	ldr	r3, [r7, #16]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa8c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fa9e:	bf00      	nop
 800faa0:	3714      	adds	r7, #20
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b084      	sub	sp, #16
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fabc:	2b82      	cmp	r3, #130	; 0x82
 800fabe:	d111      	bne.n	800fae4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f002 fd51 	bl	801256c <SDMMC_CmdStopTransfer>
 800faca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d008      	beq.n	800fae4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	431a      	orrs	r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	f7ff fd3a 	bl	800f558 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f022 0208 	bic.w	r2, r2, #8
 800faf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f240 523a 	movw	r2, #1338	; 0x53a
 800fafc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2201      	movs	r2, #1
 800fb02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f004 f9b3 	bl	8013e78 <HAL_SD_RxCpltCallback>
#endif
}
 800fb12:	bf00      	nop
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
	...

0800fb1c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb28:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7f8 fb22 	bl	8008174 <HAL_DMA_GetError>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d03e      	beq.n	800fbb4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb3c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb44:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d002      	beq.n	800fb52 <SD_DMAError+0x36>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d12d      	bne.n	800fbae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a19      	ldr	r2, [pc, #100]	; (800fbbc <SD_DMAError+0xa0>)
 800fb58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800fb68:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800fb76:	6978      	ldr	r0, [r7, #20]
 800fb78:	f7ff ff62 	bl	800fa40 <HAL_SD_GetCardState>
 800fb7c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b06      	cmp	r3, #6
 800fb82:	d002      	beq.n	800fb8a <SD_DMAError+0x6e>
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	2b05      	cmp	r3, #5
 800fb88:	d10a      	bne.n	800fba0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f002 fcec 	bl	801256c <SDMMC_CmdStopTransfer>
 800fb94:	4602      	mov	r2, r0
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9a:	431a      	orrs	r2, r3
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2201      	movs	r2, #1
 800fba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800fbae:	6978      	ldr	r0, [r7, #20]
 800fbb0:	f7ff fcd2 	bl	800f558 <HAL_SD_ErrorCallback>
#endif
  }
}
 800fbb4:	bf00      	nop
 800fbb6:	3718      	adds	r7, #24
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	004005ff 	.word	0x004005ff

0800fbc0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbcc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f240 523a 	movw	r2, #1338	; 0x53a
 800fbd6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7ff ff31 	bl	800fa40 <HAL_SD_GetCardState>
 800fbde:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2200      	movs	r2, #0
 800fbec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	2b06      	cmp	r3, #6
 800fbf2:	d002      	beq.n	800fbfa <SD_DMATxAbort+0x3a>
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2b05      	cmp	r3, #5
 800fbf8:	d10a      	bne.n	800fc10 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f002 fcb4 	bl	801256c <SDMMC_CmdStopTransfer>
 800fc04:	4602      	mov	r2, r0
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc0a:	431a      	orrs	r2, r3
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d103      	bne.n	800fc20 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f004 f919 	bl	8013e50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800fc1e:	e002      	b.n	800fc26 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f7ff fc99 	bl	800f558 <HAL_SD_ErrorCallback>
}
 800fc26:	bf00      	nop
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b084      	sub	sp, #16
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc3a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f240 523a 	movw	r2, #1338	; 0x53a
 800fc44:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f7ff fefa 	bl	800fa40 <HAL_SD_GetCardState>
 800fc4c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	2201      	movs	r2, #1
 800fc52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	2b06      	cmp	r3, #6
 800fc60:	d002      	beq.n	800fc68 <SD_DMARxAbort+0x3a>
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	2b05      	cmp	r3, #5
 800fc66:	d10a      	bne.n	800fc7e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f002 fc7d 	bl	801256c <SDMMC_CmdStopTransfer>
 800fc72:	4602      	mov	r2, r0
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc78:	431a      	orrs	r2, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d103      	bne.n	800fc8e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f004 f8e2 	bl	8013e50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800fc8c:	e002      	b.n	800fc94 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f7ff fc62 	bl	800f558 <HAL_SD_ErrorCallback>
}
 800fc94:	bf00      	nop
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fc9c:	b5b0      	push	{r4, r5, r7, lr}
 800fc9e:	b094      	sub	sp, #80	; 0x50
 800fca0:	af04      	add	r7, sp, #16
 800fca2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800fca4:	2301      	movs	r3, #1
 800fca6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4618      	mov	r0, r3
 800fcae:	f002 fb2f 	bl	8012310 <SDMMC_GetPowerState>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fcb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800fcbc:	e0b8      	b.n	800fe30 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d02f      	beq.n	800fd26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f002 fd59 	bl	8012782 <SDMMC_CmdSendCID>
 800fcd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fcd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <SD_InitCard+0x40>
    {
      return errorstate;
 800fcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcda:	e0a9      	b.n	800fe30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2100      	movs	r1, #0
 800fce2:	4618      	mov	r0, r3
 800fce4:	f002 fb59 	bl	801239a <SDMMC_GetResponse>
 800fce8:	4602      	mov	r2, r0
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2104      	movs	r1, #4
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f002 fb50 	bl	801239a <SDMMC_GetResponse>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2108      	movs	r1, #8
 800fd06:	4618      	mov	r0, r3
 800fd08:	f002 fb47 	bl	801239a <SDMMC_GetResponse>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	210c      	movs	r1, #12
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f002 fb3e 	bl	801239a <SDMMC_GetResponse>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd2a:	2b03      	cmp	r3, #3
 800fd2c:	d00d      	beq.n	800fd4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f107 020e 	add.w	r2, r7, #14
 800fd36:	4611      	mov	r1, r2
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f002 fd5f 	bl	80127fc <SDMMC_CmdSetRelAdd>
 800fd3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <SD_InitCard+0xae>
    {
      return errorstate;
 800fd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd48:	e072      	b.n	800fe30 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d036      	beq.n	800fdc0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800fd52:	89fb      	ldrh	r3, [r7, #14]
 800fd54:	461a      	mov	r2, r3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd62:	041b      	lsls	r3, r3, #16
 800fd64:	4619      	mov	r1, r3
 800fd66:	4610      	mov	r0, r2
 800fd68:	f002 fd29 	bl	80127be <SDMMC_CmdSendCSD>
 800fd6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <SD_InitCard+0xdc>
    {
      return errorstate;
 800fd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd76:	e05b      	b.n	800fe30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f002 fb0b 	bl	801239a <SDMMC_GetResponse>
 800fd84:	4602      	mov	r2, r0
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	2104      	movs	r1, #4
 800fd90:	4618      	mov	r0, r3
 800fd92:	f002 fb02 	bl	801239a <SDMMC_GetResponse>
 800fd96:	4602      	mov	r2, r0
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2108      	movs	r1, #8
 800fda2:	4618      	mov	r0, r3
 800fda4:	f002 faf9 	bl	801239a <SDMMC_GetResponse>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	210c      	movs	r1, #12
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f002 faf0 	bl	801239a <SDMMC_GetResponse>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2104      	movs	r1, #4
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f002 fae7 	bl	801239a <SDMMC_GetResponse>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	0d1a      	lsrs	r2, r3, #20
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800fdd4:	f107 0310 	add.w	r3, r7, #16
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff fbc6 	bl	800f56c <HAL_SD_GetCardCSD>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d002      	beq.n	800fdec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fde6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fdea:	e021      	b.n	800fe30 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6819      	ldr	r1, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdf4:	041b      	lsls	r3, r3, #16
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	461c      	mov	r4, r3
 800fdfa:	4615      	mov	r5, r2
 800fdfc:	4622      	mov	r2, r4
 800fdfe:	462b      	mov	r3, r5
 800fe00:	4608      	mov	r0, r1
 800fe02:	f002 fbd5 	bl	80125b0 <SDMMC_CmdSelDesel>
 800fe06:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <SD_InitCard+0x176>
  {
    return errorstate;
 800fe0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe10:	e00e      	b.n	800fe30 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681d      	ldr	r5, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	466c      	mov	r4, sp
 800fe1a:	f103 0210 	add.w	r2, r3, #16
 800fe1e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe24:	3304      	adds	r3, #4
 800fe26:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f002 fa19 	bl	8012260 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800fe2e:	2300      	movs	r3, #0
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3740      	adds	r7, #64	; 0x40
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bdb0      	pop	{r4, r5, r7, pc}

0800fe38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe40:	2300      	movs	r3, #0
 800fe42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800fe44:	2300      	movs	r3, #0
 800fe46:	617b      	str	r3, [r7, #20]
 800fe48:	2300      	movs	r3, #0
 800fe4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4618      	mov	r0, r3
 800fe52:	f002 fbd0 	bl	80125f6 <SDMMC_CmdGoIdleState>
 800fe56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d001      	beq.n	800fe62 <SD_PowerON+0x2a>
  {
    return errorstate;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	e072      	b.n	800ff48 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f002 fbe3 	bl	8012632 <SDMMC_CmdOperCond>
 800fe6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d00d      	beq.n	800fe90 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f002 fbb9 	bl	80125f6 <SDMMC_CmdGoIdleState>
 800fe84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d004      	beq.n	800fe96 <SD_PowerON+0x5e>
    {
      return errorstate;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	e05b      	b.n	800ff48 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2201      	movs	r2, #1
 800fe94:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d137      	bne.n	800ff0e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2100      	movs	r1, #0
 800fea4:	4618      	mov	r0, r3
 800fea6:	f002 fbe3 	bl	8012670 <SDMMC_CmdAppCommand>
 800feaa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d02d      	beq.n	800ff0e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800feb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800feb6:	e047      	b.n	800ff48 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2100      	movs	r1, #0
 800febe:	4618      	mov	r0, r3
 800fec0:	f002 fbd6 	bl	8012670 <SDMMC_CmdAppCommand>
 800fec4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <SD_PowerON+0x98>
    {
      return errorstate;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	e03b      	b.n	800ff48 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	491e      	ldr	r1, [pc, #120]	; (800ff50 <SD_PowerON+0x118>)
 800fed6:	4618      	mov	r0, r3
 800fed8:	f002 fbec 	bl	80126b4 <SDMMC_CmdAppOperCommand>
 800fedc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fee8:	e02e      	b.n	800ff48 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2100      	movs	r1, #0
 800fef0:	4618      	mov	r0, r3
 800fef2:	f002 fa52 	bl	801239a <SDMMC_GetResponse>
 800fef6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	0fdb      	lsrs	r3, r3, #31
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d101      	bne.n	800ff04 <SD_PowerON+0xcc>
 800ff00:	2301      	movs	r3, #1
 800ff02:	e000      	b.n	800ff06 <SD_PowerON+0xce>
 800ff04:	2300      	movs	r3, #0
 800ff06:	613b      	str	r3, [r7, #16]

    count++;
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d802      	bhi.n	800ff1e <SD_PowerON+0xe6>
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d0cc      	beq.n	800feb8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d902      	bls.n	800ff2e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ff28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ff2c:	e00c      	b.n	800ff48 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d003      	beq.n	800ff40 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	645a      	str	r2, [r3, #68]	; 0x44
 800ff3e:	e002      	b.n	800ff46 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ff46:	2300      	movs	r3, #0
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	c1100000 	.word	0xc1100000

0800ff54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d102      	bne.n	800ff6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ff64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff68:	e018      	b.n	800ff9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff72:	041b      	lsls	r3, r3, #16
 800ff74:	4619      	mov	r1, r3
 800ff76:	4610      	mov	r0, r2
 800ff78:	f002 fc61 	bl	801283e <SDMMC_CmdSendStatus>
 800ff7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d001      	beq.n	800ff88 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	e009      	b.n	800ff9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f002 fa03 	bl	801239a <SDMMC_GetResponse>
 800ff94:	4602      	mov	r2, r0
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ff9a:	2300      	movs	r3, #0
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ffac:	2300      	movs	r3, #0
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2100      	movs	r1, #0
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f002 f9ed 	bl	801239a <SDMMC_GetResponse>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ffca:	d102      	bne.n	800ffd2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ffcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ffd0:	e02f      	b.n	8010032 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ffd2:	f107 030c 	add.w	r3, r7, #12
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 f879 	bl	80100d0 <SD_FindSCR>
 800ffde:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	e023      	b.n	8010032 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d01c      	beq.n	801002e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fffc:	041b      	lsls	r3, r3, #16
 800fffe:	4619      	mov	r1, r3
 8010000:	4610      	mov	r0, r2
 8010002:	f002 fb35 	bl	8012670 <SDMMC_CmdAppCommand>
 8010006:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d001      	beq.n	8010012 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	e00f      	b.n	8010032 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2102      	movs	r1, #2
 8010018:	4618      	mov	r0, r3
 801001a:	f002 fb6f 	bl	80126fc <SDMMC_CmdBusWidth>
 801001e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d001      	beq.n	801002a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	e003      	b.n	8010032 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801002a:	2300      	movs	r3, #0
 801002c:	e001      	b.n	8010032 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801002e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010032:	4618      	mov	r0, r3
 8010034:	3718      	adds	r7, #24
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b086      	sub	sp, #24
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010042:	2300      	movs	r3, #0
 8010044:	60fb      	str	r3, [r7, #12]
 8010046:	2300      	movs	r3, #0
 8010048:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2100      	movs	r1, #0
 8010050:	4618      	mov	r0, r3
 8010052:	f002 f9a2 	bl	801239a <SDMMC_GetResponse>
 8010056:	4603      	mov	r3, r0
 8010058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801005c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010060:	d102      	bne.n	8010068 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010066:	e02f      	b.n	80100c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010068:	f107 030c 	add.w	r3, r7, #12
 801006c:	4619      	mov	r1, r3
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 f82e 	bl	80100d0 <SD_FindSCR>
 8010074:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d001      	beq.n	8010080 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	e023      	b.n	80100c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010086:	2b00      	cmp	r3, #0
 8010088:	d01c      	beq.n	80100c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010092:	041b      	lsls	r3, r3, #16
 8010094:	4619      	mov	r1, r3
 8010096:	4610      	mov	r0, r2
 8010098:	f002 faea 	bl	8012670 <SDMMC_CmdAppCommand>
 801009c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d001      	beq.n	80100a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	e00f      	b.n	80100c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2100      	movs	r1, #0
 80100ae:	4618      	mov	r0, r3
 80100b0:	f002 fb24 	bl	80126fc <SDMMC_CmdBusWidth>
 80100b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d001      	beq.n	80100c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	e003      	b.n	80100c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80100c0:	2300      	movs	r3, #0
 80100c2:	e001      	b.n	80100c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80100c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3718      	adds	r7, #24
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80100d0:	b590      	push	{r4, r7, lr}
 80100d2:	b08f      	sub	sp, #60	; 0x3c
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80100da:	f7f6 ffb9 	bl	8007050 <HAL_GetTick>
 80100de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80100e0:	2300      	movs	r3, #0
 80100e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80100e4:	2300      	movs	r3, #0
 80100e6:	60bb      	str	r3, [r7, #8]
 80100e8:	2300      	movs	r3, #0
 80100ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2108      	movs	r1, #8
 80100f6:	4618      	mov	r0, r3
 80100f8:	f002 f98e 	bl	8012418 <SDMMC_CmdBlockLength>
 80100fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80100fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010106:	e0b2      	b.n	801026e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010110:	041b      	lsls	r3, r3, #16
 8010112:	4619      	mov	r1, r3
 8010114:	4610      	mov	r0, r2
 8010116:	f002 faab 	bl	8012670 <SDMMC_CmdAppCommand>
 801011a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801011c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011e:	2b00      	cmp	r3, #0
 8010120:	d001      	beq.n	8010126 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010124:	e0a3      	b.n	801026e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010126:	f04f 33ff 	mov.w	r3, #4294967295
 801012a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801012c:	2308      	movs	r3, #8
 801012e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010130:	2330      	movs	r3, #48	; 0x30
 8010132:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010134:	2302      	movs	r3, #2
 8010136:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010138:	2300      	movs	r3, #0
 801013a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801013c:	2301      	movs	r3, #1
 801013e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f107 0210 	add.w	r2, r7, #16
 8010148:	4611      	mov	r1, r2
 801014a:	4618      	mov	r0, r3
 801014c:	f002 f938 	bl	80123c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4618      	mov	r0, r3
 8010156:	f002 faf3 	bl	8012740 <SDMMC_CmdSendSCR>
 801015a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801015c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015e:	2b00      	cmp	r3, #0
 8010160:	d02a      	beq.n	80101b8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	e083      	b.n	801026e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801016c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010170:	2b00      	cmp	r3, #0
 8010172:	d00f      	beq.n	8010194 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6819      	ldr	r1, [r3, #0]
 8010178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	f107 0208 	add.w	r2, r7, #8
 8010180:	18d4      	adds	r4, r2, r3
 8010182:	4608      	mov	r0, r1
 8010184:	f002 f898 	bl	80122b8 <SDMMC_ReadFIFO>
 8010188:	4603      	mov	r3, r0
 801018a:	6023      	str	r3, [r4, #0]
      index++;
 801018c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018e:	3301      	adds	r3, #1
 8010190:	637b      	str	r3, [r7, #52]	; 0x34
 8010192:	e006      	b.n	80101a2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801019a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d012      	beq.n	80101c8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80101a2:	f7f6 ff55 	bl	8007050 <HAL_GetTick>
 80101a6:	4602      	mov	r2, r0
 80101a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101aa:	1ad3      	subs	r3, r2, r3
 80101ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b0:	d102      	bne.n	80101b8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80101b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80101b6:	e05a      	b.n	801026e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101be:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d0cf      	beq.n	8010166 <SD_FindSCR+0x96>
 80101c6:	e000      	b.n	80101ca <SD_FindSCR+0xfa>
      break;
 80101c8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101d0:	f003 0308 	and.w	r3, r3, #8
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d005      	beq.n	80101e4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2208      	movs	r2, #8
 80101de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80101e0:	2308      	movs	r3, #8
 80101e2:	e044      	b.n	801026e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ea:	f003 0302 	and.w	r3, r3, #2
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d005      	beq.n	80101fe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2202      	movs	r2, #2
 80101f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80101fa:	2302      	movs	r3, #2
 80101fc:	e037      	b.n	801026e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010204:	f003 0320 	and.w	r3, r3, #32
 8010208:	2b00      	cmp	r3, #0
 801020a:	d005      	beq.n	8010218 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2220      	movs	r2, #32
 8010212:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010214:	2320      	movs	r3, #32
 8010216:	e02a      	b.n	801026e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f240 523a 	movw	r2, #1338	; 0x53a
 8010220:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	061a      	lsls	r2, r3, #24
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	021b      	lsls	r3, r3, #8
 801022a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801022e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	0a1b      	lsrs	r3, r3, #8
 8010234:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010238:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	0e1b      	lsrs	r3, r3, #24
 801023e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010242:	601a      	str	r2, [r3, #0]
    scr++;
 8010244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010246:	3304      	adds	r3, #4
 8010248:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	061a      	lsls	r2, r3, #24
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	021b      	lsls	r3, r3, #8
 8010252:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010256:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	0a1b      	lsrs	r3, r3, #8
 801025c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010260:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	0e1b      	lsrs	r3, r3, #24
 8010266:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	373c      	adds	r7, #60	; 0x3c
 8010272:	46bd      	mov	sp, r7
 8010274:	bd90      	pop	{r4, r7, pc}

08010276 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b086      	sub	sp, #24
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010282:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010288:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d03f      	beq.n	8010310 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8010290:	2300      	movs	r3, #0
 8010292:	617b      	str	r3, [r7, #20]
 8010294:	e033      	b.n	80102fe <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4618      	mov	r0, r3
 801029c:	f002 f80c 	bl	80122b8 <SDMMC_ReadFIFO>
 80102a0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	b2da      	uxtb	r2, r3
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	3301      	adds	r3, #1
 80102ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	3b01      	subs	r3, #1
 80102b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	0a1b      	lsrs	r3, r3, #8
 80102ba:	b2da      	uxtb	r2, r3
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	3301      	adds	r3, #1
 80102c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	3b01      	subs	r3, #1
 80102ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	0c1b      	lsrs	r3, r3, #16
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	3301      	adds	r3, #1
 80102da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	3b01      	subs	r3, #1
 80102e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	0e1b      	lsrs	r3, r3, #24
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	3301      	adds	r3, #1
 80102f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	3b01      	subs	r3, #1
 80102f6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	3301      	adds	r3, #1
 80102fc:	617b      	str	r3, [r7, #20]
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	2b07      	cmp	r3, #7
 8010302:	d9c8      	bls.n	8010296 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68fa      	ldr	r2, [r7, #12]
 8010308:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	693a      	ldr	r2, [r7, #16]
 801030e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8010310:	bf00      	nop
 8010312:	3718      	adds	r7, #24
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b086      	sub	sp, #24
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6a1b      	ldr	r3, [r3, #32]
 8010324:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801032a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d043      	beq.n	80103ba <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8010332:	2300      	movs	r3, #0
 8010334:	617b      	str	r3, [r7, #20]
 8010336:	e037      	b.n	80103a8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	60bb      	str	r3, [r7, #8]
      tmp++;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	3301      	adds	r3, #1
 8010342:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	3b01      	subs	r3, #1
 8010348:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	021a      	lsls	r2, r3, #8
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	4313      	orrs	r3, r2
 8010354:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	3301      	adds	r3, #1
 801035a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	3b01      	subs	r3, #1
 8010360:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	041a      	lsls	r2, r3, #16
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	4313      	orrs	r3, r2
 801036c:	60bb      	str	r3, [r7, #8]
      tmp++;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	3301      	adds	r3, #1
 8010372:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	3b01      	subs	r3, #1
 8010378:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	061a      	lsls	r2, r3, #24
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	4313      	orrs	r3, r2
 8010384:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	3301      	adds	r3, #1
 801038a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	3b01      	subs	r3, #1
 8010390:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f107 0208 	add.w	r2, r7, #8
 801039a:	4611      	mov	r1, r2
 801039c:	4618      	mov	r0, r3
 801039e:	f001 ff98 	bl	80122d2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	3301      	adds	r3, #1
 80103a6:	617b      	str	r3, [r7, #20]
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	2b07      	cmp	r3, #7
 80103ac:	d9c4      	bls.n	8010338 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	68fa      	ldr	r2, [r7, #12]
 80103b2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	693a      	ldr	r2, [r7, #16]
 80103b8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80103ba:	bf00      	nop
 80103bc:	3718      	adds	r7, #24
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b082      	sub	sp, #8
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d101      	bne.n	80103d6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80103d2:	2301      	movs	r3, #1
 80103d4:	e025      	b.n	8010422 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d106      	bne.n	80103f0 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7f3 fa98 	bl	8003920 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2202      	movs	r2, #2
 80103f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	3304      	adds	r3, #4
 8010400:	4619      	mov	r1, r3
 8010402:	4610      	mov	r0, r2
 8010404:	f001 fe2a 	bl	801205c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6818      	ldr	r0, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	461a      	mov	r2, r3
 8010412:	6839      	ldr	r1, [r7, #0]
 8010414:	f001 fe7e 	bl	8012114 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2201      	movs	r2, #1
 801041c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3708      	adds	r7, #8
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b086      	sub	sp, #24
 801042e:	af00      	add	r7, sp, #0
 8010430:	60f8      	str	r0, [r7, #12]
 8010432:	60b9      	str	r1, [r7, #8]
 8010434:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801043c:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 801043e:	7dfb      	ldrb	r3, [r7, #23]
 8010440:	2b02      	cmp	r3, #2
 8010442:	d101      	bne.n	8010448 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8010444:	2302      	movs	r3, #2
 8010446:	e021      	b.n	801048c <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8010448:	7dfb      	ldrb	r3, [r7, #23]
 801044a:	2b01      	cmp	r3, #1
 801044c:	d002      	beq.n	8010454 <HAL_SDRAM_SendCommand+0x2a>
 801044e:	7dfb      	ldrb	r3, [r7, #23]
 8010450:	2b05      	cmp	r3, #5
 8010452:	d118      	bne.n	8010486 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2202      	movs	r2, #2
 8010458:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	68b9      	ldr	r1, [r7, #8]
 8010464:	4618      	mov	r0, r3
 8010466:	f001 febf 	bl	80121e8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2b02      	cmp	r3, #2
 8010470:	d104      	bne.n	801047c <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2205      	movs	r2, #5
 8010476:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801047a:	e006      	b.n	801048a <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2201      	movs	r2, #1
 8010480:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010484:	e001      	b.n	801048a <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8010486:	2301      	movs	r3, #1
 8010488:	e000      	b.n	801048c <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 801048a:	2300      	movs	r3, #0
}
 801048c:	4618      	mov	r0, r3
 801048e:	3718      	adds	r7, #24
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	d101      	bne.n	80104ae <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80104aa:	2302      	movs	r3, #2
 80104ac:	e016      	b.n	80104dc <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d10f      	bne.n	80104da <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2202      	movs	r2, #2
 80104be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	6839      	ldr	r1, [r7, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f001 feb1 	bl	8012230 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	e000      	b.n	80104dc <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80104da:	2301      	movs	r3, #1
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d101      	bne.n	80104f6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80104f2:	2301      	movs	r3, #1
 80104f4:	e04c      	b.n	8010590 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d106      	bne.n	8010510 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f7f2 fef0 	bl	80032f0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2202      	movs	r2, #2
 8010514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f022 0203 	bic.w	r2, r2, #3
 8010526:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	4b19      	ldr	r3, [pc, #100]	; (8010598 <HAL_SPDIFRX_Init+0xb4>)
 8010534:	4013      	ands	r3, r2
 8010536:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8010540:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8010546:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 801054c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8010552:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8010558:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 801055e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8010564:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 801056a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8010570:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	4313      	orrs	r3, r2
 8010576:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68fa      	ldr	r2, [r7, #12]
 801057e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2201      	movs	r2, #1
 801058a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	fff88407 	.word	0xfff88407

0801059c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	e049      	b.n	8010642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d106      	bne.n	80105c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7f2 fef8 	bl	80033b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2202      	movs	r2, #2
 80105cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	3304      	adds	r3, #4
 80105d8:	4619      	mov	r1, r3
 80105da:	4610      	mov	r0, r2
 80105dc:	f000 fc2a 	bl	8010e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2201      	movs	r2, #1
 80105ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2201      	movs	r2, #1
 80105f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2201      	movs	r2, #1
 8010604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2201      	movs	r2, #1
 801060c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2201      	movs	r2, #1
 8010614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2201      	movs	r2, #1
 801061c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2201      	movs	r2, #1
 8010624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2201      	movs	r2, #1
 801062c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2201      	movs	r2, #1
 801063c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
	...

0801064c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b01      	cmp	r3, #1
 801065e:	d001      	beq.n	8010664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010660:	2301      	movs	r3, #1
 8010662:	e054      	b.n	801070e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2202      	movs	r2, #2
 8010668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	68da      	ldr	r2, [r3, #12]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f042 0201 	orr.w	r2, r2, #1
 801067a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a26      	ldr	r2, [pc, #152]	; (801071c <HAL_TIM_Base_Start_IT+0xd0>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d022      	beq.n	80106cc <HAL_TIM_Base_Start_IT+0x80>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801068e:	d01d      	beq.n	80106cc <HAL_TIM_Base_Start_IT+0x80>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a22      	ldr	r2, [pc, #136]	; (8010720 <HAL_TIM_Base_Start_IT+0xd4>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d018      	beq.n	80106cc <HAL_TIM_Base_Start_IT+0x80>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4a21      	ldr	r2, [pc, #132]	; (8010724 <HAL_TIM_Base_Start_IT+0xd8>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d013      	beq.n	80106cc <HAL_TIM_Base_Start_IT+0x80>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4a1f      	ldr	r2, [pc, #124]	; (8010728 <HAL_TIM_Base_Start_IT+0xdc>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d00e      	beq.n	80106cc <HAL_TIM_Base_Start_IT+0x80>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a1e      	ldr	r2, [pc, #120]	; (801072c <HAL_TIM_Base_Start_IT+0xe0>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d009      	beq.n	80106cc <HAL_TIM_Base_Start_IT+0x80>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a1c      	ldr	r2, [pc, #112]	; (8010730 <HAL_TIM_Base_Start_IT+0xe4>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d004      	beq.n	80106cc <HAL_TIM_Base_Start_IT+0x80>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4a1b      	ldr	r2, [pc, #108]	; (8010734 <HAL_TIM_Base_Start_IT+0xe8>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d115      	bne.n	80106f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	689a      	ldr	r2, [r3, #8]
 80106d2:	4b19      	ldr	r3, [pc, #100]	; (8010738 <HAL_TIM_Base_Start_IT+0xec>)
 80106d4:	4013      	ands	r3, r2
 80106d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2b06      	cmp	r3, #6
 80106dc:	d015      	beq.n	801070a <HAL_TIM_Base_Start_IT+0xbe>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106e4:	d011      	beq.n	801070a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f042 0201 	orr.w	r2, r2, #1
 80106f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106f6:	e008      	b.n	801070a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f042 0201 	orr.w	r2, r2, #1
 8010706:	601a      	str	r2, [r3, #0]
 8010708:	e000      	b.n	801070c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801070a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801070c:	2300      	movs	r3, #0
}
 801070e:	4618      	mov	r0, r3
 8010710:	3714      	adds	r7, #20
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop
 801071c:	40010000 	.word	0x40010000
 8010720:	40000400 	.word	0x40000400
 8010724:	40000800 	.word	0x40000800
 8010728:	40000c00 	.word	0x40000c00
 801072c:	40010400 	.word	0x40010400
 8010730:	40014000 	.word	0x40014000
 8010734:	40001800 	.word	0x40001800
 8010738:	00010007 	.word	0x00010007

0801073c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d101      	bne.n	801074e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801074a:	2301      	movs	r3, #1
 801074c:	e049      	b.n	80107e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010754:	b2db      	uxtb	r3, r3
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7f2 fe96 	bl	8003494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2202      	movs	r2, #2
 801076c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	3304      	adds	r3, #4
 8010778:	4619      	mov	r1, r3
 801077a:	4610      	mov	r0, r2
 801077c:	f000 fb5a 	bl	8010e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2201      	movs	r2, #1
 8010784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2201      	movs	r2, #1
 801078c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2201      	movs	r2, #1
 8010794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2201      	movs	r2, #1
 801079c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2201      	movs	r2, #1
 80107a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2201      	movs	r2, #1
 80107ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2201      	movs	r2, #1
 80107bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2201      	movs	r2, #1
 80107c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2201      	movs	r2, #1
 80107cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2201      	movs	r2, #1
 80107dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b082      	sub	sp, #8
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	691b      	ldr	r3, [r3, #16]
 80107f8:	f003 0302 	and.w	r3, r3, #2
 80107fc:	2b02      	cmp	r3, #2
 80107fe:	d122      	bne.n	8010846 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	f003 0302 	and.w	r3, r3, #2
 801080a:	2b02      	cmp	r3, #2
 801080c:	d11b      	bne.n	8010846 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f06f 0202 	mvn.w	r2, #2
 8010816:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	699b      	ldr	r3, [r3, #24]
 8010824:	f003 0303 	and.w	r3, r3, #3
 8010828:	2b00      	cmp	r3, #0
 801082a:	d003      	beq.n	8010834 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 fae3 	bl	8010df8 <HAL_TIM_IC_CaptureCallback>
 8010832:	e005      	b.n	8010840 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 fad5 	bl	8010de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 fae6 	bl	8010e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	691b      	ldr	r3, [r3, #16]
 801084c:	f003 0304 	and.w	r3, r3, #4
 8010850:	2b04      	cmp	r3, #4
 8010852:	d122      	bne.n	801089a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	68db      	ldr	r3, [r3, #12]
 801085a:	f003 0304 	and.w	r3, r3, #4
 801085e:	2b04      	cmp	r3, #4
 8010860:	d11b      	bne.n	801089a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f06f 0204 	mvn.w	r2, #4
 801086a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2202      	movs	r2, #2
 8010870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	699b      	ldr	r3, [r3, #24]
 8010878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801087c:	2b00      	cmp	r3, #0
 801087e:	d003      	beq.n	8010888 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 fab9 	bl	8010df8 <HAL_TIM_IC_CaptureCallback>
 8010886:	e005      	b.n	8010894 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f000 faab 	bl	8010de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fabc 	bl	8010e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	691b      	ldr	r3, [r3, #16]
 80108a0:	f003 0308 	and.w	r3, r3, #8
 80108a4:	2b08      	cmp	r3, #8
 80108a6:	d122      	bne.n	80108ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	f003 0308 	and.w	r3, r3, #8
 80108b2:	2b08      	cmp	r3, #8
 80108b4:	d11b      	bne.n	80108ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f06f 0208 	mvn.w	r2, #8
 80108be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2204      	movs	r2, #4
 80108c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	69db      	ldr	r3, [r3, #28]
 80108cc:	f003 0303 	and.w	r3, r3, #3
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d003      	beq.n	80108dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f000 fa8f 	bl	8010df8 <HAL_TIM_IC_CaptureCallback>
 80108da:	e005      	b.n	80108e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f000 fa81 	bl	8010de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 fa92 	bl	8010e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	691b      	ldr	r3, [r3, #16]
 80108f4:	f003 0310 	and.w	r3, r3, #16
 80108f8:	2b10      	cmp	r3, #16
 80108fa:	d122      	bne.n	8010942 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	f003 0310 	and.w	r3, r3, #16
 8010906:	2b10      	cmp	r3, #16
 8010908:	d11b      	bne.n	8010942 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f06f 0210 	mvn.w	r2, #16
 8010912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2208      	movs	r2, #8
 8010918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	69db      	ldr	r3, [r3, #28]
 8010920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010924:	2b00      	cmp	r3, #0
 8010926:	d003      	beq.n	8010930 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 fa65 	bl	8010df8 <HAL_TIM_IC_CaptureCallback>
 801092e:	e005      	b.n	801093c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fa57 	bl	8010de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 fa68 	bl	8010e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	691b      	ldr	r3, [r3, #16]
 8010948:	f003 0301 	and.w	r3, r3, #1
 801094c:	2b01      	cmp	r3, #1
 801094e:	d10e      	bne.n	801096e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	f003 0301 	and.w	r3, r3, #1
 801095a:	2b01      	cmp	r3, #1
 801095c:	d107      	bne.n	801096e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f06f 0201 	mvn.w	r2, #1
 8010966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7f1 f8b3 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	691b      	ldr	r3, [r3, #16]
 8010974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010978:	2b80      	cmp	r3, #128	; 0x80
 801097a:	d10e      	bne.n	801099a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010986:	2b80      	cmp	r3, #128	; 0x80
 8010988:	d107      	bne.n	801099a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 fefb 	bl	8011790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	691b      	ldr	r3, [r3, #16]
 80109a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109a8:	d10e      	bne.n	80109c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109b4:	2b80      	cmp	r3, #128	; 0x80
 80109b6:	d107      	bne.n	80109c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80109c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 feee 	bl	80117a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	691b      	ldr	r3, [r3, #16]
 80109ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d2:	2b40      	cmp	r3, #64	; 0x40
 80109d4:	d10e      	bne.n	80109f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e0:	2b40      	cmp	r3, #64	; 0x40
 80109e2:	d107      	bne.n	80109f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80109ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 fa16 	bl	8010e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	f003 0320 	and.w	r3, r3, #32
 80109fe:	2b20      	cmp	r3, #32
 8010a00:	d10e      	bne.n	8010a20 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	f003 0320 	and.w	r3, r3, #32
 8010a0c:	2b20      	cmp	r3, #32
 8010a0e:	d107      	bne.n	8010a20 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f06f 0220 	mvn.w	r2, #32
 8010a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 feae 	bl	801177c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010a20:	bf00      	nop
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a34:	2300      	movs	r3, #0
 8010a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d101      	bne.n	8010a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010a42:	2302      	movs	r3, #2
 8010a44:	e0ff      	b.n	8010c46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b14      	cmp	r3, #20
 8010a52:	f200 80f0 	bhi.w	8010c36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010a56:	a201      	add	r2, pc, #4	; (adr r2, 8010a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5c:	08010ab1 	.word	0x08010ab1
 8010a60:	08010c37 	.word	0x08010c37
 8010a64:	08010c37 	.word	0x08010c37
 8010a68:	08010c37 	.word	0x08010c37
 8010a6c:	08010af1 	.word	0x08010af1
 8010a70:	08010c37 	.word	0x08010c37
 8010a74:	08010c37 	.word	0x08010c37
 8010a78:	08010c37 	.word	0x08010c37
 8010a7c:	08010b33 	.word	0x08010b33
 8010a80:	08010c37 	.word	0x08010c37
 8010a84:	08010c37 	.word	0x08010c37
 8010a88:	08010c37 	.word	0x08010c37
 8010a8c:	08010b73 	.word	0x08010b73
 8010a90:	08010c37 	.word	0x08010c37
 8010a94:	08010c37 	.word	0x08010c37
 8010a98:	08010c37 	.word	0x08010c37
 8010a9c:	08010bb5 	.word	0x08010bb5
 8010aa0:	08010c37 	.word	0x08010c37
 8010aa4:	08010c37 	.word	0x08010c37
 8010aa8:	08010c37 	.word	0x08010c37
 8010aac:	08010bf5 	.word	0x08010bf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	68b9      	ldr	r1, [r7, #8]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f000 fa5c 	bl	8010f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	699a      	ldr	r2, [r3, #24]
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f042 0208 	orr.w	r2, r2, #8
 8010aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	699a      	ldr	r2, [r3, #24]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f022 0204 	bic.w	r2, r2, #4
 8010ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	6999      	ldr	r1, [r3, #24]
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	691a      	ldr	r2, [r3, #16]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	430a      	orrs	r2, r1
 8010aec:	619a      	str	r2, [r3, #24]
      break;
 8010aee:	e0a5      	b.n	8010c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	68b9      	ldr	r1, [r7, #8]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f000 faae 	bl	8011058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	699a      	ldr	r2, [r3, #24]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	699a      	ldr	r2, [r3, #24]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	6999      	ldr	r1, [r3, #24]
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	021a      	lsls	r2, r3, #8
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	430a      	orrs	r2, r1
 8010b2e:	619a      	str	r2, [r3, #24]
      break;
 8010b30:	e084      	b.n	8010c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	68b9      	ldr	r1, [r7, #8]
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f000 fb05 	bl	8011148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	69da      	ldr	r2, [r3, #28]
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f042 0208 	orr.w	r2, r2, #8
 8010b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	69da      	ldr	r2, [r3, #28]
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f022 0204 	bic.w	r2, r2, #4
 8010b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	69d9      	ldr	r1, [r3, #28]
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	691a      	ldr	r2, [r3, #16]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	430a      	orrs	r2, r1
 8010b6e:	61da      	str	r2, [r3, #28]
      break;
 8010b70:	e064      	b.n	8010c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	68b9      	ldr	r1, [r7, #8]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f000 fb5b 	bl	8011234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	69da      	ldr	r2, [r3, #28]
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	69da      	ldr	r2, [r3, #28]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	69d9      	ldr	r1, [r3, #28]
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	691b      	ldr	r3, [r3, #16]
 8010ba8:	021a      	lsls	r2, r3, #8
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	430a      	orrs	r2, r1
 8010bb0:	61da      	str	r2, [r3, #28]
      break;
 8010bb2:	e043      	b.n	8010c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 fb92 	bl	80112e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f042 0208 	orr.w	r2, r2, #8
 8010bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f022 0204 	bic.w	r2, r2, #4
 8010bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	691a      	ldr	r2, [r3, #16]
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	430a      	orrs	r2, r1
 8010bf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010bf2:	e023      	b.n	8010c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	68b9      	ldr	r1, [r7, #8]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f000 fbc4 	bl	8011388 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	691b      	ldr	r3, [r3, #16]
 8010c2a:	021a      	lsls	r2, r3, #8
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	430a      	orrs	r2, r1
 8010c32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010c34:	e002      	b.n	8010c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010c36:	2301      	movs	r3, #1
 8010c38:	75fb      	strb	r3, [r7, #23]
      break;
 8010c3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop

08010c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d101      	bne.n	8010c6c <HAL_TIM_ConfigClockSource+0x1c>
 8010c68:	2302      	movs	r3, #2
 8010c6a:	e0b4      	b.n	8010dd6 <HAL_TIM_ConfigClockSource+0x186>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2202      	movs	r2, #2
 8010c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	689b      	ldr	r3, [r3, #8]
 8010c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010c84:	68ba      	ldr	r2, [r7, #8]
 8010c86:	4b56      	ldr	r3, [pc, #344]	; (8010de0 <HAL_TIM_ConfigClockSource+0x190>)
 8010c88:	4013      	ands	r3, r2
 8010c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68ba      	ldr	r2, [r7, #8]
 8010c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ca4:	d03e      	beq.n	8010d24 <HAL_TIM_ConfigClockSource+0xd4>
 8010ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010caa:	f200 8087 	bhi.w	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cb2:	f000 8086 	beq.w	8010dc2 <HAL_TIM_ConfigClockSource+0x172>
 8010cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cba:	d87f      	bhi.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010cbc:	2b70      	cmp	r3, #112	; 0x70
 8010cbe:	d01a      	beq.n	8010cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8010cc0:	2b70      	cmp	r3, #112	; 0x70
 8010cc2:	d87b      	bhi.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010cc4:	2b60      	cmp	r3, #96	; 0x60
 8010cc6:	d050      	beq.n	8010d6a <HAL_TIM_ConfigClockSource+0x11a>
 8010cc8:	2b60      	cmp	r3, #96	; 0x60
 8010cca:	d877      	bhi.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010ccc:	2b50      	cmp	r3, #80	; 0x50
 8010cce:	d03c      	beq.n	8010d4a <HAL_TIM_ConfigClockSource+0xfa>
 8010cd0:	2b50      	cmp	r3, #80	; 0x50
 8010cd2:	d873      	bhi.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010cd4:	2b40      	cmp	r3, #64	; 0x40
 8010cd6:	d058      	beq.n	8010d8a <HAL_TIM_ConfigClockSource+0x13a>
 8010cd8:	2b40      	cmp	r3, #64	; 0x40
 8010cda:	d86f      	bhi.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010cdc:	2b30      	cmp	r3, #48	; 0x30
 8010cde:	d064      	beq.n	8010daa <HAL_TIM_ConfigClockSource+0x15a>
 8010ce0:	2b30      	cmp	r3, #48	; 0x30
 8010ce2:	d86b      	bhi.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010ce4:	2b20      	cmp	r3, #32
 8010ce6:	d060      	beq.n	8010daa <HAL_TIM_ConfigClockSource+0x15a>
 8010ce8:	2b20      	cmp	r3, #32
 8010cea:	d867      	bhi.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d05c      	beq.n	8010daa <HAL_TIM_ConfigClockSource+0x15a>
 8010cf0:	2b10      	cmp	r3, #16
 8010cf2:	d05a      	beq.n	8010daa <HAL_TIM_ConfigClockSource+0x15a>
 8010cf4:	e062      	b.n	8010dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6818      	ldr	r0, [r3, #0]
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	6899      	ldr	r1, [r3, #8]
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	685a      	ldr	r2, [r3, #4]
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	f000 fc0d 	bl	8011524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	689b      	ldr	r3, [r3, #8]
 8010d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	68ba      	ldr	r2, [r7, #8]
 8010d20:	609a      	str	r2, [r3, #8]
      break;
 8010d22:	e04f      	b.n	8010dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6818      	ldr	r0, [r3, #0]
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	6899      	ldr	r1, [r3, #8]
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	685a      	ldr	r2, [r3, #4]
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	f000 fbf6 	bl	8011524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	689a      	ldr	r2, [r3, #8]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d46:	609a      	str	r2, [r3, #8]
      break;
 8010d48:	e03c      	b.n	8010dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6818      	ldr	r0, [r3, #0]
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	6859      	ldr	r1, [r3, #4]
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	68db      	ldr	r3, [r3, #12]
 8010d56:	461a      	mov	r2, r3
 8010d58:	f000 fb6a 	bl	8011430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2150      	movs	r1, #80	; 0x50
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 fbc3 	bl	80114ee <TIM_ITRx_SetConfig>
      break;
 8010d68:	e02c      	b.n	8010dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6818      	ldr	r0, [r3, #0]
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	6859      	ldr	r1, [r3, #4]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	461a      	mov	r2, r3
 8010d78:	f000 fb89 	bl	801148e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2160      	movs	r1, #96	; 0x60
 8010d82:	4618      	mov	r0, r3
 8010d84:	f000 fbb3 	bl	80114ee <TIM_ITRx_SetConfig>
      break;
 8010d88:	e01c      	b.n	8010dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6818      	ldr	r0, [r3, #0]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	6859      	ldr	r1, [r3, #4]
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	461a      	mov	r2, r3
 8010d98:	f000 fb4a 	bl	8011430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2140      	movs	r1, #64	; 0x40
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 fba3 	bl	80114ee <TIM_ITRx_SetConfig>
      break;
 8010da8:	e00c      	b.n	8010dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	4619      	mov	r1, r3
 8010db4:	4610      	mov	r0, r2
 8010db6:	f000 fb9a 	bl	80114ee <TIM_ITRx_SetConfig>
      break;
 8010dba:	e003      	b.n	8010dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8010dc0:	e000      	b.n	8010dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	fffeff88 	.word	0xfffeff88

08010de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010dec:	bf00      	nop
 8010dee:	370c      	adds	r7, #12
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010e00:	bf00      	nop
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010e28:	bf00      	nop
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b085      	sub	sp, #20
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4a40      	ldr	r2, [pc, #256]	; (8010f48 <TIM_Base_SetConfig+0x114>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d013      	beq.n	8010e74 <TIM_Base_SetConfig+0x40>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e52:	d00f      	beq.n	8010e74 <TIM_Base_SetConfig+0x40>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	4a3d      	ldr	r2, [pc, #244]	; (8010f4c <TIM_Base_SetConfig+0x118>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d00b      	beq.n	8010e74 <TIM_Base_SetConfig+0x40>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	4a3c      	ldr	r2, [pc, #240]	; (8010f50 <TIM_Base_SetConfig+0x11c>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d007      	beq.n	8010e74 <TIM_Base_SetConfig+0x40>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	4a3b      	ldr	r2, [pc, #236]	; (8010f54 <TIM_Base_SetConfig+0x120>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d003      	beq.n	8010e74 <TIM_Base_SetConfig+0x40>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	4a3a      	ldr	r2, [pc, #232]	; (8010f58 <TIM_Base_SetConfig+0x124>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d108      	bne.n	8010e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	4313      	orrs	r3, r2
 8010e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4a2f      	ldr	r2, [pc, #188]	; (8010f48 <TIM_Base_SetConfig+0x114>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d02b      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e94:	d027      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4a2c      	ldr	r2, [pc, #176]	; (8010f4c <TIM_Base_SetConfig+0x118>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d023      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	4a2b      	ldr	r2, [pc, #172]	; (8010f50 <TIM_Base_SetConfig+0x11c>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d01f      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4a2a      	ldr	r2, [pc, #168]	; (8010f54 <TIM_Base_SetConfig+0x120>)
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	d01b      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4a29      	ldr	r2, [pc, #164]	; (8010f58 <TIM_Base_SetConfig+0x124>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d017      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	4a28      	ldr	r2, [pc, #160]	; (8010f5c <TIM_Base_SetConfig+0x128>)
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d013      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	4a27      	ldr	r2, [pc, #156]	; (8010f60 <TIM_Base_SetConfig+0x12c>)
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d00f      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	4a26      	ldr	r2, [pc, #152]	; (8010f64 <TIM_Base_SetConfig+0x130>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d00b      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	4a25      	ldr	r2, [pc, #148]	; (8010f68 <TIM_Base_SetConfig+0x134>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d007      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4a24      	ldr	r2, [pc, #144]	; (8010f6c <TIM_Base_SetConfig+0x138>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d003      	beq.n	8010ee6 <TIM_Base_SetConfig+0xb2>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4a23      	ldr	r2, [pc, #140]	; (8010f70 <TIM_Base_SetConfig+0x13c>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d108      	bne.n	8010ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	695b      	ldr	r3, [r3, #20]
 8010f02:	4313      	orrs	r3, r2
 8010f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	689a      	ldr	r2, [r3, #8]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	4a0a      	ldr	r2, [pc, #40]	; (8010f48 <TIM_Base_SetConfig+0x114>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d003      	beq.n	8010f2c <TIM_Base_SetConfig+0xf8>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	4a0c      	ldr	r2, [pc, #48]	; (8010f58 <TIM_Base_SetConfig+0x124>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d103      	bne.n	8010f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	691a      	ldr	r2, [r3, #16]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2201      	movs	r2, #1
 8010f38:	615a      	str	r2, [r3, #20]
}
 8010f3a:	bf00      	nop
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	40010000 	.word	0x40010000
 8010f4c:	40000400 	.word	0x40000400
 8010f50:	40000800 	.word	0x40000800
 8010f54:	40000c00 	.word	0x40000c00
 8010f58:	40010400 	.word	0x40010400
 8010f5c:	40014000 	.word	0x40014000
 8010f60:	40014400 	.word	0x40014400
 8010f64:	40014800 	.word	0x40014800
 8010f68:	40001800 	.word	0x40001800
 8010f6c:	40001c00 	.word	0x40001c00
 8010f70:	40002000 	.word	0x40002000

08010f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b087      	sub	sp, #28
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6a1b      	ldr	r3, [r3, #32]
 8010f82:	f023 0201 	bic.w	r2, r3, #1
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	699b      	ldr	r3, [r3, #24]
 8010f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	4b2b      	ldr	r3, [pc, #172]	; (801104c <TIM_OC1_SetConfig+0xd8>)
 8010fa0:	4013      	ands	r3, r2
 8010fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f023 0303 	bic.w	r3, r3, #3
 8010faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	f023 0302 	bic.w	r3, r3, #2
 8010fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	697a      	ldr	r2, [r7, #20]
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4a21      	ldr	r2, [pc, #132]	; (8011050 <TIM_OC1_SetConfig+0xdc>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d003      	beq.n	8010fd8 <TIM_OC1_SetConfig+0x64>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4a20      	ldr	r2, [pc, #128]	; (8011054 <TIM_OC1_SetConfig+0xe0>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d10c      	bne.n	8010ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	f023 0308 	bic.w	r3, r3, #8
 8010fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	697a      	ldr	r2, [r7, #20]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	f023 0304 	bic.w	r3, r3, #4
 8010ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4a16      	ldr	r2, [pc, #88]	; (8011050 <TIM_OC1_SetConfig+0xdc>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d003      	beq.n	8011002 <TIM_OC1_SetConfig+0x8e>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4a15      	ldr	r2, [pc, #84]	; (8011054 <TIM_OC1_SetConfig+0xe0>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d111      	bne.n	8011026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	695b      	ldr	r3, [r3, #20]
 8011016:	693a      	ldr	r2, [r7, #16]
 8011018:	4313      	orrs	r3, r2
 801101a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	699b      	ldr	r3, [r3, #24]
 8011020:	693a      	ldr	r2, [r7, #16]
 8011022:	4313      	orrs	r3, r2
 8011024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	693a      	ldr	r2, [r7, #16]
 801102a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	68fa      	ldr	r2, [r7, #12]
 8011030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	685a      	ldr	r2, [r3, #4]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	697a      	ldr	r2, [r7, #20]
 801103e:	621a      	str	r2, [r3, #32]
}
 8011040:	bf00      	nop
 8011042:	371c      	adds	r7, #28
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr
 801104c:	fffeff8f 	.word	0xfffeff8f
 8011050:	40010000 	.word	0x40010000
 8011054:	40010400 	.word	0x40010400

08011058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011058:	b480      	push	{r7}
 801105a:	b087      	sub	sp, #28
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6a1b      	ldr	r3, [r3, #32]
 8011066:	f023 0210 	bic.w	r2, r3, #16
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a1b      	ldr	r3, [r3, #32]
 8011072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	699b      	ldr	r3, [r3, #24]
 801107e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011080:	68fa      	ldr	r2, [r7, #12]
 8011082:	4b2e      	ldr	r3, [pc, #184]	; (801113c <TIM_OC2_SetConfig+0xe4>)
 8011084:	4013      	ands	r3, r2
 8011086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801108e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	021b      	lsls	r3, r3, #8
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	4313      	orrs	r3, r2
 801109a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	f023 0320 	bic.w	r3, r3, #32
 80110a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	689b      	ldr	r3, [r3, #8]
 80110a8:	011b      	lsls	r3, r3, #4
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	4313      	orrs	r3, r2
 80110ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4a23      	ldr	r2, [pc, #140]	; (8011140 <TIM_OC2_SetConfig+0xe8>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d003      	beq.n	80110c0 <TIM_OC2_SetConfig+0x68>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4a22      	ldr	r2, [pc, #136]	; (8011144 <TIM_OC2_SetConfig+0xec>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d10d      	bne.n	80110dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	68db      	ldr	r3, [r3, #12]
 80110cc:	011b      	lsls	r3, r3, #4
 80110ce:	697a      	ldr	r2, [r7, #20]
 80110d0:	4313      	orrs	r3, r2
 80110d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	4a18      	ldr	r2, [pc, #96]	; (8011140 <TIM_OC2_SetConfig+0xe8>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d003      	beq.n	80110ec <TIM_OC2_SetConfig+0x94>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4a17      	ldr	r2, [pc, #92]	; (8011144 <TIM_OC2_SetConfig+0xec>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d113      	bne.n	8011114 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80110f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	695b      	ldr	r3, [r3, #20]
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	693a      	ldr	r2, [r7, #16]
 8011104:	4313      	orrs	r3, r2
 8011106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	699b      	ldr	r3, [r3, #24]
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	693a      	ldr	r2, [r7, #16]
 8011110:	4313      	orrs	r3, r2
 8011112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	693a      	ldr	r2, [r7, #16]
 8011118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	68fa      	ldr	r2, [r7, #12]
 801111e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	685a      	ldr	r2, [r3, #4]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	621a      	str	r2, [r3, #32]
}
 801112e:	bf00      	nop
 8011130:	371c      	adds	r7, #28
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	feff8fff 	.word	0xfeff8fff
 8011140:	40010000 	.word	0x40010000
 8011144:	40010400 	.word	0x40010400

08011148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6a1b      	ldr	r3, [r3, #32]
 8011156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6a1b      	ldr	r3, [r3, #32]
 8011162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	69db      	ldr	r3, [r3, #28]
 801116e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	4b2d      	ldr	r3, [pc, #180]	; (8011228 <TIM_OC3_SetConfig+0xe0>)
 8011174:	4013      	ands	r3, r2
 8011176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f023 0303 	bic.w	r3, r3, #3
 801117e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	4313      	orrs	r3, r2
 8011188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	021b      	lsls	r3, r3, #8
 8011198:	697a      	ldr	r2, [r7, #20]
 801119a:	4313      	orrs	r3, r2
 801119c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4a22      	ldr	r2, [pc, #136]	; (801122c <TIM_OC3_SetConfig+0xe4>)
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d003      	beq.n	80111ae <TIM_OC3_SetConfig+0x66>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4a21      	ldr	r2, [pc, #132]	; (8011230 <TIM_OC3_SetConfig+0xe8>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d10d      	bne.n	80111ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80111b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	021b      	lsls	r3, r3, #8
 80111bc:	697a      	ldr	r2, [r7, #20]
 80111be:	4313      	orrs	r3, r2
 80111c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80111c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4a17      	ldr	r2, [pc, #92]	; (801122c <TIM_OC3_SetConfig+0xe4>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d003      	beq.n	80111da <TIM_OC3_SetConfig+0x92>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4a16      	ldr	r2, [pc, #88]	; (8011230 <TIM_OC3_SetConfig+0xe8>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d113      	bne.n	8011202 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80111e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80111e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	695b      	ldr	r3, [r3, #20]
 80111ee:	011b      	lsls	r3, r3, #4
 80111f0:	693a      	ldr	r2, [r7, #16]
 80111f2:	4313      	orrs	r3, r2
 80111f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	011b      	lsls	r3, r3, #4
 80111fc:	693a      	ldr	r2, [r7, #16]
 80111fe:	4313      	orrs	r3, r2
 8011200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	693a      	ldr	r2, [r7, #16]
 8011206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	68fa      	ldr	r2, [r7, #12]
 801120c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	685a      	ldr	r2, [r3, #4]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	697a      	ldr	r2, [r7, #20]
 801121a:	621a      	str	r2, [r3, #32]
}
 801121c:	bf00      	nop
 801121e:	371c      	adds	r7, #28
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	fffeff8f 	.word	0xfffeff8f
 801122c:	40010000 	.word	0x40010000
 8011230:	40010400 	.word	0x40010400

08011234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011234:	b480      	push	{r7}
 8011236:	b087      	sub	sp, #28
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a1b      	ldr	r3, [r3, #32]
 8011242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6a1b      	ldr	r3, [r3, #32]
 801124e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	69db      	ldr	r3, [r3, #28]
 801125a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	4b1e      	ldr	r3, [pc, #120]	; (80112d8 <TIM_OC4_SetConfig+0xa4>)
 8011260:	4013      	ands	r3, r2
 8011262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801126a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	021b      	lsls	r3, r3, #8
 8011272:	68fa      	ldr	r2, [r7, #12]
 8011274:	4313      	orrs	r3, r2
 8011276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011278:	693b      	ldr	r3, [r7, #16]
 801127a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801127e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	031b      	lsls	r3, r3, #12
 8011286:	693a      	ldr	r2, [r7, #16]
 8011288:	4313      	orrs	r3, r2
 801128a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a13      	ldr	r2, [pc, #76]	; (80112dc <TIM_OC4_SetConfig+0xa8>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d003      	beq.n	801129c <TIM_OC4_SetConfig+0x68>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a12      	ldr	r2, [pc, #72]	; (80112e0 <TIM_OC4_SetConfig+0xac>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d109      	bne.n	80112b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80112a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	695b      	ldr	r3, [r3, #20]
 80112a8:	019b      	lsls	r3, r3, #6
 80112aa:	697a      	ldr	r2, [r7, #20]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	697a      	ldr	r2, [r7, #20]
 80112b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68fa      	ldr	r2, [r7, #12]
 80112ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	685a      	ldr	r2, [r3, #4]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	693a      	ldr	r2, [r7, #16]
 80112c8:	621a      	str	r2, [r3, #32]
}
 80112ca:	bf00      	nop
 80112cc:	371c      	adds	r7, #28
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop
 80112d8:	feff8fff 	.word	0xfeff8fff
 80112dc:	40010000 	.word	0x40010000
 80112e0:	40010400 	.word	0x40010400

080112e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b087      	sub	sp, #28
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6a1b      	ldr	r3, [r3, #32]
 80112f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6a1b      	ldr	r3, [r3, #32]
 80112fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801130a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	4b1b      	ldr	r3, [pc, #108]	; (801137c <TIM_OC5_SetConfig+0x98>)
 8011310:	4013      	ands	r3, r2
 8011312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	68fa      	ldr	r2, [r7, #12]
 801131a:	4313      	orrs	r3, r2
 801131c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	041b      	lsls	r3, r3, #16
 801132c:	693a      	ldr	r2, [r7, #16]
 801132e:	4313      	orrs	r3, r2
 8011330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	4a12      	ldr	r2, [pc, #72]	; (8011380 <TIM_OC5_SetConfig+0x9c>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d003      	beq.n	8011342 <TIM_OC5_SetConfig+0x5e>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	4a11      	ldr	r2, [pc, #68]	; (8011384 <TIM_OC5_SetConfig+0xa0>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d109      	bne.n	8011356 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011348:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	695b      	ldr	r3, [r3, #20]
 801134e:	021b      	lsls	r3, r3, #8
 8011350:	697a      	ldr	r2, [r7, #20]
 8011352:	4313      	orrs	r3, r2
 8011354:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	697a      	ldr	r2, [r7, #20]
 801135a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	68fa      	ldr	r2, [r7, #12]
 8011360:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	685a      	ldr	r2, [r3, #4]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	693a      	ldr	r2, [r7, #16]
 801136e:	621a      	str	r2, [r3, #32]
}
 8011370:	bf00      	nop
 8011372:	371c      	adds	r7, #28
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	fffeff8f 	.word	0xfffeff8f
 8011380:	40010000 	.word	0x40010000
 8011384:	40010400 	.word	0x40010400

08011388 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011388:	b480      	push	{r7}
 801138a:	b087      	sub	sp, #28
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a1b      	ldr	r3, [r3, #32]
 8011396:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6a1b      	ldr	r3, [r3, #32]
 80113a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80113b0:	68fa      	ldr	r2, [r7, #12]
 80113b2:	4b1c      	ldr	r3, [pc, #112]	; (8011424 <TIM_OC6_SetConfig+0x9c>)
 80113b4:	4013      	ands	r3, r2
 80113b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	021b      	lsls	r3, r3, #8
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	4313      	orrs	r3, r2
 80113c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80113ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	051b      	lsls	r3, r3, #20
 80113d2:	693a      	ldr	r2, [r7, #16]
 80113d4:	4313      	orrs	r3, r2
 80113d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	4a13      	ldr	r2, [pc, #76]	; (8011428 <TIM_OC6_SetConfig+0xa0>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d003      	beq.n	80113e8 <TIM_OC6_SetConfig+0x60>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	4a12      	ldr	r2, [pc, #72]	; (801142c <TIM_OC6_SetConfig+0xa4>)
 80113e4:	4293      	cmp	r3, r2
 80113e6:	d109      	bne.n	80113fc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80113ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	695b      	ldr	r3, [r3, #20]
 80113f4:	029b      	lsls	r3, r3, #10
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	4313      	orrs	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	697a      	ldr	r2, [r7, #20]
 8011400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	685a      	ldr	r2, [r3, #4]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	693a      	ldr	r2, [r7, #16]
 8011414:	621a      	str	r2, [r3, #32]
}
 8011416:	bf00      	nop
 8011418:	371c      	adds	r7, #28
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop
 8011424:	feff8fff 	.word	0xfeff8fff
 8011428:	40010000 	.word	0x40010000
 801142c:	40010400 	.word	0x40010400

08011430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011430:	b480      	push	{r7}
 8011432:	b087      	sub	sp, #28
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6a1b      	ldr	r3, [r3, #32]
 8011440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6a1b      	ldr	r3, [r3, #32]
 8011446:	f023 0201 	bic.w	r2, r3, #1
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	699b      	ldr	r3, [r3, #24]
 8011452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801145a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	011b      	lsls	r3, r3, #4
 8011460:	693a      	ldr	r2, [r7, #16]
 8011462:	4313      	orrs	r3, r2
 8011464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	f023 030a 	bic.w	r3, r3, #10
 801146c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801146e:	697a      	ldr	r2, [r7, #20]
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	4313      	orrs	r3, r2
 8011474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	693a      	ldr	r2, [r7, #16]
 801147a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	697a      	ldr	r2, [r7, #20]
 8011480:	621a      	str	r2, [r3, #32]
}
 8011482:	bf00      	nop
 8011484:	371c      	adds	r7, #28
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr

0801148e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801148e:	b480      	push	{r7}
 8011490:	b087      	sub	sp, #28
 8011492:	af00      	add	r7, sp, #0
 8011494:	60f8      	str	r0, [r7, #12]
 8011496:	60b9      	str	r1, [r7, #8]
 8011498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6a1b      	ldr	r3, [r3, #32]
 801149e:	f023 0210 	bic.w	r2, r3, #16
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	699b      	ldr	r3, [r3, #24]
 80114aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	6a1b      	ldr	r3, [r3, #32]
 80114b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80114b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	031b      	lsls	r3, r3, #12
 80114be:	697a      	ldr	r2, [r7, #20]
 80114c0:	4313      	orrs	r3, r2
 80114c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80114ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	011b      	lsls	r3, r3, #4
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	4313      	orrs	r3, r2
 80114d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	697a      	ldr	r2, [r7, #20]
 80114da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	693a      	ldr	r2, [r7, #16]
 80114e0:	621a      	str	r2, [r3, #32]
}
 80114e2:	bf00      	nop
 80114e4:	371c      	adds	r7, #28
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr

080114ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80114ee:	b480      	push	{r7}
 80114f0:	b085      	sub	sp, #20
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
 80114f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011506:	683a      	ldr	r2, [r7, #0]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	4313      	orrs	r3, r2
 801150c:	f043 0307 	orr.w	r3, r3, #7
 8011510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	609a      	str	r2, [r3, #8]
}
 8011518:	bf00      	nop
 801151a:	3714      	adds	r7, #20
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011524:	b480      	push	{r7}
 8011526:	b087      	sub	sp, #28
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	607a      	str	r2, [r7, #4]
 8011530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801153e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	021a      	lsls	r2, r3, #8
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	431a      	orrs	r2, r3
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	4313      	orrs	r3, r2
 801154c:	697a      	ldr	r2, [r7, #20]
 801154e:	4313      	orrs	r3, r2
 8011550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	697a      	ldr	r2, [r7, #20]
 8011556:	609a      	str	r2, [r3, #8]
}
 8011558:	bf00      	nop
 801155a:	371c      	adds	r7, #28
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011564:	b480      	push	{r7}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011574:	2b01      	cmp	r3, #1
 8011576:	d101      	bne.n	801157c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011578:	2302      	movs	r3, #2
 801157a:	e06d      	b.n	8011658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2201      	movs	r2, #1
 8011580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2202      	movs	r2, #2
 8011588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	689b      	ldr	r3, [r3, #8]
 801159a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a30      	ldr	r2, [pc, #192]	; (8011664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d004      	beq.n	80115b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a2f      	ldr	r2, [pc, #188]	; (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d108      	bne.n	80115c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80115b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	4313      	orrs	r3, r2
 80115c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	4313      	orrs	r3, r2
 80115d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68fa      	ldr	r2, [r7, #12]
 80115da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4a20      	ldr	r2, [pc, #128]	; (8011664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d022      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115ee:	d01d      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a1d      	ldr	r2, [pc, #116]	; (801166c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d018      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4a1c      	ldr	r2, [pc, #112]	; (8011670 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d013      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4a1a      	ldr	r2, [pc, #104]	; (8011674 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d00e      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a15      	ldr	r2, [pc, #84]	; (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d009      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4a16      	ldr	r2, [pc, #88]	; (8011678 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d004      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	4a15      	ldr	r2, [pc, #84]	; (801167c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d10c      	bne.n	8011646 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	689b      	ldr	r3, [r3, #8]
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	4313      	orrs	r3, r2
 801163c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	68ba      	ldr	r2, [r7, #8]
 8011644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2201      	movs	r2, #1
 801164a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2200      	movs	r2, #0
 8011652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	40010000 	.word	0x40010000
 8011668:	40010400 	.word	0x40010400
 801166c:	40000400 	.word	0x40000400
 8011670:	40000800 	.word	0x40000800
 8011674:	40000c00 	.word	0x40000c00
 8011678:	40014000 	.word	0x40014000
 801167c:	40001800 	.word	0x40001800

08011680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011680:	b480      	push	{r7}
 8011682:	b085      	sub	sp, #20
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801168a:	2300      	movs	r3, #0
 801168c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011694:	2b01      	cmp	r3, #1
 8011696:	d101      	bne.n	801169c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011698:	2302      	movs	r3, #2
 801169a:	e065      	b.n	8011768 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2201      	movs	r2, #1
 80116a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	4313      	orrs	r3, r2
 80116b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	4313      	orrs	r3, r2
 80116be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	4313      	orrs	r3, r2
 80116cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4313      	orrs	r3, r2
 80116da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	691b      	ldr	r3, [r3, #16]
 80116e6:	4313      	orrs	r3, r2
 80116e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	695b      	ldr	r3, [r3, #20]
 80116f4:	4313      	orrs	r3, r2
 80116f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011702:	4313      	orrs	r3, r2
 8011704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	699b      	ldr	r3, [r3, #24]
 8011710:	041b      	lsls	r3, r3, #16
 8011712:	4313      	orrs	r3, r2
 8011714:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	4a16      	ldr	r2, [pc, #88]	; (8011774 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801171c:	4293      	cmp	r3, r2
 801171e:	d004      	beq.n	801172a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4a14      	ldr	r2, [pc, #80]	; (8011778 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d115      	bne.n	8011756 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011734:	051b      	lsls	r3, r3, #20
 8011736:	4313      	orrs	r3, r2
 8011738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	69db      	ldr	r3, [r3, #28]
 8011744:	4313      	orrs	r3, r2
 8011746:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	6a1b      	ldr	r3, [r3, #32]
 8011752:	4313      	orrs	r3, r2
 8011754:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011766:	2300      	movs	r3, #0
}
 8011768:	4618      	mov	r0, r3
 801176a:	3714      	adds	r7, #20
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr
 8011774:	40010000 	.word	0x40010000
 8011778:	40010400 	.word	0x40010400

0801177c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011784:	bf00      	nop
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80117ac:	bf00      	nop
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d101      	bne.n	80117ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80117c6:	2301      	movs	r3, #1
 80117c8:	e040      	b.n	801184c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d106      	bne.n	80117e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2200      	movs	r2, #0
 80117d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7f1 ff48 	bl	8003670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2224      	movs	r2, #36	; 0x24
 80117e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f022 0201 	bic.w	r2, r2, #1
 80117f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 f82c 	bl	8011854 <UART_SetConfig>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d101      	bne.n	8011806 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011802:	2301      	movs	r3, #1
 8011804:	e022      	b.n	801184c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801180a:	2b00      	cmp	r3, #0
 801180c:	d002      	beq.n	8011814 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 fa84 	bl	8011d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	685a      	ldr	r2, [r3, #4]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	689a      	ldr	r2, [r3, #8]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f042 0201 	orr.w	r2, r2, #1
 8011842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 fb0b 	bl	8011e60 <UART_CheckIdleState>
 801184a:	4603      	mov	r3, r0
}
 801184c:	4618      	mov	r0, r3
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b088      	sub	sp, #32
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	689a      	ldr	r2, [r3, #8]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	691b      	ldr	r3, [r3, #16]
 8011868:	431a      	orrs	r2, r3
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	695b      	ldr	r3, [r3, #20]
 801186e:	431a      	orrs	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	69db      	ldr	r3, [r3, #28]
 8011874:	4313      	orrs	r3, r2
 8011876:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	4ba6      	ldr	r3, [pc, #664]	; (8011b18 <UART_SetConfig+0x2c4>)
 8011880:	4013      	ands	r3, r2
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	6812      	ldr	r2, [r2, #0]
 8011886:	6979      	ldr	r1, [r7, #20]
 8011888:	430b      	orrs	r3, r1
 801188a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	68da      	ldr	r2, [r3, #12]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	430a      	orrs	r2, r1
 80118a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6a1b      	ldr	r3, [r3, #32]
 80118ac:	697a      	ldr	r2, [r7, #20]
 80118ae:	4313      	orrs	r3, r2
 80118b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	689b      	ldr	r3, [r3, #8]
 80118b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	697a      	ldr	r2, [r7, #20]
 80118c2:	430a      	orrs	r2, r1
 80118c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4a94      	ldr	r2, [pc, #592]	; (8011b1c <UART_SetConfig+0x2c8>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d120      	bne.n	8011912 <UART_SetConfig+0xbe>
 80118d0:	4b93      	ldr	r3, [pc, #588]	; (8011b20 <UART_SetConfig+0x2cc>)
 80118d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118d6:	f003 0303 	and.w	r3, r3, #3
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d816      	bhi.n	801190c <UART_SetConfig+0xb8>
 80118de:	a201      	add	r2, pc, #4	; (adr r2, 80118e4 <UART_SetConfig+0x90>)
 80118e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118e4:	080118f5 	.word	0x080118f5
 80118e8:	08011901 	.word	0x08011901
 80118ec:	080118fb 	.word	0x080118fb
 80118f0:	08011907 	.word	0x08011907
 80118f4:	2301      	movs	r3, #1
 80118f6:	77fb      	strb	r3, [r7, #31]
 80118f8:	e150      	b.n	8011b9c <UART_SetConfig+0x348>
 80118fa:	2302      	movs	r3, #2
 80118fc:	77fb      	strb	r3, [r7, #31]
 80118fe:	e14d      	b.n	8011b9c <UART_SetConfig+0x348>
 8011900:	2304      	movs	r3, #4
 8011902:	77fb      	strb	r3, [r7, #31]
 8011904:	e14a      	b.n	8011b9c <UART_SetConfig+0x348>
 8011906:	2308      	movs	r3, #8
 8011908:	77fb      	strb	r3, [r7, #31]
 801190a:	e147      	b.n	8011b9c <UART_SetConfig+0x348>
 801190c:	2310      	movs	r3, #16
 801190e:	77fb      	strb	r3, [r7, #31]
 8011910:	e144      	b.n	8011b9c <UART_SetConfig+0x348>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a83      	ldr	r2, [pc, #524]	; (8011b24 <UART_SetConfig+0x2d0>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d132      	bne.n	8011982 <UART_SetConfig+0x12e>
 801191c:	4b80      	ldr	r3, [pc, #512]	; (8011b20 <UART_SetConfig+0x2cc>)
 801191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011922:	f003 030c 	and.w	r3, r3, #12
 8011926:	2b0c      	cmp	r3, #12
 8011928:	d828      	bhi.n	801197c <UART_SetConfig+0x128>
 801192a:	a201      	add	r2, pc, #4	; (adr r2, 8011930 <UART_SetConfig+0xdc>)
 801192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011930:	08011965 	.word	0x08011965
 8011934:	0801197d 	.word	0x0801197d
 8011938:	0801197d 	.word	0x0801197d
 801193c:	0801197d 	.word	0x0801197d
 8011940:	08011971 	.word	0x08011971
 8011944:	0801197d 	.word	0x0801197d
 8011948:	0801197d 	.word	0x0801197d
 801194c:	0801197d 	.word	0x0801197d
 8011950:	0801196b 	.word	0x0801196b
 8011954:	0801197d 	.word	0x0801197d
 8011958:	0801197d 	.word	0x0801197d
 801195c:	0801197d 	.word	0x0801197d
 8011960:	08011977 	.word	0x08011977
 8011964:	2300      	movs	r3, #0
 8011966:	77fb      	strb	r3, [r7, #31]
 8011968:	e118      	b.n	8011b9c <UART_SetConfig+0x348>
 801196a:	2302      	movs	r3, #2
 801196c:	77fb      	strb	r3, [r7, #31]
 801196e:	e115      	b.n	8011b9c <UART_SetConfig+0x348>
 8011970:	2304      	movs	r3, #4
 8011972:	77fb      	strb	r3, [r7, #31]
 8011974:	e112      	b.n	8011b9c <UART_SetConfig+0x348>
 8011976:	2308      	movs	r3, #8
 8011978:	77fb      	strb	r3, [r7, #31]
 801197a:	e10f      	b.n	8011b9c <UART_SetConfig+0x348>
 801197c:	2310      	movs	r3, #16
 801197e:	77fb      	strb	r3, [r7, #31]
 8011980:	e10c      	b.n	8011b9c <UART_SetConfig+0x348>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a68      	ldr	r2, [pc, #416]	; (8011b28 <UART_SetConfig+0x2d4>)
 8011988:	4293      	cmp	r3, r2
 801198a:	d120      	bne.n	80119ce <UART_SetConfig+0x17a>
 801198c:	4b64      	ldr	r3, [pc, #400]	; (8011b20 <UART_SetConfig+0x2cc>)
 801198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011992:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011996:	2b30      	cmp	r3, #48	; 0x30
 8011998:	d013      	beq.n	80119c2 <UART_SetConfig+0x16e>
 801199a:	2b30      	cmp	r3, #48	; 0x30
 801199c:	d814      	bhi.n	80119c8 <UART_SetConfig+0x174>
 801199e:	2b20      	cmp	r3, #32
 80119a0:	d009      	beq.n	80119b6 <UART_SetConfig+0x162>
 80119a2:	2b20      	cmp	r3, #32
 80119a4:	d810      	bhi.n	80119c8 <UART_SetConfig+0x174>
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d002      	beq.n	80119b0 <UART_SetConfig+0x15c>
 80119aa:	2b10      	cmp	r3, #16
 80119ac:	d006      	beq.n	80119bc <UART_SetConfig+0x168>
 80119ae:	e00b      	b.n	80119c8 <UART_SetConfig+0x174>
 80119b0:	2300      	movs	r3, #0
 80119b2:	77fb      	strb	r3, [r7, #31]
 80119b4:	e0f2      	b.n	8011b9c <UART_SetConfig+0x348>
 80119b6:	2302      	movs	r3, #2
 80119b8:	77fb      	strb	r3, [r7, #31]
 80119ba:	e0ef      	b.n	8011b9c <UART_SetConfig+0x348>
 80119bc:	2304      	movs	r3, #4
 80119be:	77fb      	strb	r3, [r7, #31]
 80119c0:	e0ec      	b.n	8011b9c <UART_SetConfig+0x348>
 80119c2:	2308      	movs	r3, #8
 80119c4:	77fb      	strb	r3, [r7, #31]
 80119c6:	e0e9      	b.n	8011b9c <UART_SetConfig+0x348>
 80119c8:	2310      	movs	r3, #16
 80119ca:	77fb      	strb	r3, [r7, #31]
 80119cc:	e0e6      	b.n	8011b9c <UART_SetConfig+0x348>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4a56      	ldr	r2, [pc, #344]	; (8011b2c <UART_SetConfig+0x2d8>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d120      	bne.n	8011a1a <UART_SetConfig+0x1c6>
 80119d8:	4b51      	ldr	r3, [pc, #324]	; (8011b20 <UART_SetConfig+0x2cc>)
 80119da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80119e2:	2bc0      	cmp	r3, #192	; 0xc0
 80119e4:	d013      	beq.n	8011a0e <UART_SetConfig+0x1ba>
 80119e6:	2bc0      	cmp	r3, #192	; 0xc0
 80119e8:	d814      	bhi.n	8011a14 <UART_SetConfig+0x1c0>
 80119ea:	2b80      	cmp	r3, #128	; 0x80
 80119ec:	d009      	beq.n	8011a02 <UART_SetConfig+0x1ae>
 80119ee:	2b80      	cmp	r3, #128	; 0x80
 80119f0:	d810      	bhi.n	8011a14 <UART_SetConfig+0x1c0>
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <UART_SetConfig+0x1a8>
 80119f6:	2b40      	cmp	r3, #64	; 0x40
 80119f8:	d006      	beq.n	8011a08 <UART_SetConfig+0x1b4>
 80119fa:	e00b      	b.n	8011a14 <UART_SetConfig+0x1c0>
 80119fc:	2300      	movs	r3, #0
 80119fe:	77fb      	strb	r3, [r7, #31]
 8011a00:	e0cc      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a02:	2302      	movs	r3, #2
 8011a04:	77fb      	strb	r3, [r7, #31]
 8011a06:	e0c9      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a08:	2304      	movs	r3, #4
 8011a0a:	77fb      	strb	r3, [r7, #31]
 8011a0c:	e0c6      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a0e:	2308      	movs	r3, #8
 8011a10:	77fb      	strb	r3, [r7, #31]
 8011a12:	e0c3      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a14:	2310      	movs	r3, #16
 8011a16:	77fb      	strb	r3, [r7, #31]
 8011a18:	e0c0      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4a44      	ldr	r2, [pc, #272]	; (8011b30 <UART_SetConfig+0x2dc>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d125      	bne.n	8011a70 <UART_SetConfig+0x21c>
 8011a24:	4b3e      	ldr	r3, [pc, #248]	; (8011b20 <UART_SetConfig+0x2cc>)
 8011a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a32:	d017      	beq.n	8011a64 <UART_SetConfig+0x210>
 8011a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a38:	d817      	bhi.n	8011a6a <UART_SetConfig+0x216>
 8011a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a3e:	d00b      	beq.n	8011a58 <UART_SetConfig+0x204>
 8011a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a44:	d811      	bhi.n	8011a6a <UART_SetConfig+0x216>
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d003      	beq.n	8011a52 <UART_SetConfig+0x1fe>
 8011a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a4e:	d006      	beq.n	8011a5e <UART_SetConfig+0x20a>
 8011a50:	e00b      	b.n	8011a6a <UART_SetConfig+0x216>
 8011a52:	2300      	movs	r3, #0
 8011a54:	77fb      	strb	r3, [r7, #31]
 8011a56:	e0a1      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a58:	2302      	movs	r3, #2
 8011a5a:	77fb      	strb	r3, [r7, #31]
 8011a5c:	e09e      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a5e:	2304      	movs	r3, #4
 8011a60:	77fb      	strb	r3, [r7, #31]
 8011a62:	e09b      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a64:	2308      	movs	r3, #8
 8011a66:	77fb      	strb	r3, [r7, #31]
 8011a68:	e098      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a6a:	2310      	movs	r3, #16
 8011a6c:	77fb      	strb	r3, [r7, #31]
 8011a6e:	e095      	b.n	8011b9c <UART_SetConfig+0x348>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4a2f      	ldr	r2, [pc, #188]	; (8011b34 <UART_SetConfig+0x2e0>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d125      	bne.n	8011ac6 <UART_SetConfig+0x272>
 8011a7a:	4b29      	ldr	r3, [pc, #164]	; (8011b20 <UART_SetConfig+0x2cc>)
 8011a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011a84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a88:	d017      	beq.n	8011aba <UART_SetConfig+0x266>
 8011a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a8e:	d817      	bhi.n	8011ac0 <UART_SetConfig+0x26c>
 8011a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a94:	d00b      	beq.n	8011aae <UART_SetConfig+0x25a>
 8011a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a9a:	d811      	bhi.n	8011ac0 <UART_SetConfig+0x26c>
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d003      	beq.n	8011aa8 <UART_SetConfig+0x254>
 8011aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011aa4:	d006      	beq.n	8011ab4 <UART_SetConfig+0x260>
 8011aa6:	e00b      	b.n	8011ac0 <UART_SetConfig+0x26c>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	77fb      	strb	r3, [r7, #31]
 8011aac:	e076      	b.n	8011b9c <UART_SetConfig+0x348>
 8011aae:	2302      	movs	r3, #2
 8011ab0:	77fb      	strb	r3, [r7, #31]
 8011ab2:	e073      	b.n	8011b9c <UART_SetConfig+0x348>
 8011ab4:	2304      	movs	r3, #4
 8011ab6:	77fb      	strb	r3, [r7, #31]
 8011ab8:	e070      	b.n	8011b9c <UART_SetConfig+0x348>
 8011aba:	2308      	movs	r3, #8
 8011abc:	77fb      	strb	r3, [r7, #31]
 8011abe:	e06d      	b.n	8011b9c <UART_SetConfig+0x348>
 8011ac0:	2310      	movs	r3, #16
 8011ac2:	77fb      	strb	r3, [r7, #31]
 8011ac4:	e06a      	b.n	8011b9c <UART_SetConfig+0x348>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4a1b      	ldr	r2, [pc, #108]	; (8011b38 <UART_SetConfig+0x2e4>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d138      	bne.n	8011b42 <UART_SetConfig+0x2ee>
 8011ad0:	4b13      	ldr	r3, [pc, #76]	; (8011b20 <UART_SetConfig+0x2cc>)
 8011ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ad6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011ada:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ade:	d017      	beq.n	8011b10 <UART_SetConfig+0x2bc>
 8011ae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ae4:	d82a      	bhi.n	8011b3c <UART_SetConfig+0x2e8>
 8011ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011aea:	d00b      	beq.n	8011b04 <UART_SetConfig+0x2b0>
 8011aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011af0:	d824      	bhi.n	8011b3c <UART_SetConfig+0x2e8>
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d003      	beq.n	8011afe <UART_SetConfig+0x2aa>
 8011af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011afa:	d006      	beq.n	8011b0a <UART_SetConfig+0x2b6>
 8011afc:	e01e      	b.n	8011b3c <UART_SetConfig+0x2e8>
 8011afe:	2300      	movs	r3, #0
 8011b00:	77fb      	strb	r3, [r7, #31]
 8011b02:	e04b      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b04:	2302      	movs	r3, #2
 8011b06:	77fb      	strb	r3, [r7, #31]
 8011b08:	e048      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b0a:	2304      	movs	r3, #4
 8011b0c:	77fb      	strb	r3, [r7, #31]
 8011b0e:	e045      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b10:	2308      	movs	r3, #8
 8011b12:	77fb      	strb	r3, [r7, #31]
 8011b14:	e042      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b16:	bf00      	nop
 8011b18:	efff69f3 	.word	0xefff69f3
 8011b1c:	40011000 	.word	0x40011000
 8011b20:	40023800 	.word	0x40023800
 8011b24:	40004400 	.word	0x40004400
 8011b28:	40004800 	.word	0x40004800
 8011b2c:	40004c00 	.word	0x40004c00
 8011b30:	40005000 	.word	0x40005000
 8011b34:	40011400 	.word	0x40011400
 8011b38:	40007800 	.word	0x40007800
 8011b3c:	2310      	movs	r3, #16
 8011b3e:	77fb      	strb	r3, [r7, #31]
 8011b40:	e02c      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	4a72      	ldr	r2, [pc, #456]	; (8011d10 <UART_SetConfig+0x4bc>)
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d125      	bne.n	8011b98 <UART_SetConfig+0x344>
 8011b4c:	4b71      	ldr	r3, [pc, #452]	; (8011d14 <UART_SetConfig+0x4c0>)
 8011b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011b56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b5a:	d017      	beq.n	8011b8c <UART_SetConfig+0x338>
 8011b5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b60:	d817      	bhi.n	8011b92 <UART_SetConfig+0x33e>
 8011b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b66:	d00b      	beq.n	8011b80 <UART_SetConfig+0x32c>
 8011b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b6c:	d811      	bhi.n	8011b92 <UART_SetConfig+0x33e>
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d003      	beq.n	8011b7a <UART_SetConfig+0x326>
 8011b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b76:	d006      	beq.n	8011b86 <UART_SetConfig+0x332>
 8011b78:	e00b      	b.n	8011b92 <UART_SetConfig+0x33e>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	77fb      	strb	r3, [r7, #31]
 8011b7e:	e00d      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b80:	2302      	movs	r3, #2
 8011b82:	77fb      	strb	r3, [r7, #31]
 8011b84:	e00a      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b86:	2304      	movs	r3, #4
 8011b88:	77fb      	strb	r3, [r7, #31]
 8011b8a:	e007      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b8c:	2308      	movs	r3, #8
 8011b8e:	77fb      	strb	r3, [r7, #31]
 8011b90:	e004      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b92:	2310      	movs	r3, #16
 8011b94:	77fb      	strb	r3, [r7, #31]
 8011b96:	e001      	b.n	8011b9c <UART_SetConfig+0x348>
 8011b98:	2310      	movs	r3, #16
 8011b9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	69db      	ldr	r3, [r3, #28]
 8011ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ba4:	d15b      	bne.n	8011c5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8011ba6:	7ffb      	ldrb	r3, [r7, #31]
 8011ba8:	2b08      	cmp	r3, #8
 8011baa:	d828      	bhi.n	8011bfe <UART_SetConfig+0x3aa>
 8011bac:	a201      	add	r2, pc, #4	; (adr r2, 8011bb4 <UART_SetConfig+0x360>)
 8011bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb2:	bf00      	nop
 8011bb4:	08011bd9 	.word	0x08011bd9
 8011bb8:	08011be1 	.word	0x08011be1
 8011bbc:	08011be9 	.word	0x08011be9
 8011bc0:	08011bff 	.word	0x08011bff
 8011bc4:	08011bef 	.word	0x08011bef
 8011bc8:	08011bff 	.word	0x08011bff
 8011bcc:	08011bff 	.word	0x08011bff
 8011bd0:	08011bff 	.word	0x08011bff
 8011bd4:	08011bf7 	.word	0x08011bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bd8:	f7fb f9c8 	bl	800cf6c <HAL_RCC_GetPCLK1Freq>
 8011bdc:	61b8      	str	r0, [r7, #24]
        break;
 8011bde:	e013      	b.n	8011c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011be0:	f7fb f9d8 	bl	800cf94 <HAL_RCC_GetPCLK2Freq>
 8011be4:	61b8      	str	r0, [r7, #24]
        break;
 8011be6:	e00f      	b.n	8011c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011be8:	4b4b      	ldr	r3, [pc, #300]	; (8011d18 <UART_SetConfig+0x4c4>)
 8011bea:	61bb      	str	r3, [r7, #24]
        break;
 8011bec:	e00c      	b.n	8011c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011bee:	f7fb f8eb 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 8011bf2:	61b8      	str	r0, [r7, #24]
        break;
 8011bf4:	e008      	b.n	8011c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bfa:	61bb      	str	r3, [r7, #24]
        break;
 8011bfc:	e004      	b.n	8011c08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011c02:	2301      	movs	r3, #1
 8011c04:	77bb      	strb	r3, [r7, #30]
        break;
 8011c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011c08:	69bb      	ldr	r3, [r7, #24]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d074      	beq.n	8011cf8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	005a      	lsls	r2, r3, #1
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	085b      	lsrs	r3, r3, #1
 8011c18:	441a      	add	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	2b0f      	cmp	r3, #15
 8011c28:	d916      	bls.n	8011c58 <UART_SetConfig+0x404>
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c30:	d212      	bcs.n	8011c58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	f023 030f 	bic.w	r3, r3, #15
 8011c3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	085b      	lsrs	r3, r3, #1
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	f003 0307 	and.w	r3, r3, #7
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	89fb      	ldrh	r3, [r7, #14]
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	89fa      	ldrh	r2, [r7, #14]
 8011c54:	60da      	str	r2, [r3, #12]
 8011c56:	e04f      	b.n	8011cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011c58:	2301      	movs	r3, #1
 8011c5a:	77bb      	strb	r3, [r7, #30]
 8011c5c:	e04c      	b.n	8011cf8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c5e:	7ffb      	ldrb	r3, [r7, #31]
 8011c60:	2b08      	cmp	r3, #8
 8011c62:	d828      	bhi.n	8011cb6 <UART_SetConfig+0x462>
 8011c64:	a201      	add	r2, pc, #4	; (adr r2, 8011c6c <UART_SetConfig+0x418>)
 8011c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c6a:	bf00      	nop
 8011c6c:	08011c91 	.word	0x08011c91
 8011c70:	08011c99 	.word	0x08011c99
 8011c74:	08011ca1 	.word	0x08011ca1
 8011c78:	08011cb7 	.word	0x08011cb7
 8011c7c:	08011ca7 	.word	0x08011ca7
 8011c80:	08011cb7 	.word	0x08011cb7
 8011c84:	08011cb7 	.word	0x08011cb7
 8011c88:	08011cb7 	.word	0x08011cb7
 8011c8c:	08011caf 	.word	0x08011caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c90:	f7fb f96c 	bl	800cf6c <HAL_RCC_GetPCLK1Freq>
 8011c94:	61b8      	str	r0, [r7, #24]
        break;
 8011c96:	e013      	b.n	8011cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c98:	f7fb f97c 	bl	800cf94 <HAL_RCC_GetPCLK2Freq>
 8011c9c:	61b8      	str	r0, [r7, #24]
        break;
 8011c9e:	e00f      	b.n	8011cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011ca0:	4b1d      	ldr	r3, [pc, #116]	; (8011d18 <UART_SetConfig+0x4c4>)
 8011ca2:	61bb      	str	r3, [r7, #24]
        break;
 8011ca4:	e00c      	b.n	8011cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ca6:	f7fb f88f 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 8011caa:	61b8      	str	r0, [r7, #24]
        break;
 8011cac:	e008      	b.n	8011cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011cb2:	61bb      	str	r3, [r7, #24]
        break;
 8011cb4:	e004      	b.n	8011cc0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8011cbe:	bf00      	nop
    }

    if (pclk != 0U)
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d018      	beq.n	8011cf8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	085a      	lsrs	r2, r3, #1
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	441a      	add	r2, r3
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	2b0f      	cmp	r3, #15
 8011cde:	d909      	bls.n	8011cf4 <UART_SetConfig+0x4a0>
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ce6:	d205      	bcs.n	8011cf4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	b29a      	uxth	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	60da      	str	r2, [r3, #12]
 8011cf2:	e001      	b.n	8011cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2200      	movs	r2, #0
 8011d02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8011d04:	7fbb      	ldrb	r3, [r7, #30]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3720      	adds	r7, #32
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	40007c00 	.word	0x40007c00
 8011d14:	40023800 	.word	0x40023800
 8011d18:	00f42400 	.word	0x00f42400

08011d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d28:	f003 0301 	and.w	r3, r3, #1
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00a      	beq.n	8011d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	430a      	orrs	r2, r1
 8011d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d4a:	f003 0302 	and.w	r3, r3, #2
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00a      	beq.n	8011d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	430a      	orrs	r2, r1
 8011d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d6c:	f003 0304 	and.w	r3, r3, #4
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00a      	beq.n	8011d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	430a      	orrs	r2, r1
 8011d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d8e:	f003 0308 	and.w	r3, r3, #8
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d00a      	beq.n	8011dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	430a      	orrs	r2, r1
 8011daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db0:	f003 0310 	and.w	r3, r3, #16
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00a      	beq.n	8011dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	689b      	ldr	r3, [r3, #8]
 8011dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	430a      	orrs	r2, r1
 8011dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd2:	f003 0320 	and.w	r3, r3, #32
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00a      	beq.n	8011df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	430a      	orrs	r2, r1
 8011dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d01a      	beq.n	8011e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	430a      	orrs	r2, r1
 8011e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e1a:	d10a      	bne.n	8011e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	430a      	orrs	r2, r1
 8011e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00a      	beq.n	8011e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	430a      	orrs	r2, r1
 8011e52:	605a      	str	r2, [r3, #4]
  }
}
 8011e54:	bf00      	nop
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b086      	sub	sp, #24
 8011e64:	af02      	add	r7, sp, #8
 8011e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e70:	f7f5 f8ee 	bl	8007050 <HAL_GetTick>
 8011e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f003 0308 	and.w	r3, r3, #8
 8011e80:	2b08      	cmp	r3, #8
 8011e82:	d10e      	bne.n	8011ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e88:	9300      	str	r3, [sp, #0]
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 f81b 	bl	8011ece <UART_WaitOnFlagUntilTimeout>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e9e:	2303      	movs	r3, #3
 8011ea0:	e011      	b.n	8011ec6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2220      	movs	r2, #32
 8011ea6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2220      	movs	r2, #32
 8011eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8011ec4:	2300      	movs	r3, #0
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3710      	adds	r7, #16
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b09c      	sub	sp, #112	; 0x70
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	60b9      	str	r1, [r7, #8]
 8011ed8:	603b      	str	r3, [r7, #0]
 8011eda:	4613      	mov	r3, r2
 8011edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ede:	e0a7      	b.n	8012030 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee6:	f000 80a3 	beq.w	8012030 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011eea:	f7f5 f8b1 	bl	8007050 <HAL_GetTick>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d302      	bcc.n	8011f00 <UART_WaitOnFlagUntilTimeout+0x32>
 8011efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d13f      	bne.n	8011f80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f08:	e853 3f00 	ldrex	r3, [r3]
 8011f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011f14:	667b      	str	r3, [r7, #100]	; 0x64
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f26:	e841 2300 	strex	r3, r2, [r1]
 8011f2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1e6      	bne.n	8011f00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	3308      	adds	r3, #8
 8011f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f3c:	e853 3f00 	ldrex	r3, [r3]
 8011f40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f44:	f023 0301 	bic.w	r3, r3, #1
 8011f48:	663b      	str	r3, [r7, #96]	; 0x60
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	3308      	adds	r3, #8
 8011f50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f52:	64ba      	str	r2, [r7, #72]	; 0x48
 8011f54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f5a:	e841 2300 	strex	r3, r2, [r1]
 8011f5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1e5      	bne.n	8011f32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2220      	movs	r2, #32
 8011f6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2220      	movs	r2, #32
 8011f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8011f7c:	2303      	movs	r3, #3
 8011f7e:	e068      	b.n	8012052 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f003 0304 	and.w	r3, r3, #4
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d050      	beq.n	8012030 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	69db      	ldr	r3, [r3, #28]
 8011f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f9c:	d148      	bne.n	8012030 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011fa6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb0:	e853 3f00 	ldrex	r3, [r3]
 8011fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8011fc8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fce:	e841 2300 	strex	r3, r2, [r1]
 8011fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e6      	bne.n	8011fa8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	3308      	adds	r3, #8
 8011fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	e853 3f00 	ldrex	r3, [r3]
 8011fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	f023 0301 	bic.w	r3, r3, #1
 8011ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	3308      	adds	r3, #8
 8011ff8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011ffa:	623a      	str	r2, [r7, #32]
 8011ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ffe:	69f9      	ldr	r1, [r7, #28]
 8012000:	6a3a      	ldr	r2, [r7, #32]
 8012002:	e841 2300 	strex	r3, r2, [r1]
 8012006:	61bb      	str	r3, [r7, #24]
   return(result);
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d1e5      	bne.n	8011fda <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2220      	movs	r2, #32
 8012012:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2220      	movs	r2, #32
 8012018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2220      	movs	r2, #32
 8012020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2200      	movs	r2, #0
 8012028:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801202c:	2303      	movs	r3, #3
 801202e:	e010      	b.n	8012052 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	69da      	ldr	r2, [r3, #28]
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	4013      	ands	r3, r2
 801203a:	68ba      	ldr	r2, [r7, #8]
 801203c:	429a      	cmp	r2, r3
 801203e:	bf0c      	ite	eq
 8012040:	2301      	moveq	r3, #1
 8012042:	2300      	movne	r3, #0
 8012044:	b2db      	uxtb	r3, r3
 8012046:	461a      	mov	r2, r3
 8012048:	79fb      	ldrb	r3, [r7, #7]
 801204a:	429a      	cmp	r2, r3
 801204c:	f43f af48 	beq.w	8011ee0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012050:	2300      	movs	r3, #0
}
 8012052:	4618      	mov	r0, r3
 8012054:	3770      	adds	r7, #112	; 0x70
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d121      	bne.n	80120b2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681a      	ldr	r2, [r3, #0]
 8012072:	4b27      	ldr	r3, [pc, #156]	; (8012110 <FMC_SDRAM_Init+0xb4>)
 8012074:	4013      	ands	r3, r2
 8012076:	683a      	ldr	r2, [r7, #0]
 8012078:	6851      	ldr	r1, [r2, #4]
 801207a:	683a      	ldr	r2, [r7, #0]
 801207c:	6892      	ldr	r2, [r2, #8]
 801207e:	4311      	orrs	r1, r2
 8012080:	683a      	ldr	r2, [r7, #0]
 8012082:	68d2      	ldr	r2, [r2, #12]
 8012084:	4311      	orrs	r1, r2
 8012086:	683a      	ldr	r2, [r7, #0]
 8012088:	6912      	ldr	r2, [r2, #16]
 801208a:	4311      	orrs	r1, r2
 801208c:	683a      	ldr	r2, [r7, #0]
 801208e:	6952      	ldr	r2, [r2, #20]
 8012090:	4311      	orrs	r1, r2
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	6992      	ldr	r2, [r2, #24]
 8012096:	4311      	orrs	r1, r2
 8012098:	683a      	ldr	r2, [r7, #0]
 801209a:	69d2      	ldr	r2, [r2, #28]
 801209c:	4311      	orrs	r1, r2
 801209e:	683a      	ldr	r2, [r7, #0]
 80120a0:	6a12      	ldr	r2, [r2, #32]
 80120a2:	4311      	orrs	r1, r2
 80120a4:	683a      	ldr	r2, [r7, #0]
 80120a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80120a8:	430a      	orrs	r2, r1
 80120aa:	431a      	orrs	r2, r3
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	601a      	str	r2, [r3, #0]
 80120b0:	e026      	b.n	8012100 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	69d9      	ldr	r1, [r3, #28]
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	6a1b      	ldr	r3, [r3, #32]
 80120c2:	4319      	orrs	r1, r3
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c8:	430b      	orrs	r3, r1
 80120ca:	431a      	orrs	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	685a      	ldr	r2, [r3, #4]
 80120d4:	4b0e      	ldr	r3, [pc, #56]	; (8012110 <FMC_SDRAM_Init+0xb4>)
 80120d6:	4013      	ands	r3, r2
 80120d8:	683a      	ldr	r2, [r7, #0]
 80120da:	6851      	ldr	r1, [r2, #4]
 80120dc:	683a      	ldr	r2, [r7, #0]
 80120de:	6892      	ldr	r2, [r2, #8]
 80120e0:	4311      	orrs	r1, r2
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	68d2      	ldr	r2, [r2, #12]
 80120e6:	4311      	orrs	r1, r2
 80120e8:	683a      	ldr	r2, [r7, #0]
 80120ea:	6912      	ldr	r2, [r2, #16]
 80120ec:	4311      	orrs	r1, r2
 80120ee:	683a      	ldr	r2, [r7, #0]
 80120f0:	6952      	ldr	r2, [r2, #20]
 80120f2:	4311      	orrs	r1, r2
 80120f4:	683a      	ldr	r2, [r7, #0]
 80120f6:	6992      	ldr	r2, [r2, #24]
 80120f8:	430a      	orrs	r2, r1
 80120fa:	431a      	orrs	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8012100:	2300      	movs	r3, #0
}
 8012102:	4618      	mov	r0, r3
 8012104:	370c      	adds	r7, #12
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr
 801210e:	bf00      	nop
 8012110:	ffff8000 	.word	0xffff8000

08012114 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d128      	bne.n	8012178 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	689b      	ldr	r3, [r3, #8]
 801212a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	1e59      	subs	r1, r3, #1
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	3b01      	subs	r3, #1
 801213a:	011b      	lsls	r3, r3, #4
 801213c:	4319      	orrs	r1, r3
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	689b      	ldr	r3, [r3, #8]
 8012142:	3b01      	subs	r3, #1
 8012144:	021b      	lsls	r3, r3, #8
 8012146:	4319      	orrs	r1, r3
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	3b01      	subs	r3, #1
 801214e:	031b      	lsls	r3, r3, #12
 8012150:	4319      	orrs	r1, r3
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	691b      	ldr	r3, [r3, #16]
 8012156:	3b01      	subs	r3, #1
 8012158:	041b      	lsls	r3, r3, #16
 801215a:	4319      	orrs	r1, r3
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	695b      	ldr	r3, [r3, #20]
 8012160:	3b01      	subs	r3, #1
 8012162:	051b      	lsls	r3, r3, #20
 8012164:	4319      	orrs	r1, r3
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	699b      	ldr	r3, [r3, #24]
 801216a:	3b01      	subs	r3, #1
 801216c:	061b      	lsls	r3, r3, #24
 801216e:	430b      	orrs	r3, r1
 8012170:	431a      	orrs	r2, r3
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	609a      	str	r2, [r3, #8]
 8012176:	e02d      	b.n	80121d4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	689a      	ldr	r2, [r3, #8]
 801217c:	4b19      	ldr	r3, [pc, #100]	; (80121e4 <FMC_SDRAM_Timing_Init+0xd0>)
 801217e:	4013      	ands	r3, r2
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	68d2      	ldr	r2, [r2, #12]
 8012184:	3a01      	subs	r2, #1
 8012186:	0311      	lsls	r1, r2, #12
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	6952      	ldr	r2, [r2, #20]
 801218c:	3a01      	subs	r2, #1
 801218e:	0512      	lsls	r2, r2, #20
 8012190:	430a      	orrs	r2, r1
 8012192:	431a      	orrs	r2, r3
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	1e59      	subs	r1, r3, #1
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	3b01      	subs	r3, #1
 80121ac:	011b      	lsls	r3, r3, #4
 80121ae:	4319      	orrs	r1, r3
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	689b      	ldr	r3, [r3, #8]
 80121b4:	3b01      	subs	r3, #1
 80121b6:	021b      	lsls	r3, r3, #8
 80121b8:	4319      	orrs	r1, r3
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	691b      	ldr	r3, [r3, #16]
 80121be:	3b01      	subs	r3, #1
 80121c0:	041b      	lsls	r3, r3, #16
 80121c2:	4319      	orrs	r1, r3
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	699b      	ldr	r3, [r3, #24]
 80121c8:	3b01      	subs	r3, #1
 80121ca:	061b      	lsls	r3, r3, #24
 80121cc:	430b      	orrs	r3, r1
 80121ce:	431a      	orrs	r2, r3
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3714      	adds	r7, #20
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	ff0f0fff 	.word	0xff0f0fff

080121e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b085      	sub	sp, #20
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	691a      	ldr	r2, [r3, #16]
 80121f8:	4b0c      	ldr	r3, [pc, #48]	; (801222c <FMC_SDRAM_SendCommand+0x44>)
 80121fa:	4013      	ands	r3, r2
 80121fc:	68ba      	ldr	r2, [r7, #8]
 80121fe:	6811      	ldr	r1, [r2, #0]
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	6852      	ldr	r2, [r2, #4]
 8012204:	4311      	orrs	r1, r2
 8012206:	68ba      	ldr	r2, [r7, #8]
 8012208:	6892      	ldr	r2, [r2, #8]
 801220a:	3a01      	subs	r2, #1
 801220c:	0152      	lsls	r2, r2, #5
 801220e:	4311      	orrs	r1, r2
 8012210:	68ba      	ldr	r2, [r7, #8]
 8012212:	68d2      	ldr	r2, [r2, #12]
 8012214:	0252      	lsls	r2, r2, #9
 8012216:	430a      	orrs	r2, r1
 8012218:	431a      	orrs	r2, r3
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801221e:	2300      	movs	r3, #0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3714      	adds	r7, #20
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr
 801222c:	ffc00000 	.word	0xffc00000

08012230 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	695a      	ldr	r2, [r3, #20]
 801223e:	4b07      	ldr	r3, [pc, #28]	; (801225c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8012240:	4013      	ands	r3, r2
 8012242:	683a      	ldr	r2, [r7, #0]
 8012244:	0052      	lsls	r2, r2, #1
 8012246:	431a      	orrs	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	370c      	adds	r7, #12
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	ffffc001 	.word	0xffffc001

08012260 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012260:	b084      	sub	sp, #16
 8012262:	b480      	push	{r7}
 8012264:	b085      	sub	sp, #20
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
 801226a:	f107 001c 	add.w	r0, r7, #28
 801226e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012276:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012278:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801227a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801227e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012280:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8012282:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012286:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801228a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801228c:	68fa      	ldr	r2, [r7, #12]
 801228e:	4313      	orrs	r3, r2
 8012290:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	685a      	ldr	r2, [r3, #4]
 8012296:	4b07      	ldr	r3, [pc, #28]	; (80122b4 <SDMMC_Init+0x54>)
 8012298:	4013      	ands	r3, r2
 801229a:	68fa      	ldr	r2, [r7, #12]
 801229c:	431a      	orrs	r2, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80122a2:	2300      	movs	r3, #0
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3714      	adds	r7, #20
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	b004      	add	sp, #16
 80122b0:	4770      	bx	lr
 80122b2:	bf00      	nop
 80122b4:	ffff8100 	.word	0xffff8100

080122b8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b083      	sub	sp, #12
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80122d2:	b480      	push	{r7}
 80122d4:	b083      	sub	sp, #12
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
 80122da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	370c      	adds	r7, #12
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr

080122f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2203      	movs	r2, #3
 8012300:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	370c      	adds	r7, #12
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr

08012310 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8012310:	b480      	push	{r7}
 8012312:	b083      	sub	sp, #12
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f003 0303 	and.w	r3, r3, #3
}
 8012320:	4618      	mov	r0, r3
 8012322:	370c      	adds	r7, #12
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr

0801232c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801232c:	b480      	push	{r7}
 801232e:	b085      	sub	sp, #20
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012336:	2300      	movs	r3, #0
 8012338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801234a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012350:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012356:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	4313      	orrs	r3, r2
 801235c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	68da      	ldr	r2, [r3, #12]
 8012362:	4b06      	ldr	r3, [pc, #24]	; (801237c <SDMMC_SendCommand+0x50>)
 8012364:	4013      	ands	r3, r2
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	431a      	orrs	r2, r3
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801236e:	2300      	movs	r3, #0
}
 8012370:	4618      	mov	r0, r3
 8012372:	3714      	adds	r7, #20
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	fffff000 	.word	0xfffff000

08012380 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	691b      	ldr	r3, [r3, #16]
 801238c:	b2db      	uxtb	r3, r3
}
 801238e:	4618      	mov	r0, r3
 8012390:	370c      	adds	r7, #12
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr

0801239a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801239a:	b480      	push	{r7}
 801239c:	b085      	sub	sp, #20
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
 80123a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	3314      	adds	r3, #20
 80123a8:	461a      	mov	r2, r3
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	4413      	add	r3, r2
 80123ae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	681b      	ldr	r3, [r3, #0]
}  
 80123b4:	4618      	mov	r0, r3
 80123b6:	3714      	adds	r7, #20
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr

080123c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b085      	sub	sp, #20
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	685a      	ldr	r2, [r3, #4]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80123e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80123ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80123f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80123f4:	68fa      	ldr	r2, [r7, #12]
 80123f6:	4313      	orrs	r3, r2
 80123f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	431a      	orrs	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801240a:	2300      	movs	r3, #0

}
 801240c:	4618      	mov	r0, r3
 801240e:	3714      	adds	r7, #20
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b088      	sub	sp, #32
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012426:	2310      	movs	r3, #16
 8012428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801242a:	2340      	movs	r3, #64	; 0x40
 801242c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801242e:	2300      	movs	r3, #0
 8012430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012436:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012438:	f107 0308 	add.w	r3, r7, #8
 801243c:	4619      	mov	r1, r3
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff ff74 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012444:	f241 3288 	movw	r2, #5000	; 0x1388
 8012448:	2110      	movs	r1, #16
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 fa1a 	bl	8012884 <SDMMC_GetCmdResp1>
 8012450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012452:	69fb      	ldr	r3, [r7, #28]
}
 8012454:	4618      	mov	r0, r3
 8012456:	3720      	adds	r7, #32
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b088      	sub	sp, #32
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801246a:	2311      	movs	r3, #17
 801246c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801246e:	2340      	movs	r3, #64	; 0x40
 8012470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012472:	2300      	movs	r3, #0
 8012474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801247a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801247c:	f107 0308 	add.w	r3, r7, #8
 8012480:	4619      	mov	r1, r3
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f7ff ff52 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012488:	f241 3288 	movw	r2, #5000	; 0x1388
 801248c:	2111      	movs	r1, #17
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f000 f9f8 	bl	8012884 <SDMMC_GetCmdResp1>
 8012494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012496:	69fb      	ldr	r3, [r7, #28]
}
 8012498:	4618      	mov	r0, r3
 801249a:	3720      	adds	r7, #32
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b088      	sub	sp, #32
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80124ae:	2312      	movs	r3, #18
 80124b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124b2:	2340      	movs	r3, #64	; 0x40
 80124b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124b6:	2300      	movs	r3, #0
 80124b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124c0:	f107 0308 	add.w	r3, r7, #8
 80124c4:	4619      	mov	r1, r3
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f7ff ff30 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80124cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80124d0:	2112      	movs	r1, #18
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f000 f9d6 	bl	8012884 <SDMMC_GetCmdResp1>
 80124d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124da:	69fb      	ldr	r3, [r7, #28]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3720      	adds	r7, #32
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b088      	sub	sp, #32
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80124f2:	2318      	movs	r3, #24
 80124f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124f6:	2340      	movs	r3, #64	; 0x40
 80124f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124fa:	2300      	movs	r3, #0
 80124fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012502:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012504:	f107 0308 	add.w	r3, r7, #8
 8012508:	4619      	mov	r1, r3
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f7ff ff0e 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012510:	f241 3288 	movw	r2, #5000	; 0x1388
 8012514:	2118      	movs	r1, #24
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 f9b4 	bl	8012884 <SDMMC_GetCmdResp1>
 801251c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801251e:	69fb      	ldr	r3, [r7, #28]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3720      	adds	r7, #32
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b088      	sub	sp, #32
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012536:	2319      	movs	r3, #25
 8012538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801253a:	2340      	movs	r3, #64	; 0x40
 801253c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801253e:	2300      	movs	r3, #0
 8012540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012548:	f107 0308 	add.w	r3, r7, #8
 801254c:	4619      	mov	r1, r3
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff feec 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012554:	f241 3288 	movw	r2, #5000	; 0x1388
 8012558:	2119      	movs	r1, #25
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 f992 	bl	8012884 <SDMMC_GetCmdResp1>
 8012560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012562:	69fb      	ldr	r3, [r7, #28]
}
 8012564:	4618      	mov	r0, r3
 8012566:	3720      	adds	r7, #32
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012574:	2300      	movs	r3, #0
 8012576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012578:	230c      	movs	r3, #12
 801257a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801257c:	2340      	movs	r3, #64	; 0x40
 801257e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012580:	2300      	movs	r3, #0
 8012582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801258a:	f107 0308 	add.w	r3, r7, #8
 801258e:	4619      	mov	r1, r3
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7ff fecb 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012596:	4a05      	ldr	r2, [pc, #20]	; (80125ac <SDMMC_CmdStopTransfer+0x40>)
 8012598:	210c      	movs	r1, #12
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 f972 	bl	8012884 <SDMMC_GetCmdResp1>
 80125a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125a2:	69fb      	ldr	r3, [r7, #28]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3720      	adds	r7, #32
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	05f5e100 	.word	0x05f5e100

080125b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b08a      	sub	sp, #40	; 0x28
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80125c0:	2307      	movs	r3, #7
 80125c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125c4:	2340      	movs	r3, #64	; 0x40
 80125c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125c8:	2300      	movs	r3, #0
 80125ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125d0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125d2:	f107 0310 	add.w	r3, r7, #16
 80125d6:	4619      	mov	r1, r3
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f7ff fea7 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80125de:	f241 3288 	movw	r2, #5000	; 0x1388
 80125e2:	2107      	movs	r1, #7
 80125e4:	68f8      	ldr	r0, [r7, #12]
 80125e6:	f000 f94d 	bl	8012884 <SDMMC_GetCmdResp1>
 80125ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80125ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3728      	adds	r7, #40	; 0x28
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80125f6:	b580      	push	{r7, lr}
 80125f8:	b088      	sub	sp, #32
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80125fe:	2300      	movs	r3, #0
 8012600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012602:	2300      	movs	r3, #0
 8012604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012606:	2300      	movs	r3, #0
 8012608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801260a:	2300      	movs	r3, #0
 801260c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801260e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012612:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012614:	f107 0308 	add.w	r3, r7, #8
 8012618:	4619      	mov	r1, r3
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f7ff fe86 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 fb67 	bl	8012cf4 <SDMMC_GetCmdError>
 8012626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012628:	69fb      	ldr	r3, [r7, #28]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3720      	adds	r7, #32
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b088      	sub	sp, #32
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801263a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801263e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012640:	2308      	movs	r3, #8
 8012642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012644:	2340      	movs	r3, #64	; 0x40
 8012646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012648:	2300      	movs	r3, #0
 801264a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012650:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012652:	f107 0308 	add.w	r3, r7, #8
 8012656:	4619      	mov	r1, r3
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f7ff fe67 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f000 fafa 	bl	8012c58 <SDMMC_GetCmdResp7>
 8012664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012666:	69fb      	ldr	r3, [r7, #28]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3720      	adds	r7, #32
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b088      	sub	sp, #32
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801267e:	2337      	movs	r3, #55	; 0x37
 8012680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012682:	2340      	movs	r3, #64	; 0x40
 8012684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012686:	2300      	movs	r3, #0
 8012688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801268a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801268e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012690:	f107 0308 	add.w	r3, r7, #8
 8012694:	4619      	mov	r1, r3
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f7ff fe48 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80126a0:	2137      	movs	r1, #55	; 0x37
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f000 f8ee 	bl	8012884 <SDMMC_GetCmdResp1>
 80126a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126aa:	69fb      	ldr	r3, [r7, #28]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3720      	adds	r7, #32
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b088      	sub	sp, #32
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80126be:	683a      	ldr	r2, [r7, #0]
 80126c0:	4b0d      	ldr	r3, [pc, #52]	; (80126f8 <SDMMC_CmdAppOperCommand+0x44>)
 80126c2:	4313      	orrs	r3, r2
 80126c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80126c6:	2329      	movs	r3, #41	; 0x29
 80126c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126ca:	2340      	movs	r3, #64	; 0x40
 80126cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126ce:	2300      	movs	r3, #0
 80126d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126d8:	f107 0308 	add.w	r3, r7, #8
 80126dc:	4619      	mov	r1, r3
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7ff fe24 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 fa03 	bl	8012af0 <SDMMC_GetCmdResp3>
 80126ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126ec:	69fb      	ldr	r3, [r7, #28]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3720      	adds	r7, #32
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	80100000 	.word	0x80100000

080126fc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b088      	sub	sp, #32
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801270a:	2306      	movs	r3, #6
 801270c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801270e:	2340      	movs	r3, #64	; 0x40
 8012710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012712:	2300      	movs	r3, #0
 8012714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801271a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801271c:	f107 0308 	add.w	r3, r7, #8
 8012720:	4619      	mov	r1, r3
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f7ff fe02 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012728:	f241 3288 	movw	r2, #5000	; 0x1388
 801272c:	2106      	movs	r1, #6
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f000 f8a8 	bl	8012884 <SDMMC_GetCmdResp1>
 8012734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012736:	69fb      	ldr	r3, [r7, #28]
}
 8012738:	4618      	mov	r0, r3
 801273a:	3720      	adds	r7, #32
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}

08012740 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b088      	sub	sp, #32
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012748:	2300      	movs	r3, #0
 801274a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801274c:	2333      	movs	r3, #51	; 0x33
 801274e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012750:	2340      	movs	r3, #64	; 0x40
 8012752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012754:	2300      	movs	r3, #0
 8012756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801275c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801275e:	f107 0308 	add.w	r3, r7, #8
 8012762:	4619      	mov	r1, r3
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff fde1 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801276a:	f241 3288 	movw	r2, #5000	; 0x1388
 801276e:	2133      	movs	r1, #51	; 0x33
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f000 f887 	bl	8012884 <SDMMC_GetCmdResp1>
 8012776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012778:	69fb      	ldr	r3, [r7, #28]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3720      	adds	r7, #32
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}

08012782 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012782:	b580      	push	{r7, lr}
 8012784:	b088      	sub	sp, #32
 8012786:	af00      	add	r7, sp, #0
 8012788:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801278a:	2300      	movs	r3, #0
 801278c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801278e:	2302      	movs	r3, #2
 8012790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012792:	23c0      	movs	r3, #192	; 0xc0
 8012794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012796:	2300      	movs	r3, #0
 8012798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801279a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801279e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127a0:	f107 0308 	add.w	r3, r7, #8
 80127a4:	4619      	mov	r1, r3
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7ff fdc0 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f000 f957 	bl	8012a60 <SDMMC_GetCmdResp2>
 80127b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127b4:	69fb      	ldr	r3, [r7, #28]
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3720      	adds	r7, #32
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}

080127be <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80127be:	b580      	push	{r7, lr}
 80127c0:	b088      	sub	sp, #32
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	6078      	str	r0, [r7, #4]
 80127c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80127cc:	2309      	movs	r3, #9
 80127ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80127d0:	23c0      	movs	r3, #192	; 0xc0
 80127d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127d4:	2300      	movs	r3, #0
 80127d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127de:	f107 0308 	add.w	r3, r7, #8
 80127e2:	4619      	mov	r1, r3
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff fda1 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 f938 	bl	8012a60 <SDMMC_GetCmdResp2>
 80127f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f2:	69fb      	ldr	r3, [r7, #28]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3720      	adds	r7, #32
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b088      	sub	sp, #32
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012806:	2300      	movs	r3, #0
 8012808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801280a:	2303      	movs	r3, #3
 801280c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801280e:	2340      	movs	r3, #64	; 0x40
 8012810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012812:	2300      	movs	r3, #0
 8012814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801281a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801281c:	f107 0308 	add.w	r3, r7, #8
 8012820:	4619      	mov	r1, r3
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7ff fd82 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	2103      	movs	r1, #3
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f000 f99d 	bl	8012b6c <SDMMC_GetCmdResp6>
 8012832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012834:	69fb      	ldr	r3, [r7, #28]
}
 8012836:	4618      	mov	r0, r3
 8012838:	3720      	adds	r7, #32
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801283e:	b580      	push	{r7, lr}
 8012840:	b088      	sub	sp, #32
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
 8012846:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801284c:	230d      	movs	r3, #13
 801284e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012850:	2340      	movs	r3, #64	; 0x40
 8012852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012854:	2300      	movs	r3, #0
 8012856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801285c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801285e:	f107 0308 	add.w	r3, r7, #8
 8012862:	4619      	mov	r1, r3
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f7ff fd61 	bl	801232c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801286a:	f241 3288 	movw	r2, #5000	; 0x1388
 801286e:	210d      	movs	r1, #13
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f000 f807 	bl	8012884 <SDMMC_GetCmdResp1>
 8012876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012878:	69fb      	ldr	r3, [r7, #28]
}
 801287a:	4618      	mov	r0, r3
 801287c:	3720      	adds	r7, #32
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
	...

08012884 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b088      	sub	sp, #32
 8012888:	af00      	add	r7, sp, #0
 801288a:	60f8      	str	r0, [r7, #12]
 801288c:	460b      	mov	r3, r1
 801288e:	607a      	str	r2, [r7, #4]
 8012890:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012892:	4b70      	ldr	r3, [pc, #448]	; (8012a54 <SDMMC_GetCmdResp1+0x1d0>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	4a70      	ldr	r2, [pc, #448]	; (8012a58 <SDMMC_GetCmdResp1+0x1d4>)
 8012898:	fba2 2303 	umull	r2, r3, r2, r3
 801289c:	0a5a      	lsrs	r2, r3, #9
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	fb02 f303 	mul.w	r3, r2, r3
 80128a4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	1e5a      	subs	r2, r3, #1
 80128aa:	61fa      	str	r2, [r7, #28]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d102      	bne.n	80128b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128b4:	e0c9      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d0ef      	beq.n	80128a6 <SDMMC_GetCmdResp1+0x22>
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d1ea      	bne.n	80128a6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d4:	f003 0304 	and.w	r3, r3, #4
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d004      	beq.n	80128e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2204      	movs	r2, #4
 80128e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128e2:	2304      	movs	r3, #4
 80128e4:	e0b1      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ea:	f003 0301 	and.w	r3, r3, #1
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d004      	beq.n	80128fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2201      	movs	r2, #1
 80128f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128f8:	2301      	movs	r3, #1
 80128fa:	e0a6      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	22c5      	movs	r2, #197	; 0xc5
 8012900:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	f7ff fd3c 	bl	8012380 <SDMMC_GetCommandResponse>
 8012908:	4603      	mov	r3, r0
 801290a:	461a      	mov	r2, r3
 801290c:	7afb      	ldrb	r3, [r7, #11]
 801290e:	4293      	cmp	r3, r2
 8012910:	d001      	beq.n	8012916 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012912:	2301      	movs	r3, #1
 8012914:	e099      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012916:	2100      	movs	r1, #0
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f7ff fd3e 	bl	801239a <SDMMC_GetResponse>
 801291e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012920:	697a      	ldr	r2, [r7, #20]
 8012922:	4b4e      	ldr	r3, [pc, #312]	; (8012a5c <SDMMC_GetCmdResp1+0x1d8>)
 8012924:	4013      	ands	r3, r2
 8012926:	2b00      	cmp	r3, #0
 8012928:	d101      	bne.n	801292e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801292a:	2300      	movs	r3, #0
 801292c:	e08d      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	2b00      	cmp	r3, #0
 8012932:	da02      	bge.n	801293a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012938:	e087      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012940:	2b00      	cmp	r3, #0
 8012942:	d001      	beq.n	8012948 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012944:	2340      	movs	r3, #64	; 0x40
 8012946:	e080      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801294e:	2b00      	cmp	r3, #0
 8012950:	d001      	beq.n	8012956 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012952:	2380      	movs	r3, #128	; 0x80
 8012954:	e079      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801295c:	2b00      	cmp	r3, #0
 801295e:	d002      	beq.n	8012966 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012964:	e071      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801296c:	2b00      	cmp	r3, #0
 801296e:	d002      	beq.n	8012976 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012974:	e069      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801297c:	2b00      	cmp	r3, #0
 801297e:	d002      	beq.n	8012986 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012984:	e061      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012994:	e059      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80129a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129a4:	e051      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d002      	beq.n	80129b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80129b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80129b4:	e049      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d002      	beq.n	80129c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80129c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80129c4:	e041      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80129d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80129d4:	e039      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d002      	beq.n	80129e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80129e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80129e4:	e031      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d002      	beq.n	80129f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80129f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80129f4:	e029      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d002      	beq.n	8012a06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012a00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012a04:	e021      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d002      	beq.n	8012a16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012a10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012a14:	e019      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d002      	beq.n	8012a26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012a20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012a24:	e011      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d002      	beq.n	8012a36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012a30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012a34:	e009      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	f003 0308 	and.w	r3, r3, #8
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d002      	beq.n	8012a46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012a40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012a44:	e001      	b.n	8012a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3720      	adds	r7, #32
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	20000010 	.word	0x20000010
 8012a58:	10624dd3 	.word	0x10624dd3
 8012a5c:	fdffe008 	.word	0xfdffe008

08012a60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b085      	sub	sp, #20
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012a68:	4b1f      	ldr	r3, [pc, #124]	; (8012ae8 <SDMMC_GetCmdResp2+0x88>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4a1f      	ldr	r2, [pc, #124]	; (8012aec <SDMMC_GetCmdResp2+0x8c>)
 8012a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8012a72:	0a5b      	lsrs	r3, r3, #9
 8012a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a78:	fb02 f303 	mul.w	r3, r2, r3
 8012a7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	1e5a      	subs	r2, r3, #1
 8012a82:	60fa      	str	r2, [r7, #12]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d102      	bne.n	8012a8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a8c:	e026      	b.n	8012adc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d0ef      	beq.n	8012a7e <SDMMC_GetCmdResp2+0x1e>
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d1ea      	bne.n	8012a7e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aac:	f003 0304 	and.w	r3, r3, #4
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d004      	beq.n	8012abe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2204      	movs	r2, #4
 8012ab8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012aba:	2304      	movs	r3, #4
 8012abc:	e00e      	b.n	8012adc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d004      	beq.n	8012ad4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2201      	movs	r2, #1
 8012ace:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e003      	b.n	8012adc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	22c5      	movs	r2, #197	; 0xc5
 8012ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012ada:	2300      	movs	r3, #0
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3714      	adds	r7, #20
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr
 8012ae8:	20000010 	.word	0x20000010
 8012aec:	10624dd3 	.word	0x10624dd3

08012af0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b085      	sub	sp, #20
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012af8:	4b1a      	ldr	r3, [pc, #104]	; (8012b64 <SDMMC_GetCmdResp3+0x74>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4a1a      	ldr	r2, [pc, #104]	; (8012b68 <SDMMC_GetCmdResp3+0x78>)
 8012afe:	fba2 2303 	umull	r2, r3, r2, r3
 8012b02:	0a5b      	lsrs	r3, r3, #9
 8012b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b08:	fb02 f303 	mul.w	r3, r2, r3
 8012b0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	1e5a      	subs	r2, r3, #1
 8012b12:	60fa      	str	r2, [r7, #12]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d102      	bne.n	8012b1e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b1c:	e01b      	b.n	8012b56 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d0ef      	beq.n	8012b0e <SDMMC_GetCmdResp3+0x1e>
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d1ea      	bne.n	8012b0e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b3c:	f003 0304 	and.w	r3, r3, #4
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d004      	beq.n	8012b4e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2204      	movs	r2, #4
 8012b48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b4a:	2304      	movs	r3, #4
 8012b4c:	e003      	b.n	8012b56 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	22c5      	movs	r2, #197	; 0xc5
 8012b52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3714      	adds	r7, #20
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	20000010 	.word	0x20000010
 8012b68:	10624dd3 	.word	0x10624dd3

08012b6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b088      	sub	sp, #32
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	460b      	mov	r3, r1
 8012b76:	607a      	str	r2, [r7, #4]
 8012b78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012b7a:	4b35      	ldr	r3, [pc, #212]	; (8012c50 <SDMMC_GetCmdResp6+0xe4>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4a35      	ldr	r2, [pc, #212]	; (8012c54 <SDMMC_GetCmdResp6+0xe8>)
 8012b80:	fba2 2303 	umull	r2, r3, r2, r3
 8012b84:	0a5b      	lsrs	r3, r3, #9
 8012b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b8a:	fb02 f303 	mul.w	r3, r2, r3
 8012b8e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012b90:	69fb      	ldr	r3, [r7, #28]
 8012b92:	1e5a      	subs	r2, r3, #1
 8012b94:	61fa      	str	r2, [r7, #28]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d102      	bne.n	8012ba0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b9e:	e052      	b.n	8012c46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ba4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d0ef      	beq.n	8012b90 <SDMMC_GetCmdResp6+0x24>
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1ea      	bne.n	8012b90 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bbe:	f003 0304 	and.w	r3, r3, #4
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d004      	beq.n	8012bd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2204      	movs	r2, #4
 8012bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012bcc:	2304      	movs	r3, #4
 8012bce:	e03a      	b.n	8012c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d004      	beq.n	8012be6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2201      	movs	r2, #1
 8012be0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e02f      	b.n	8012c46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012be6:	68f8      	ldr	r0, [r7, #12]
 8012be8:	f7ff fbca 	bl	8012380 <SDMMC_GetCommandResponse>
 8012bec:	4603      	mov	r3, r0
 8012bee:	461a      	mov	r2, r3
 8012bf0:	7afb      	ldrb	r3, [r7, #11]
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d001      	beq.n	8012bfa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e025      	b.n	8012c46 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	22c5      	movs	r2, #197	; 0xc5
 8012bfe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012c00:	2100      	movs	r1, #0
 8012c02:	68f8      	ldr	r0, [r7, #12]
 8012c04:	f7ff fbc9 	bl	801239a <SDMMC_GetResponse>
 8012c08:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d106      	bne.n	8012c22 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	0c1b      	lsrs	r3, r3, #16
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	e011      	b.n	8012c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d002      	beq.n	8012c32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c30:	e009      	b.n	8012c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d002      	beq.n	8012c42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c40:	e001      	b.n	8012c46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3720      	adds	r7, #32
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	20000010 	.word	0x20000010
 8012c54:	10624dd3 	.word	0x10624dd3

08012c58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b085      	sub	sp, #20
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012c60:	4b22      	ldr	r3, [pc, #136]	; (8012cec <SDMMC_GetCmdResp7+0x94>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	4a22      	ldr	r2, [pc, #136]	; (8012cf0 <SDMMC_GetCmdResp7+0x98>)
 8012c66:	fba2 2303 	umull	r2, r3, r2, r3
 8012c6a:	0a5b      	lsrs	r3, r3, #9
 8012c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c70:	fb02 f303 	mul.w	r3, r2, r3
 8012c74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	1e5a      	subs	r2, r3, #1
 8012c7a:	60fa      	str	r2, [r7, #12]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d102      	bne.n	8012c86 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c84:	e02c      	b.n	8012ce0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d0ef      	beq.n	8012c76 <SDMMC_GetCmdResp7+0x1e>
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1ea      	bne.n	8012c76 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ca4:	f003 0304 	and.w	r3, r3, #4
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d004      	beq.n	8012cb6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2204      	movs	r2, #4
 8012cb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012cb2:	2304      	movs	r3, #4
 8012cb4:	e014      	b.n	8012ce0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cba:	f003 0301 	and.w	r3, r3, #1
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d004      	beq.n	8012ccc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012cc8:	2301      	movs	r3, #1
 8012cca:	e009      	b.n	8012ce0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d002      	beq.n	8012cde <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2240      	movs	r2, #64	; 0x40
 8012cdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012cde:	2300      	movs	r3, #0
  
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3714      	adds	r7, #20
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr
 8012cec:	20000010 	.word	0x20000010
 8012cf0:	10624dd3 	.word	0x10624dd3

08012cf4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b085      	sub	sp, #20
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012cfc:	4b11      	ldr	r3, [pc, #68]	; (8012d44 <SDMMC_GetCmdError+0x50>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4a11      	ldr	r2, [pc, #68]	; (8012d48 <SDMMC_GetCmdError+0x54>)
 8012d02:	fba2 2303 	umull	r2, r3, r2, r3
 8012d06:	0a5b      	lsrs	r3, r3, #9
 8012d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d0c:	fb02 f303 	mul.w	r3, r2, r3
 8012d10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	1e5a      	subs	r2, r3, #1
 8012d16:	60fa      	str	r2, [r7, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d102      	bne.n	8012d22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012d1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d20:	e009      	b.n	8012d36 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d0f1      	beq.n	8012d12 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	22c5      	movs	r2, #197	; 0xc5
 8012d32:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3714      	adds	r7, #20
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d40:	4770      	bx	lr
 8012d42:	bf00      	nop
 8012d44:	20000010 	.word	0x20000010
 8012d48:	10624dd3 	.word	0x10624dd3

08012d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d4c:	b084      	sub	sp, #16
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b084      	sub	sp, #16
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
 8012d56:	f107 001c 	add.w	r0, r7, #28
 8012d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d120      	bne.n	8012da6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	68da      	ldr	r2, [r3, #12]
 8012d74:	4b20      	ldr	r3, [pc, #128]	; (8012df8 <USB_CoreInit+0xac>)
 8012d76:	4013      	ands	r3, r2
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d8a:	2b01      	cmp	r3, #1
 8012d8c:	d105      	bne.n	8012d9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 f9d8 	bl	8013150 <USB_CoreReset>
 8012da0:	4603      	mov	r3, r0
 8012da2:	73fb      	strb	r3, [r7, #15]
 8012da4:	e010      	b.n	8012dc8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	68db      	ldr	r3, [r3, #12]
 8012daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f000 f9cc 	bl	8013150 <USB_CoreReset>
 8012db8:	4603      	mov	r3, r0
 8012dba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8012dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	d10b      	bne.n	8012de6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	689b      	ldr	r3, [r3, #8]
 8012dd2:	f043 0206 	orr.w	r2, r3, #6
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	689b      	ldr	r3, [r3, #8]
 8012dde:	f043 0220 	orr.w	r2, r3, #32
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3710      	adds	r7, #16
 8012dec:	46bd      	mov	sp, r7
 8012dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012df2:	b004      	add	sp, #16
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop
 8012df8:	ffbdffbf 	.word	0xffbdffbf

08012dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	689b      	ldr	r3, [r3, #8]
 8012e08:	f043 0201 	orr.w	r2, r3, #1
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	370c      	adds	r7, #12
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012e1e:	b480      	push	{r7}
 8012e20:	b083      	sub	sp, #12
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	f023 0201 	bic.w	r2, r3, #1
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012e32:	2300      	movs	r3, #0
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	370c      	adds	r7, #12
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr

08012e40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	460b      	mov	r3, r1
 8012e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	68db      	ldr	r3, [r3, #12]
 8012e54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012e5c:	78fb      	ldrb	r3, [r7, #3]
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d115      	bne.n	8012e8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012e6e:	2001      	movs	r0, #1
 8012e70:	f7f4 f8fa 	bl	8007068 <HAL_Delay>
      ms++;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	3301      	adds	r3, #1
 8012e78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f000 f95a 	bl	8013134 <USB_GetMode>
 8012e80:	4603      	mov	r3, r0
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	d01e      	beq.n	8012ec4 <USB_SetCurrentMode+0x84>
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2b31      	cmp	r3, #49	; 0x31
 8012e8a:	d9f0      	bls.n	8012e6e <USB_SetCurrentMode+0x2e>
 8012e8c:	e01a      	b.n	8012ec4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012e8e:	78fb      	ldrb	r3, [r7, #3]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d115      	bne.n	8012ec0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012ea0:	2001      	movs	r0, #1
 8012ea2:	f7f4 f8e1 	bl	8007068 <HAL_Delay>
      ms++;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 f941 	bl	8013134 <USB_GetMode>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d005      	beq.n	8012ec4 <USB_SetCurrentMode+0x84>
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2b31      	cmp	r3, #49	; 0x31
 8012ebc:	d9f0      	bls.n	8012ea0 <USB_SetCurrentMode+0x60>
 8012ebe:	e001      	b.n	8012ec4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e005      	b.n	8012ed0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2b32      	cmp	r3, #50	; 0x32
 8012ec8:	d101      	bne.n	8012ece <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e000      	b.n	8012ed0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012ece:	2300      	movs	r3, #0
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3710      	adds	r7, #16
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}

08012ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	b085      	sub	sp, #20
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	3301      	adds	r3, #1
 8012eea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	4a13      	ldr	r2, [pc, #76]	; (8012f3c <USB_FlushTxFifo+0x64>)
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d901      	bls.n	8012ef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012ef4:	2303      	movs	r3, #3
 8012ef6:	e01b      	b.n	8012f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	691b      	ldr	r3, [r3, #16]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	daf2      	bge.n	8012ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012f00:	2300      	movs	r3, #0
 8012f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	019b      	lsls	r3, r3, #6
 8012f08:	f043 0220 	orr.w	r2, r3, #32
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	3301      	adds	r3, #1
 8012f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	4a08      	ldr	r2, [pc, #32]	; (8012f3c <USB_FlushTxFifo+0x64>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d901      	bls.n	8012f22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012f1e:	2303      	movs	r3, #3
 8012f20:	e006      	b.n	8012f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	691b      	ldr	r3, [r3, #16]
 8012f26:	f003 0320 	and.w	r3, r3, #32
 8012f2a:	2b20      	cmp	r3, #32
 8012f2c:	d0f0      	beq.n	8012f10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3714      	adds	r7, #20
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr
 8012f3c:	00030d40 	.word	0x00030d40

08012f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	3301      	adds	r3, #1
 8012f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	4a11      	ldr	r2, [pc, #68]	; (8012f9c <USB_FlushRxFifo+0x5c>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d901      	bls.n	8012f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012f5a:	2303      	movs	r3, #3
 8012f5c:	e018      	b.n	8012f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	691b      	ldr	r3, [r3, #16]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	daf2      	bge.n	8012f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012f66:	2300      	movs	r3, #0
 8012f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2210      	movs	r2, #16
 8012f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	3301      	adds	r3, #1
 8012f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	4a08      	ldr	r2, [pc, #32]	; (8012f9c <USB_FlushRxFifo+0x5c>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d901      	bls.n	8012f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012f7e:	2303      	movs	r3, #3
 8012f80:	e006      	b.n	8012f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	691b      	ldr	r3, [r3, #16]
 8012f86:	f003 0310 	and.w	r3, r3, #16
 8012f8a:	2b10      	cmp	r3, #16
 8012f8c:	d0f0      	beq.n	8012f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3714      	adds	r7, #20
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr
 8012f9c:	00030d40 	.word	0x00030d40

08012fa0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b089      	sub	sp, #36	; 0x24
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	4611      	mov	r1, r2
 8012fac:	461a      	mov	r2, r3
 8012fae:	460b      	mov	r3, r1
 8012fb0:	71fb      	strb	r3, [r7, #7]
 8012fb2:	4613      	mov	r3, r2
 8012fb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d123      	bne.n	801300e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012fc6:	88bb      	ldrh	r3, [r7, #4]
 8012fc8:	3303      	adds	r3, #3
 8012fca:	089b      	lsrs	r3, r3, #2
 8012fcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012fce:	2300      	movs	r3, #0
 8012fd0:	61bb      	str	r3, [r7, #24]
 8012fd2:	e018      	b.n	8013006 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012fd4:	79fb      	ldrb	r3, [r7, #7]
 8012fd6:	031a      	lsls	r2, r3, #12
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	4413      	add	r3, r2
 8012fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	3301      	adds	r3, #1
 8012fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012fee:	69fb      	ldr	r3, [r7, #28]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	3301      	adds	r3, #1
 8012ff8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013000:	69bb      	ldr	r3, [r7, #24]
 8013002:	3301      	adds	r3, #1
 8013004:	61bb      	str	r3, [r7, #24]
 8013006:	69ba      	ldr	r2, [r7, #24]
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	429a      	cmp	r2, r3
 801300c:	d3e2      	bcc.n	8012fd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801300e:	2300      	movs	r3, #0
}
 8013010:	4618      	mov	r0, r3
 8013012:	3724      	adds	r7, #36	; 0x24
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr

0801301c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801301c:	b480      	push	{r7}
 801301e:	b08b      	sub	sp, #44	; 0x2c
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	4613      	mov	r3, r2
 8013028:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013032:	88fb      	ldrh	r3, [r7, #6]
 8013034:	089b      	lsrs	r3, r3, #2
 8013036:	b29b      	uxth	r3, r3
 8013038:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801303a:	88fb      	ldrh	r3, [r7, #6]
 801303c:	f003 0303 	and.w	r3, r3, #3
 8013040:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013042:	2300      	movs	r3, #0
 8013044:	623b      	str	r3, [r7, #32]
 8013046:	e014      	b.n	8013072 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013052:	601a      	str	r2, [r3, #0]
    pDest++;
 8013054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013056:	3301      	adds	r3, #1
 8013058:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305c:	3301      	adds	r3, #1
 801305e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013062:	3301      	adds	r3, #1
 8013064:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013068:	3301      	adds	r3, #1
 801306a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801306c:	6a3b      	ldr	r3, [r7, #32]
 801306e:	3301      	adds	r3, #1
 8013070:	623b      	str	r3, [r7, #32]
 8013072:	6a3a      	ldr	r2, [r7, #32]
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	429a      	cmp	r2, r3
 8013078:	d3e6      	bcc.n	8013048 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801307a:	8bfb      	ldrh	r3, [r7, #30]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d01e      	beq.n	80130be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013080:	2300      	movs	r3, #0
 8013082:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801308a:	461a      	mov	r2, r3
 801308c:	f107 0310 	add.w	r3, r7, #16
 8013090:	6812      	ldr	r2, [r2, #0]
 8013092:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013094:	693a      	ldr	r2, [r7, #16]
 8013096:	6a3b      	ldr	r3, [r7, #32]
 8013098:	b2db      	uxtb	r3, r3
 801309a:	00db      	lsls	r3, r3, #3
 801309c:	fa22 f303 	lsr.w	r3, r2, r3
 80130a0:	b2da      	uxtb	r2, r3
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	701a      	strb	r2, [r3, #0]
      i++;
 80130a6:	6a3b      	ldr	r3, [r7, #32]
 80130a8:	3301      	adds	r3, #1
 80130aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80130ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ae:	3301      	adds	r3, #1
 80130b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80130b2:	8bfb      	ldrh	r3, [r7, #30]
 80130b4:	3b01      	subs	r3, #1
 80130b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80130b8:	8bfb      	ldrh	r3, [r7, #30]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d1ea      	bne.n	8013094 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80130be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	372c      	adds	r7, #44	; 0x2c
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr

080130cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	695b      	ldr	r3, [r3, #20]
 80130d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	699b      	ldr	r3, [r3, #24]
 80130de:	68fa      	ldr	r2, [r7, #12]
 80130e0:	4013      	ands	r3, r2
 80130e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80130e4:	68fb      	ldr	r3, [r7, #12]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3714      	adds	r7, #20
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr

080130f2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80130f2:	b480      	push	{r7}
 80130f4:	b085      	sub	sp, #20
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
 80130fa:	460b      	mov	r3, r1
 80130fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8013102:	78fb      	ldrb	r3, [r7, #3]
 8013104:	015a      	lsls	r2, r3, #5
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	4413      	add	r3, r2
 801310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801310e:	689b      	ldr	r3, [r3, #8]
 8013110:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8013112:	78fb      	ldrb	r3, [r7, #3]
 8013114:	015a      	lsls	r2, r3, #5
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	4413      	add	r3, r2
 801311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	4013      	ands	r3, r2
 8013124:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013126:	68bb      	ldr	r3, [r7, #8]
}
 8013128:	4618      	mov	r0, r3
 801312a:	3714      	adds	r7, #20
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	695b      	ldr	r3, [r3, #20]
 8013140:	f003 0301 	and.w	r3, r3, #1
}
 8013144:	4618      	mov	r0, r3
 8013146:	370c      	adds	r7, #12
 8013148:	46bd      	mov	sp, r7
 801314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314e:	4770      	bx	lr

08013150 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013150:	b480      	push	{r7}
 8013152:	b085      	sub	sp, #20
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013158:	2300      	movs	r3, #0
 801315a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	3301      	adds	r3, #1
 8013160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	4a13      	ldr	r2, [pc, #76]	; (80131b4 <USB_CoreReset+0x64>)
 8013166:	4293      	cmp	r3, r2
 8013168:	d901      	bls.n	801316e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801316a:	2303      	movs	r3, #3
 801316c:	e01b      	b.n	80131a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	691b      	ldr	r3, [r3, #16]
 8013172:	2b00      	cmp	r3, #0
 8013174:	daf2      	bge.n	801315c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013176:	2300      	movs	r3, #0
 8013178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	f043 0201 	orr.w	r2, r3, #1
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	3301      	adds	r3, #1
 801318a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4a09      	ldr	r2, [pc, #36]	; (80131b4 <USB_CoreReset+0x64>)
 8013190:	4293      	cmp	r3, r2
 8013192:	d901      	bls.n	8013198 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013194:	2303      	movs	r3, #3
 8013196:	e006      	b.n	80131a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	691b      	ldr	r3, [r3, #16]
 801319c:	f003 0301 	and.w	r3, r3, #1
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d0f0      	beq.n	8013186 <USB_CoreReset+0x36>

  return HAL_OK;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3714      	adds	r7, #20
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr
 80131b2:	bf00      	nop
 80131b4:	00030d40 	.word	0x00030d40

080131b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80131b8:	b084      	sub	sp, #16
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b086      	sub	sp, #24
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
 80131c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80131c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80131ca:	2300      	movs	r3, #0
 80131cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80131d8:	461a      	mov	r2, r3
 80131da:	2300      	movs	r3, #0
 80131dc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d018      	beq.n	8013228 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80131f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d10a      	bne.n	8013212 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	68fa      	ldr	r2, [r7, #12]
 8013206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801320a:	f043 0304 	orr.w	r3, r3, #4
 801320e:	6013      	str	r3, [r2, #0]
 8013210:	e014      	b.n	801323c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	68fa      	ldr	r2, [r7, #12]
 801321c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013220:	f023 0304 	bic.w	r3, r3, #4
 8013224:	6013      	str	r3, [r2, #0]
 8013226:	e009      	b.n	801323c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013236:	f023 0304 	bic.w	r3, r3, #4
 801323a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801323c:	2110      	movs	r1, #16
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7ff fe4a 	bl	8012ed8 <USB_FlushTxFifo>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 801324a:	2301      	movs	r3, #1
 801324c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f7ff fe76 	bl	8012f40 <USB_FlushRxFifo>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d001      	beq.n	801325e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 801325a:	2301      	movs	r3, #1
 801325c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801325e:	2300      	movs	r3, #0
 8013260:	613b      	str	r3, [r7, #16]
 8013262:	e015      	b.n	8013290 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	015a      	lsls	r2, r3, #5
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	4413      	add	r3, r2
 801326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013270:	461a      	mov	r2, r3
 8013272:	f04f 33ff 	mov.w	r3, #4294967295
 8013276:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	015a      	lsls	r2, r3, #5
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	4413      	add	r3, r2
 8013280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013284:	461a      	mov	r2, r3
 8013286:	2300      	movs	r3, #0
 8013288:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	3301      	adds	r3, #1
 801328e:	613b      	str	r3, [r7, #16]
 8013290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013292:	693a      	ldr	r2, [r7, #16]
 8013294:	429a      	cmp	r2, r3
 8013296:	d3e5      	bcc.n	8013264 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f04f 32ff 	mov.w	r2, #4294967295
 80132a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d00b      	beq.n	80132ca <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4a13      	ldr	r2, [pc, #76]	; (801330c <USB_HostInit+0x154>)
 80132be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	4a13      	ldr	r2, [pc, #76]	; (8013310 <USB_HostInit+0x158>)
 80132c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80132c8:	e009      	b.n	80132de <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2280      	movs	r2, #128	; 0x80
 80132ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	4a10      	ldr	r2, [pc, #64]	; (8013314 <USB_HostInit+0x15c>)
 80132d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	4a0f      	ldr	r2, [pc, #60]	; (8013318 <USB_HostInit+0x160>)
 80132da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80132de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d105      	bne.n	80132f0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	699b      	ldr	r3, [r3, #24]
 80132e8:	f043 0210 	orr.w	r2, r3, #16
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	699a      	ldr	r2, [r3, #24]
 80132f4:	4b09      	ldr	r3, [pc, #36]	; (801331c <USB_HostInit+0x164>)
 80132f6:	4313      	orrs	r3, r2
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80132fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3718      	adds	r7, #24
 8013302:	46bd      	mov	sp, r7
 8013304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013308:	b004      	add	sp, #16
 801330a:	4770      	bx	lr
 801330c:	01000200 	.word	0x01000200
 8013310:	00e00300 	.word	0x00e00300
 8013314:	00600080 	.word	0x00600080
 8013318:	004000e0 	.word	0x004000e0
 801331c:	a3200008 	.word	0xa3200008

08013320 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8013320:	b480      	push	{r7}
 8013322:	b085      	sub	sp, #20
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	460b      	mov	r3, r1
 801332a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	68fa      	ldr	r2, [r7, #12]
 801333a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801333e:	f023 0303 	bic.w	r3, r3, #3
 8013342:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801334a:	681a      	ldr	r2, [r3, #0]
 801334c:	78fb      	ldrb	r3, [r7, #3]
 801334e:	f003 0303 	and.w	r3, r3, #3
 8013352:	68f9      	ldr	r1, [r7, #12]
 8013354:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013358:	4313      	orrs	r3, r2
 801335a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 801335c:	78fb      	ldrb	r3, [r7, #3]
 801335e:	2b01      	cmp	r3, #1
 8013360:	d107      	bne.n	8013372 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013368:	461a      	mov	r2, r3
 801336a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801336e:	6053      	str	r3, [r2, #4]
 8013370:	e009      	b.n	8013386 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8013372:	78fb      	ldrb	r3, [r7, #3]
 8013374:	2b02      	cmp	r3, #2
 8013376:	d106      	bne.n	8013386 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801337e:	461a      	mov	r2, r3
 8013380:	f241 7370 	movw	r3, #6000	; 0x1770
 8013384:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8013386:	2300      	movs	r3, #0
}
 8013388:	4618      	mov	r0, r3
 801338a:	3714      	adds	r7, #20
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr

08013394 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80133a0:	2300      	movs	r3, #0
 80133a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80133b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80133be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80133c4:	2064      	movs	r0, #100	; 0x64
 80133c6:	f7f3 fe4f 	bl	8007068 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80133d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80133d8:	200a      	movs	r0, #10
 80133da:	f7f3 fe45 	bl	8007068 <HAL_Delay>

  return HAL_OK;
 80133de:	2300      	movs	r3, #0
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3710      	adds	r7, #16
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}

080133e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80133e8:	b480      	push	{r7}
 80133ea:	b085      	sub	sp, #20
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	460b      	mov	r3, r1
 80133f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80133f8:	2300      	movs	r3, #0
 80133fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801340c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013414:	2b00      	cmp	r3, #0
 8013416:	d109      	bne.n	801342c <USB_DriveVbus+0x44>
 8013418:	78fb      	ldrb	r3, [r7, #3]
 801341a:	2b01      	cmp	r3, #1
 801341c:	d106      	bne.n	801342c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	68fa      	ldr	r2, [r7, #12]
 8013422:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801342a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013436:	d109      	bne.n	801344c <USB_DriveVbus+0x64>
 8013438:	78fb      	ldrb	r3, [r7, #3]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d106      	bne.n	801344c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801344a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801344c:	2300      	movs	r3, #0
}
 801344e:	4618      	mov	r0, r3
 8013450:	3714      	adds	r7, #20
 8013452:	46bd      	mov	sp, r7
 8013454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013458:	4770      	bx	lr

0801345a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801345a:	b480      	push	{r7}
 801345c:	b085      	sub	sp, #20
 801345e:	af00      	add	r7, sp, #0
 8013460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013466:	2300      	movs	r3, #0
 8013468:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	0c5b      	lsrs	r3, r3, #17
 8013478:	f003 0303 	and.w	r3, r3, #3
}
 801347c:	4618      	mov	r0, r3
 801347e:	3714      	adds	r7, #20
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8013488:	b480      	push	{r7}
 801348a:	b085      	sub	sp, #20
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	b29b      	uxth	r3, r3
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3714      	adds	r7, #20
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr
	...

080134ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b088      	sub	sp, #32
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	4608      	mov	r0, r1
 80134b6:	4611      	mov	r1, r2
 80134b8:	461a      	mov	r2, r3
 80134ba:	4603      	mov	r3, r0
 80134bc:	70fb      	strb	r3, [r7, #3]
 80134be:	460b      	mov	r3, r1
 80134c0:	70bb      	strb	r3, [r7, #2]
 80134c2:	4613      	mov	r3, r2
 80134c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80134c6:	2300      	movs	r3, #0
 80134c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80134ce:	78fb      	ldrb	r3, [r7, #3]
 80134d0:	015a      	lsls	r2, r3, #5
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	4413      	add	r3, r2
 80134d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134da:	461a      	mov	r2, r3
 80134dc:	f04f 33ff 	mov.w	r3, #4294967295
 80134e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80134e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	d87e      	bhi.n	80135e8 <USB_HC_Init+0x13c>
 80134ea:	a201      	add	r2, pc, #4	; (adr r2, 80134f0 <USB_HC_Init+0x44>)
 80134ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f0:	08013501 	.word	0x08013501
 80134f4:	080135ab 	.word	0x080135ab
 80134f8:	08013501 	.word	0x08013501
 80134fc:	0801356d 	.word	0x0801356d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013500:	78fb      	ldrb	r3, [r7, #3]
 8013502:	015a      	lsls	r2, r3, #5
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	4413      	add	r3, r2
 8013508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801350c:	461a      	mov	r2, r3
 801350e:	f240 439d 	movw	r3, #1181	; 0x49d
 8013512:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8013514:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013518:	2b00      	cmp	r3, #0
 801351a:	da10      	bge.n	801353e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801351c:	78fb      	ldrb	r3, [r7, #3]
 801351e:	015a      	lsls	r2, r3, #5
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	4413      	add	r3, r2
 8013524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	78fa      	ldrb	r2, [r7, #3]
 801352c:	0151      	lsls	r1, r2, #5
 801352e:	693a      	ldr	r2, [r7, #16]
 8013530:	440a      	add	r2, r1
 8013532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801353a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 801353c:	e057      	b.n	80135ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013546:	2b00      	cmp	r3, #0
 8013548:	d051      	beq.n	80135ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 801354a:	78fb      	ldrb	r3, [r7, #3]
 801354c:	015a      	lsls	r2, r3, #5
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	4413      	add	r3, r2
 8013552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	78fa      	ldrb	r2, [r7, #3]
 801355a:	0151      	lsls	r1, r2, #5
 801355c:	693a      	ldr	r2, [r7, #16]
 801355e:	440a      	add	r2, r1
 8013560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013568:	60d3      	str	r3, [r2, #12]
      break;
 801356a:	e040      	b.n	80135ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801356c:	78fb      	ldrb	r3, [r7, #3]
 801356e:	015a      	lsls	r2, r3, #5
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	4413      	add	r3, r2
 8013574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013578:	461a      	mov	r2, r3
 801357a:	f240 639d 	movw	r3, #1693	; 0x69d
 801357e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013584:	2b00      	cmp	r3, #0
 8013586:	da34      	bge.n	80135f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013588:	78fb      	ldrb	r3, [r7, #3]
 801358a:	015a      	lsls	r2, r3, #5
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	4413      	add	r3, r2
 8013590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013594:	68db      	ldr	r3, [r3, #12]
 8013596:	78fa      	ldrb	r2, [r7, #3]
 8013598:	0151      	lsls	r1, r2, #5
 801359a:	693a      	ldr	r2, [r7, #16]
 801359c:	440a      	add	r2, r1
 801359e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80135a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80135a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80135a8:	e023      	b.n	80135f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80135aa:	78fb      	ldrb	r3, [r7, #3]
 80135ac:	015a      	lsls	r2, r3, #5
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	4413      	add	r3, r2
 80135b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80135b6:	461a      	mov	r2, r3
 80135b8:	f240 2325 	movw	r3, #549	; 0x225
 80135bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80135be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	da17      	bge.n	80135f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80135c6:	78fb      	ldrb	r3, [r7, #3]
 80135c8:	015a      	lsls	r2, r3, #5
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	4413      	add	r3, r2
 80135ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	78fa      	ldrb	r2, [r7, #3]
 80135d6:	0151      	lsls	r1, r2, #5
 80135d8:	693a      	ldr	r2, [r7, #16]
 80135da:	440a      	add	r2, r1
 80135dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80135e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80135e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80135e6:	e006      	b.n	80135f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80135e8:	2301      	movs	r3, #1
 80135ea:	77fb      	strb	r3, [r7, #31]
      break;
 80135ec:	e004      	b.n	80135f8 <USB_HC_Init+0x14c>
      break;
 80135ee:	bf00      	nop
 80135f0:	e002      	b.n	80135f8 <USB_HC_Init+0x14c>
      break;
 80135f2:	bf00      	nop
 80135f4:	e000      	b.n	80135f8 <USB_HC_Init+0x14c>
      break;
 80135f6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80135f8:	78fb      	ldrb	r3, [r7, #3]
 80135fa:	015a      	lsls	r2, r3, #5
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	4413      	add	r3, r2
 8013600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	78fa      	ldrb	r2, [r7, #3]
 8013608:	0151      	lsls	r1, r2, #5
 801360a:	693a      	ldr	r2, [r7, #16]
 801360c:	440a      	add	r2, r1
 801360e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013612:	f043 0302 	orr.w	r3, r3, #2
 8013616:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801361e:	699a      	ldr	r2, [r3, #24]
 8013620:	78fb      	ldrb	r3, [r7, #3]
 8013622:	f003 030f 	and.w	r3, r3, #15
 8013626:	2101      	movs	r1, #1
 8013628:	fa01 f303 	lsl.w	r3, r1, r3
 801362c:	6939      	ldr	r1, [r7, #16]
 801362e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013632:	4313      	orrs	r3, r2
 8013634:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	699b      	ldr	r3, [r3, #24]
 801363a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8013642:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013646:	2b00      	cmp	r3, #0
 8013648:	da03      	bge.n	8013652 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 801364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801364e:	61bb      	str	r3, [r7, #24]
 8013650:	e001      	b.n	8013656 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8013652:	2300      	movs	r3, #0
 8013654:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff feff 	bl	801345a <USB_GetHostSpeed>
 801365c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801365e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013662:	2b02      	cmp	r3, #2
 8013664:	d106      	bne.n	8013674 <USB_HC_Init+0x1c8>
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	2b02      	cmp	r3, #2
 801366a:	d003      	beq.n	8013674 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801366c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013670:	617b      	str	r3, [r7, #20]
 8013672:	e001      	b.n	8013678 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8013674:	2300      	movs	r3, #0
 8013676:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013678:	787b      	ldrb	r3, [r7, #1]
 801367a:	059b      	lsls	r3, r3, #22
 801367c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013680:	78bb      	ldrb	r3, [r7, #2]
 8013682:	02db      	lsls	r3, r3, #11
 8013684:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013688:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801368a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801368e:	049b      	lsls	r3, r3, #18
 8013690:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013694:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013696:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013698:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801369c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80136a2:	78fb      	ldrb	r3, [r7, #3]
 80136a4:	0159      	lsls	r1, r3, #5
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	440b      	add	r3, r1
 80136aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80136b4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80136b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80136ba:	2b03      	cmp	r3, #3
 80136bc:	d003      	beq.n	80136c6 <USB_HC_Init+0x21a>
 80136be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d10f      	bne.n	80136e6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80136c6:	78fb      	ldrb	r3, [r7, #3]
 80136c8:	015a      	lsls	r2, r3, #5
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	4413      	add	r3, r2
 80136ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	78fa      	ldrb	r2, [r7, #3]
 80136d6:	0151      	lsls	r1, r2, #5
 80136d8:	693a      	ldr	r2, [r7, #16]
 80136da:	440a      	add	r2, r1
 80136dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80136e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80136e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3720      	adds	r7, #32
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b08c      	sub	sp, #48	; 0x30
 80136f4:	af02      	add	r7, sp, #8
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	4613      	mov	r3, r2
 80136fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	785b      	ldrb	r3, [r3, #1]
 8013706:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8013708:	f44f 7380 	mov.w	r3, #256	; 0x100
 801370c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013716:	2b00      	cmp	r3, #0
 8013718:	d02d      	beq.n	8013776 <USB_HC_StartXfer+0x86>
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	791b      	ldrb	r3, [r3, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d129      	bne.n	8013776 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8013722:	79fb      	ldrb	r3, [r7, #7]
 8013724:	2b01      	cmp	r3, #1
 8013726:	d117      	bne.n	8013758 <USB_HC_StartXfer+0x68>
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	79db      	ldrb	r3, [r3, #7]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d003      	beq.n	8013738 <USB_HC_StartXfer+0x48>
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	79db      	ldrb	r3, [r3, #7]
 8013734:	2b02      	cmp	r3, #2
 8013736:	d10f      	bne.n	8013758 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	015a      	lsls	r2, r3, #5
 801373c:	6a3b      	ldr	r3, [r7, #32]
 801373e:	4413      	add	r3, r2
 8013740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013744:	68db      	ldr	r3, [r3, #12]
 8013746:	69fa      	ldr	r2, [r7, #28]
 8013748:	0151      	lsls	r1, r2, #5
 801374a:	6a3a      	ldr	r2, [r7, #32]
 801374c:	440a      	add	r2, r1
 801374e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013756:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8013758:	79fb      	ldrb	r3, [r7, #7]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d10b      	bne.n	8013776 <USB_HC_StartXfer+0x86>
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	795b      	ldrb	r3, [r3, #5]
 8013762:	2b01      	cmp	r3, #1
 8013764:	d107      	bne.n	8013776 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	785b      	ldrb	r3, [r3, #1]
 801376a:	4619      	mov	r1, r3
 801376c:	68f8      	ldr	r0, [r7, #12]
 801376e:	f000 fa0f 	bl	8013b90 <USB_DoPing>
      return HAL_OK;
 8013772:	2300      	movs	r3, #0
 8013774:	e0f8      	b.n	8013968 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	695b      	ldr	r3, [r3, #20]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d018      	beq.n	80137b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	695b      	ldr	r3, [r3, #20]
 8013782:	68ba      	ldr	r2, [r7, #8]
 8013784:	8912      	ldrh	r2, [r2, #8]
 8013786:	4413      	add	r3, r2
 8013788:	3b01      	subs	r3, #1
 801378a:	68ba      	ldr	r2, [r7, #8]
 801378c:	8912      	ldrh	r2, [r2, #8]
 801378e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013792:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8013794:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013796:	8b7b      	ldrh	r3, [r7, #26]
 8013798:	429a      	cmp	r2, r3
 801379a:	d90b      	bls.n	80137b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 801379c:	8b7b      	ldrh	r3, [r7, #26]
 801379e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80137a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80137a2:	68ba      	ldr	r2, [r7, #8]
 80137a4:	8912      	ldrh	r2, [r2, #8]
 80137a6:	fb03 f202 	mul.w	r2, r3, r2
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	611a      	str	r2, [r3, #16]
 80137ae:	e001      	b.n	80137b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80137b0:	2301      	movs	r3, #1
 80137b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	78db      	ldrb	r3, [r3, #3]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d007      	beq.n	80137cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80137bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80137be:	68ba      	ldr	r2, [r7, #8]
 80137c0:	8912      	ldrh	r2, [r2, #8]
 80137c2:	fb03 f202 	mul.w	r2, r3, r2
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	611a      	str	r2, [r3, #16]
 80137ca:	e003      	b.n	80137d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	695a      	ldr	r2, [r3, #20]
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	691b      	ldr	r3, [r3, #16]
 80137d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80137dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80137de:	04d9      	lsls	r1, r3, #19
 80137e0:	4b63      	ldr	r3, [pc, #396]	; (8013970 <USB_HC_StartXfer+0x280>)
 80137e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80137e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	7a9b      	ldrb	r3, [r3, #10]
 80137ea:	075b      	lsls	r3, r3, #29
 80137ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80137f0:	69f9      	ldr	r1, [r7, #28]
 80137f2:	0148      	lsls	r0, r1, #5
 80137f4:	6a39      	ldr	r1, [r7, #32]
 80137f6:	4401      	add	r1, r0
 80137f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80137fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80137fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8013800:	79fb      	ldrb	r3, [r7, #7]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d009      	beq.n	801381a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	68d9      	ldr	r1, [r3, #12]
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	015a      	lsls	r2, r3, #5
 801380e:	6a3b      	ldr	r3, [r7, #32]
 8013810:	4413      	add	r3, r2
 8013812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013816:	460a      	mov	r2, r1
 8013818:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801381a:	6a3b      	ldr	r3, [r7, #32]
 801381c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013820:	689b      	ldr	r3, [r3, #8]
 8013822:	f003 0301 	and.w	r3, r3, #1
 8013826:	2b00      	cmp	r3, #0
 8013828:	bf0c      	ite	eq
 801382a:	2301      	moveq	r3, #1
 801382c:	2300      	movne	r3, #0
 801382e:	b2db      	uxtb	r3, r3
 8013830:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	015a      	lsls	r2, r3, #5
 8013836:	6a3b      	ldr	r3, [r7, #32]
 8013838:	4413      	add	r3, r2
 801383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	69fa      	ldr	r2, [r7, #28]
 8013842:	0151      	lsls	r1, r2, #5
 8013844:	6a3a      	ldr	r2, [r7, #32]
 8013846:	440a      	add	r2, r1
 8013848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801384c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013850:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	015a      	lsls	r2, r3, #5
 8013856:	6a3b      	ldr	r3, [r7, #32]
 8013858:	4413      	add	r3, r2
 801385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	7e7b      	ldrb	r3, [r7, #25]
 8013862:	075b      	lsls	r3, r3, #29
 8013864:	69f9      	ldr	r1, [r7, #28]
 8013866:	0148      	lsls	r0, r1, #5
 8013868:	6a39      	ldr	r1, [r7, #32]
 801386a:	4401      	add	r1, r0
 801386c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8013870:	4313      	orrs	r3, r2
 8013872:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	015a      	lsls	r2, r3, #5
 8013878:	6a3b      	ldr	r3, [r7, #32]
 801387a:	4413      	add	r3, r2
 801387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801388a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	78db      	ldrb	r3, [r3, #3]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d004      	beq.n	801389e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801389a:	613b      	str	r3, [r7, #16]
 801389c:	e003      	b.n	80138a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80138a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80138ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	015a      	lsls	r2, r3, #5
 80138b2:	6a3b      	ldr	r3, [r7, #32]
 80138b4:	4413      	add	r3, r2
 80138b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138ba:	461a      	mov	r2, r3
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80138c0:	79fb      	ldrb	r3, [r7, #7]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d001      	beq.n	80138ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80138c6:	2300      	movs	r3, #0
 80138c8:	e04e      	b.n	8013968 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	78db      	ldrb	r3, [r3, #3]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d149      	bne.n	8013966 <USB_HC_StartXfer+0x276>
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	695b      	ldr	r3, [r3, #20]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d045      	beq.n	8013966 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	79db      	ldrb	r3, [r3, #7]
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d830      	bhi.n	8013944 <USB_HC_StartXfer+0x254>
 80138e2:	a201      	add	r2, pc, #4	; (adr r2, 80138e8 <USB_HC_StartXfer+0x1f8>)
 80138e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138e8:	080138f9 	.word	0x080138f9
 80138ec:	0801391d 	.word	0x0801391d
 80138f0:	080138f9 	.word	0x080138f9
 80138f4:	0801391d 	.word	0x0801391d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	695b      	ldr	r3, [r3, #20]
 80138fc:	3303      	adds	r3, #3
 80138fe:	089b      	lsrs	r3, r3, #2
 8013900:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8013902:	8afa      	ldrh	r2, [r7, #22]
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013908:	b29b      	uxth	r3, r3
 801390a:	429a      	cmp	r2, r3
 801390c:	d91c      	bls.n	8013948 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	699b      	ldr	r3, [r3, #24]
 8013912:	f043 0220 	orr.w	r2, r3, #32
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	619a      	str	r2, [r3, #24]
        }
        break;
 801391a:	e015      	b.n	8013948 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	695b      	ldr	r3, [r3, #20]
 8013920:	3303      	adds	r3, #3
 8013922:	089b      	lsrs	r3, r3, #2
 8013924:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8013926:	8afa      	ldrh	r2, [r7, #22]
 8013928:	6a3b      	ldr	r3, [r7, #32]
 801392a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801392e:	691b      	ldr	r3, [r3, #16]
 8013930:	b29b      	uxth	r3, r3
 8013932:	429a      	cmp	r2, r3
 8013934:	d90a      	bls.n	801394c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	699b      	ldr	r3, [r3, #24]
 801393a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	619a      	str	r2, [r3, #24]
        }
        break;
 8013942:	e003      	b.n	801394c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8013944:	bf00      	nop
 8013946:	e002      	b.n	801394e <USB_HC_StartXfer+0x25e>
        break;
 8013948:	bf00      	nop
 801394a:	e000      	b.n	801394e <USB_HC_StartXfer+0x25e>
        break;
 801394c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	68d9      	ldr	r1, [r3, #12]
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	785a      	ldrb	r2, [r3, #1]
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	695b      	ldr	r3, [r3, #20]
 801395a:	b29b      	uxth	r3, r3
 801395c:	2000      	movs	r0, #0
 801395e:	9000      	str	r0, [sp, #0]
 8013960:	68f8      	ldr	r0, [r7, #12]
 8013962:	f7ff fb1d 	bl	8012fa0 <USB_WritePacket>
  }

  return HAL_OK;
 8013966:	2300      	movs	r3, #0
}
 8013968:	4618      	mov	r0, r3
 801396a:	3728      	adds	r7, #40	; 0x28
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	1ff80000 	.word	0x1ff80000

08013974 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013974:	b480      	push	{r7}
 8013976:	b085      	sub	sp, #20
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013986:	695b      	ldr	r3, [r3, #20]
 8013988:	b29b      	uxth	r3, r3
}
 801398a:	4618      	mov	r0, r3
 801398c:	3714      	adds	r7, #20
 801398e:	46bd      	mov	sp, r7
 8013990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013994:	4770      	bx	lr

08013996 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8013996:	b480      	push	{r7}
 8013998:	b089      	sub	sp, #36	; 0x24
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
 801399e:	460b      	mov	r3, r1
 80139a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80139a6:	78fb      	ldrb	r3, [r7, #3]
 80139a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80139aa:	2300      	movs	r3, #0
 80139ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	015a      	lsls	r2, r3, #5
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	4413      	add	r3, r2
 80139b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	0c9b      	lsrs	r3, r3, #18
 80139be:	f003 0303 	and.w	r3, r3, #3
 80139c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	015a      	lsls	r2, r3, #5
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	4413      	add	r3, r2
 80139cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	0fdb      	lsrs	r3, r3, #31
 80139d4:	f003 0301 	and.w	r3, r3, #1
 80139d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	689b      	ldr	r3, [r3, #8]
 80139de:	f003 0320 	and.w	r3, r3, #32
 80139e2:	2b20      	cmp	r3, #32
 80139e4:	d104      	bne.n	80139f0 <USB_HC_Halt+0x5a>
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d101      	bne.n	80139f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80139ec:	2300      	movs	r3, #0
 80139ee:	e0c8      	b.n	8013b82 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d002      	beq.n	80139fc <USB_HC_Halt+0x66>
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	2b02      	cmp	r3, #2
 80139fa:	d163      	bne.n	8013ac4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	015a      	lsls	r2, r3, #5
 8013a00:	69fb      	ldr	r3, [r7, #28]
 8013a02:	4413      	add	r3, r2
 8013a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	69ba      	ldr	r2, [r7, #24]
 8013a0c:	0151      	lsls	r1, r2, #5
 8013a0e:	69fa      	ldr	r2, [r7, #28]
 8013a10:	440a      	add	r2, r1
 8013a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	689b      	ldr	r3, [r3, #8]
 8013a20:	f003 0320 	and.w	r3, r3, #32
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	f040 80ab 	bne.w	8013b80 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d133      	bne.n	8013a9e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013a36:	69bb      	ldr	r3, [r7, #24]
 8013a38:	015a      	lsls	r2, r3, #5
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	69ba      	ldr	r2, [r7, #24]
 8013a46:	0151      	lsls	r1, r2, #5
 8013a48:	69fa      	ldr	r2, [r7, #28]
 8013a4a:	440a      	add	r2, r1
 8013a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a54:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	015a      	lsls	r2, r3, #5
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	69ba      	ldr	r2, [r7, #24]
 8013a66:	0151      	lsls	r1, r2, #5
 8013a68:	69fa      	ldr	r2, [r7, #28]
 8013a6a:	440a      	add	r2, r1
 8013a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a74:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013a82:	d81d      	bhi.n	8013ac0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	015a      	lsls	r2, r3, #5
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a9a:	d0ec      	beq.n	8013a76 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8013a9c:	e070      	b.n	8013b80 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013a9e:	69bb      	ldr	r3, [r7, #24]
 8013aa0:	015a      	lsls	r2, r3, #5
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	69ba      	ldr	r2, [r7, #24]
 8013aae:	0151      	lsls	r1, r2, #5
 8013ab0:	69fa      	ldr	r2, [r7, #28]
 8013ab2:	440a      	add	r2, r1
 8013ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013abc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8013abe:	e05f      	b.n	8013b80 <USB_HC_Halt+0x1ea>
            break;
 8013ac0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8013ac2:	e05d      	b.n	8013b80 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	015a      	lsls	r2, r3, #5
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	4413      	add	r3, r2
 8013acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	69ba      	ldr	r2, [r7, #24]
 8013ad4:	0151      	lsls	r1, r2, #5
 8013ad6:	69fa      	ldr	r2, [r7, #28]
 8013ad8:	440a      	add	r2, r1
 8013ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ae2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013aea:	691b      	ldr	r3, [r3, #16]
 8013aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d133      	bne.n	8013b5c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	015a      	lsls	r2, r3, #5
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	4413      	add	r3, r2
 8013afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	69ba      	ldr	r2, [r7, #24]
 8013b04:	0151      	lsls	r1, r2, #5
 8013b06:	69fa      	ldr	r2, [r7, #28]
 8013b08:	440a      	add	r2, r1
 8013b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	015a      	lsls	r2, r3, #5
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	4413      	add	r3, r2
 8013b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	69ba      	ldr	r2, [r7, #24]
 8013b24:	0151      	lsls	r1, r2, #5
 8013b26:	69fa      	ldr	r2, [r7, #28]
 8013b28:	440a      	add	r2, r1
 8013b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013b32:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	3301      	adds	r3, #1
 8013b38:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b40:	d81d      	bhi.n	8013b7e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	015a      	lsls	r2, r3, #5
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	4413      	add	r3, r2
 8013b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b58:	d0ec      	beq.n	8013b34 <USB_HC_Halt+0x19e>
 8013b5a:	e011      	b.n	8013b80 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	015a      	lsls	r2, r3, #5
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	4413      	add	r3, r2
 8013b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	69ba      	ldr	r2, [r7, #24]
 8013b6c:	0151      	lsls	r1, r2, #5
 8013b6e:	69fa      	ldr	r2, [r7, #28]
 8013b70:	440a      	add	r2, r1
 8013b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013b7a:	6013      	str	r3, [r2, #0]
 8013b7c:	e000      	b.n	8013b80 <USB_HC_Halt+0x1ea>
          break;
 8013b7e:	bf00      	nop
    }
  }

  return HAL_OK;
 8013b80:	2300      	movs	r3, #0
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	3724      	adds	r7, #36	; 0x24
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr
	...

08013b90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8013b90:	b480      	push	{r7}
 8013b92:	b087      	sub	sp, #28
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	460b      	mov	r3, r1
 8013b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8013ba0:	78fb      	ldrb	r3, [r7, #3]
 8013ba2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	04da      	lsls	r2, r3, #19
 8013bac:	4b15      	ldr	r3, [pc, #84]	; (8013c04 <USB_DoPing+0x74>)
 8013bae:	4013      	ands	r3, r2
 8013bb0:	693a      	ldr	r2, [r7, #16]
 8013bb2:	0151      	lsls	r1, r2, #5
 8013bb4:	697a      	ldr	r2, [r7, #20]
 8013bb6:	440a      	add	r2, r1
 8013bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013bc0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	015a      	lsls	r2, r3, #5
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	4413      	add	r3, r2
 8013bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013bd8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013be0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	015a      	lsls	r2, r3, #5
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	4413      	add	r3, r2
 8013bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013bee:	461a      	mov	r2, r3
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	371c      	adds	r7, #28
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c00:	4770      	bx	lr
 8013c02:	bf00      	nop
 8013c04:	1ff80000 	.word	0x1ff80000

08013c08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b088      	sub	sp, #32
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8013c10:	2300      	movs	r3, #0
 8013c12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7ff f8fe 	bl	8012e1e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013c22:	2110      	movs	r1, #16
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f7ff f957 	bl	8012ed8 <USB_FlushTxFifo>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d001      	beq.n	8013c34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8013c30:	2301      	movs	r3, #1
 8013c32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f7ff f983 	bl	8012f40 <USB_FlushRxFifo>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d001      	beq.n	8013c44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8013c40:	2301      	movs	r3, #1
 8013c42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8013c44:	2300      	movs	r3, #0
 8013c46:	61bb      	str	r3, [r7, #24]
 8013c48:	e01f      	b.n	8013c8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	015a      	lsls	r2, r3, #5
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	4413      	add	r3, r2
 8013c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013c68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013c70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	015a      	lsls	r2, r3, #5
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	4413      	add	r3, r2
 8013c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013c7e:	461a      	mov	r2, r3
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	3301      	adds	r3, #1
 8013c88:	61bb      	str	r3, [r7, #24]
 8013c8a:	69bb      	ldr	r3, [r7, #24]
 8013c8c:	2b0f      	cmp	r3, #15
 8013c8e:	d9dc      	bls.n	8013c4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8013c90:	2300      	movs	r3, #0
 8013c92:	61bb      	str	r3, [r7, #24]
 8013c94:	e034      	b.n	8013d00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	015a      	lsls	r2, r3, #5
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013cac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013cb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013cbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8013cbe:	69bb      	ldr	r3, [r7, #24]
 8013cc0:	015a      	lsls	r2, r3, #5
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013cca:	461a      	mov	r2, r3
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013cdc:	d80c      	bhi.n	8013cf8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	015a      	lsls	r2, r3, #5
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cf4:	d0ec      	beq.n	8013cd0 <USB_StopHost+0xc8>
 8013cf6:	e000      	b.n	8013cfa <USB_StopHost+0xf2>
        break;
 8013cf8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	61bb      	str	r3, [r7, #24]
 8013d00:	69bb      	ldr	r3, [r7, #24]
 8013d02:	2b0f      	cmp	r3, #15
 8013d04:	d9c7      	bls.n	8013c96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f04f 32ff 	mov.w	r2, #4294967295
 8013d1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7ff f86d 	bl	8012dfc <USB_EnableGlobalInt>

  return ret;
 8013d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3720      	adds	r7, #32
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013d30:	4904      	ldr	r1, [pc, #16]	; (8013d44 <MX_FATFS_Init+0x18>)
 8013d32:	4805      	ldr	r0, [pc, #20]	; (8013d48 <MX_FATFS_Init+0x1c>)
 8013d34:	f005 fc80 	bl	8019638 <FATFS_LinkDriver>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	4b03      	ldr	r3, [pc, #12]	; (8013d4c <MX_FATFS_Init+0x20>)
 8013d3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013d40:	bf00      	nop
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	20013044 	.word	0x20013044
 8013d48:	0801f3c4 	.word	0x0801f3c4
 8013d4c:	20013040 	.word	0x20013040

08013d50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013d50:	b480      	push	{r7}
 8013d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013d54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5e:	4770      	bx	lr

08013d60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013d66:	2300      	movs	r3, #0
 8013d68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013d6a:	f000 f896 	bl	8013e9a <BSP_SD_IsDetected>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d001      	beq.n	8013d78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013d74:	2302      	movs	r3, #2
 8013d76:	e012      	b.n	8013d9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013d78:	480b      	ldr	r0, [pc, #44]	; (8013da8 <BSP_SD_Init+0x48>)
 8013d7a:	f7fa fff6 	bl	800ed6a <HAL_SD_Init>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013d82:	79fb      	ldrb	r3, [r7, #7]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d109      	bne.n	8013d9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013d8c:	4806      	ldr	r0, [pc, #24]	; (8013da8 <BSP_SD_Init+0x48>)
 8013d8e:	f7fb fdbd 	bl	800f90c <HAL_SD_ConfigWideBusOperation>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d001      	beq.n	8013d9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013d98:	2301      	movs	r3, #1
 8013d9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013d9c:	79fb      	ldrb	r3, [r7, #7]
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3708      	adds	r7, #8
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}
 8013da6:	bf00      	nop
 8013da8:	20000a00 	.word	0x20000a00

08013dac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b086      	sub	sp, #24
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013db8:	2300      	movs	r3, #0
 8013dba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	68f9      	ldr	r1, [r7, #12]
 8013dc2:	4806      	ldr	r0, [pc, #24]	; (8013ddc <BSP_SD_ReadBlocks_DMA+0x30>)
 8013dc4:	f7fb f88a 	bl	800eedc <HAL_SD_ReadBlocks_DMA>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d001      	beq.n	8013dd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3718      	adds	r7, #24
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	20000a00 	.word	0x20000a00

08013de0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b086      	sub	sp, #24
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	60f8      	str	r0, [r7, #12]
 8013de8:	60b9      	str	r1, [r7, #8]
 8013dea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013dec:	2300      	movs	r3, #0
 8013dee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	68ba      	ldr	r2, [r7, #8]
 8013df4:	68f9      	ldr	r1, [r7, #12]
 8013df6:	4806      	ldr	r0, [pc, #24]	; (8013e10 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013df8:	f7fb f952 	bl	800f0a0 <HAL_SD_WriteBlocks_DMA>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d001      	beq.n	8013e06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013e02:	2301      	movs	r3, #1
 8013e04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3718      	adds	r7, #24
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	20000a00 	.word	0x20000a00

08013e14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013e18:	4805      	ldr	r0, [pc, #20]	; (8013e30 <BSP_SD_GetCardState+0x1c>)
 8013e1a:	f7fb fe11 	bl	800fa40 <HAL_SD_GetCardState>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	2b04      	cmp	r3, #4
 8013e22:	bf14      	ite	ne
 8013e24:	2301      	movne	r3, #1
 8013e26:	2300      	moveq	r3, #0
 8013e28:	b2db      	uxtb	r3, r3
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	20000a00 	.word	0x20000a00

08013e34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013e3c:	6879      	ldr	r1, [r7, #4]
 8013e3e:	4803      	ldr	r0, [pc, #12]	; (8013e4c <BSP_SD_GetCardInfo+0x18>)
 8013e40:	f7fb fd38 	bl	800f8b4 <HAL_SD_GetCardInfo>
}
 8013e44:	bf00      	nop
 8013e46:	3708      	adds	r7, #8
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	20000a00 	.word	0x20000a00

08013e50 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8013e58:	f000 f818 	bl	8013e8c <BSP_SD_AbortCallback>
}
 8013e5c:	bf00      	nop
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013e6c:	f000 f9c4 	bl	80141f8 <BSP_SD_WriteCpltCallback>
}
 8013e70:	bf00      	nop
 8013e72:	3708      	adds	r7, #8
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013e80:	f000 f9c8 	bl	8014214 <BSP_SD_ReadCpltCallback>
}
 8013e84:	bf00      	nop
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}

08013e8c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	af00      	add	r7, sp, #0

}
 8013e90:	bf00      	nop
 8013e92:	46bd      	mov	sp, r7
 8013e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e98:	4770      	bx	lr

08013e9a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013e9a:	b580      	push	{r7, lr}
 8013e9c:	b082      	sub	sp, #8
 8013e9e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013ea4:	f000 f80c 	bl	8013ec0 <BSP_PlatformIsDetected>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d101      	bne.n	8013eb2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013eb2:	79fb      	ldrb	r3, [r7, #7]
 8013eb4:	b2db      	uxtb	r3, r3
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3708      	adds	r7, #8
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
	...

08013ec0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013ece:	4806      	ldr	r0, [pc, #24]	; (8013ee8 <BSP_PlatformIsDetected+0x28>)
 8013ed0:	f7f5 fbb6 	bl	8009640 <HAL_GPIO_ReadPin>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d001      	beq.n	8013ede <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013eda:	2300      	movs	r3, #0
 8013edc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013ede:	79fb      	ldrb	r3, [r7, #7]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3708      	adds	r7, #8
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	40020800 	.word	0x40020800

08013eec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8013ef4:	f005 fc38 	bl	8019768 <osKernelSysTick>
 8013ef8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8013efa:	e006      	b.n	8013f0a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013efc:	f7ff ff8a 	bl	8013e14 <BSP_SD_GetCardState>
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d101      	bne.n	8013f0a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013f06:	2300      	movs	r3, #0
 8013f08:	e009      	b.n	8013f1e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8013f0a:	f005 fc2d 	bl	8019768 <osKernelSysTick>
 8013f0e:	4602      	mov	r2, r0
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d8f0      	bhi.n	8013efc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
	...

08013f28 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	4603      	mov	r3, r0
 8013f30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013f32:	4b0b      	ldr	r3, [pc, #44]	; (8013f60 <SD_CheckStatus+0x38>)
 8013f34:	2201      	movs	r2, #1
 8013f36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013f38:	f7ff ff6c 	bl	8013e14 <BSP_SD_GetCardState>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d107      	bne.n	8013f52 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013f42:	4b07      	ldr	r3, [pc, #28]	; (8013f60 <SD_CheckStatus+0x38>)
 8013f44:	781b      	ldrb	r3, [r3, #0]
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	f023 0301 	bic.w	r3, r3, #1
 8013f4c:	b2da      	uxtb	r2, r3
 8013f4e:	4b04      	ldr	r3, [pc, #16]	; (8013f60 <SD_CheckStatus+0x38>)
 8013f50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013f52:	4b03      	ldr	r3, [pc, #12]	; (8013f60 <SD_CheckStatus+0x38>)
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	b2db      	uxtb	r3, r3
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3708      	adds	r7, #8
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	20000059 	.word	0x20000059

08013f64 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b087      	sub	sp, #28
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013f6e:	4b20      	ldr	r3, [pc, #128]	; (8013ff0 <SD_initialize+0x8c>)
 8013f70:	2201      	movs	r2, #1
 8013f72:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8013f74:	f005 fbec 	bl	8019750 <osKernelRunning>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d030      	beq.n	8013fe0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8013f7e:	f7ff feef 	bl	8013d60 <BSP_SD_Init>
 8013f82:	4603      	mov	r3, r0
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d107      	bne.n	8013f98 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8013f88:	79fb      	ldrb	r3, [r7, #7]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff ffcc 	bl	8013f28 <SD_CheckStatus>
 8013f90:	4603      	mov	r3, r0
 8013f92:	461a      	mov	r2, r3
 8013f94:	4b16      	ldr	r3, [pc, #88]	; (8013ff0 <SD_initialize+0x8c>)
 8013f96:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8013f98:	4b15      	ldr	r3, [pc, #84]	; (8013ff0 <SD_initialize+0x8c>)
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d01e      	beq.n	8013fe0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8013fa2:	4b14      	ldr	r3, [pc, #80]	; (8013ff4 <SD_initialize+0x90>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d10e      	bne.n	8013fc8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8013faa:	4b13      	ldr	r3, [pc, #76]	; (8013ff8 <SD_initialize+0x94>)
 8013fac:	f107 0408 	add.w	r4, r7, #8
 8013fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8013fb6:	f107 0308 	add.w	r3, r7, #8
 8013fba:	2100      	movs	r1, #0
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f005 fd1a 	bl	80199f6 <osMessageCreate>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	4a0b      	ldr	r2, [pc, #44]	; (8013ff4 <SD_initialize+0x90>)
 8013fc6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8013fc8:	4b0a      	ldr	r3, [pc, #40]	; (8013ff4 <SD_initialize+0x90>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d107      	bne.n	8013fe0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8013fd0:	4b07      	ldr	r3, [pc, #28]	; (8013ff0 <SD_initialize+0x8c>)
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	f043 0301 	orr.w	r3, r3, #1
 8013fda:	b2da      	uxtb	r2, r3
 8013fdc:	4b04      	ldr	r3, [pc, #16]	; (8013ff0 <SD_initialize+0x8c>)
 8013fde:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8013fe0:	4b03      	ldr	r3, [pc, #12]	; (8013ff0 <SD_initialize+0x8c>)
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	b2db      	uxtb	r3, r3
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	371c      	adds	r7, #28
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd90      	pop	{r4, r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	20000059 	.word	0x20000059
 8013ff4:	200134ac 	.word	0x200134ac
 8013ff8:	0801d854 	.word	0x0801d854

08013ffc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	4603      	mov	r3, r0
 8014004:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014006:	79fb      	ldrb	r3, [r7, #7]
 8014008:	4618      	mov	r0, r3
 801400a:	f7ff ff8d 	bl	8013f28 <SD_CheckStatus>
 801400e:	4603      	mov	r3, r0
}
 8014010:	4618      	mov	r0, r3
 8014012:	3708      	adds	r7, #8
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b08a      	sub	sp, #40	; 0x28
 801401c:	af00      	add	r7, sp, #0
 801401e:	60b9      	str	r1, [r7, #8]
 8014020:	607a      	str	r2, [r7, #4]
 8014022:	603b      	str	r3, [r7, #0]
 8014024:	4603      	mov	r3, r0
 8014026:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8014028:	2301      	movs	r3, #1
 801402a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801402e:	f247 5030 	movw	r0, #30000	; 0x7530
 8014032:	f7ff ff5b 	bl	8013eec <SD_CheckStatusWithTimeout>
 8014036:	4603      	mov	r3, r0
 8014038:	2b00      	cmp	r3, #0
 801403a:	da02      	bge.n	8014042 <SD_read+0x2a>
  {
    return res;
 801403c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014040:	e032      	b.n	80140a8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	6879      	ldr	r1, [r7, #4]
 8014046:	68b8      	ldr	r0, [r7, #8]
 8014048:	f7ff feb0 	bl	8013dac <BSP_SD_ReadBlocks_DMA>
 801404c:	4603      	mov	r3, r0
 801404e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8014052:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014056:	2b00      	cmp	r3, #0
 8014058:	d124      	bne.n	80140a4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801405a:	4b15      	ldr	r3, [pc, #84]	; (80140b0 <SD_read+0x98>)
 801405c:	6819      	ldr	r1, [r3, #0]
 801405e:	f107 0314 	add.w	r3, r7, #20
 8014062:	f247 5230 	movw	r2, #30000	; 0x7530
 8014066:	4618      	mov	r0, r3
 8014068:	f005 fd2e 	bl	8019ac8 <osMessageGet>

    if (event.status == osEventMessage)
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	2b10      	cmp	r3, #16
 8014070:	d118      	bne.n	80140a4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8014072:	69bb      	ldr	r3, [r7, #24]
 8014074:	2b01      	cmp	r3, #1
 8014076:	d115      	bne.n	80140a4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8014078:	f005 fb76 	bl	8019768 <osKernelSysTick>
 801407c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801407e:	e008      	b.n	8014092 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014080:	f7ff fec8 	bl	8013e14 <BSP_SD_GetCardState>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d103      	bne.n	8014092 <SD_read+0x7a>
              {
                res = RES_OK;
 801408a:	2300      	movs	r3, #0
 801408c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8014090:	e008      	b.n	80140a4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8014092:	f005 fb69 	bl	8019768 <osKernelSysTick>
 8014096:	4602      	mov	r2, r0
 8014098:	6a3b      	ldr	r3, [r7, #32]
 801409a:	1ad3      	subs	r3, r2, r3
 801409c:	f247 522f 	movw	r2, #29999	; 0x752f
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d9ed      	bls.n	8014080 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80140a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3728      	adds	r7, #40	; 0x28
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	200134ac 	.word	0x200134ac

080140b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b08a      	sub	sp, #40	; 0x28
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	60b9      	str	r1, [r7, #8]
 80140bc:	607a      	str	r2, [r7, #4]
 80140be:	603b      	str	r3, [r7, #0]
 80140c0:	4603      	mov	r3, r0
 80140c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80140c4:	2301      	movs	r3, #1
 80140c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80140ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80140ce:	f7ff ff0d 	bl	8013eec <SD_CheckStatusWithTimeout>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	da02      	bge.n	80140de <SD_write+0x2a>
  {
    return res;
 80140d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140dc:	e02e      	b.n	801413c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80140de:	683a      	ldr	r2, [r7, #0]
 80140e0:	6879      	ldr	r1, [r7, #4]
 80140e2:	68b8      	ldr	r0, [r7, #8]
 80140e4:	f7ff fe7c 	bl	8013de0 <BSP_SD_WriteBlocks_DMA>
 80140e8:	4603      	mov	r3, r0
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d124      	bne.n	8014138 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80140ee:	4b15      	ldr	r3, [pc, #84]	; (8014144 <SD_write+0x90>)
 80140f0:	6819      	ldr	r1, [r3, #0]
 80140f2:	f107 0314 	add.w	r3, r7, #20
 80140f6:	f247 5230 	movw	r2, #30000	; 0x7530
 80140fa:	4618      	mov	r0, r3
 80140fc:	f005 fce4 	bl	8019ac8 <osMessageGet>

    if (event.status == osEventMessage)
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	2b10      	cmp	r3, #16
 8014104:	d118      	bne.n	8014138 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	2b02      	cmp	r3, #2
 801410a:	d115      	bne.n	8014138 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 801410c:	f005 fb2c 	bl	8019768 <osKernelSysTick>
 8014110:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8014112:	e008      	b.n	8014126 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014114:	f7ff fe7e 	bl	8013e14 <BSP_SD_GetCardState>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d103      	bne.n	8014126 <SD_write+0x72>
          {
            res = RES_OK;
 801411e:	2300      	movs	r3, #0
 8014120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014124:	e008      	b.n	8014138 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8014126:	f005 fb1f 	bl	8019768 <osKernelSysTick>
 801412a:	4602      	mov	r2, r0
 801412c:	6a3b      	ldr	r3, [r7, #32]
 801412e:	1ad3      	subs	r3, r2, r3
 8014130:	f247 522f 	movw	r2, #29999	; 0x752f
 8014134:	4293      	cmp	r3, r2
 8014136:	d9ed      	bls.n	8014114 <SD_write+0x60>
    }

  }
#endif

  return res;
 8014138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801413c:	4618      	mov	r0, r3
 801413e:	3728      	adds	r7, #40	; 0x28
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	200134ac 	.word	0x200134ac

08014148 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b08c      	sub	sp, #48	; 0x30
 801414c:	af00      	add	r7, sp, #0
 801414e:	4603      	mov	r3, r0
 8014150:	603a      	str	r2, [r7, #0]
 8014152:	71fb      	strb	r3, [r7, #7]
 8014154:	460b      	mov	r3, r1
 8014156:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014158:	2301      	movs	r3, #1
 801415a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801415e:	4b25      	ldr	r3, [pc, #148]	; (80141f4 <SD_ioctl+0xac>)
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	b2db      	uxtb	r3, r3
 8014164:	f003 0301 	and.w	r3, r3, #1
 8014168:	2b00      	cmp	r3, #0
 801416a:	d001      	beq.n	8014170 <SD_ioctl+0x28>
 801416c:	2303      	movs	r3, #3
 801416e:	e03c      	b.n	80141ea <SD_ioctl+0xa2>

  switch (cmd)
 8014170:	79bb      	ldrb	r3, [r7, #6]
 8014172:	2b03      	cmp	r3, #3
 8014174:	d834      	bhi.n	80141e0 <SD_ioctl+0x98>
 8014176:	a201      	add	r2, pc, #4	; (adr r2, 801417c <SD_ioctl+0x34>)
 8014178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801417c:	0801418d 	.word	0x0801418d
 8014180:	08014195 	.word	0x08014195
 8014184:	080141ad 	.word	0x080141ad
 8014188:	080141c7 	.word	0x080141c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801418c:	2300      	movs	r3, #0
 801418e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014192:	e028      	b.n	80141e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014194:	f107 030c 	add.w	r3, r7, #12
 8014198:	4618      	mov	r0, r3
 801419a:	f7ff fe4b 	bl	8013e34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80141a4:	2300      	movs	r3, #0
 80141a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141aa:	e01c      	b.n	80141e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80141ac:	f107 030c 	add.w	r3, r7, #12
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7ff fe3f 	bl	8013e34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80141b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80141be:	2300      	movs	r3, #0
 80141c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141c4:	e00f      	b.n	80141e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80141c6:	f107 030c 	add.w	r3, r7, #12
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7ff fe32 	bl	8013e34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80141d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d2:	0a5a      	lsrs	r2, r3, #9
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80141d8:	2300      	movs	r3, #0
 80141da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80141de:	e002      	b.n	80141e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80141e0:	2304      	movs	r3, #4
 80141e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80141e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3730      	adds	r7, #48	; 0x30
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	20000059 	.word	0x20000059

080141f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80141fc:	4b04      	ldr	r3, [pc, #16]	; (8014210 <BSP_SD_WriteCpltCallback+0x18>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	2200      	movs	r2, #0
 8014202:	2102      	movs	r1, #2
 8014204:	4618      	mov	r0, r3
 8014206:	f005 fc1f 	bl	8019a48 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801420a:	bf00      	nop
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	200134ac 	.word	0x200134ac

08014214 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8014218:	4b04      	ldr	r3, [pc, #16]	; (801422c <BSP_SD_ReadCpltCallback+0x18>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2200      	movs	r2, #0
 801421e:	2101      	movs	r1, #1
 8014220:	4618      	mov	r0, r3
 8014222:	f005 fc11 	bl	8019a48 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8014226:	bf00      	nop
 8014228:	bd80      	pop	{r7, pc}
 801422a:	bf00      	nop
 801422c:	200134ac 	.word	0x200134ac

08014230 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8014230:	b590      	push	{r4, r7, lr}
 8014232:	b089      	sub	sp, #36	; 0x24
 8014234:	af04      	add	r7, sp, #16
 8014236:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8014238:	2301      	movs	r3, #1
 801423a:	2202      	movs	r2, #2
 801423c:	2102      	movs	r1, #2
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f000 fcd7 	bl	8014bf2 <USBH_FindInterface>
 8014244:	4603      	mov	r3, r0
 8014246:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8014248:	7bfb      	ldrb	r3, [r7, #15]
 801424a:	2bff      	cmp	r3, #255	; 0xff
 801424c:	d002      	beq.n	8014254 <USBH_CDC_InterfaceInit+0x24>
 801424e:	7bfb      	ldrb	r3, [r7, #15]
 8014250:	2b01      	cmp	r3, #1
 8014252:	d901      	bls.n	8014258 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8014254:	2302      	movs	r3, #2
 8014256:	e13d      	b.n	80144d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8014258:	7bfb      	ldrb	r3, [r7, #15]
 801425a:	4619      	mov	r1, r3
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f000 fcac 	bl	8014bba <USBH_SelectInterface>
 8014262:	4603      	mov	r3, r0
 8014264:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8014266:	7bbb      	ldrb	r3, [r7, #14]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d001      	beq.n	8014270 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801426c:	2302      	movs	r3, #2
 801426e:	e131      	b.n	80144d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8014276:	2050      	movs	r0, #80	; 0x50
 8014278:	f008 fcfe 	bl	801cc78 <malloc>
 801427c:	4603      	mov	r3, r0
 801427e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014286:	69db      	ldr	r3, [r3, #28]
 8014288:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d101      	bne.n	8014294 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8014290:	2302      	movs	r3, #2
 8014292:	e11f      	b.n	80144d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8014294:	2250      	movs	r2, #80	; 0x50
 8014296:	2100      	movs	r1, #0
 8014298:	68b8      	ldr	r0, [r7, #8]
 801429a:	f008 fd0b 	bl	801ccb4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801429e:	7bfb      	ldrb	r3, [r7, #15]
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	211a      	movs	r1, #26
 80142a4:	fb01 f303 	mul.w	r3, r1, r3
 80142a8:	4413      	add	r3, r2
 80142aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	b25b      	sxtb	r3, r3
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	da15      	bge.n	80142e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80142b6:	7bfb      	ldrb	r3, [r7, #15]
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	211a      	movs	r1, #26
 80142bc:	fb01 f303 	mul.w	r3, r1, r3
 80142c0:	4413      	add	r3, r2
 80142c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80142c6:	781a      	ldrb	r2, [r3, #0]
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80142cc:	7bfb      	ldrb	r3, [r7, #15]
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	211a      	movs	r1, #26
 80142d2:	fb01 f303 	mul.w	r3, r1, r3
 80142d6:	4413      	add	r3, r2
 80142d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80142dc:	881a      	ldrh	r2, [r3, #0]
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	785b      	ldrb	r3, [r3, #1]
 80142e6:	4619      	mov	r1, r3
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f002 f982 	bl	80165f2 <USBH_AllocPipe>
 80142ee:	4603      	mov	r3, r0
 80142f0:	461a      	mov	r2, r3
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	7819      	ldrb	r1, [r3, #0]
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	7858      	ldrb	r0, [r3, #1]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801430a:	68ba      	ldr	r2, [r7, #8]
 801430c:	8952      	ldrh	r2, [r2, #10]
 801430e:	9202      	str	r2, [sp, #8]
 8014310:	2203      	movs	r2, #3
 8014312:	9201      	str	r2, [sp, #4]
 8014314:	9300      	str	r3, [sp, #0]
 8014316:	4623      	mov	r3, r4
 8014318:	4602      	mov	r2, r0
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f002 f93a 	bl	8016594 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	2200      	movs	r2, #0
 8014326:	4619      	mov	r1, r3
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f008 fbf7 	bl	801cb1c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801432e:	2300      	movs	r3, #0
 8014330:	2200      	movs	r2, #0
 8014332:	210a      	movs	r1, #10
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f000 fc5c 	bl	8014bf2 <USBH_FindInterface>
 801433a:	4603      	mov	r3, r0
 801433c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801433e:	7bfb      	ldrb	r3, [r7, #15]
 8014340:	2bff      	cmp	r3, #255	; 0xff
 8014342:	d002      	beq.n	801434a <USBH_CDC_InterfaceInit+0x11a>
 8014344:	7bfb      	ldrb	r3, [r7, #15]
 8014346:	2b01      	cmp	r3, #1
 8014348:	d901      	bls.n	801434e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801434a:	2302      	movs	r3, #2
 801434c:	e0c2      	b.n	80144d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801434e:	7bfb      	ldrb	r3, [r7, #15]
 8014350:	687a      	ldr	r2, [r7, #4]
 8014352:	211a      	movs	r1, #26
 8014354:	fb01 f303 	mul.w	r3, r1, r3
 8014358:	4413      	add	r3, r2
 801435a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	b25b      	sxtb	r3, r3
 8014362:	2b00      	cmp	r3, #0
 8014364:	da16      	bge.n	8014394 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014366:	7bfb      	ldrb	r3, [r7, #15]
 8014368:	687a      	ldr	r2, [r7, #4]
 801436a:	211a      	movs	r1, #26
 801436c:	fb01 f303 	mul.w	r3, r1, r3
 8014370:	4413      	add	r3, r2
 8014372:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014376:	781a      	ldrb	r2, [r3, #0]
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801437c:	7bfb      	ldrb	r3, [r7, #15]
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	211a      	movs	r1, #26
 8014382:	fb01 f303 	mul.w	r3, r1, r3
 8014386:	4413      	add	r3, r2
 8014388:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801438c:	881a      	ldrh	r2, [r3, #0]
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	835a      	strh	r2, [r3, #26]
 8014392:	e015      	b.n	80143c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014394:	7bfb      	ldrb	r3, [r7, #15]
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	211a      	movs	r1, #26
 801439a:	fb01 f303 	mul.w	r3, r1, r3
 801439e:	4413      	add	r3, r2
 80143a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80143a4:	781a      	ldrb	r2, [r3, #0]
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80143aa:	7bfb      	ldrb	r3, [r7, #15]
 80143ac:	687a      	ldr	r2, [r7, #4]
 80143ae:	211a      	movs	r1, #26
 80143b0:	fb01 f303 	mul.w	r3, r1, r3
 80143b4:	4413      	add	r3, r2
 80143b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80143ba:	881a      	ldrh	r2, [r3, #0]
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80143c0:	7bfb      	ldrb	r3, [r7, #15]
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	211a      	movs	r1, #26
 80143c6:	fb01 f303 	mul.w	r3, r1, r3
 80143ca:	4413      	add	r3, r2
 80143cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	b25b      	sxtb	r3, r3
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	da16      	bge.n	8014406 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80143d8:	7bfb      	ldrb	r3, [r7, #15]
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	211a      	movs	r1, #26
 80143de:	fb01 f303 	mul.w	r3, r1, r3
 80143e2:	4413      	add	r3, r2
 80143e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80143e8:	781a      	ldrb	r2, [r3, #0]
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80143ee:	7bfb      	ldrb	r3, [r7, #15]
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	211a      	movs	r1, #26
 80143f4:	fb01 f303 	mul.w	r3, r1, r3
 80143f8:	4413      	add	r3, r2
 80143fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80143fe:	881a      	ldrh	r2, [r3, #0]
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	835a      	strh	r2, [r3, #26]
 8014404:	e015      	b.n	8014432 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8014406:	7bfb      	ldrb	r3, [r7, #15]
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	211a      	movs	r1, #26
 801440c:	fb01 f303 	mul.w	r3, r1, r3
 8014410:	4413      	add	r3, r2
 8014412:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014416:	781a      	ldrb	r2, [r3, #0]
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801441c:	7bfb      	ldrb	r3, [r7, #15]
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	211a      	movs	r1, #26
 8014422:	fb01 f303 	mul.w	r3, r1, r3
 8014426:	4413      	add	r3, r2
 8014428:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801442c:	881a      	ldrh	r2, [r3, #0]
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	7b9b      	ldrb	r3, [r3, #14]
 8014436:	4619      	mov	r1, r3
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f002 f8da 	bl	80165f2 <USBH_AllocPipe>
 801443e:	4603      	mov	r3, r0
 8014440:	461a      	mov	r2, r3
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	7bdb      	ldrb	r3, [r3, #15]
 801444a:	4619      	mov	r1, r3
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f002 f8d0 	bl	80165f2 <USBH_AllocPipe>
 8014452:	4603      	mov	r3, r0
 8014454:	461a      	mov	r2, r3
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	7b59      	ldrb	r1, [r3, #13]
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	7b98      	ldrb	r0, [r3, #14]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801446e:	68ba      	ldr	r2, [r7, #8]
 8014470:	8b12      	ldrh	r2, [r2, #24]
 8014472:	9202      	str	r2, [sp, #8]
 8014474:	2202      	movs	r2, #2
 8014476:	9201      	str	r2, [sp, #4]
 8014478:	9300      	str	r3, [sp, #0]
 801447a:	4623      	mov	r3, r4
 801447c:	4602      	mov	r2, r0
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f002 f888 	bl	8016594 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	7b19      	ldrb	r1, [r3, #12]
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	7bd8      	ldrb	r0, [r3, #15]
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014498:	68ba      	ldr	r2, [r7, #8]
 801449a:	8b52      	ldrh	r2, [r2, #26]
 801449c:	9202      	str	r2, [sp, #8]
 801449e:	2202      	movs	r2, #2
 80144a0:	9201      	str	r2, [sp, #4]
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	4623      	mov	r3, r4
 80144a6:	4602      	mov	r2, r0
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f002 f873 	bl	8016594 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	2200      	movs	r2, #0
 80144b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	7b5b      	ldrb	r3, [r3, #13]
 80144ba:	2200      	movs	r2, #0
 80144bc:	4619      	mov	r1, r3
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f008 fb2c 	bl	801cb1c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	7b1b      	ldrb	r3, [r3, #12]
 80144c8:	2200      	movs	r2, #0
 80144ca:	4619      	mov	r1, r3
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f008 fb25 	bl	801cb1c <USBH_LL_SetToggle>

  return USBH_OK;
 80144d2:	2300      	movs	r3, #0
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3714      	adds	r7, #20
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd90      	pop	{r4, r7, pc}

080144dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80144ea:	69db      	ldr	r3, [r3, #28]
 80144ec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d00e      	beq.n	8014514 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	4619      	mov	r1, r3
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f002 f868 	bl	80165d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	4619      	mov	r1, r3
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f002 f893 	bl	8016634 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	2200      	movs	r2, #0
 8014512:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	7b1b      	ldrb	r3, [r3, #12]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d00e      	beq.n	801453a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	7b1b      	ldrb	r3, [r3, #12]
 8014520:	4619      	mov	r1, r3
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f002 f855 	bl	80165d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	7b1b      	ldrb	r3, [r3, #12]
 801452c:	4619      	mov	r1, r3
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f002 f880 	bl	8016634 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2200      	movs	r2, #0
 8014538:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	7b5b      	ldrb	r3, [r3, #13]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00e      	beq.n	8014560 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	7b5b      	ldrb	r3, [r3, #13]
 8014546:	4619      	mov	r1, r3
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f002 f842 	bl	80165d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	7b5b      	ldrb	r3, [r3, #13]
 8014552:	4619      	mov	r1, r3
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f002 f86d 	bl	8016634 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2200      	movs	r2, #0
 801455e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014566:	69db      	ldr	r3, [r3, #28]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00b      	beq.n	8014584 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014572:	69db      	ldr	r3, [r3, #28]
 8014574:	4618      	mov	r0, r3
 8014576:	f008 fb87 	bl	801cc88 <free>
    phost->pActiveClass->pData = 0U;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014580:	2200      	movs	r2, #0
 8014582:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8014584:	2300      	movs	r3, #0
}
 8014586:	4618      	mov	r0, r3
 8014588:	3710      	adds	r7, #16
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}

0801458e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 801458e:	b580      	push	{r7, lr}
 8014590:	b084      	sub	sp, #16
 8014592:	af00      	add	r7, sp, #0
 8014594:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801459c:	69db      	ldr	r3, [r3, #28]
 801459e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	3340      	adds	r3, #64	; 0x40
 80145a4:	4619      	mov	r1, r3
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f000 f8b1 	bl	801470e <GetLineCoding>
 80145ac:	4603      	mov	r3, r0
 80145ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80145b0:	7afb      	ldrb	r3, [r7, #11]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d105      	bne.n	80145c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80145bc:	2102      	movs	r1, #2
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80145c2:	7afb      	ldrb	r3, [r7, #11]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3710      	adds	r7, #16
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80145d4:	2301      	movs	r3, #1
 80145d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80145d8:	2300      	movs	r3, #0
 80145da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80145e2:	69db      	ldr	r3, [r3, #28]
 80145e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80145ec:	2b04      	cmp	r3, #4
 80145ee:	d877      	bhi.n	80146e0 <USBH_CDC_Process+0x114>
 80145f0:	a201      	add	r2, pc, #4	; (adr r2, 80145f8 <USBH_CDC_Process+0x2c>)
 80145f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f6:	bf00      	nop
 80145f8:	0801460d 	.word	0x0801460d
 80145fc:	08014613 	.word	0x08014613
 8014600:	08014643 	.word	0x08014643
 8014604:	080146b7 	.word	0x080146b7
 8014608:	080146c5 	.word	0x080146c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 801460c:	2300      	movs	r3, #0
 801460e:	73fb      	strb	r3, [r7, #15]
      break;
 8014610:	e06d      	b.n	80146ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014616:	4619      	mov	r1, r3
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f000 f897 	bl	801474c <SetLineCoding>
 801461e:	4603      	mov	r3, r0
 8014620:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014622:	7bbb      	ldrb	r3, [r7, #14]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d104      	bne.n	8014632 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	2202      	movs	r2, #2
 801462c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014630:	e058      	b.n	80146e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8014632:	7bbb      	ldrb	r3, [r7, #14]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d055      	beq.n	80146e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	2204      	movs	r2, #4
 801463c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8014640:	e050      	b.n	80146e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	3340      	adds	r3, #64	; 0x40
 8014646:	4619      	mov	r1, r3
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 f860 	bl	801470e <GetLineCoding>
 801464e:	4603      	mov	r3, r0
 8014650:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014652:	7bbb      	ldrb	r3, [r7, #14]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d126      	bne.n	80146a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	2200      	movs	r2, #0
 801465c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801466a:	791b      	ldrb	r3, [r3, #4]
 801466c:	429a      	cmp	r2, r3
 801466e:	d13b      	bne.n	80146e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801467a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 801467c:	429a      	cmp	r2, r3
 801467e:	d133      	bne.n	80146e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801468a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801468c:	429a      	cmp	r2, r3
 801468e:	d12b      	bne.n	80146e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014698:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801469a:	429a      	cmp	r2, r3
 801469c:	d124      	bne.n	80146e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 f982 	bl	80149a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80146a4:	e020      	b.n	80146e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80146a6:	7bbb      	ldrb	r3, [r7, #14]
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d01d      	beq.n	80146e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	2204      	movs	r2, #4
 80146b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80146b4:	e018      	b.n	80146e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 f867 	bl	801478a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f000 f8f6 	bl	80148ae <CDC_ProcessReception>
      break;
 80146c2:	e014      	b.n	80146ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80146c4:	2100      	movs	r1, #0
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f001 f97b 	bl	80159c2 <USBH_ClrFeature>
 80146cc:	4603      	mov	r3, r0
 80146ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80146d0:	7bbb      	ldrb	r3, [r7, #14]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10a      	bne.n	80146ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	2200      	movs	r2, #0
 80146da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80146de:	e005      	b.n	80146ec <USBH_CDC_Process+0x120>

    default:
      break;
 80146e0:	bf00      	nop
 80146e2:	e004      	b.n	80146ee <USBH_CDC_Process+0x122>
      break;
 80146e4:	bf00      	nop
 80146e6:	e002      	b.n	80146ee <USBH_CDC_Process+0x122>
      break;
 80146e8:	bf00      	nop
 80146ea:	e000      	b.n	80146ee <USBH_CDC_Process+0x122>
      break;
 80146ec:	bf00      	nop

  }

  return status;
 80146ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3710      	adds	r7, #16
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8014700:	2300      	movs	r3, #0
}
 8014702:	4618      	mov	r0, r3
 8014704:	370c      	adds	r7, #12
 8014706:	46bd      	mov	sp, r7
 8014708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470c:	4770      	bx	lr

0801470e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801470e:	b580      	push	{r7, lr}
 8014710:	b082      	sub	sp, #8
 8014712:	af00      	add	r7, sp, #0
 8014714:	6078      	str	r0, [r7, #4]
 8014716:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	22a1      	movs	r2, #161	; 0xa1
 801471c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2221      	movs	r2, #33	; 0x21
 8014722:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2200      	movs	r2, #0
 801472e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2207      	movs	r2, #7
 8014734:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	2207      	movs	r2, #7
 801473a:	4619      	mov	r1, r3
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f001 fbe7 	bl	8015f10 <USBH_CtlReq>
 8014742:	4603      	mov	r3, r0
}
 8014744:	4618      	mov	r0, r3
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2221      	movs	r2, #33	; 0x21
 801475a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2220      	movs	r2, #32
 8014760:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2200      	movs	r2, #0
 8014766:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2200      	movs	r2, #0
 801476c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2207      	movs	r2, #7
 8014772:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	2207      	movs	r2, #7
 8014778:	4619      	mov	r1, r3
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f001 fbc8 	bl	8015f10 <USBH_CtlReq>
 8014780:	4603      	mov	r3, r0
}
 8014782:	4618      	mov	r0, r3
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801478a:	b580      	push	{r7, lr}
 801478c:	b086      	sub	sp, #24
 801478e:	af02      	add	r7, sp, #8
 8014790:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014798:	69db      	ldr	r3, [r3, #28]
 801479a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801479c:	2300      	movs	r3, #0
 801479e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d002      	beq.n	80147b0 <CDC_ProcessTransmission+0x26>
 80147aa:	2b02      	cmp	r3, #2
 80147ac:	d023      	beq.n	80147f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80147ae:	e07a      	b.n	80148a6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147b4:	68fa      	ldr	r2, [r7, #12]
 80147b6:	8b12      	ldrh	r2, [r2, #24]
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d90b      	bls.n	80147d4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	69d9      	ldr	r1, [r3, #28]
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	8b1a      	ldrh	r2, [r3, #24]
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	7b5b      	ldrb	r3, [r3, #13]
 80147c8:	2001      	movs	r0, #1
 80147ca:	9000      	str	r0, [sp, #0]
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f001 fe9e 	bl	801650e <USBH_BulkSendData>
 80147d2:	e00b      	b.n	80147ec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80147dc:	b29a      	uxth	r2, r3
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	7b5b      	ldrb	r3, [r3, #13]
 80147e2:	2001      	movs	r0, #1
 80147e4:	9000      	str	r0, [sp, #0]
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f001 fe91 	bl	801650e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	2202      	movs	r2, #2
 80147f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80147f4:	e057      	b.n	80148a6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	7b5b      	ldrb	r3, [r3, #13]
 80147fa:	4619      	mov	r1, r3
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f008 f963 	bl	801cac8 <USBH_LL_GetURBState>
 8014802:	4603      	mov	r3, r0
 8014804:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8014806:	7afb      	ldrb	r3, [r7, #11]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d136      	bne.n	801487a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014810:	68fa      	ldr	r2, [r7, #12]
 8014812:	8b12      	ldrh	r2, [r2, #24]
 8014814:	4293      	cmp	r3, r2
 8014816:	d90e      	bls.n	8014836 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801481c:	68fa      	ldr	r2, [r7, #12]
 801481e:	8b12      	ldrh	r2, [r2, #24]
 8014820:	1a9a      	subs	r2, r3, r2
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	69db      	ldr	r3, [r3, #28]
 801482a:	68fa      	ldr	r2, [r7, #12]
 801482c:	8b12      	ldrh	r2, [r2, #24]
 801482e:	441a      	add	r2, r3
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	61da      	str	r2, [r3, #28]
 8014834:	e002      	b.n	801483c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	2200      	movs	r2, #0
 801483a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014840:	2b00      	cmp	r3, #0
 8014842:	d004      	beq.n	801484e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2201      	movs	r2, #1
 8014848:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801484c:	e006      	b.n	801485c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2200      	movs	r2, #0
 8014852:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 f892 	bl	8014980 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2204      	movs	r2, #4
 8014860:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014870:	2200      	movs	r2, #0
 8014872:	4619      	mov	r1, r3
 8014874:	f005 f8e8 	bl	8019a48 <osMessagePut>
      break;
 8014878:	e014      	b.n	80148a4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 801487a:	7afb      	ldrb	r3, [r7, #11]
 801487c:	2b02      	cmp	r3, #2
 801487e:	d111      	bne.n	80148a4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	2201      	movs	r2, #1
 8014884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2204      	movs	r2, #4
 801488c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801489c:	2200      	movs	r2, #0
 801489e:	4619      	mov	r1, r3
 80148a0:	f005 f8d2 	bl	8019a48 <osMessagePut>
      break;
 80148a4:	bf00      	nop
  }
}
 80148a6:	bf00      	nop
 80148a8:	3710      	adds	r7, #16
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}

080148ae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80148ae:	b580      	push	{r7, lr}
 80148b0:	b086      	sub	sp, #24
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80148bc:	69db      	ldr	r3, [r3, #28]
 80148be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80148c0:	2300      	movs	r3, #0
 80148c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80148ca:	2b03      	cmp	r3, #3
 80148cc:	d002      	beq.n	80148d4 <CDC_ProcessReception+0x26>
 80148ce:	2b04      	cmp	r3, #4
 80148d0:	d00e      	beq.n	80148f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80148d2:	e051      	b.n	8014978 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	6a19      	ldr	r1, [r3, #32]
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	8b5a      	ldrh	r2, [r3, #26]
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	7b1b      	ldrb	r3, [r3, #12]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f001 fe39 	bl	8016558 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	2204      	movs	r2, #4
 80148ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80148ee:	e043      	b.n	8014978 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80148f0:	697b      	ldr	r3, [r7, #20]
 80148f2:	7b1b      	ldrb	r3, [r3, #12]
 80148f4:	4619      	mov	r1, r3
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f008 f8e6 	bl	801cac8 <USBH_LL_GetURBState>
 80148fc:	4603      	mov	r3, r0
 80148fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8014900:	7cfb      	ldrb	r3, [r7, #19]
 8014902:	2b01      	cmp	r3, #1
 8014904:	d137      	bne.n	8014976 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	7b1b      	ldrb	r3, [r3, #12]
 801490a:	4619      	mov	r1, r3
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f008 f849 	bl	801c9a4 <USBH_LL_GetLastXferSize>
 8014912:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	429a      	cmp	r2, r3
 801491c:	d016      	beq.n	801494c <CDC_ProcessReception+0x9e>
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	8b5b      	ldrh	r3, [r3, #26]
 8014922:	461a      	mov	r2, r3
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	4293      	cmp	r3, r2
 8014928:	d910      	bls.n	801494c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801492a:	697b      	ldr	r3, [r7, #20]
 801492c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	1ad2      	subs	r2, r2, r3
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	6a1a      	ldr	r2, [r3, #32]
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	441a      	add	r2, r3
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	2203      	movs	r2, #3
 8014946:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801494a:	e006      	b.n	801495a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	2200      	movs	r2, #0
 8014950:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f000 f81d 	bl	8014994 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2204      	movs	r2, #4
 801495e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801496e:	2200      	movs	r2, #0
 8014970:	4619      	mov	r1, r3
 8014972:	f005 f869 	bl	8019a48 <osMessagePut>
      break;
 8014976:	bf00      	nop
  }
}
 8014978:	bf00      	nop
 801497a:	3718      	adds	r7, #24
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8014980:	b480      	push	{r7}
 8014982:	b083      	sub	sp, #12
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8014988:	bf00      	nop
 801498a:	370c      	adds	r7, #12
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr

08014994 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8014994:	b480      	push	{r7}
 8014996:	b083      	sub	sp, #12
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801499c:	bf00      	nop
 801499e:	370c      	adds	r7, #12
 80149a0:	46bd      	mov	sp, r7
 80149a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a6:	4770      	bx	lr

080149a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80149b0:	bf00      	nop
 80149b2:	370c      	adds	r7, #12
 80149b4:	46bd      	mov	sp, r7
 80149b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ba:	4770      	bx	lr

080149bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80149bc:	b5b0      	push	{r4, r5, r7, lr}
 80149be:	b090      	sub	sp, #64	; 0x40
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	4613      	mov	r3, r2
 80149c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d101      	bne.n	80149d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80149d0:	2302      	movs	r3, #2
 80149d2:	e04d      	b.n	8014a70 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	79fa      	ldrb	r2, [r7, #7]
 80149d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2200      	movs	r2, #0
 80149e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	2200      	movs	r2, #0
 80149e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f000 f847 	bl	8014a80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2200      	movs	r2, #0
 80149f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2200      	movs	r2, #0
 80149fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	2200      	movs	r2, #0
 8014a06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d003      	beq.n	8014a20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	68ba      	ldr	r2, [r7, #8]
 8014a1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8014a20:	4b15      	ldr	r3, [pc, #84]	; (8014a78 <USBH_Init+0xbc>)
 8014a22:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8014a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8014a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014a30:	2100      	movs	r1, #0
 8014a32:	4618      	mov	r0, r3
 8014a34:	f004 ffdf 	bl	80199f6 <osMessageCreate>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8014a40:	4b0e      	ldr	r3, [pc, #56]	; (8014a7c <USBH_Init+0xc0>)
 8014a42:	f107 0414 	add.w	r4, r7, #20
 8014a46:	461d      	mov	r5, r3
 8014a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8014a54:	f107 0314 	add.w	r3, r7, #20
 8014a58:	68f9      	ldr	r1, [r7, #12]
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f004 fe94 	bl	8019788 <osThreadCreate>
 8014a60:	4602      	mov	r2, r0
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f007 fee7 	bl	801c83c <USBH_LL_Init>

  return USBH_OK;
 8014a6e:	2300      	movs	r3, #0
}
 8014a70:	4618      	mov	r0, r3
 8014a72:	3740      	adds	r7, #64	; 0x40
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bdb0      	pop	{r4, r5, r7, pc}
 8014a78:	0801d874 	.word	0x0801d874
 8014a7c:	0801d884 	.word	0x0801d884

08014a80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	60fb      	str	r3, [r7, #12]
 8014a90:	e009      	b.n	8014aa6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8014a92:	687a      	ldr	r2, [r7, #4]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	33e0      	adds	r3, #224	; 0xe0
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	4413      	add	r3, r2
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	60fb      	str	r3, [r7, #12]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2b0f      	cmp	r3, #15
 8014aaa:	d9f2      	bls.n	8014a92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8014aac:	2300      	movs	r3, #0
 8014aae:	60fb      	str	r3, [r7, #12]
 8014ab0:	e009      	b.n	8014ac6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	4413      	add	r3, r2
 8014ab8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014abc:	2200      	movs	r2, #0
 8014abe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	3301      	adds	r3, #1
 8014ac4:	60fb      	str	r3, [r7, #12]
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014acc:	d3f1      	bcc.n	8014ab2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2201      	movs	r2, #1
 8014ade:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2201      	movs	r2, #1
 8014aec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2240      	movs	r2, #64	; 0x40
 8014af2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2200      	movs	r2, #0
 8014af8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2200      	movs	r2, #0
 8014afe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2201      	movs	r2, #1
 8014b06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2200      	movs	r2, #0
 8014b16:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	331c      	adds	r3, #28
 8014b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014b22:	2100      	movs	r1, #0
 8014b24:	4618      	mov	r0, r3
 8014b26:	f008 f8c5 	bl	801ccb4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b34:	2100      	movs	r1, #0
 8014b36:	4618      	mov	r0, r3
 8014b38:	f008 f8bc 	bl	801ccb4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f203 3326 	addw	r3, r3, #806	; 0x326
 8014b42:	2212      	movs	r2, #18
 8014b44:	2100      	movs	r1, #0
 8014b46:	4618      	mov	r0, r3
 8014b48:	f008 f8b4 	bl	801ccb4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014b52:	223e      	movs	r2, #62	; 0x3e
 8014b54:	2100      	movs	r1, #0
 8014b56:	4618      	mov	r0, r3
 8014b58:	f008 f8ac 	bl	801ccb4 <memset>

  return USBH_OK;
 8014b5c:	2300      	movs	r3, #0
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3710      	adds	r7, #16
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}

08014b66 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8014b66:	b480      	push	{r7}
 8014b68:	b085      	sub	sp, #20
 8014b6a:	af00      	add	r7, sp, #0
 8014b6c:	6078      	str	r0, [r7, #4]
 8014b6e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8014b70:	2300      	movs	r3, #0
 8014b72:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d016      	beq.n	8014ba8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d10e      	bne.n	8014ba2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014b8a:	1c59      	adds	r1, r3, #1
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	33de      	adds	r3, #222	; 0xde
 8014b96:	6839      	ldr	r1, [r7, #0]
 8014b98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	73fb      	strb	r3, [r7, #15]
 8014ba0:	e004      	b.n	8014bac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8014ba2:	2302      	movs	r3, #2
 8014ba4:	73fb      	strb	r3, [r7, #15]
 8014ba6:	e001      	b.n	8014bac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8014ba8:	2302      	movs	r3, #2
 8014baa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3714      	adds	r7, #20
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr

08014bba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8014bba:	b480      	push	{r7}
 8014bbc:	b085      	sub	sp, #20
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8014bd0:	78fa      	ldrb	r2, [r7, #3]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d204      	bcs.n	8014be0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	78fa      	ldrb	r2, [r7, #3]
 8014bda:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8014bde:	e001      	b.n	8014be4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8014be0:	2302      	movs	r3, #2
 8014be2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3714      	adds	r7, #20
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr

08014bf2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8014bf2:	b480      	push	{r7}
 8014bf4:	b087      	sub	sp, #28
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
 8014bfa:	4608      	mov	r0, r1
 8014bfc:	4611      	mov	r1, r2
 8014bfe:	461a      	mov	r2, r3
 8014c00:	4603      	mov	r3, r0
 8014c02:	70fb      	strb	r3, [r7, #3]
 8014c04:	460b      	mov	r3, r1
 8014c06:	70bb      	strb	r3, [r7, #2]
 8014c08:	4613      	mov	r3, r2
 8014c0a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8014c10:	2300      	movs	r3, #0
 8014c12:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014c1a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014c1c:	e025      	b.n	8014c6a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8014c1e:	7dfb      	ldrb	r3, [r7, #23]
 8014c20:	221a      	movs	r2, #26
 8014c22:	fb02 f303 	mul.w	r3, r2, r3
 8014c26:	3308      	adds	r3, #8
 8014c28:	68fa      	ldr	r2, [r7, #12]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	3302      	adds	r3, #2
 8014c2e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	795b      	ldrb	r3, [r3, #5]
 8014c34:	78fa      	ldrb	r2, [r7, #3]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d002      	beq.n	8014c40 <USBH_FindInterface+0x4e>
 8014c3a:	78fb      	ldrb	r3, [r7, #3]
 8014c3c:	2bff      	cmp	r3, #255	; 0xff
 8014c3e:	d111      	bne.n	8014c64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8014c44:	78ba      	ldrb	r2, [r7, #2]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d002      	beq.n	8014c50 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8014c4a:	78bb      	ldrb	r3, [r7, #2]
 8014c4c:	2bff      	cmp	r3, #255	; 0xff
 8014c4e:	d109      	bne.n	8014c64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8014c54:	787a      	ldrb	r2, [r7, #1]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d002      	beq.n	8014c60 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8014c5a:	787b      	ldrb	r3, [r7, #1]
 8014c5c:	2bff      	cmp	r3, #255	; 0xff
 8014c5e:	d101      	bne.n	8014c64 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8014c60:	7dfb      	ldrb	r3, [r7, #23]
 8014c62:	e006      	b.n	8014c72 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8014c64:	7dfb      	ldrb	r3, [r7, #23]
 8014c66:	3301      	adds	r3, #1
 8014c68:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014c6a:	7dfb      	ldrb	r3, [r7, #23]
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d9d6      	bls.n	8014c1e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8014c70:	23ff      	movs	r3, #255	; 0xff
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	371c      	adds	r7, #28
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b082      	sub	sp, #8
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f007 fe14 	bl	801c8b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8014c8c:	2101      	movs	r1, #1
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f007 ff2d 	bl	801caee <USBH_LL_DriverVBUS>

  return USBH_OK;
 8014c94:	2300      	movs	r3, #0
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
	...

08014ca0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b088      	sub	sp, #32
 8014ca4:	af04      	add	r7, sp, #16
 8014ca6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8014ca8:	2302      	movs	r3, #2
 8014caa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8014cac:	2300      	movs	r3, #0
 8014cae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8014cb6:	b2db      	uxtb	r3, r3
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	d102      	bne.n	8014cc2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2203      	movs	r2, #3
 8014cc0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	2b0b      	cmp	r3, #11
 8014cca:	f200 8247 	bhi.w	801515c <USBH_Process+0x4bc>
 8014cce:	a201      	add	r2, pc, #4	; (adr r2, 8014cd4 <USBH_Process+0x34>)
 8014cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cd4:	08014d05 	.word	0x08014d05
 8014cd8:	08014d53 	.word	0x08014d53
 8014cdc:	08014dd7 	.word	0x08014dd7
 8014ce0:	080150db 	.word	0x080150db
 8014ce4:	0801515d 	.word	0x0801515d
 8014ce8:	08014e97 	.word	0x08014e97
 8014cec:	08015065 	.word	0x08015065
 8014cf0:	08014ee9 	.word	0x08014ee9
 8014cf4:	08014f25 	.word	0x08014f25
 8014cf8:	08014f5f 	.word	0x08014f5f
 8014cfc:	08014fbd 	.word	0x08014fbd
 8014d00:	080150c3 	.word	0x080150c3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014d0a:	b2db      	uxtb	r3, r3
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f000 8227 	beq.w	8015160 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	2201      	movs	r2, #1
 8014d16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8014d18:	20c8      	movs	r0, #200	; 0xc8
 8014d1a:	f007 ff2f 	bl	801cb7c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f007 fe25 	bl	801c96e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2201      	movs	r2, #1
 8014d38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d48:	2200      	movs	r2, #0
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	f004 fe7c 	bl	8019a48 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8014d50:	e206      	b.n	8015160 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d107      	bne.n	8014d6c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2202      	movs	r2, #2
 8014d68:	701a      	strb	r2, [r3, #0]
 8014d6a:	e025      	b.n	8014db8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014d72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014d76:	d914      	bls.n	8014da2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014d7e:	3301      	adds	r3, #1
 8014d80:	b2da      	uxtb	r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014d8e:	2b03      	cmp	r3, #3
 8014d90:	d903      	bls.n	8014d9a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	220d      	movs	r2, #13
 8014d96:	701a      	strb	r2, [r3, #0]
 8014d98:	e00e      	b.n	8014db8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	701a      	strb	r2, [r3, #0]
 8014da0:	e00a      	b.n	8014db8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8014da8:	f103 020a 	add.w	r2, r3, #10
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8014db2:	200a      	movs	r0, #10
 8014db4:	f007 fee2 	bl	801cb7c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2201      	movs	r2, #1
 8014dbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014dcc:	2200      	movs	r2, #0
 8014dce:	4619      	mov	r1, r3
 8014dd0:	f004 fe3a 	bl	8019a48 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014dd4:	e1cb      	b.n	801516e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d005      	beq.n	8014dec <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014de6:	2104      	movs	r1, #4
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8014dec:	2064      	movs	r0, #100	; 0x64
 8014dee:	f007 fec5 	bl	801cb7c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f007 fd94 	bl	801c920 <USBH_LL_GetSpeed>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2205      	movs	r2, #5
 8014e06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8014e08:	2100      	movs	r1, #0
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f001 fbf1 	bl	80165f2 <USBH_AllocPipe>
 8014e10:	4603      	mov	r3, r0
 8014e12:	461a      	mov	r2, r3
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8014e18:	2180      	movs	r1, #128	; 0x80
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f001 fbe9 	bl	80165f2 <USBH_AllocPipe>
 8014e20:	4603      	mov	r3, r0
 8014e22:	461a      	mov	r2, r3
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	7919      	ldrb	r1, [r3, #4]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014e3c:	b292      	uxth	r2, r2
 8014e3e:	9202      	str	r2, [sp, #8]
 8014e40:	2200      	movs	r2, #0
 8014e42:	9201      	str	r2, [sp, #4]
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	4603      	mov	r3, r0
 8014e48:	2280      	movs	r2, #128	; 0x80
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f001 fba2 	bl	8016594 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	7959      	ldrb	r1, [r3, #5]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014e64:	b292      	uxth	r2, r2
 8014e66:	9202      	str	r2, [sp, #8]
 8014e68:	2200      	movs	r2, #0
 8014e6a:	9201      	str	r2, [sp, #4]
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2200      	movs	r2, #0
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f001 fb8e 	bl	8016594 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	4619      	mov	r1, r3
 8014e90:	f004 fdda 	bl	8019a48 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014e94:	e16b      	b.n	801516e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f000 f96e 	bl	8015178 <USBH_HandleEnum>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8014ea0:	7bbb      	ldrb	r3, [r7, #14]
 8014ea2:	b2db      	uxtb	r3, r3
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	f040 815d 	bne.w	8015164 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2200      	movs	r2, #0
 8014eae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	d103      	bne.n	8014ec4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2208      	movs	r2, #8
 8014ec0:	701a      	strb	r2, [r3, #0]
 8014ec2:	e002      	b.n	8014eca <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2207      	movs	r2, #7
 8014ec8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2205      	movs	r2, #5
 8014ece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ede:	2200      	movs	r2, #0
 8014ee0:	4619      	mov	r1, r3
 8014ee2:	f004 fdb1 	bl	8019a48 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8014ee6:	e13d      	b.n	8015164 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	f000 813a 	beq.w	8015168 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014efa:	2101      	movs	r1, #1
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2208      	movs	r2, #8
 8014f04:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2205      	movs	r2, #5
 8014f0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	f004 fd93 	bl	8019a48 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8014f22:	e121      	b.n	8015168 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 fd00 	bl	8015934 <USBH_SetCfg>
 8014f34:	4603      	mov	r3, r0
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d102      	bne.n	8014f40 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2209      	movs	r2, #9
 8014f3e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2201      	movs	r2, #1
 8014f44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f54:	2200      	movs	r2, #0
 8014f56:	4619      	mov	r1, r3
 8014f58:	f004 fd76 	bl	8019a48 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014f5c:	e107      	b.n	801516e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8014f64:	f003 0320 	and.w	r3, r3, #32
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d015      	beq.n	8014f98 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8014f6c:	2101      	movs	r1, #1
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f000 fd03 	bl	801597a <USBH_SetFeature>
 8014f74:	4603      	mov	r3, r0
 8014f76:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8014f78:	7bbb      	ldrb	r3, [r7, #14]
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d103      	bne.n	8014f88 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	220a      	movs	r2, #10
 8014f84:	701a      	strb	r2, [r3, #0]
 8014f86:	e00a      	b.n	8014f9e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8014f88:	7bbb      	ldrb	r3, [r7, #14]
 8014f8a:	b2db      	uxtb	r3, r3
 8014f8c:	2b03      	cmp	r3, #3
 8014f8e:	d106      	bne.n	8014f9e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	220a      	movs	r2, #10
 8014f94:	701a      	strb	r2, [r3, #0]
 8014f96:	e002      	b.n	8014f9e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	220a      	movs	r2, #10
 8014f9c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2201      	movs	r2, #1
 8014fa2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	f004 fd47 	bl	8019a48 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014fba:	e0d8      	b.n	801516e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d03f      	beq.n	8015046 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014fce:	2300      	movs	r3, #0
 8014fd0:	73fb      	strb	r3, [r7, #15]
 8014fd2:	e016      	b.n	8015002 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8014fd4:	7bfa      	ldrb	r2, [r7, #15]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	32de      	adds	r2, #222	; 0xde
 8014fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fde:	791a      	ldrb	r2, [r3, #4]
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d108      	bne.n	8014ffc <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8014fea:	7bfa      	ldrb	r2, [r7, #15]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	32de      	adds	r2, #222	; 0xde
 8014ff0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8014ffa:	e005      	b.n	8015008 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014ffc:	7bfb      	ldrb	r3, [r7, #15]
 8014ffe:	3301      	adds	r3, #1
 8015000:	73fb      	strb	r3, [r7, #15]
 8015002:	7bfb      	ldrb	r3, [r7, #15]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d0e5      	beq.n	8014fd4 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801500e:	2b00      	cmp	r3, #0
 8015010:	d016      	beq.n	8015040 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015018:	689b      	ldr	r3, [r3, #8]
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	4798      	blx	r3
 801501e:	4603      	mov	r3, r0
 8015020:	2b00      	cmp	r3, #0
 8015022:	d109      	bne.n	8015038 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	2206      	movs	r2, #6
 8015028:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015030:	2103      	movs	r1, #3
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	4798      	blx	r3
 8015036:	e006      	b.n	8015046 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	220d      	movs	r2, #13
 801503c:	701a      	strb	r2, [r3, #0]
 801503e:	e002      	b.n	8015046 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	220d      	movs	r2, #13
 8015044:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2205      	movs	r2, #5
 801504a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801505a:	2200      	movs	r2, #0
 801505c:	4619      	mov	r1, r3
 801505e:	f004 fcf3 	bl	8019a48 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015062:	e084      	b.n	801516e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801506a:	2b00      	cmp	r3, #0
 801506c:	d017      	beq.n	801509e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015074:	691b      	ldr	r3, [r3, #16]
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	4798      	blx	r3
 801507a:	4603      	mov	r3, r0
 801507c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801507e:	7bbb      	ldrb	r3, [r7, #14]
 8015080:	b2db      	uxtb	r3, r3
 8015082:	2b00      	cmp	r3, #0
 8015084:	d103      	bne.n	801508e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	220b      	movs	r2, #11
 801508a:	701a      	strb	r2, [r3, #0]
 801508c:	e00a      	b.n	80150a4 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 801508e:	7bbb      	ldrb	r3, [r7, #14]
 8015090:	b2db      	uxtb	r3, r3
 8015092:	2b02      	cmp	r3, #2
 8015094:	d106      	bne.n	80150a4 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	220d      	movs	r2, #13
 801509a:	701a      	strb	r2, [r3, #0]
 801509c:	e002      	b.n	80150a4 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	220d      	movs	r2, #13
 80150a2:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2205      	movs	r2, #5
 80150a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80150b8:	2200      	movs	r2, #0
 80150ba:	4619      	mov	r1, r3
 80150bc:	f004 fcc4 	bl	8019a48 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80150c0:	e055      	b.n	801516e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d04f      	beq.n	801516c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80150d2:	695b      	ldr	r3, [r3, #20]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	4798      	blx	r3
      }
      break;
 80150d8:	e048      	b.n	801516c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2200      	movs	r2, #0
 80150de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f7ff fccc 	bl	8014a80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d009      	beq.n	8015106 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2200      	movs	r2, #0
 8015102:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801510c:	2b00      	cmp	r3, #0
 801510e:	d005      	beq.n	801511c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015116:	2105      	movs	r1, #5
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8015122:	b2db      	uxtb	r3, r3
 8015124:	2b01      	cmp	r3, #1
 8015126:	d107      	bne.n	8015138 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2200      	movs	r2, #0
 801512c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f7ff fda4 	bl	8014c7e <USBH_Start>
 8015136:	e002      	b.n	801513e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f007 fbbb 	bl	801c8b4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	2201      	movs	r2, #1
 8015142:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015152:	2200      	movs	r2, #0
 8015154:	4619      	mov	r1, r3
 8015156:	f004 fc77 	bl	8019a48 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801515a:	e008      	b.n	801516e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 801515c:	bf00      	nop
 801515e:	e006      	b.n	801516e <USBH_Process+0x4ce>
      break;
 8015160:	bf00      	nop
 8015162:	e004      	b.n	801516e <USBH_Process+0x4ce>
      break;
 8015164:	bf00      	nop
 8015166:	e002      	b.n	801516e <USBH_Process+0x4ce>
    break;
 8015168:	bf00      	nop
 801516a:	e000      	b.n	801516e <USBH_Process+0x4ce>
      break;
 801516c:	bf00      	nop
  }
  return USBH_OK;
 801516e:	2300      	movs	r3, #0
}
 8015170:	4618      	mov	r0, r3
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b088      	sub	sp, #32
 801517c:	af04      	add	r7, sp, #16
 801517e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8015180:	2301      	movs	r3, #1
 8015182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8015184:	2301      	movs	r3, #1
 8015186:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	785b      	ldrb	r3, [r3, #1]
 801518c:	2b07      	cmp	r3, #7
 801518e:	f200 8208 	bhi.w	80155a2 <USBH_HandleEnum+0x42a>
 8015192:	a201      	add	r2, pc, #4	; (adr r2, 8015198 <USBH_HandleEnum+0x20>)
 8015194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015198:	080151b9 	.word	0x080151b9
 801519c:	08015277 	.word	0x08015277
 80151a0:	080152e1 	.word	0x080152e1
 80151a4:	0801536f 	.word	0x0801536f
 80151a8:	080153d9 	.word	0x080153d9
 80151ac:	08015449 	.word	0x08015449
 80151b0:	080154e5 	.word	0x080154e5
 80151b4:	08015563 	.word	0x08015563
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80151b8:	2108      	movs	r1, #8
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f000 faea 	bl	8015794 <USBH_Get_DevDesc>
 80151c0:	4603      	mov	r3, r0
 80151c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80151c4:	7bbb      	ldrb	r3, [r7, #14]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d130      	bne.n	801522c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2201      	movs	r2, #1
 80151d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	7919      	ldrb	r1, [r3, #4]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80151ee:	b292      	uxth	r2, r2
 80151f0:	9202      	str	r2, [sp, #8]
 80151f2:	2200      	movs	r2, #0
 80151f4:	9201      	str	r2, [sp, #4]
 80151f6:	9300      	str	r3, [sp, #0]
 80151f8:	4603      	mov	r3, r0
 80151fa:	2280      	movs	r2, #128	; 0x80
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f001 f9c9 	bl	8016594 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	7959      	ldrb	r1, [r3, #5]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015216:	b292      	uxth	r2, r2
 8015218:	9202      	str	r2, [sp, #8]
 801521a:	2200      	movs	r2, #0
 801521c:	9201      	str	r2, [sp, #4]
 801521e:	9300      	str	r3, [sp, #0]
 8015220:	4603      	mov	r3, r0
 8015222:	2200      	movs	r2, #0
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f001 f9b5 	bl	8016594 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801522a:	e1bc      	b.n	80155a6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801522c:	7bbb      	ldrb	r3, [r7, #14]
 801522e:	2b03      	cmp	r3, #3
 8015230:	f040 81b9 	bne.w	80155a6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801523a:	3301      	adds	r3, #1
 801523c:	b2da      	uxtb	r2, r3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801524a:	2b03      	cmp	r3, #3
 801524c:	d903      	bls.n	8015256 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	220d      	movs	r2, #13
 8015252:	701a      	strb	r2, [r3, #0]
      break;
 8015254:	e1a7      	b.n	80155a6 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	795b      	ldrb	r3, [r3, #5]
 801525a:	4619      	mov	r1, r3
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f001 f9e9 	bl	8016634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	791b      	ldrb	r3, [r3, #4]
 8015266:	4619      	mov	r1, r3
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f001 f9e3 	bl	8016634 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2200      	movs	r2, #0
 8015272:	701a      	strb	r2, [r3, #0]
      break;
 8015274:	e197      	b.n	80155a6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8015276:	2112      	movs	r1, #18
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f000 fa8b 	bl	8015794 <USBH_Get_DevDesc>
 801527e:	4603      	mov	r3, r0
 8015280:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015282:	7bbb      	ldrb	r3, [r7, #14]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d103      	bne.n	8015290 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2202      	movs	r2, #2
 801528c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801528e:	e18c      	b.n	80155aa <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015290:	7bbb      	ldrb	r3, [r7, #14]
 8015292:	2b03      	cmp	r3, #3
 8015294:	f040 8189 	bne.w	80155aa <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801529e:	3301      	adds	r3, #1
 80152a0:	b2da      	uxtb	r2, r3
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80152ae:	2b03      	cmp	r3, #3
 80152b0:	d903      	bls.n	80152ba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	220d      	movs	r2, #13
 80152b6:	701a      	strb	r2, [r3, #0]
      break;
 80152b8:	e177      	b.n	80155aa <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	795b      	ldrb	r3, [r3, #5]
 80152be:	4619      	mov	r1, r3
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f001 f9b7 	bl	8016634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	791b      	ldrb	r3, [r3, #4]
 80152ca:	4619      	mov	r1, r3
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f001 f9b1 	bl	8016634 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2200      	movs	r2, #0
 80152d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	701a      	strb	r2, [r3, #0]
      break;
 80152de:	e164      	b.n	80155aa <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80152e0:	2101      	movs	r1, #1
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f000 fb02 	bl	80158ec <USBH_SetAddress>
 80152e8:	4603      	mov	r3, r0
 80152ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80152ec:	7bbb      	ldrb	r3, [r7, #14]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d132      	bne.n	8015358 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80152f2:	2002      	movs	r0, #2
 80152f4:	f007 fc42 	bl	801cb7c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2201      	movs	r2, #1
 80152fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2203      	movs	r2, #3
 8015304:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	7919      	ldrb	r1, [r3, #4]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801531a:	b292      	uxth	r2, r2
 801531c:	9202      	str	r2, [sp, #8]
 801531e:	2200      	movs	r2, #0
 8015320:	9201      	str	r2, [sp, #4]
 8015322:	9300      	str	r3, [sp, #0]
 8015324:	4603      	mov	r3, r0
 8015326:	2280      	movs	r2, #128	; 0x80
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f001 f933 	bl	8016594 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	7959      	ldrb	r1, [r3, #5]
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801533e:	687a      	ldr	r2, [r7, #4]
 8015340:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015342:	b292      	uxth	r2, r2
 8015344:	9202      	str	r2, [sp, #8]
 8015346:	2200      	movs	r2, #0
 8015348:	9201      	str	r2, [sp, #4]
 801534a:	9300      	str	r3, [sp, #0]
 801534c:	4603      	mov	r3, r0
 801534e:	2200      	movs	r2, #0
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f001 f91f 	bl	8016594 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015356:	e12a      	b.n	80155ae <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015358:	7bbb      	ldrb	r3, [r7, #14]
 801535a:	2b03      	cmp	r3, #3
 801535c:	f040 8127 	bne.w	80155ae <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	220d      	movs	r2, #13
 8015364:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	2200      	movs	r2, #0
 801536a:	705a      	strb	r2, [r3, #1]
      break;
 801536c:	e11f      	b.n	80155ae <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801536e:	2109      	movs	r1, #9
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f000 fa37 	bl	80157e4 <USBH_Get_CfgDesc>
 8015376:	4603      	mov	r3, r0
 8015378:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801537a:	7bbb      	ldrb	r3, [r7, #14]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d103      	bne.n	8015388 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2204      	movs	r2, #4
 8015384:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015386:	e114      	b.n	80155b2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015388:	7bbb      	ldrb	r3, [r7, #14]
 801538a:	2b03      	cmp	r3, #3
 801538c:	f040 8111 	bne.w	80155b2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015396:	3301      	adds	r3, #1
 8015398:	b2da      	uxtb	r2, r3
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80153a6:	2b03      	cmp	r3, #3
 80153a8:	d903      	bls.n	80153b2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	220d      	movs	r2, #13
 80153ae:	701a      	strb	r2, [r3, #0]
      break;
 80153b0:	e0ff      	b.n	80155b2 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	795b      	ldrb	r3, [r3, #5]
 80153b6:	4619      	mov	r1, r3
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f001 f93b 	bl	8016634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	791b      	ldrb	r3, [r3, #4]
 80153c2:	4619      	mov	r1, r3
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f001 f935 	bl	8016634 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2200      	movs	r2, #0
 80153ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	701a      	strb	r2, [r3, #0]
      break;
 80153d6:	e0ec      	b.n	80155b2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80153de:	4619      	mov	r1, r3
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f000 f9ff 	bl	80157e4 <USBH_Get_CfgDesc>
 80153e6:	4603      	mov	r3, r0
 80153e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80153ea:	7bbb      	ldrb	r3, [r7, #14]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d103      	bne.n	80153f8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2205      	movs	r2, #5
 80153f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80153f6:	e0de      	b.n	80155b6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80153f8:	7bbb      	ldrb	r3, [r7, #14]
 80153fa:	2b03      	cmp	r3, #3
 80153fc:	f040 80db 	bne.w	80155b6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015406:	3301      	adds	r3, #1
 8015408:	b2da      	uxtb	r2, r3
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015416:	2b03      	cmp	r3, #3
 8015418:	d903      	bls.n	8015422 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	220d      	movs	r2, #13
 801541e:	701a      	strb	r2, [r3, #0]
      break;
 8015420:	e0c9      	b.n	80155b6 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	795b      	ldrb	r3, [r3, #5]
 8015426:	4619      	mov	r1, r3
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f001 f903 	bl	8016634 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	791b      	ldrb	r3, [r3, #4]
 8015432:	4619      	mov	r1, r3
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f001 f8fd 	bl	8016634 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2200      	movs	r2, #0
 801543e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2200      	movs	r2, #0
 8015444:	701a      	strb	r2, [r3, #0]
      break;
 8015446:	e0b6      	b.n	80155b6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801544e:	2b00      	cmp	r3, #0
 8015450:	d036      	beq.n	80154c0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801545e:	23ff      	movs	r3, #255	; 0xff
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f000 f9e3 	bl	801582c <USBH_Get_StringDesc>
 8015466:	4603      	mov	r3, r0
 8015468:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801546a:	7bbb      	ldrb	r3, [r7, #14]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d111      	bne.n	8015494 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2206      	movs	r2, #6
 8015474:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2205      	movs	r2, #5
 801547a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801548a:	2200      	movs	r2, #0
 801548c:	4619      	mov	r1, r3
 801548e:	f004 fadb 	bl	8019a48 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015492:	e092      	b.n	80155ba <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015494:	7bbb      	ldrb	r3, [r7, #14]
 8015496:	2b03      	cmp	r3, #3
 8015498:	f040 808f 	bne.w	80155ba <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2206      	movs	r2, #6
 80154a0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2205      	movs	r2, #5
 80154a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80154b6:	2200      	movs	r2, #0
 80154b8:	4619      	mov	r1, r3
 80154ba:	f004 fac5 	bl	8019a48 <osMessagePut>
      break;
 80154be:	e07c      	b.n	80155ba <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2206      	movs	r2, #6
 80154c4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	2205      	movs	r2, #5
 80154ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80154da:	2200      	movs	r2, #0
 80154dc:	4619      	mov	r1, r3
 80154de:	f004 fab3 	bl	8019a48 <osMessagePut>
      break;
 80154e2:	e06a      	b.n	80155ba <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d027      	beq.n	801553e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80154fa:	23ff      	movs	r3, #255	; 0xff
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f000 f995 	bl	801582c <USBH_Get_StringDesc>
 8015502:	4603      	mov	r3, r0
 8015504:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015506:	7bbb      	ldrb	r3, [r7, #14]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d103      	bne.n	8015514 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2207      	movs	r2, #7
 8015510:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015512:	e054      	b.n	80155be <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015514:	7bbb      	ldrb	r3, [r7, #14]
 8015516:	2b03      	cmp	r3, #3
 8015518:	d151      	bne.n	80155be <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2207      	movs	r2, #7
 801551e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2205      	movs	r2, #5
 8015524:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015534:	2200      	movs	r2, #0
 8015536:	4619      	mov	r1, r3
 8015538:	f004 fa86 	bl	8019a48 <osMessagePut>
      break;
 801553c:	e03f      	b.n	80155be <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2207      	movs	r2, #7
 8015542:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2205      	movs	r2, #5
 8015548:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015558:	2200      	movs	r2, #0
 801555a:	4619      	mov	r1, r3
 801555c:	f004 fa74 	bl	8019a48 <osMessagePut>
      break;
 8015560:	e02d      	b.n	80155be <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8015568:	2b00      	cmp	r3, #0
 801556a:	d017      	beq.n	801559c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015578:	23ff      	movs	r3, #255	; 0xff
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f000 f956 	bl	801582c <USBH_Get_StringDesc>
 8015580:	4603      	mov	r3, r0
 8015582:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015584:	7bbb      	ldrb	r3, [r7, #14]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d102      	bne.n	8015590 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801558a:	2300      	movs	r3, #0
 801558c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801558e:	e018      	b.n	80155c2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015590:	7bbb      	ldrb	r3, [r7, #14]
 8015592:	2b03      	cmp	r3, #3
 8015594:	d115      	bne.n	80155c2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8015596:	2300      	movs	r3, #0
 8015598:	73fb      	strb	r3, [r7, #15]
      break;
 801559a:	e012      	b.n	80155c2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 801559c:	2300      	movs	r3, #0
 801559e:	73fb      	strb	r3, [r7, #15]
      break;
 80155a0:	e00f      	b.n	80155c2 <USBH_HandleEnum+0x44a>

    default:
      break;
 80155a2:	bf00      	nop
 80155a4:	e00e      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155a6:	bf00      	nop
 80155a8:	e00c      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155aa:	bf00      	nop
 80155ac:	e00a      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155ae:	bf00      	nop
 80155b0:	e008      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155b2:	bf00      	nop
 80155b4:	e006      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155b6:	bf00      	nop
 80155b8:	e004      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155ba:	bf00      	nop
 80155bc:	e002      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155be:	bf00      	nop
 80155c0:	e000      	b.n	80155c4 <USBH_HandleEnum+0x44c>
      break;
 80155c2:	bf00      	nop
  }
  return Status;
 80155c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop

080155d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80155d0:	b480      	push	{r7}
 80155d2:	b083      	sub	sp, #12
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	683a      	ldr	r2, [r7, #0]
 80155de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80155e2:	bf00      	nop
 80155e4:	370c      	adds	r7, #12
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr

080155ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80155ee:	b580      	push	{r7, lr}
 80155f0:	b082      	sub	sp, #8
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80155fc:	1c5a      	adds	r2, r3, #1
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f000 f804 	bl	8015612 <USBH_HandleSof>
}
 801560a:	bf00      	nop
 801560c:	3708      	adds	r7, #8
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}

08015612 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8015612:	b580      	push	{r7, lr}
 8015614:	b082      	sub	sp, #8
 8015616:	af00      	add	r7, sp, #0
 8015618:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	b2db      	uxtb	r3, r3
 8015620:	2b0b      	cmp	r3, #11
 8015622:	d10a      	bne.n	801563a <USBH_HandleSof+0x28>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801562a:	2b00      	cmp	r3, #0
 801562c:	d005      	beq.n	801563a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015634:	699b      	ldr	r3, [r3, #24]
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	4798      	blx	r3
  }
}
 801563a:	bf00      	nop
 801563c:	3708      	adds	r7, #8
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}

08015642 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8015642:	b580      	push	{r7, lr}
 8015644:	b082      	sub	sp, #8
 8015646:	af00      	add	r7, sp, #0
 8015648:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2201      	movs	r2, #1
 801564e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2201      	movs	r2, #1
 8015656:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015666:	2200      	movs	r2, #0
 8015668:	4619      	mov	r1, r3
 801566a:	f004 f9ed 	bl	8019a48 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801566e:	bf00      	nop
}
 8015670:	3708      	adds	r7, #8
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}

08015676 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8015676:	b480      	push	{r7}
 8015678:	b083      	sub	sp, #12
 801567a:	af00      	add	r7, sp, #0
 801567c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2200      	movs	r2, #0
 8015682:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8015686:	bf00      	nop
}
 8015688:	370c      	adds	r7, #12
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr

08015692 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8015692:	b580      	push	{r7, lr}
 8015694:	b082      	sub	sp, #8
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2201      	movs	r2, #1
 801569e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2200      	movs	r2, #0
 80156ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2201      	movs	r2, #1
 80156b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80156c6:	2200      	movs	r2, #0
 80156c8:	4619      	mov	r1, r3
 80156ca:	f004 f9bd 	bl	8019a48 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80156ce:	2300      	movs	r3, #0
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3708      	adds	r7, #8
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2201      	movs	r2, #1
 80156e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2200      	movs	r2, #0
 80156f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f007 f8f6 	bl	801c8ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	791b      	ldrb	r3, [r3, #4]
 8015702:	4619      	mov	r1, r3
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f000 ff95 	bl	8016634 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	795b      	ldrb	r3, [r3, #5]
 801570e:	4619      	mov	r1, r3
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f000 ff8f 	bl	8016634 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2201      	movs	r2, #1
 801571a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801572a:	2200      	movs	r2, #0
 801572c:	4619      	mov	r1, r3
 801572e:	f004 f98b 	bl	8019a48 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3708      	adds	r7, #8
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}

0801573c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801574a:	f107 030c 	add.w	r3, r7, #12
 801574e:	f04f 32ff 	mov.w	r2, #4294967295
 8015752:	4618      	mov	r0, r3
 8015754:	f004 f9b8 	bl	8019ac8 <osMessageGet>
    if (event.status == osEventMessage)
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	2b10      	cmp	r3, #16
 801575c:	d1f2      	bne.n	8015744 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7ff fa9e 	bl	8014ca0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8015764:	e7ee      	b.n	8015744 <USBH_Process_OS+0x8>

08015766 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8015766:	b580      	push	{r7, lr}
 8015768:	b082      	sub	sp, #8
 801576a:	af00      	add	r7, sp, #0
 801576c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2201      	movs	r2, #1
 8015772:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015782:	2200      	movs	r2, #0
 8015784:	4619      	mov	r1, r3
 8015786:	f004 f95f 	bl	8019a48 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 801578a:	2300      	movs	r3, #0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b086      	sub	sp, #24
 8015798:	af02      	add	r7, sp, #8
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	460b      	mov	r3, r1
 801579e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80157a6:	78fb      	ldrb	r3, [r7, #3]
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	9300      	str	r3, [sp, #0]
 80157ac:	4613      	mov	r3, r2
 80157ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80157b2:	2100      	movs	r1, #0
 80157b4:	6878      	ldr	r0, [r7, #4]
 80157b6:	f000 f864 	bl	8015882 <USBH_GetDescriptor>
 80157ba:	4603      	mov	r3, r0
 80157bc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80157be:	7bfb      	ldrb	r3, [r7, #15]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d10a      	bne.n	80157da <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80157d0:	78fa      	ldrb	r2, [r7, #3]
 80157d2:	b292      	uxth	r2, r2
 80157d4:	4619      	mov	r1, r3
 80157d6:	f000 f919 	bl	8015a0c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80157da:	7bfb      	ldrb	r3, [r7, #15]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3710      	adds	r7, #16
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b086      	sub	sp, #24
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	460b      	mov	r3, r1
 80157ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	331c      	adds	r3, #28
 80157f4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80157f6:	887b      	ldrh	r3, [r7, #2]
 80157f8:	9300      	str	r3, [sp, #0]
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015800:	2100      	movs	r1, #0
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 f83d 	bl	8015882 <USBH_GetDescriptor>
 8015808:	4603      	mov	r3, r0
 801580a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801580c:	7bfb      	ldrb	r3, [r7, #15]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d107      	bne.n	8015822 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8015812:	887b      	ldrh	r3, [r7, #2]
 8015814:	461a      	mov	r2, r3
 8015816:	68b9      	ldr	r1, [r7, #8]
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f000 f987 	bl	8015b2c <USBH_ParseCfgDesc>
 801581e:	4603      	mov	r3, r0
 8015820:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015822:	7bfb      	ldrb	r3, [r7, #15]
}
 8015824:	4618      	mov	r0, r3
 8015826:	3710      	adds	r7, #16
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}

0801582c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b088      	sub	sp, #32
 8015830:	af02      	add	r7, sp, #8
 8015832:	60f8      	str	r0, [r7, #12]
 8015834:	607a      	str	r2, [r7, #4]
 8015836:	461a      	mov	r2, r3
 8015838:	460b      	mov	r3, r1
 801583a:	72fb      	strb	r3, [r7, #11]
 801583c:	4613      	mov	r3, r2
 801583e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8015840:	7afb      	ldrb	r3, [r7, #11]
 8015842:	b29b      	uxth	r3, r3
 8015844:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8015848:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8015850:	893b      	ldrh	r3, [r7, #8]
 8015852:	9300      	str	r3, [sp, #0]
 8015854:	460b      	mov	r3, r1
 8015856:	2100      	movs	r1, #0
 8015858:	68f8      	ldr	r0, [r7, #12]
 801585a:	f000 f812 	bl	8015882 <USBH_GetDescriptor>
 801585e:	4603      	mov	r3, r0
 8015860:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8015862:	7dfb      	ldrb	r3, [r7, #23]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d107      	bne.n	8015878 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801586e:	893a      	ldrh	r2, [r7, #8]
 8015870:	6879      	ldr	r1, [r7, #4]
 8015872:	4618      	mov	r0, r3
 8015874:	f000 fafe 	bl	8015e74 <USBH_ParseStringDesc>
  }

  return status;
 8015878:	7dfb      	ldrb	r3, [r7, #23]
}
 801587a:	4618      	mov	r0, r3
 801587c:	3718      	adds	r7, #24
 801587e:	46bd      	mov	sp, r7
 8015880:	bd80      	pop	{r7, pc}

08015882 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8015882:	b580      	push	{r7, lr}
 8015884:	b084      	sub	sp, #16
 8015886:	af00      	add	r7, sp, #0
 8015888:	60f8      	str	r0, [r7, #12]
 801588a:	607b      	str	r3, [r7, #4]
 801588c:	460b      	mov	r3, r1
 801588e:	72fb      	strb	r3, [r7, #11]
 8015890:	4613      	mov	r3, r2
 8015892:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	789b      	ldrb	r3, [r3, #2]
 8015898:	2b01      	cmp	r3, #1
 801589a:	d11c      	bne.n	80158d6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801589c:	7afb      	ldrb	r3, [r7, #11]
 801589e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80158a2:	b2da      	uxtb	r2, r3
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2206      	movs	r2, #6
 80158ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	893a      	ldrh	r2, [r7, #8]
 80158b2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80158b4:	893b      	ldrh	r3, [r7, #8]
 80158b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80158ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80158be:	d104      	bne.n	80158ca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f240 4209 	movw	r2, #1033	; 0x409
 80158c6:	829a      	strh	r2, [r3, #20]
 80158c8:	e002      	b.n	80158d0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2200      	movs	r2, #0
 80158ce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	8b3a      	ldrh	r2, [r7, #24]
 80158d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80158d6:	8b3b      	ldrh	r3, [r7, #24]
 80158d8:	461a      	mov	r2, r3
 80158da:	6879      	ldr	r1, [r7, #4]
 80158dc:	68f8      	ldr	r0, [r7, #12]
 80158de:	f000 fb17 	bl	8015f10 <USBH_CtlReq>
 80158e2:	4603      	mov	r3, r0
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	460b      	mov	r3, r1
 80158f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	789b      	ldrb	r3, [r3, #2]
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	d10f      	bne.n	8015920 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2200      	movs	r2, #0
 8015904:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	2205      	movs	r2, #5
 801590a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801590c:	78fb      	ldrb	r3, [r7, #3]
 801590e:	b29a      	uxth	r2, r3
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2200      	movs	r2, #0
 8015918:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2200      	movs	r2, #0
 801591e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8015920:	2200      	movs	r2, #0
 8015922:	2100      	movs	r1, #0
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 faf3 	bl	8015f10 <USBH_CtlReq>
 801592a:	4603      	mov	r3, r0
}
 801592c:	4618      	mov	r0, r3
 801592e:	3708      	adds	r7, #8
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	460b      	mov	r3, r1
 801593e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	789b      	ldrb	r3, [r3, #2]
 8015944:	2b01      	cmp	r3, #1
 8015946:	d10e      	bne.n	8015966 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2200      	movs	r2, #0
 801594c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2209      	movs	r2, #9
 8015952:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	887a      	ldrh	r2, [r7, #2]
 8015958:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2200      	movs	r2, #0
 801595e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2200      	movs	r2, #0
 8015964:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8015966:	2200      	movs	r2, #0
 8015968:	2100      	movs	r1, #0
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f000 fad0 	bl	8015f10 <USBH_CtlReq>
 8015970:	4603      	mov	r3, r0
}
 8015972:	4618      	mov	r0, r3
 8015974:	3708      	adds	r7, #8
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}

0801597a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801597a:	b580      	push	{r7, lr}
 801597c:	b082      	sub	sp, #8
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
 8015982:	460b      	mov	r3, r1
 8015984:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	789b      	ldrb	r3, [r3, #2]
 801598a:	2b01      	cmp	r3, #1
 801598c:	d10f      	bne.n	80159ae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2200      	movs	r2, #0
 8015992:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2203      	movs	r2, #3
 8015998:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801599a:	78fb      	ldrb	r3, [r7, #3]
 801599c:	b29a      	uxth	r2, r3
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2200      	movs	r2, #0
 80159a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2200      	movs	r2, #0
 80159ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80159ae:	2200      	movs	r2, #0
 80159b0:	2100      	movs	r1, #0
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f000 faac 	bl	8015f10 <USBH_CtlReq>
 80159b8:	4603      	mov	r3, r0
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3708      	adds	r7, #8
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80159c2:	b580      	push	{r7, lr}
 80159c4:	b082      	sub	sp, #8
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	6078      	str	r0, [r7, #4]
 80159ca:	460b      	mov	r3, r1
 80159cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	789b      	ldrb	r3, [r3, #2]
 80159d2:	2b01      	cmp	r3, #1
 80159d4:	d10f      	bne.n	80159f6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2202      	movs	r2, #2
 80159da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2201      	movs	r2, #1
 80159e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2200      	movs	r2, #0
 80159e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80159e8:	78fb      	ldrb	r3, [r7, #3]
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2200      	movs	r2, #0
 80159f4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80159f6:	2200      	movs	r2, #0
 80159f8:	2100      	movs	r1, #0
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 fa88 	bl	8015f10 <USBH_CtlReq>
 8015a00:	4603      	mov	r3, r0
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3708      	adds	r7, #8
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
	...

08015a0c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b085      	sub	sp, #20
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	60f8      	str	r0, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	4613      	mov	r3, r2
 8015a18:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	781a      	ldrb	r2, [r3, #0]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	785a      	ldrb	r2, [r3, #1]
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	3302      	adds	r3, #2
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	b29a      	uxth	r2, r3
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	3303      	adds	r3, #3
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	b29b      	uxth	r3, r3
 8015a3a:	021b      	lsls	r3, r3, #8
 8015a3c:	b29b      	uxth	r3, r3
 8015a3e:	4313      	orrs	r3, r2
 8015a40:	b29a      	uxth	r2, r3
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	791a      	ldrb	r2, [r3, #4]
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	795a      	ldrb	r2, [r3, #5]
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	799a      	ldrb	r2, [r3, #6]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8015a5e:	68bb      	ldr	r3, [r7, #8]
 8015a60:	79da      	ldrb	r2, [r3, #7]
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	79db      	ldrb	r3, [r3, #7]
 8015a6a:	2b20      	cmp	r3, #32
 8015a6c:	dc0e      	bgt.n	8015a8c <USBH_ParseDevDesc+0x80>
 8015a6e:	2b08      	cmp	r3, #8
 8015a70:	db13      	blt.n	8015a9a <USBH_ParseDevDesc+0x8e>
 8015a72:	3b08      	subs	r3, #8
 8015a74:	2201      	movs	r2, #1
 8015a76:	409a      	lsls	r2, r3
 8015a78:	4b2b      	ldr	r3, [pc, #172]	; (8015b28 <USBH_ParseDevDesc+0x11c>)
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	bf14      	ite	ne
 8015a80:	2301      	movne	r3, #1
 8015a82:	2300      	moveq	r3, #0
 8015a84:	b2db      	uxtb	r3, r3
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d102      	bne.n	8015a90 <USBH_ParseDevDesc+0x84>
 8015a8a:	e006      	b.n	8015a9a <USBH_ParseDevDesc+0x8e>
 8015a8c:	2b40      	cmp	r3, #64	; 0x40
 8015a8e:	d104      	bne.n	8015a9a <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	79da      	ldrb	r2, [r3, #7]
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	71da      	strb	r2, [r3, #7]
      break;
 8015a98:	e003      	b.n	8015aa2 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	2240      	movs	r2, #64	; 0x40
 8015a9e:	71da      	strb	r2, [r3, #7]
      break;
 8015aa0:	bf00      	nop
  }

  if (length > 8U)
 8015aa2:	88fb      	ldrh	r3, [r7, #6]
 8015aa4:	2b08      	cmp	r3, #8
 8015aa6:	d939      	bls.n	8015b1c <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	3308      	adds	r3, #8
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	b29a      	uxth	r2, r3
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	3309      	adds	r3, #9
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	021b      	lsls	r3, r3, #8
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	4313      	orrs	r3, r2
 8015abe:	b29a      	uxth	r2, r3
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	330a      	adds	r3, #10
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	330b      	adds	r3, #11
 8015ad0:	781b      	ldrb	r3, [r3, #0]
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	021b      	lsls	r3, r3, #8
 8015ad6:	b29b      	uxth	r3, r3
 8015ad8:	4313      	orrs	r3, r2
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	330c      	adds	r3, #12
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	330d      	adds	r3, #13
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	021b      	lsls	r3, r3, #8
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	4313      	orrs	r3, r2
 8015af6:	b29a      	uxth	r2, r3
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	7b9a      	ldrb	r2, [r3, #14]
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	7bda      	ldrb	r2, [r3, #15]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	7c1a      	ldrb	r2, [r3, #16]
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8015b14:	68bb      	ldr	r3, [r7, #8]
 8015b16:	7c5a      	ldrb	r2, [r3, #17]
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	745a      	strb	r2, [r3, #17]
  }
}
 8015b1c:	bf00      	nop
 8015b1e:	3714      	adds	r7, #20
 8015b20:	46bd      	mov	sp, r7
 8015b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b26:	4770      	bx	lr
 8015b28:	01000101 	.word	0x01000101

08015b2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b08c      	sub	sp, #48	; 0x30
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	4613      	mov	r3, r2
 8015b38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015b40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8015b42:	2300      	movs	r3, #0
 8015b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8015b52:	2300      	movs	r3, #0
 8015b54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	781a      	ldrb	r2, [r3, #0]
 8015b60:	6a3b      	ldr	r3, [r7, #32]
 8015b62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	785a      	ldrb	r2, [r3, #1]
 8015b68:	6a3b      	ldr	r3, [r7, #32]
 8015b6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	3302      	adds	r3, #2
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	3303      	adds	r3, #3
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	021b      	lsls	r3, r3, #8
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	4313      	orrs	r3, r2
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b88:	bf28      	it	cs
 8015b8a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8015b8e:	b29a      	uxth	r2, r3
 8015b90:	6a3b      	ldr	r3, [r7, #32]
 8015b92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	791a      	ldrb	r2, [r3, #4]
 8015b98:	6a3b      	ldr	r3, [r7, #32]
 8015b9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	795a      	ldrb	r2, [r3, #5]
 8015ba0:	6a3b      	ldr	r3, [r7, #32]
 8015ba2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	799a      	ldrb	r2, [r3, #6]
 8015ba8:	6a3b      	ldr	r3, [r7, #32]
 8015baa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	79da      	ldrb	r2, [r3, #7]
 8015bb0:	6a3b      	ldr	r3, [r7, #32]
 8015bb2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	7a1a      	ldrb	r2, [r3, #8]
 8015bb8:	6a3b      	ldr	r3, [r7, #32]
 8015bba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8015bbc:	6a3b      	ldr	r3, [r7, #32]
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	2b09      	cmp	r3, #9
 8015bc2:	d002      	beq.n	8015bca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8015bc4:	6a3b      	ldr	r3, [r7, #32]
 8015bc6:	2209      	movs	r2, #9
 8015bc8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8015bca:	88fb      	ldrh	r3, [r7, #6]
 8015bcc:	2b09      	cmp	r3, #9
 8015bce:	f240 8099 	bls.w	8015d04 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8015bd2:	2309      	movs	r3, #9
 8015bd4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8015bda:	e07d      	b.n	8015cd8 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8015bdc:	f107 0316 	add.w	r3, r7, #22
 8015be0:	4619      	mov	r1, r3
 8015be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015be4:	f000 f979 	bl	8015eda <USBH_GetNextDesc>
 8015be8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	785b      	ldrb	r3, [r3, #1]
 8015bee:	2b04      	cmp	r3, #4
 8015bf0:	d172      	bne.n	8015cd8 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8015bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	2b09      	cmp	r3, #9
 8015bf8:	d002      	beq.n	8015c00 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8015bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfc:	2209      	movs	r2, #9
 8015bfe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8015c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c04:	221a      	movs	r2, #26
 8015c06:	fb02 f303 	mul.w	r3, r2, r3
 8015c0a:	3308      	adds	r3, #8
 8015c0c:	6a3a      	ldr	r2, [r7, #32]
 8015c0e:	4413      	add	r3, r2
 8015c10:	3302      	adds	r3, #2
 8015c12:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8015c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015c16:	69f8      	ldr	r0, [r7, #28]
 8015c18:	f000 f87a 	bl	8015d10 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8015c22:	2300      	movs	r3, #0
 8015c24:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8015c26:	e03f      	b.n	8015ca8 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8015c28:	f107 0316 	add.w	r3, r7, #22
 8015c2c:	4619      	mov	r1, r3
 8015c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c30:	f000 f953 	bl	8015eda <USBH_GetNextDesc>
 8015c34:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c38:	785b      	ldrb	r3, [r3, #1]
 8015c3a:	2b05      	cmp	r3, #5
 8015c3c:	d134      	bne.n	8015ca8 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8015c3e:	69fb      	ldr	r3, [r7, #28]
 8015c40:	795b      	ldrb	r3, [r3, #5]
 8015c42:	2b01      	cmp	r3, #1
 8015c44:	d10f      	bne.n	8015c66 <USBH_ParseCfgDesc+0x13a>
 8015c46:	69fb      	ldr	r3, [r7, #28]
 8015c48:	799b      	ldrb	r3, [r3, #6]
 8015c4a:	2b02      	cmp	r3, #2
 8015c4c:	d10b      	bne.n	8015c66 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8015c4e:	69fb      	ldr	r3, [r7, #28]
 8015c50:	79db      	ldrb	r3, [r3, #7]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d10b      	bne.n	8015c6e <USBH_ParseCfgDesc+0x142>
 8015c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	2b09      	cmp	r3, #9
 8015c5c:	d007      	beq.n	8015c6e <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8015c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c60:	2209      	movs	r2, #9
 8015c62:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8015c64:	e003      	b.n	8015c6e <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8015c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c68:	2207      	movs	r2, #7
 8015c6a:	701a      	strb	r2, [r3, #0]
 8015c6c:	e000      	b.n	8015c70 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8015c6e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8015c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015c78:	3201      	adds	r2, #1
 8015c7a:	00d2      	lsls	r2, r2, #3
 8015c7c:	211a      	movs	r1, #26
 8015c7e:	fb01 f303 	mul.w	r3, r1, r3
 8015c82:	4413      	add	r3, r2
 8015c84:	3308      	adds	r3, #8
 8015c86:	6a3a      	ldr	r2, [r7, #32]
 8015c88:	4413      	add	r3, r2
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8015c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c90:	69b9      	ldr	r1, [r7, #24]
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f000 f86c 	bl	8015d70 <USBH_ParseEPDesc>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8015c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	791b      	ldrb	r3, [r3, #4]
 8015cac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	d204      	bcs.n	8015cbe <USBH_ParseCfgDesc+0x192>
 8015cb4:	6a3b      	ldr	r3, [r7, #32]
 8015cb6:	885a      	ldrh	r2, [r3, #2]
 8015cb8:	8afb      	ldrh	r3, [r7, #22]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d8b4      	bhi.n	8015c28 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	791b      	ldrb	r3, [r3, #4]
 8015cc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d201      	bcs.n	8015cce <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8015cca:	2303      	movs	r3, #3
 8015ccc:	e01c      	b.n	8015d08 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 8015cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8015cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d805      	bhi.n	8015cec <USBH_ParseCfgDesc+0x1c0>
 8015ce0:	6a3b      	ldr	r3, [r7, #32]
 8015ce2:	885a      	ldrh	r2, [r3, #2]
 8015ce4:	8afb      	ldrh	r3, [r7, #22]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	f63f af78 	bhi.w	8015bdc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8015cec:	6a3b      	ldr	r3, [r7, #32]
 8015cee:	791b      	ldrb	r3, [r3, #4]
 8015cf0:	2b02      	cmp	r3, #2
 8015cf2:	bf28      	it	cs
 8015cf4:	2302      	movcs	r3, #2
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d201      	bcs.n	8015d04 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8015d00:	2303      	movs	r3, #3
 8015d02:	e001      	b.n	8015d08 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8015d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3730      	adds	r7, #48	; 0x30
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8015d10:	b480      	push	{r7}
 8015d12:	b083      	sub	sp, #12
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	781a      	ldrb	r2, [r3, #0]
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	785a      	ldrb	r2, [r3, #1]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	789a      	ldrb	r2, [r3, #2]
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	78da      	ldrb	r2, [r3, #3]
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	791a      	ldrb	r2, [r3, #4]
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	795a      	ldrb	r2, [r3, #5]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	799a      	ldrb	r2, [r3, #6]
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	79da      	ldrb	r2, [r3, #7]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	7a1a      	ldrb	r2, [r3, #8]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	721a      	strb	r2, [r3, #8]
}
 8015d62:	bf00      	nop
 8015d64:	370c      	adds	r7, #12
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr
	...

08015d70 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8015d70:	b480      	push	{r7}
 8015d72:	b087      	sub	sp, #28
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	781a      	ldrb	r2, [r3, #0]
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	785a      	ldrb	r2, [r3, #1]
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	789a      	ldrb	r2, [r3, #2]
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	78da      	ldrb	r2, [r3, #3]
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	3304      	adds	r3, #4
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	b29a      	uxth	r2, r3
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	3305      	adds	r3, #5
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	021b      	lsls	r3, r3, #8
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	4313      	orrs	r3, r2
 8015db6:	b29a      	uxth	r2, r3
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	799a      	ldrb	r2, [r3, #6]
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	889b      	ldrh	r3, [r3, #4]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d102      	bne.n	8015dd2 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8015dcc:	2303      	movs	r3, #3
 8015dce:	75fb      	strb	r3, [r7, #23]
 8015dd0:	e00d      	b.n	8015dee <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	889a      	ldrh	r2, [r3, #4]
 8015dd6:	4b26      	ldr	r3, [pc, #152]	; (8015e70 <USBH_ParseEPDesc+0x100>)
 8015dd8:	4013      	ands	r3, r2
 8015dda:	b29a      	uxth	r2, r3
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	889b      	ldrh	r3, [r3, #4]
 8015de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015de8:	b29a      	uxth	r2, r3
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d116      	bne.n	8015e26 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	78db      	ldrb	r3, [r3, #3]
 8015dfc:	f003 0303 	and.w	r3, r3, #3
 8015e00:	2b01      	cmp	r3, #1
 8015e02:	d005      	beq.n	8015e10 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8015e04:	68bb      	ldr	r3, [r7, #8]
 8015e06:	78db      	ldrb	r3, [r3, #3]
 8015e08:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8015e0c:	2b03      	cmp	r3, #3
 8015e0e:	d127      	bne.n	8015e60 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	799b      	ldrb	r3, [r3, #6]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d003      	beq.n	8015e20 <USBH_ParseEPDesc+0xb0>
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	799b      	ldrb	r3, [r3, #6]
 8015e1c:	2b10      	cmp	r3, #16
 8015e1e:	d91f      	bls.n	8015e60 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8015e20:	2303      	movs	r3, #3
 8015e22:	75fb      	strb	r3, [r7, #23]
 8015e24:	e01c      	b.n	8015e60 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	78db      	ldrb	r3, [r3, #3]
 8015e2a:	f003 0303 	and.w	r3, r3, #3
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	d10a      	bne.n	8015e48 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8015e32:	68bb      	ldr	r3, [r7, #8]
 8015e34:	799b      	ldrb	r3, [r3, #6]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d003      	beq.n	8015e42 <USBH_ParseEPDesc+0xd2>
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	799b      	ldrb	r3, [r3, #6]
 8015e3e:	2b10      	cmp	r3, #16
 8015e40:	d90e      	bls.n	8015e60 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8015e42:	2303      	movs	r3, #3
 8015e44:	75fb      	strb	r3, [r7, #23]
 8015e46:	e00b      	b.n	8015e60 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	78db      	ldrb	r3, [r3, #3]
 8015e4c:	f003 0303 	and.w	r3, r3, #3
 8015e50:	2b03      	cmp	r3, #3
 8015e52:	d105      	bne.n	8015e60 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	799b      	ldrb	r3, [r3, #6]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d101      	bne.n	8015e60 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8015e5c:	2303      	movs	r3, #3
 8015e5e:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8015e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	371c      	adds	r7, #28
 8015e66:	46bd      	mov	sp, r7
 8015e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6c:	4770      	bx	lr
 8015e6e:	bf00      	nop
 8015e70:	fffff800 	.word	0xfffff800

08015e74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b087      	sub	sp, #28
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	60f8      	str	r0, [r7, #12]
 8015e7c:	60b9      	str	r1, [r7, #8]
 8015e7e:	4613      	mov	r3, r2
 8015e80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	3301      	adds	r3, #1
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	2b03      	cmp	r3, #3
 8015e8a:	d120      	bne.n	8015ece <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	1e9a      	subs	r2, r3, #2
 8015e92:	88fb      	ldrh	r3, [r7, #6]
 8015e94:	4293      	cmp	r3, r2
 8015e96:	bf28      	it	cs
 8015e98:	4613      	movcs	r3, r2
 8015e9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	3302      	adds	r3, #2
 8015ea0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	82fb      	strh	r3, [r7, #22]
 8015ea6:	e00b      	b.n	8015ec0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8015ea8:	8afb      	ldrh	r3, [r7, #22]
 8015eaa:	68fa      	ldr	r2, [r7, #12]
 8015eac:	4413      	add	r3, r2
 8015eae:	781a      	ldrb	r2, [r3, #0]
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	3301      	adds	r3, #1
 8015eb8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8015eba:	8afb      	ldrh	r3, [r7, #22]
 8015ebc:	3302      	adds	r3, #2
 8015ebe:	82fb      	strh	r3, [r7, #22]
 8015ec0:	8afa      	ldrh	r2, [r7, #22]
 8015ec2:	8abb      	ldrh	r3, [r7, #20]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d3ef      	bcc.n	8015ea8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8015ec8:	68bb      	ldr	r3, [r7, #8]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	701a      	strb	r2, [r3, #0]
  }
}
 8015ece:	bf00      	nop
 8015ed0:	371c      	adds	r7, #28
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed8:	4770      	bx	lr

08015eda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015eda:	b480      	push	{r7}
 8015edc:	b085      	sub	sp, #20
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
 8015ee2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	881a      	ldrh	r2, [r3, #0]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	4413      	add	r3, r2
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	4413      	add	r3, r2
 8015f00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015f02:	68fb      	ldr	r3, [r7, #12]
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3714      	adds	r7, #20
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0e:	4770      	bx	lr

08015f10 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b086      	sub	sp, #24
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	60f8      	str	r0, [r7, #12]
 8015f18:	60b9      	str	r1, [r7, #8]
 8015f1a:	4613      	mov	r3, r2
 8015f1c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8015f1e:	2301      	movs	r3, #1
 8015f20:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	789b      	ldrb	r3, [r3, #2]
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d002      	beq.n	8015f30 <USBH_CtlReq+0x20>
 8015f2a:	2b02      	cmp	r3, #2
 8015f2c:	d01d      	beq.n	8015f6a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8015f2e:	e043      	b.n	8015fb8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	88fa      	ldrh	r2, [r7, #6]
 8015f3a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	2201      	movs	r2, #1
 8015f40:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2202      	movs	r2, #2
 8015f46:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8015f48:	2301      	movs	r3, #1
 8015f4a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	2203      	movs	r2, #3
 8015f50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015f60:	2200      	movs	r2, #0
 8015f62:	4619      	mov	r1, r3
 8015f64:	f003 fd70 	bl	8019a48 <osMessagePut>
      break;
 8015f68:	e026      	b.n	8015fb8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8015f6a:	68f8      	ldr	r0, [r7, #12]
 8015f6c:	f000 f82a 	bl	8015fc4 <USBH_HandleControl>
 8015f70:	4603      	mov	r3, r0
 8015f72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8015f74:	7dfb      	ldrb	r3, [r7, #23]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d002      	beq.n	8015f80 <USBH_CtlReq+0x70>
 8015f7a:	7dfb      	ldrb	r3, [r7, #23]
 8015f7c:	2b03      	cmp	r3, #3
 8015f7e:	d106      	bne.n	8015f8e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	2201      	movs	r2, #1
 8015f84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	761a      	strb	r2, [r3, #24]
 8015f8c:	e005      	b.n	8015f9a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8015f8e:	7dfb      	ldrb	r3, [r7, #23]
 8015f90:	2b02      	cmp	r3, #2
 8015f92:	d102      	bne.n	8015f9a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2201      	movs	r2, #1
 8015f98:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	2203      	movs	r2, #3
 8015f9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015fae:	2200      	movs	r2, #0
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	f003 fd49 	bl	8019a48 <osMessagePut>
      break;
 8015fb6:	bf00      	nop
  }
  return status;
 8015fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fba:	4618      	mov	r0, r3
 8015fbc:	3718      	adds	r7, #24
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}
	...

08015fc4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b086      	sub	sp, #24
 8015fc8:	af02      	add	r7, sp, #8
 8015fca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015fcc:	2301      	movs	r3, #1
 8015fce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	7e1b      	ldrb	r3, [r3, #24]
 8015fd8:	3b01      	subs	r3, #1
 8015fda:	2b0a      	cmp	r3, #10
 8015fdc:	f200 8229 	bhi.w	8016432 <USBH_HandleControl+0x46e>
 8015fe0:	a201      	add	r2, pc, #4	; (adr r2, 8015fe8 <USBH_HandleControl+0x24>)
 8015fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fe6:	bf00      	nop
 8015fe8:	08016015 	.word	0x08016015
 8015fec:	0801602f 	.word	0x0801602f
 8015ff0:	080160d1 	.word	0x080160d1
 8015ff4:	080160f7 	.word	0x080160f7
 8015ff8:	08016183 	.word	0x08016183
 8015ffc:	080161ad 	.word	0x080161ad
 8016000:	0801626f 	.word	0x0801626f
 8016004:	08016291 	.word	0x08016291
 8016008:	08016323 	.word	0x08016323
 801600c:	08016349 	.word	0x08016349
 8016010:	080163db 	.word	0x080163db
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f103 0110 	add.w	r1, r3, #16
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	795b      	ldrb	r3, [r3, #5]
 801601e:	461a      	mov	r2, r3
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 fa17 	bl	8016454 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2202      	movs	r2, #2
 801602a:	761a      	strb	r2, [r3, #24]
      break;
 801602c:	e20c      	b.n	8016448 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	795b      	ldrb	r3, [r3, #5]
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f006 fd47 	bl	801cac8 <USBH_LL_GetURBState>
 801603a:	4603      	mov	r3, r0
 801603c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801603e:	7bbb      	ldrb	r3, [r7, #14]
 8016040:	2b01      	cmp	r3, #1
 8016042:	d12c      	bne.n	801609e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	7c1b      	ldrb	r3, [r3, #16]
 8016048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801604c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	8adb      	ldrh	r3, [r3, #22]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d00a      	beq.n	801606c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8016056:	7b7b      	ldrb	r3, [r7, #13]
 8016058:	2b80      	cmp	r3, #128	; 0x80
 801605a:	d103      	bne.n	8016064 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2203      	movs	r2, #3
 8016060:	761a      	strb	r2, [r3, #24]
 8016062:	e00d      	b.n	8016080 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2205      	movs	r2, #5
 8016068:	761a      	strb	r2, [r3, #24]
 801606a:	e009      	b.n	8016080 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 801606c:	7b7b      	ldrb	r3, [r7, #13]
 801606e:	2b80      	cmp	r3, #128	; 0x80
 8016070:	d103      	bne.n	801607a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2209      	movs	r2, #9
 8016076:	761a      	strb	r2, [r3, #24]
 8016078:	e002      	b.n	8016080 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2207      	movs	r2, #7
 801607e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2203      	movs	r2, #3
 8016084:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016094:	2200      	movs	r2, #0
 8016096:	4619      	mov	r1, r3
 8016098:	f003 fcd6 	bl	8019a48 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801609c:	e1cb      	b.n	8016436 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801609e:	7bbb      	ldrb	r3, [r7, #14]
 80160a0:	2b04      	cmp	r3, #4
 80160a2:	d003      	beq.n	80160ac <USBH_HandleControl+0xe8>
 80160a4:	7bbb      	ldrb	r3, [r7, #14]
 80160a6:	2b02      	cmp	r3, #2
 80160a8:	f040 81c5 	bne.w	8016436 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	220b      	movs	r2, #11
 80160b0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2203      	movs	r2, #3
 80160b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80160c6:	2200      	movs	r2, #0
 80160c8:	4619      	mov	r1, r3
 80160ca:	f003 fcbd 	bl	8019a48 <osMessagePut>
      break;
 80160ce:	e1b2      	b.n	8016436 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80160d6:	b29a      	uxth	r2, r3
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	6899      	ldr	r1, [r3, #8]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	899a      	ldrh	r2, [r3, #12]
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	791b      	ldrb	r3, [r3, #4]
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 f9f2 	bl	80164d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2204      	movs	r2, #4
 80160f2:	761a      	strb	r2, [r3, #24]
      break;
 80160f4:	e1a8      	b.n	8016448 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	791b      	ldrb	r3, [r3, #4]
 80160fa:	4619      	mov	r1, r3
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f006 fce3 	bl	801cac8 <USBH_LL_GetURBState>
 8016102:	4603      	mov	r3, r0
 8016104:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016106:	7bbb      	ldrb	r3, [r7, #14]
 8016108:	2b01      	cmp	r3, #1
 801610a:	d110      	bne.n	801612e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2209      	movs	r2, #9
 8016110:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2203      	movs	r2, #3
 8016116:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016126:	2200      	movs	r2, #0
 8016128:	4619      	mov	r1, r3
 801612a:	f003 fc8d 	bl	8019a48 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801612e:	7bbb      	ldrb	r3, [r7, #14]
 8016130:	2b05      	cmp	r3, #5
 8016132:	d110      	bne.n	8016156 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016134:	2303      	movs	r3, #3
 8016136:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2203      	movs	r2, #3
 801613c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801614c:	2200      	movs	r2, #0
 801614e:	4619      	mov	r1, r3
 8016150:	f003 fc7a 	bl	8019a48 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016154:	e171      	b.n	801643a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8016156:	7bbb      	ldrb	r3, [r7, #14]
 8016158:	2b04      	cmp	r3, #4
 801615a:	f040 816e 	bne.w	801643a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	220b      	movs	r2, #11
 8016162:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2203      	movs	r2, #3
 8016168:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016178:	2200      	movs	r2, #0
 801617a:	4619      	mov	r1, r3
 801617c:	f003 fc64 	bl	8019a48 <osMessagePut>
      break;
 8016180:	e15b      	b.n	801643a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	6899      	ldr	r1, [r3, #8]
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	899a      	ldrh	r2, [r3, #12]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	795b      	ldrb	r3, [r3, #5]
 801618e:	2001      	movs	r0, #1
 8016190:	9000      	str	r0, [sp, #0]
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f000 f978 	bl	8016488 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801619e:	b29a      	uxth	r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2206      	movs	r2, #6
 80161a8:	761a      	strb	r2, [r3, #24]
      break;
 80161aa:	e14d      	b.n	8016448 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	795b      	ldrb	r3, [r3, #5]
 80161b0:	4619      	mov	r1, r3
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f006 fc88 	bl	801cac8 <USBH_LL_GetURBState>
 80161b8:	4603      	mov	r3, r0
 80161ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80161bc:	7bbb      	ldrb	r3, [r7, #14]
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d111      	bne.n	80161e6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2207      	movs	r2, #7
 80161c6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2203      	movs	r2, #3
 80161cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80161dc:	2200      	movs	r2, #0
 80161de:	4619      	mov	r1, r3
 80161e0:	f003 fc32 	bl	8019a48 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80161e4:	e12b      	b.n	801643e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80161e6:	7bbb      	ldrb	r3, [r7, #14]
 80161e8:	2b05      	cmp	r3, #5
 80161ea:	d113      	bne.n	8016214 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	220c      	movs	r2, #12
 80161f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80161f2:	2303      	movs	r3, #3
 80161f4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2203      	movs	r2, #3
 80161fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801620a:	2200      	movs	r2, #0
 801620c:	4619      	mov	r1, r3
 801620e:	f003 fc1b 	bl	8019a48 <osMessagePut>
      break;
 8016212:	e114      	b.n	801643e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016214:	7bbb      	ldrb	r3, [r7, #14]
 8016216:	2b02      	cmp	r3, #2
 8016218:	d111      	bne.n	801623e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	2205      	movs	r2, #5
 801621e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2203      	movs	r2, #3
 8016224:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016234:	2200      	movs	r2, #0
 8016236:	4619      	mov	r1, r3
 8016238:	f003 fc06 	bl	8019a48 <osMessagePut>
      break;
 801623c:	e0ff      	b.n	801643e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801623e:	7bbb      	ldrb	r3, [r7, #14]
 8016240:	2b04      	cmp	r3, #4
 8016242:	f040 80fc 	bne.w	801643e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	220b      	movs	r2, #11
 801624a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801624c:	2302      	movs	r3, #2
 801624e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2203      	movs	r2, #3
 8016254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016264:	2200      	movs	r2, #0
 8016266:	4619      	mov	r1, r3
 8016268:	f003 fbee 	bl	8019a48 <osMessagePut>
      break;
 801626c:	e0e7      	b.n	801643e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	791b      	ldrb	r3, [r3, #4]
 8016272:	2200      	movs	r2, #0
 8016274:	2100      	movs	r1, #0
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f000 f92b 	bl	80164d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016282:	b29a      	uxth	r2, r3
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2208      	movs	r2, #8
 801628c:	761a      	strb	r2, [r3, #24]

      break;
 801628e:	e0db      	b.n	8016448 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	791b      	ldrb	r3, [r3, #4]
 8016294:	4619      	mov	r1, r3
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f006 fc16 	bl	801cac8 <USBH_LL_GetURBState>
 801629c:	4603      	mov	r3, r0
 801629e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80162a0:	7bbb      	ldrb	r3, [r7, #14]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d113      	bne.n	80162ce <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	220d      	movs	r2, #13
 80162aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80162ac:	2300      	movs	r3, #0
 80162ae:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2203      	movs	r2, #3
 80162b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80162c4:	2200      	movs	r2, #0
 80162c6:	4619      	mov	r1, r3
 80162c8:	f003 fbbe 	bl	8019a48 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80162cc:	e0b9      	b.n	8016442 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80162ce:	7bbb      	ldrb	r3, [r7, #14]
 80162d0:	2b04      	cmp	r3, #4
 80162d2:	d111      	bne.n	80162f8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	220b      	movs	r2, #11
 80162d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	2203      	movs	r2, #3
 80162de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80162ee:	2200      	movs	r2, #0
 80162f0:	4619      	mov	r1, r3
 80162f2:	f003 fba9 	bl	8019a48 <osMessagePut>
      break;
 80162f6:	e0a4      	b.n	8016442 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80162f8:	7bbb      	ldrb	r3, [r7, #14]
 80162fa:	2b05      	cmp	r3, #5
 80162fc:	f040 80a1 	bne.w	8016442 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8016300:	2303      	movs	r3, #3
 8016302:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2203      	movs	r2, #3
 8016308:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016318:	2200      	movs	r2, #0
 801631a:	4619      	mov	r1, r3
 801631c:	f003 fb94 	bl	8019a48 <osMessagePut>
      break;
 8016320:	e08f      	b.n	8016442 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	795b      	ldrb	r3, [r3, #5]
 8016326:	2201      	movs	r2, #1
 8016328:	9200      	str	r2, [sp, #0]
 801632a:	2200      	movs	r2, #0
 801632c:	2100      	movs	r1, #0
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 f8aa 	bl	8016488 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801633a:	b29a      	uxth	r2, r3
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	220a      	movs	r2, #10
 8016344:	761a      	strb	r2, [r3, #24]
      break;
 8016346:	e07f      	b.n	8016448 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	795b      	ldrb	r3, [r3, #5]
 801634c:	4619      	mov	r1, r3
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f006 fbba 	bl	801cac8 <USBH_LL_GetURBState>
 8016354:	4603      	mov	r3, r0
 8016356:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8016358:	7bbb      	ldrb	r3, [r7, #14]
 801635a:	2b01      	cmp	r3, #1
 801635c:	d113      	bne.n	8016386 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801635e:	2300      	movs	r3, #0
 8016360:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	220d      	movs	r2, #13
 8016366:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2203      	movs	r2, #3
 801636c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801637c:	2200      	movs	r2, #0
 801637e:	4619      	mov	r1, r3
 8016380:	f003 fb62 	bl	8019a48 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016384:	e05f      	b.n	8016446 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016386:	7bbb      	ldrb	r3, [r7, #14]
 8016388:	2b02      	cmp	r3, #2
 801638a:	d111      	bne.n	80163b0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2209      	movs	r2, #9
 8016390:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2203      	movs	r2, #3
 8016396:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80163a6:	2200      	movs	r2, #0
 80163a8:	4619      	mov	r1, r3
 80163aa:	f003 fb4d 	bl	8019a48 <osMessagePut>
      break;
 80163ae:	e04a      	b.n	8016446 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80163b0:	7bbb      	ldrb	r3, [r7, #14]
 80163b2:	2b04      	cmp	r3, #4
 80163b4:	d147      	bne.n	8016446 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	220b      	movs	r2, #11
 80163ba:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2203      	movs	r2, #3
 80163c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80163d0:	2200      	movs	r2, #0
 80163d2:	4619      	mov	r1, r3
 80163d4:	f003 fb38 	bl	8019a48 <osMessagePut>
      break;
 80163d8:	e035      	b.n	8016446 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	7e5b      	ldrb	r3, [r3, #25]
 80163de:	3301      	adds	r3, #1
 80163e0:	b2da      	uxtb	r2, r3
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	765a      	strb	r2, [r3, #25]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	7e5b      	ldrb	r3, [r3, #25]
 80163ea:	2b02      	cmp	r3, #2
 80163ec:	d806      	bhi.n	80163fc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	2201      	movs	r2, #1
 80163f2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2201      	movs	r2, #1
 80163f8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80163fa:	e025      	b.n	8016448 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8016402:	2106      	movs	r1, #6
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2200      	movs	r2, #0
 801640c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	795b      	ldrb	r3, [r3, #5]
 8016412:	4619      	mov	r1, r3
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f000 f90d 	bl	8016634 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	791b      	ldrb	r3, [r3, #4]
 801641e:	4619      	mov	r1, r3
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f000 f907 	bl	8016634 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2200      	movs	r2, #0
 801642a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801642c:	2302      	movs	r3, #2
 801642e:	73fb      	strb	r3, [r7, #15]
      break;
 8016430:	e00a      	b.n	8016448 <USBH_HandleControl+0x484>

    default:
      break;
 8016432:	bf00      	nop
 8016434:	e008      	b.n	8016448 <USBH_HandleControl+0x484>
      break;
 8016436:	bf00      	nop
 8016438:	e006      	b.n	8016448 <USBH_HandleControl+0x484>
      break;
 801643a:	bf00      	nop
 801643c:	e004      	b.n	8016448 <USBH_HandleControl+0x484>
      break;
 801643e:	bf00      	nop
 8016440:	e002      	b.n	8016448 <USBH_HandleControl+0x484>
      break;
 8016442:	bf00      	nop
 8016444:	e000      	b.n	8016448 <USBH_HandleControl+0x484>
      break;
 8016446:	bf00      	nop
  }

  return status;
 8016448:	7bfb      	ldrb	r3, [r7, #15]
}
 801644a:	4618      	mov	r0, r3
 801644c:	3710      	adds	r7, #16
 801644e:	46bd      	mov	sp, r7
 8016450:	bd80      	pop	{r7, pc}
 8016452:	bf00      	nop

08016454 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b088      	sub	sp, #32
 8016458:	af04      	add	r7, sp, #16
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	4613      	mov	r3, r2
 8016460:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016462:	79f9      	ldrb	r1, [r7, #7]
 8016464:	2300      	movs	r3, #0
 8016466:	9303      	str	r3, [sp, #12]
 8016468:	2308      	movs	r3, #8
 801646a:	9302      	str	r3, [sp, #8]
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	9301      	str	r3, [sp, #4]
 8016470:	2300      	movs	r3, #0
 8016472:	9300      	str	r3, [sp, #0]
 8016474:	2300      	movs	r3, #0
 8016476:	2200      	movs	r2, #0
 8016478:	68f8      	ldr	r0, [r7, #12]
 801647a:	f006 faf4 	bl	801ca66 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801647e:	2300      	movs	r3, #0
}
 8016480:	4618      	mov	r0, r3
 8016482:	3710      	adds	r7, #16
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}

08016488 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b088      	sub	sp, #32
 801648c:	af04      	add	r7, sp, #16
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	4611      	mov	r1, r2
 8016494:	461a      	mov	r2, r3
 8016496:	460b      	mov	r3, r1
 8016498:	80fb      	strh	r3, [r7, #6]
 801649a:	4613      	mov	r3, r2
 801649c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d001      	beq.n	80164ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80164a8:	2300      	movs	r3, #0
 80164aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80164ac:	7979      	ldrb	r1, [r7, #5]
 80164ae:	7e3b      	ldrb	r3, [r7, #24]
 80164b0:	9303      	str	r3, [sp, #12]
 80164b2:	88fb      	ldrh	r3, [r7, #6]
 80164b4:	9302      	str	r3, [sp, #8]
 80164b6:	68bb      	ldr	r3, [r7, #8]
 80164b8:	9301      	str	r3, [sp, #4]
 80164ba:	2301      	movs	r3, #1
 80164bc:	9300      	str	r3, [sp, #0]
 80164be:	2300      	movs	r3, #0
 80164c0:	2200      	movs	r2, #0
 80164c2:	68f8      	ldr	r0, [r7, #12]
 80164c4:	f006 facf 	bl	801ca66 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80164c8:	2300      	movs	r3, #0
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3710      	adds	r7, #16
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}

080164d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80164d2:	b580      	push	{r7, lr}
 80164d4:	b088      	sub	sp, #32
 80164d6:	af04      	add	r7, sp, #16
 80164d8:	60f8      	str	r0, [r7, #12]
 80164da:	60b9      	str	r1, [r7, #8]
 80164dc:	4611      	mov	r1, r2
 80164de:	461a      	mov	r2, r3
 80164e0:	460b      	mov	r3, r1
 80164e2:	80fb      	strh	r3, [r7, #6]
 80164e4:	4613      	mov	r3, r2
 80164e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80164e8:	7979      	ldrb	r1, [r7, #5]
 80164ea:	2300      	movs	r3, #0
 80164ec:	9303      	str	r3, [sp, #12]
 80164ee:	88fb      	ldrh	r3, [r7, #6]
 80164f0:	9302      	str	r3, [sp, #8]
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	9301      	str	r3, [sp, #4]
 80164f6:	2301      	movs	r3, #1
 80164f8:	9300      	str	r3, [sp, #0]
 80164fa:	2300      	movs	r3, #0
 80164fc:	2201      	movs	r2, #1
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f006 fab1 	bl	801ca66 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8016504:	2300      	movs	r3, #0

}
 8016506:	4618      	mov	r0, r3
 8016508:	3710      	adds	r7, #16
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}

0801650e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801650e:	b580      	push	{r7, lr}
 8016510:	b088      	sub	sp, #32
 8016512:	af04      	add	r7, sp, #16
 8016514:	60f8      	str	r0, [r7, #12]
 8016516:	60b9      	str	r1, [r7, #8]
 8016518:	4611      	mov	r1, r2
 801651a:	461a      	mov	r2, r3
 801651c:	460b      	mov	r3, r1
 801651e:	80fb      	strh	r3, [r7, #6]
 8016520:	4613      	mov	r3, r2
 8016522:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801652a:	2b00      	cmp	r3, #0
 801652c:	d001      	beq.n	8016532 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801652e:	2300      	movs	r3, #0
 8016530:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016532:	7979      	ldrb	r1, [r7, #5]
 8016534:	7e3b      	ldrb	r3, [r7, #24]
 8016536:	9303      	str	r3, [sp, #12]
 8016538:	88fb      	ldrh	r3, [r7, #6]
 801653a:	9302      	str	r3, [sp, #8]
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	9301      	str	r3, [sp, #4]
 8016540:	2301      	movs	r3, #1
 8016542:	9300      	str	r3, [sp, #0]
 8016544:	2302      	movs	r3, #2
 8016546:	2200      	movs	r2, #0
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	f006 fa8c 	bl	801ca66 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801654e:	2300      	movs	r3, #0
}
 8016550:	4618      	mov	r0, r3
 8016552:	3710      	adds	r7, #16
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b088      	sub	sp, #32
 801655c:	af04      	add	r7, sp, #16
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	4611      	mov	r1, r2
 8016564:	461a      	mov	r2, r3
 8016566:	460b      	mov	r3, r1
 8016568:	80fb      	strh	r3, [r7, #6]
 801656a:	4613      	mov	r3, r2
 801656c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801656e:	7979      	ldrb	r1, [r7, #5]
 8016570:	2300      	movs	r3, #0
 8016572:	9303      	str	r3, [sp, #12]
 8016574:	88fb      	ldrh	r3, [r7, #6]
 8016576:	9302      	str	r3, [sp, #8]
 8016578:	68bb      	ldr	r3, [r7, #8]
 801657a:	9301      	str	r3, [sp, #4]
 801657c:	2301      	movs	r3, #1
 801657e:	9300      	str	r3, [sp, #0]
 8016580:	2302      	movs	r3, #2
 8016582:	2201      	movs	r2, #1
 8016584:	68f8      	ldr	r0, [r7, #12]
 8016586:	f006 fa6e 	bl	801ca66 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801658a:	2300      	movs	r3, #0
}
 801658c:	4618      	mov	r0, r3
 801658e:	3710      	adds	r7, #16
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}

08016594 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b086      	sub	sp, #24
 8016598:	af04      	add	r7, sp, #16
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	4608      	mov	r0, r1
 801659e:	4611      	mov	r1, r2
 80165a0:	461a      	mov	r2, r3
 80165a2:	4603      	mov	r3, r0
 80165a4:	70fb      	strb	r3, [r7, #3]
 80165a6:	460b      	mov	r3, r1
 80165a8:	70bb      	strb	r3, [r7, #2]
 80165aa:	4613      	mov	r3, r2
 80165ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80165ae:	7878      	ldrb	r0, [r7, #1]
 80165b0:	78ba      	ldrb	r2, [r7, #2]
 80165b2:	78f9      	ldrb	r1, [r7, #3]
 80165b4:	8b3b      	ldrh	r3, [r7, #24]
 80165b6:	9302      	str	r3, [sp, #8]
 80165b8:	7d3b      	ldrb	r3, [r7, #20]
 80165ba:	9301      	str	r3, [sp, #4]
 80165bc:	7c3b      	ldrb	r3, [r7, #16]
 80165be:	9300      	str	r3, [sp, #0]
 80165c0:	4603      	mov	r3, r0
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f006 fa01 	bl	801c9ca <USBH_LL_OpenPipe>

  return USBH_OK;
 80165c8:	2300      	movs	r3, #0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3708      	adds	r7, #8
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b082      	sub	sp, #8
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	460b      	mov	r3, r1
 80165dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80165de:	78fb      	ldrb	r3, [r7, #3]
 80165e0:	4619      	mov	r1, r3
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f006 fa20 	bl	801ca28 <USBH_LL_ClosePipe>

  return USBH_OK;
 80165e8:	2300      	movs	r3, #0
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3708      	adds	r7, #8
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b084      	sub	sp, #16
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
 80165fa:	460b      	mov	r3, r1
 80165fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f000 f836 	bl	8016670 <USBH_GetFreePipe>
 8016604:	4603      	mov	r3, r0
 8016606:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8016608:	89fb      	ldrh	r3, [r7, #14]
 801660a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801660e:	4293      	cmp	r3, r2
 8016610:	d00a      	beq.n	8016628 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8016612:	78fa      	ldrb	r2, [r7, #3]
 8016614:	89fb      	ldrh	r3, [r7, #14]
 8016616:	f003 030f 	and.w	r3, r3, #15
 801661a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801661e:	6879      	ldr	r1, [r7, #4]
 8016620:	33e0      	adds	r3, #224	; 0xe0
 8016622:	009b      	lsls	r3, r3, #2
 8016624:	440b      	add	r3, r1
 8016626:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8016628:	89fb      	ldrh	r3, [r7, #14]
 801662a:	b2db      	uxtb	r3, r3
}
 801662c:	4618      	mov	r0, r3
 801662e:	3710      	adds	r7, #16
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}

08016634 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016634:	b480      	push	{r7}
 8016636:	b083      	sub	sp, #12
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	460b      	mov	r3, r1
 801663e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8016640:	78fb      	ldrb	r3, [r7, #3]
 8016642:	2b0f      	cmp	r3, #15
 8016644:	d80d      	bhi.n	8016662 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8016646:	78fb      	ldrb	r3, [r7, #3]
 8016648:	687a      	ldr	r2, [r7, #4]
 801664a:	33e0      	adds	r3, #224	; 0xe0
 801664c:	009b      	lsls	r3, r3, #2
 801664e:	4413      	add	r3, r2
 8016650:	685a      	ldr	r2, [r3, #4]
 8016652:	78fb      	ldrb	r3, [r7, #3]
 8016654:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8016658:	6879      	ldr	r1, [r7, #4]
 801665a:	33e0      	adds	r3, #224	; 0xe0
 801665c:	009b      	lsls	r3, r3, #2
 801665e:	440b      	add	r3, r1
 8016660:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8016662:	2300      	movs	r3, #0
}
 8016664:	4618      	mov	r0, r3
 8016666:	370c      	adds	r7, #12
 8016668:	46bd      	mov	sp, r7
 801666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666e:	4770      	bx	lr

08016670 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8016670:	b480      	push	{r7}
 8016672:	b085      	sub	sp, #20
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8016678:	2300      	movs	r3, #0
 801667a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801667c:	2300      	movs	r3, #0
 801667e:	73fb      	strb	r3, [r7, #15]
 8016680:	e00f      	b.n	80166a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016682:	7bfb      	ldrb	r3, [r7, #15]
 8016684:	687a      	ldr	r2, [r7, #4]
 8016686:	33e0      	adds	r3, #224	; 0xe0
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	4413      	add	r3, r2
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016692:	2b00      	cmp	r3, #0
 8016694:	d102      	bne.n	801669c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8016696:	7bfb      	ldrb	r3, [r7, #15]
 8016698:	b29b      	uxth	r3, r3
 801669a:	e007      	b.n	80166ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801669c:	7bfb      	ldrb	r3, [r7, #15]
 801669e:	3301      	adds	r3, #1
 80166a0:	73fb      	strb	r3, [r7, #15]
 80166a2:	7bfb      	ldrb	r3, [r7, #15]
 80166a4:	2b0f      	cmp	r3, #15
 80166a6:	d9ec      	bls.n	8016682 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80166a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80166ac:	4618      	mov	r0, r3
 80166ae:	3714      	adds	r7, #20
 80166b0:	46bd      	mov	sp, r7
 80166b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b6:	4770      	bx	lr

080166b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	4603      	mov	r3, r0
 80166c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80166c2:	79fb      	ldrb	r3, [r7, #7]
 80166c4:	4a08      	ldr	r2, [pc, #32]	; (80166e8 <disk_status+0x30>)
 80166c6:	009b      	lsls	r3, r3, #2
 80166c8:	4413      	add	r3, r2
 80166ca:	685b      	ldr	r3, [r3, #4]
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	79fa      	ldrb	r2, [r7, #7]
 80166d0:	4905      	ldr	r1, [pc, #20]	; (80166e8 <disk_status+0x30>)
 80166d2:	440a      	add	r2, r1
 80166d4:	7a12      	ldrb	r2, [r2, #8]
 80166d6:	4610      	mov	r0, r2
 80166d8:	4798      	blx	r3
 80166da:	4603      	mov	r3, r0
 80166dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80166de:	7bfb      	ldrb	r3, [r7, #15]
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	3710      	adds	r7, #16
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}
 80166e8:	200134d8 	.word	0x200134d8

080166ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b084      	sub	sp, #16
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80166f6:	2300      	movs	r3, #0
 80166f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80166fa:	79fb      	ldrb	r3, [r7, #7]
 80166fc:	4a0d      	ldr	r2, [pc, #52]	; (8016734 <disk_initialize+0x48>)
 80166fe:	5cd3      	ldrb	r3, [r2, r3]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d111      	bne.n	8016728 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016704:	79fb      	ldrb	r3, [r7, #7]
 8016706:	4a0b      	ldr	r2, [pc, #44]	; (8016734 <disk_initialize+0x48>)
 8016708:	2101      	movs	r1, #1
 801670a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801670c:	79fb      	ldrb	r3, [r7, #7]
 801670e:	4a09      	ldr	r2, [pc, #36]	; (8016734 <disk_initialize+0x48>)
 8016710:	009b      	lsls	r3, r3, #2
 8016712:	4413      	add	r3, r2
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	79fa      	ldrb	r2, [r7, #7]
 801671a:	4906      	ldr	r1, [pc, #24]	; (8016734 <disk_initialize+0x48>)
 801671c:	440a      	add	r2, r1
 801671e:	7a12      	ldrb	r2, [r2, #8]
 8016720:	4610      	mov	r0, r2
 8016722:	4798      	blx	r3
 8016724:	4603      	mov	r3, r0
 8016726:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016728:	7bfb      	ldrb	r3, [r7, #15]
}
 801672a:	4618      	mov	r0, r3
 801672c:	3710      	adds	r7, #16
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	200134d8 	.word	0x200134d8

08016738 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016738:	b590      	push	{r4, r7, lr}
 801673a:	b087      	sub	sp, #28
 801673c:	af00      	add	r7, sp, #0
 801673e:	60b9      	str	r1, [r7, #8]
 8016740:	607a      	str	r2, [r7, #4]
 8016742:	603b      	str	r3, [r7, #0]
 8016744:	4603      	mov	r3, r0
 8016746:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016748:	7bfb      	ldrb	r3, [r7, #15]
 801674a:	4a0a      	ldr	r2, [pc, #40]	; (8016774 <disk_read+0x3c>)
 801674c:	009b      	lsls	r3, r3, #2
 801674e:	4413      	add	r3, r2
 8016750:	685b      	ldr	r3, [r3, #4]
 8016752:	689c      	ldr	r4, [r3, #8]
 8016754:	7bfb      	ldrb	r3, [r7, #15]
 8016756:	4a07      	ldr	r2, [pc, #28]	; (8016774 <disk_read+0x3c>)
 8016758:	4413      	add	r3, r2
 801675a:	7a18      	ldrb	r0, [r3, #8]
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	687a      	ldr	r2, [r7, #4]
 8016760:	68b9      	ldr	r1, [r7, #8]
 8016762:	47a0      	blx	r4
 8016764:	4603      	mov	r3, r0
 8016766:	75fb      	strb	r3, [r7, #23]
  return res;
 8016768:	7dfb      	ldrb	r3, [r7, #23]
}
 801676a:	4618      	mov	r0, r3
 801676c:	371c      	adds	r7, #28
 801676e:	46bd      	mov	sp, r7
 8016770:	bd90      	pop	{r4, r7, pc}
 8016772:	bf00      	nop
 8016774:	200134d8 	.word	0x200134d8

08016778 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016778:	b590      	push	{r4, r7, lr}
 801677a:	b087      	sub	sp, #28
 801677c:	af00      	add	r7, sp, #0
 801677e:	60b9      	str	r1, [r7, #8]
 8016780:	607a      	str	r2, [r7, #4]
 8016782:	603b      	str	r3, [r7, #0]
 8016784:	4603      	mov	r3, r0
 8016786:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016788:	7bfb      	ldrb	r3, [r7, #15]
 801678a:	4a0a      	ldr	r2, [pc, #40]	; (80167b4 <disk_write+0x3c>)
 801678c:	009b      	lsls	r3, r3, #2
 801678e:	4413      	add	r3, r2
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	68dc      	ldr	r4, [r3, #12]
 8016794:	7bfb      	ldrb	r3, [r7, #15]
 8016796:	4a07      	ldr	r2, [pc, #28]	; (80167b4 <disk_write+0x3c>)
 8016798:	4413      	add	r3, r2
 801679a:	7a18      	ldrb	r0, [r3, #8]
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	687a      	ldr	r2, [r7, #4]
 80167a0:	68b9      	ldr	r1, [r7, #8]
 80167a2:	47a0      	blx	r4
 80167a4:	4603      	mov	r3, r0
 80167a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80167a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	371c      	adds	r7, #28
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd90      	pop	{r4, r7, pc}
 80167b2:	bf00      	nop
 80167b4:	200134d8 	.word	0x200134d8

080167b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b084      	sub	sp, #16
 80167bc:	af00      	add	r7, sp, #0
 80167be:	4603      	mov	r3, r0
 80167c0:	603a      	str	r2, [r7, #0]
 80167c2:	71fb      	strb	r3, [r7, #7]
 80167c4:	460b      	mov	r3, r1
 80167c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80167c8:	79fb      	ldrb	r3, [r7, #7]
 80167ca:	4a09      	ldr	r2, [pc, #36]	; (80167f0 <disk_ioctl+0x38>)
 80167cc:	009b      	lsls	r3, r3, #2
 80167ce:	4413      	add	r3, r2
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	691b      	ldr	r3, [r3, #16]
 80167d4:	79fa      	ldrb	r2, [r7, #7]
 80167d6:	4906      	ldr	r1, [pc, #24]	; (80167f0 <disk_ioctl+0x38>)
 80167d8:	440a      	add	r2, r1
 80167da:	7a10      	ldrb	r0, [r2, #8]
 80167dc:	79b9      	ldrb	r1, [r7, #6]
 80167de:	683a      	ldr	r2, [r7, #0]
 80167e0:	4798      	blx	r3
 80167e2:	4603      	mov	r3, r0
 80167e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80167e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	3710      	adds	r7, #16
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	200134d8 	.word	0x200134d8

080167f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	3301      	adds	r3, #1
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016804:	89fb      	ldrh	r3, [r7, #14]
 8016806:	021b      	lsls	r3, r3, #8
 8016808:	b21a      	sxth	r2, r3
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	781b      	ldrb	r3, [r3, #0]
 801680e:	b21b      	sxth	r3, r3
 8016810:	4313      	orrs	r3, r2
 8016812:	b21b      	sxth	r3, r3
 8016814:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016816:	89fb      	ldrh	r3, [r7, #14]
}
 8016818:	4618      	mov	r0, r3
 801681a:	3714      	adds	r7, #20
 801681c:	46bd      	mov	sp, r7
 801681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016822:	4770      	bx	lr

08016824 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016824:	b480      	push	{r7}
 8016826:	b085      	sub	sp, #20
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	3303      	adds	r3, #3
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	021b      	lsls	r3, r3, #8
 8016838:	687a      	ldr	r2, [r7, #4]
 801683a:	3202      	adds	r2, #2
 801683c:	7812      	ldrb	r2, [r2, #0]
 801683e:	4313      	orrs	r3, r2
 8016840:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	021b      	lsls	r3, r3, #8
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	3201      	adds	r2, #1
 801684a:	7812      	ldrb	r2, [r2, #0]
 801684c:	4313      	orrs	r3, r2
 801684e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	021b      	lsls	r3, r3, #8
 8016854:	687a      	ldr	r2, [r7, #4]
 8016856:	7812      	ldrb	r2, [r2, #0]
 8016858:	4313      	orrs	r3, r2
 801685a:	60fb      	str	r3, [r7, #12]
	return rv;
 801685c:	68fb      	ldr	r3, [r7, #12]
}
 801685e:	4618      	mov	r0, r3
 8016860:	3714      	adds	r7, #20
 8016862:	46bd      	mov	sp, r7
 8016864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016868:	4770      	bx	lr

0801686a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801686a:	b480      	push	{r7}
 801686c:	b083      	sub	sp, #12
 801686e:	af00      	add	r7, sp, #0
 8016870:	6078      	str	r0, [r7, #4]
 8016872:	460b      	mov	r3, r1
 8016874:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	1c5a      	adds	r2, r3, #1
 801687a:	607a      	str	r2, [r7, #4]
 801687c:	887a      	ldrh	r2, [r7, #2]
 801687e:	b2d2      	uxtb	r2, r2
 8016880:	701a      	strb	r2, [r3, #0]
 8016882:	887b      	ldrh	r3, [r7, #2]
 8016884:	0a1b      	lsrs	r3, r3, #8
 8016886:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	1c5a      	adds	r2, r3, #1
 801688c:	607a      	str	r2, [r7, #4]
 801688e:	887a      	ldrh	r2, [r7, #2]
 8016890:	b2d2      	uxtb	r2, r2
 8016892:	701a      	strb	r2, [r3, #0]
}
 8016894:	bf00      	nop
 8016896:	370c      	adds	r7, #12
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr

080168a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80168a0:	b480      	push	{r7}
 80168a2:	b083      	sub	sp, #12
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	1c5a      	adds	r2, r3, #1
 80168ae:	607a      	str	r2, [r7, #4]
 80168b0:	683a      	ldr	r2, [r7, #0]
 80168b2:	b2d2      	uxtb	r2, r2
 80168b4:	701a      	strb	r2, [r3, #0]
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	0a1b      	lsrs	r3, r3, #8
 80168ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	1c5a      	adds	r2, r3, #1
 80168c0:	607a      	str	r2, [r7, #4]
 80168c2:	683a      	ldr	r2, [r7, #0]
 80168c4:	b2d2      	uxtb	r2, r2
 80168c6:	701a      	strb	r2, [r3, #0]
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	0a1b      	lsrs	r3, r3, #8
 80168cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	1c5a      	adds	r2, r3, #1
 80168d2:	607a      	str	r2, [r7, #4]
 80168d4:	683a      	ldr	r2, [r7, #0]
 80168d6:	b2d2      	uxtb	r2, r2
 80168d8:	701a      	strb	r2, [r3, #0]
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	0a1b      	lsrs	r3, r3, #8
 80168de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	1c5a      	adds	r2, r3, #1
 80168e4:	607a      	str	r2, [r7, #4]
 80168e6:	683a      	ldr	r2, [r7, #0]
 80168e8:	b2d2      	uxtb	r2, r2
 80168ea:	701a      	strb	r2, [r3, #0]
}
 80168ec:	bf00      	nop
 80168ee:	370c      	adds	r7, #12
 80168f0:	46bd      	mov	sp, r7
 80168f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f6:	4770      	bx	lr

080168f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80168f8:	b480      	push	{r7}
 80168fa:	b087      	sub	sp, #28
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016908:	68bb      	ldr	r3, [r7, #8]
 801690a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d00d      	beq.n	801692e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016912:	693a      	ldr	r2, [r7, #16]
 8016914:	1c53      	adds	r3, r2, #1
 8016916:	613b      	str	r3, [r7, #16]
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	1c59      	adds	r1, r3, #1
 801691c:	6179      	str	r1, [r7, #20]
 801691e:	7812      	ldrb	r2, [r2, #0]
 8016920:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	3b01      	subs	r3, #1
 8016926:	607b      	str	r3, [r7, #4]
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d1f1      	bne.n	8016912 <mem_cpy+0x1a>
	}
}
 801692e:	bf00      	nop
 8016930:	371c      	adds	r7, #28
 8016932:	46bd      	mov	sp, r7
 8016934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016938:	4770      	bx	lr

0801693a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801693a:	b480      	push	{r7}
 801693c:	b087      	sub	sp, #28
 801693e:	af00      	add	r7, sp, #0
 8016940:	60f8      	str	r0, [r7, #12]
 8016942:	60b9      	str	r1, [r7, #8]
 8016944:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801694a:	697b      	ldr	r3, [r7, #20]
 801694c:	1c5a      	adds	r2, r3, #1
 801694e:	617a      	str	r2, [r7, #20]
 8016950:	68ba      	ldr	r2, [r7, #8]
 8016952:	b2d2      	uxtb	r2, r2
 8016954:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	3b01      	subs	r3, #1
 801695a:	607b      	str	r3, [r7, #4]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d1f3      	bne.n	801694a <mem_set+0x10>
}
 8016962:	bf00      	nop
 8016964:	bf00      	nop
 8016966:	371c      	adds	r7, #28
 8016968:	46bd      	mov	sp, r7
 801696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696e:	4770      	bx	lr

08016970 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016970:	b480      	push	{r7}
 8016972:	b089      	sub	sp, #36	; 0x24
 8016974:	af00      	add	r7, sp, #0
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	61fb      	str	r3, [r7, #28]
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016984:	2300      	movs	r3, #0
 8016986:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016988:	69fb      	ldr	r3, [r7, #28]
 801698a:	1c5a      	adds	r2, r3, #1
 801698c:	61fa      	str	r2, [r7, #28]
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	4619      	mov	r1, r3
 8016992:	69bb      	ldr	r3, [r7, #24]
 8016994:	1c5a      	adds	r2, r3, #1
 8016996:	61ba      	str	r2, [r7, #24]
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	1acb      	subs	r3, r1, r3
 801699c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	3b01      	subs	r3, #1
 80169a2:	607b      	str	r3, [r7, #4]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d002      	beq.n	80169b0 <mem_cmp+0x40>
 80169aa:	697b      	ldr	r3, [r7, #20]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d0eb      	beq.n	8016988 <mem_cmp+0x18>

	return r;
 80169b0:	697b      	ldr	r3, [r7, #20]
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	3724      	adds	r7, #36	; 0x24
 80169b6:	46bd      	mov	sp, r7
 80169b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169bc:	4770      	bx	lr

080169be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80169be:	b480      	push	{r7}
 80169c0:	b083      	sub	sp, #12
 80169c2:	af00      	add	r7, sp, #0
 80169c4:	6078      	str	r0, [r7, #4]
 80169c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80169c8:	e002      	b.n	80169d0 <chk_chr+0x12>
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	3301      	adds	r3, #1
 80169ce:	607b      	str	r3, [r7, #4]
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	781b      	ldrb	r3, [r3, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d005      	beq.n	80169e4 <chk_chr+0x26>
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	781b      	ldrb	r3, [r3, #0]
 80169dc:	461a      	mov	r2, r3
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	4293      	cmp	r3, r2
 80169e2:	d1f2      	bne.n	80169ca <chk_chr+0xc>
	return *str;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	781b      	ldrb	r3, [r3, #0]
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	370c      	adds	r7, #12
 80169ec:	46bd      	mov	sp, r7
 80169ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f2:	4770      	bx	lr

080169f4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b082      	sub	sp, #8
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d009      	beq.n	8016a16 <lock_fs+0x22>
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	68db      	ldr	r3, [r3, #12]
 8016a06:	4618      	mov	r0, r3
 8016a08:	f002 fe51 	bl	80196ae <ff_req_grant>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d001      	beq.n	8016a16 <lock_fs+0x22>
 8016a12:	2301      	movs	r3, #1
 8016a14:	e000      	b.n	8016a18 <lock_fs+0x24>
 8016a16:	2300      	movs	r3, #0
}
 8016a18:	4618      	mov	r0, r3
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	460b      	mov	r3, r1
 8016a2a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d00d      	beq.n	8016a4e <unlock_fs+0x2e>
 8016a32:	78fb      	ldrb	r3, [r7, #3]
 8016a34:	2b0c      	cmp	r3, #12
 8016a36:	d00a      	beq.n	8016a4e <unlock_fs+0x2e>
 8016a38:	78fb      	ldrb	r3, [r7, #3]
 8016a3a:	2b0b      	cmp	r3, #11
 8016a3c:	d007      	beq.n	8016a4e <unlock_fs+0x2e>
 8016a3e:	78fb      	ldrb	r3, [r7, #3]
 8016a40:	2b0f      	cmp	r3, #15
 8016a42:	d004      	beq.n	8016a4e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	68db      	ldr	r3, [r3, #12]
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f002 fe45 	bl	80196d8 <ff_rel_grant>
	}
}
 8016a4e:	bf00      	nop
 8016a50:	3708      	adds	r7, #8
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}
	...

08016a58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016a62:	2300      	movs	r3, #0
 8016a64:	60bb      	str	r3, [r7, #8]
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	60fb      	str	r3, [r7, #12]
 8016a6a:	e029      	b.n	8016ac0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016a6c:	4a27      	ldr	r2, [pc, #156]	; (8016b0c <chk_lock+0xb4>)
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	011b      	lsls	r3, r3, #4
 8016a72:	4413      	add	r3, r2
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d01d      	beq.n	8016ab6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016a7a:	4a24      	ldr	r2, [pc, #144]	; (8016b0c <chk_lock+0xb4>)
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	011b      	lsls	r3, r3, #4
 8016a80:	4413      	add	r3, r2
 8016a82:	681a      	ldr	r2, [r3, #0]
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	429a      	cmp	r2, r3
 8016a8a:	d116      	bne.n	8016aba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016a8c:	4a1f      	ldr	r2, [pc, #124]	; (8016b0c <chk_lock+0xb4>)
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	011b      	lsls	r3, r3, #4
 8016a92:	4413      	add	r3, r2
 8016a94:	3304      	adds	r3, #4
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016a9c:	429a      	cmp	r2, r3
 8016a9e:	d10c      	bne.n	8016aba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016aa0:	4a1a      	ldr	r2, [pc, #104]	; (8016b0c <chk_lock+0xb4>)
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	011b      	lsls	r3, r3, #4
 8016aa6:	4413      	add	r3, r2
 8016aa8:	3308      	adds	r3, #8
 8016aaa:	681a      	ldr	r2, [r3, #0]
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d102      	bne.n	8016aba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016ab4:	e007      	b.n	8016ac6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	3301      	adds	r3, #1
 8016abe:	60fb      	str	r3, [r7, #12]
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d9d2      	bls.n	8016a6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2b02      	cmp	r3, #2
 8016aca:	d109      	bne.n	8016ae0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d102      	bne.n	8016ad8 <chk_lock+0x80>
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	2b02      	cmp	r3, #2
 8016ad6:	d101      	bne.n	8016adc <chk_lock+0x84>
 8016ad8:	2300      	movs	r3, #0
 8016ada:	e010      	b.n	8016afe <chk_lock+0xa6>
 8016adc:	2312      	movs	r3, #18
 8016ade:	e00e      	b.n	8016afe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d108      	bne.n	8016af8 <chk_lock+0xa0>
 8016ae6:	4a09      	ldr	r2, [pc, #36]	; (8016b0c <chk_lock+0xb4>)
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	011b      	lsls	r3, r3, #4
 8016aec:	4413      	add	r3, r2
 8016aee:	330c      	adds	r3, #12
 8016af0:	881b      	ldrh	r3, [r3, #0]
 8016af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016af6:	d101      	bne.n	8016afc <chk_lock+0xa4>
 8016af8:	2310      	movs	r3, #16
 8016afa:	e000      	b.n	8016afe <chk_lock+0xa6>
 8016afc:	2300      	movs	r3, #0
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3714      	adds	r7, #20
 8016b02:	46bd      	mov	sp, r7
 8016b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b08:	4770      	bx	lr
 8016b0a:	bf00      	nop
 8016b0c:	200134b8 	.word	0x200134b8

08016b10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016b10:	b480      	push	{r7}
 8016b12:	b083      	sub	sp, #12
 8016b14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016b16:	2300      	movs	r3, #0
 8016b18:	607b      	str	r3, [r7, #4]
 8016b1a:	e002      	b.n	8016b22 <enq_lock+0x12>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	3301      	adds	r3, #1
 8016b20:	607b      	str	r3, [r7, #4]
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2b01      	cmp	r3, #1
 8016b26:	d806      	bhi.n	8016b36 <enq_lock+0x26>
 8016b28:	4a09      	ldr	r2, [pc, #36]	; (8016b50 <enq_lock+0x40>)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	011b      	lsls	r3, r3, #4
 8016b2e:	4413      	add	r3, r2
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d1f2      	bne.n	8016b1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	2b02      	cmp	r3, #2
 8016b3a:	bf14      	ite	ne
 8016b3c:	2301      	movne	r3, #1
 8016b3e:	2300      	moveq	r3, #0
 8016b40:	b2db      	uxtb	r3, r3
}
 8016b42:	4618      	mov	r0, r3
 8016b44:	370c      	adds	r7, #12
 8016b46:	46bd      	mov	sp, r7
 8016b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop
 8016b50:	200134b8 	.word	0x200134b8

08016b54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016b54:	b480      	push	{r7}
 8016b56:	b085      	sub	sp, #20
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016b5e:	2300      	movs	r3, #0
 8016b60:	60fb      	str	r3, [r7, #12]
 8016b62:	e01f      	b.n	8016ba4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016b64:	4a41      	ldr	r2, [pc, #260]	; (8016c6c <inc_lock+0x118>)
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	011b      	lsls	r3, r3, #4
 8016b6a:	4413      	add	r3, r2
 8016b6c:	681a      	ldr	r2, [r3, #0]
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d113      	bne.n	8016b9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016b76:	4a3d      	ldr	r2, [pc, #244]	; (8016c6c <inc_lock+0x118>)
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	011b      	lsls	r3, r3, #4
 8016b7c:	4413      	add	r3, r2
 8016b7e:	3304      	adds	r3, #4
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d109      	bne.n	8016b9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016b8a:	4a38      	ldr	r2, [pc, #224]	; (8016c6c <inc_lock+0x118>)
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	011b      	lsls	r3, r3, #4
 8016b90:	4413      	add	r3, r2
 8016b92:	3308      	adds	r3, #8
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d006      	beq.n	8016bac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	3301      	adds	r3, #1
 8016ba2:	60fb      	str	r3, [r7, #12]
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d9dc      	bls.n	8016b64 <inc_lock+0x10>
 8016baa:	e000      	b.n	8016bae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016bac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	2b02      	cmp	r3, #2
 8016bb2:	d132      	bne.n	8016c1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	60fb      	str	r3, [r7, #12]
 8016bb8:	e002      	b.n	8016bc0 <inc_lock+0x6c>
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	60fb      	str	r3, [r7, #12]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	2b01      	cmp	r3, #1
 8016bc4:	d806      	bhi.n	8016bd4 <inc_lock+0x80>
 8016bc6:	4a29      	ldr	r2, [pc, #164]	; (8016c6c <inc_lock+0x118>)
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	011b      	lsls	r3, r3, #4
 8016bcc:	4413      	add	r3, r2
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d1f2      	bne.n	8016bba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	2b02      	cmp	r3, #2
 8016bd8:	d101      	bne.n	8016bde <inc_lock+0x8a>
 8016bda:	2300      	movs	r3, #0
 8016bdc:	e040      	b.n	8016c60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	681a      	ldr	r2, [r3, #0]
 8016be2:	4922      	ldr	r1, [pc, #136]	; (8016c6c <inc_lock+0x118>)
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	011b      	lsls	r3, r3, #4
 8016be8:	440b      	add	r3, r1
 8016bea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	689a      	ldr	r2, [r3, #8]
 8016bf0:	491e      	ldr	r1, [pc, #120]	; (8016c6c <inc_lock+0x118>)
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	011b      	lsls	r3, r3, #4
 8016bf6:	440b      	add	r3, r1
 8016bf8:	3304      	adds	r3, #4
 8016bfa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	695a      	ldr	r2, [r3, #20]
 8016c00:	491a      	ldr	r1, [pc, #104]	; (8016c6c <inc_lock+0x118>)
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	011b      	lsls	r3, r3, #4
 8016c06:	440b      	add	r3, r1
 8016c08:	3308      	adds	r3, #8
 8016c0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016c0c:	4a17      	ldr	r2, [pc, #92]	; (8016c6c <inc_lock+0x118>)
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	011b      	lsls	r3, r3, #4
 8016c12:	4413      	add	r3, r2
 8016c14:	330c      	adds	r3, #12
 8016c16:	2200      	movs	r2, #0
 8016c18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d009      	beq.n	8016c34 <inc_lock+0xe0>
 8016c20:	4a12      	ldr	r2, [pc, #72]	; (8016c6c <inc_lock+0x118>)
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	011b      	lsls	r3, r3, #4
 8016c26:	4413      	add	r3, r2
 8016c28:	330c      	adds	r3, #12
 8016c2a:	881b      	ldrh	r3, [r3, #0]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d001      	beq.n	8016c34 <inc_lock+0xe0>
 8016c30:	2300      	movs	r3, #0
 8016c32:	e015      	b.n	8016c60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d108      	bne.n	8016c4c <inc_lock+0xf8>
 8016c3a:	4a0c      	ldr	r2, [pc, #48]	; (8016c6c <inc_lock+0x118>)
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	011b      	lsls	r3, r3, #4
 8016c40:	4413      	add	r3, r2
 8016c42:	330c      	adds	r3, #12
 8016c44:	881b      	ldrh	r3, [r3, #0]
 8016c46:	3301      	adds	r3, #1
 8016c48:	b29a      	uxth	r2, r3
 8016c4a:	e001      	b.n	8016c50 <inc_lock+0xfc>
 8016c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016c50:	4906      	ldr	r1, [pc, #24]	; (8016c6c <inc_lock+0x118>)
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	011b      	lsls	r3, r3, #4
 8016c56:	440b      	add	r3, r1
 8016c58:	330c      	adds	r3, #12
 8016c5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	3301      	adds	r3, #1
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3714      	adds	r7, #20
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr
 8016c6c:	200134b8 	.word	0x200134b8

08016c70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016c70:	b480      	push	{r7}
 8016c72:	b085      	sub	sp, #20
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	607b      	str	r3, [r7, #4]
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2b01      	cmp	r3, #1
 8016c82:	d825      	bhi.n	8016cd0 <dec_lock+0x60>
		n = Files[i].ctr;
 8016c84:	4a17      	ldr	r2, [pc, #92]	; (8016ce4 <dec_lock+0x74>)
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	011b      	lsls	r3, r3, #4
 8016c8a:	4413      	add	r3, r2
 8016c8c:	330c      	adds	r3, #12
 8016c8e:	881b      	ldrh	r3, [r3, #0]
 8016c90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016c92:	89fb      	ldrh	r3, [r7, #14]
 8016c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c98:	d101      	bne.n	8016c9e <dec_lock+0x2e>
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016c9e:	89fb      	ldrh	r3, [r7, #14]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d002      	beq.n	8016caa <dec_lock+0x3a>
 8016ca4:	89fb      	ldrh	r3, [r7, #14]
 8016ca6:	3b01      	subs	r3, #1
 8016ca8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016caa:	4a0e      	ldr	r2, [pc, #56]	; (8016ce4 <dec_lock+0x74>)
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	011b      	lsls	r3, r3, #4
 8016cb0:	4413      	add	r3, r2
 8016cb2:	330c      	adds	r3, #12
 8016cb4:	89fa      	ldrh	r2, [r7, #14]
 8016cb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016cb8:	89fb      	ldrh	r3, [r7, #14]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d105      	bne.n	8016cca <dec_lock+0x5a>
 8016cbe:	4a09      	ldr	r2, [pc, #36]	; (8016ce4 <dec_lock+0x74>)
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	011b      	lsls	r3, r3, #4
 8016cc4:	4413      	add	r3, r2
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	737b      	strb	r3, [r7, #13]
 8016cce:	e001      	b.n	8016cd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016cd0:	2302      	movs	r3, #2
 8016cd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016cd4:	7b7b      	ldrb	r3, [r7, #13]
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3714      	adds	r7, #20
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop
 8016ce4:	200134b8 	.word	0x200134b8

08016ce8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016ce8:	b480      	push	{r7}
 8016cea:	b085      	sub	sp, #20
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	60fb      	str	r3, [r7, #12]
 8016cf4:	e010      	b.n	8016d18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016cf6:	4a0d      	ldr	r2, [pc, #52]	; (8016d2c <clear_lock+0x44>)
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	011b      	lsls	r3, r3, #4
 8016cfc:	4413      	add	r3, r2
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	687a      	ldr	r2, [r7, #4]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d105      	bne.n	8016d12 <clear_lock+0x2a>
 8016d06:	4a09      	ldr	r2, [pc, #36]	; (8016d2c <clear_lock+0x44>)
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	011b      	lsls	r3, r3, #4
 8016d0c:	4413      	add	r3, r2
 8016d0e:	2200      	movs	r2, #0
 8016d10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	3301      	adds	r3, #1
 8016d16:	60fb      	str	r3, [r7, #12]
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	2b01      	cmp	r3, #1
 8016d1c:	d9eb      	bls.n	8016cf6 <clear_lock+0xe>
	}
}
 8016d1e:	bf00      	nop
 8016d20:	bf00      	nop
 8016d22:	3714      	adds	r7, #20
 8016d24:	46bd      	mov	sp, r7
 8016d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2a:	4770      	bx	lr
 8016d2c:	200134b8 	.word	0x200134b8

08016d30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b086      	sub	sp, #24
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	78db      	ldrb	r3, [r3, #3]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d034      	beq.n	8016dae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	7858      	ldrb	r0, [r3, #1]
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016d54:	2301      	movs	r3, #1
 8016d56:	697a      	ldr	r2, [r7, #20]
 8016d58:	f7ff fd0e 	bl	8016778 <disk_write>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d002      	beq.n	8016d68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016d62:	2301      	movs	r3, #1
 8016d64:	73fb      	strb	r3, [r7, #15]
 8016d66:	e022      	b.n	8016dae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d72:	697a      	ldr	r2, [r7, #20]
 8016d74:	1ad2      	subs	r2, r2, r3
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	69db      	ldr	r3, [r3, #28]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d217      	bcs.n	8016dae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	789b      	ldrb	r3, [r3, #2]
 8016d82:	613b      	str	r3, [r7, #16]
 8016d84:	e010      	b.n	8016da8 <sync_window+0x78>
					wsect += fs->fsize;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	69db      	ldr	r3, [r3, #28]
 8016d8a:	697a      	ldr	r2, [r7, #20]
 8016d8c:	4413      	add	r3, r2
 8016d8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	7858      	ldrb	r0, [r3, #1]
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	697a      	ldr	r2, [r7, #20]
 8016d9e:	f7ff fceb 	bl	8016778 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016da2:	693b      	ldr	r3, [r7, #16]
 8016da4:	3b01      	subs	r3, #1
 8016da6:	613b      	str	r3, [r7, #16]
 8016da8:	693b      	ldr	r3, [r7, #16]
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d8eb      	bhi.n	8016d86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3718      	adds	r7, #24
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dca:	683a      	ldr	r2, [r7, #0]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d01b      	beq.n	8016e08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f7ff ffad 	bl	8016d30 <sync_window>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016dda:	7bfb      	ldrb	r3, [r7, #15]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d113      	bne.n	8016e08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	7858      	ldrb	r0, [r3, #1]
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016dea:	2301      	movs	r3, #1
 8016dec:	683a      	ldr	r2, [r7, #0]
 8016dee:	f7ff fca3 	bl	8016738 <disk_read>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d004      	beq.n	8016e02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016df8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dfc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016dfe:	2301      	movs	r3, #1
 8016e00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	683a      	ldr	r2, [r7, #0]
 8016e06:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8016e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
	...

08016e14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b084      	sub	sp, #16
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016e1c:	6878      	ldr	r0, [r7, #4]
 8016e1e:	f7ff ff87 	bl	8016d30 <sync_window>
 8016e22:	4603      	mov	r3, r0
 8016e24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016e26:	7bfb      	ldrb	r3, [r7, #15]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d158      	bne.n	8016ede <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	2b03      	cmp	r3, #3
 8016e32:	d148      	bne.n	8016ec6 <sync_fs+0xb2>
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	791b      	ldrb	r3, [r3, #4]
 8016e38:	2b01      	cmp	r3, #1
 8016e3a:	d144      	bne.n	8016ec6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	3334      	adds	r3, #52	; 0x34
 8016e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e44:	2100      	movs	r1, #0
 8016e46:	4618      	mov	r0, r3
 8016e48:	f7ff fd77 	bl	801693a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	3334      	adds	r3, #52	; 0x34
 8016e50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e54:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7ff fd06 	bl	801686a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	3334      	adds	r3, #52	; 0x34
 8016e62:	4921      	ldr	r1, [pc, #132]	; (8016ee8 <sync_fs+0xd4>)
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7ff fd1b 	bl	80168a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	3334      	adds	r3, #52	; 0x34
 8016e6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016e72:	491e      	ldr	r1, [pc, #120]	; (8016eec <sync_fs+0xd8>)
 8016e74:	4618      	mov	r0, r3
 8016e76:	f7ff fd13 	bl	80168a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	3334      	adds	r3, #52	; 0x34
 8016e7e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	695b      	ldr	r3, [r3, #20]
 8016e86:	4619      	mov	r1, r3
 8016e88:	4610      	mov	r0, r2
 8016e8a:	f7ff fd09 	bl	80168a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	3334      	adds	r3, #52	; 0x34
 8016e92:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	691b      	ldr	r3, [r3, #16]
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	4610      	mov	r0, r2
 8016e9e:	f7ff fcff 	bl	80168a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6a1b      	ldr	r3, [r3, #32]
 8016ea6:	1c5a      	adds	r2, r3, #1
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	7858      	ldrb	r0, [r3, #1]
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016eba:	2301      	movs	r3, #1
 8016ebc:	f7ff fc5c 	bl	8016778 <disk_write>
			fs->fsi_flag = 0;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	785b      	ldrb	r3, [r3, #1]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	2100      	movs	r1, #0
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7ff fc72 	bl	80167b8 <disk_ioctl>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d001      	beq.n	8016ede <sync_fs+0xca>
 8016eda:	2301      	movs	r3, #1
 8016edc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3710      	adds	r7, #16
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}
 8016ee8:	41615252 	.word	0x41615252
 8016eec:	61417272 	.word	0x61417272

08016ef0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016ef0:	b480      	push	{r7}
 8016ef2:	b083      	sub	sp, #12
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	3b02      	subs	r3, #2
 8016efe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	699b      	ldr	r3, [r3, #24]
 8016f04:	3b02      	subs	r3, #2
 8016f06:	683a      	ldr	r2, [r7, #0]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d301      	bcc.n	8016f10 <clust2sect+0x20>
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	e008      	b.n	8016f22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	895b      	ldrh	r3, [r3, #10]
 8016f14:	461a      	mov	r2, r3
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	fb03 f202 	mul.w	r2, r3, r2
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f20:	4413      	add	r3, r2
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	370c      	adds	r7, #12
 8016f26:	46bd      	mov	sp, r7
 8016f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2c:	4770      	bx	lr

08016f2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016f2e:	b580      	push	{r7, lr}
 8016f30:	b086      	sub	sp, #24
 8016f32:	af00      	add	r7, sp, #0
 8016f34:	6078      	str	r0, [r7, #4]
 8016f36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	2b01      	cmp	r3, #1
 8016f42:	d904      	bls.n	8016f4e <get_fat+0x20>
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	699b      	ldr	r3, [r3, #24]
 8016f48:	683a      	ldr	r2, [r7, #0]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d302      	bcc.n	8016f54 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016f4e:	2301      	movs	r3, #1
 8016f50:	617b      	str	r3, [r7, #20]
 8016f52:	e08f      	b.n	8017074 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016f54:	f04f 33ff 	mov.w	r3, #4294967295
 8016f58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	2b03      	cmp	r3, #3
 8016f60:	d062      	beq.n	8017028 <get_fat+0xfa>
 8016f62:	2b03      	cmp	r3, #3
 8016f64:	dc7c      	bgt.n	8017060 <get_fat+0x132>
 8016f66:	2b01      	cmp	r3, #1
 8016f68:	d002      	beq.n	8016f70 <get_fat+0x42>
 8016f6a:	2b02      	cmp	r3, #2
 8016f6c:	d042      	beq.n	8016ff4 <get_fat+0xc6>
 8016f6e:	e077      	b.n	8017060 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	60fb      	str	r3, [r7, #12]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	085b      	lsrs	r3, r3, #1
 8016f78:	68fa      	ldr	r2, [r7, #12]
 8016f7a:	4413      	add	r3, r2
 8016f7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016f7e:	693b      	ldr	r3, [r7, #16]
 8016f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	0a5b      	lsrs	r3, r3, #9
 8016f86:	4413      	add	r3, r2
 8016f88:	4619      	mov	r1, r3
 8016f8a:	6938      	ldr	r0, [r7, #16]
 8016f8c:	f7ff ff14 	bl	8016db8 <move_window>
 8016f90:	4603      	mov	r3, r0
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d167      	bne.n	8017066 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	1c5a      	adds	r2, r3, #1
 8016f9a:	60fa      	str	r2, [r7, #12]
 8016f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016fa0:	693a      	ldr	r2, [r7, #16]
 8016fa2:	4413      	add	r3, r2
 8016fa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016fa8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016faa:	693b      	ldr	r3, [r7, #16]
 8016fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	0a5b      	lsrs	r3, r3, #9
 8016fb2:	4413      	add	r3, r2
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	6938      	ldr	r0, [r7, #16]
 8016fb8:	f7ff fefe 	bl	8016db8 <move_window>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d153      	bne.n	801706a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016fc8:	693a      	ldr	r2, [r7, #16]
 8016fca:	4413      	add	r3, r2
 8016fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016fd0:	021b      	lsls	r3, r3, #8
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	68bb      	ldr	r3, [r7, #8]
 8016fd6:	4313      	orrs	r3, r2
 8016fd8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	f003 0301 	and.w	r3, r3, #1
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d002      	beq.n	8016fea <get_fat+0xbc>
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	091b      	lsrs	r3, r3, #4
 8016fe8:	e002      	b.n	8016ff0 <get_fat+0xc2>
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016ff0:	617b      	str	r3, [r7, #20]
			break;
 8016ff2:	e03f      	b.n	8017074 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	0a1b      	lsrs	r3, r3, #8
 8016ffc:	4413      	add	r3, r2
 8016ffe:	4619      	mov	r1, r3
 8017000:	6938      	ldr	r0, [r7, #16]
 8017002:	f7ff fed9 	bl	8016db8 <move_window>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d130      	bne.n	801706e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801700c:	693b      	ldr	r3, [r7, #16]
 801700e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	005b      	lsls	r3, r3, #1
 8017016:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801701a:	4413      	add	r3, r2
 801701c:	4618      	mov	r0, r3
 801701e:	f7ff fbe9 	bl	80167f4 <ld_word>
 8017022:	4603      	mov	r3, r0
 8017024:	617b      	str	r3, [r7, #20]
			break;
 8017026:	e025      	b.n	8017074 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017028:	693b      	ldr	r3, [r7, #16]
 801702a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	09db      	lsrs	r3, r3, #7
 8017030:	4413      	add	r3, r2
 8017032:	4619      	mov	r1, r3
 8017034:	6938      	ldr	r0, [r7, #16]
 8017036:	f7ff febf 	bl	8016db8 <move_window>
 801703a:	4603      	mov	r3, r0
 801703c:	2b00      	cmp	r3, #0
 801703e:	d118      	bne.n	8017072 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017040:	693b      	ldr	r3, [r7, #16]
 8017042:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	009b      	lsls	r3, r3, #2
 801704a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801704e:	4413      	add	r3, r2
 8017050:	4618      	mov	r0, r3
 8017052:	f7ff fbe7 	bl	8016824 <ld_dword>
 8017056:	4603      	mov	r3, r0
 8017058:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801705c:	617b      	str	r3, [r7, #20]
			break;
 801705e:	e009      	b.n	8017074 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017060:	2301      	movs	r3, #1
 8017062:	617b      	str	r3, [r7, #20]
 8017064:	e006      	b.n	8017074 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017066:	bf00      	nop
 8017068:	e004      	b.n	8017074 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801706a:	bf00      	nop
 801706c:	e002      	b.n	8017074 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801706e:	bf00      	nop
 8017070:	e000      	b.n	8017074 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017072:	bf00      	nop
		}
	}

	return val;
 8017074:	697b      	ldr	r3, [r7, #20]
}
 8017076:	4618      	mov	r0, r3
 8017078:	3718      	adds	r7, #24
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}

0801707e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801707e:	b590      	push	{r4, r7, lr}
 8017080:	b089      	sub	sp, #36	; 0x24
 8017082:	af00      	add	r7, sp, #0
 8017084:	60f8      	str	r0, [r7, #12]
 8017086:	60b9      	str	r1, [r7, #8]
 8017088:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801708a:	2302      	movs	r3, #2
 801708c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	2b01      	cmp	r3, #1
 8017092:	f240 80d2 	bls.w	801723a <put_fat+0x1bc>
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	699b      	ldr	r3, [r3, #24]
 801709a:	68ba      	ldr	r2, [r7, #8]
 801709c:	429a      	cmp	r2, r3
 801709e:	f080 80cc 	bcs.w	801723a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	2b03      	cmp	r3, #3
 80170a8:	f000 8096 	beq.w	80171d8 <put_fat+0x15a>
 80170ac:	2b03      	cmp	r3, #3
 80170ae:	f300 80cd 	bgt.w	801724c <put_fat+0x1ce>
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d002      	beq.n	80170bc <put_fat+0x3e>
 80170b6:	2b02      	cmp	r3, #2
 80170b8:	d06e      	beq.n	8017198 <put_fat+0x11a>
 80170ba:	e0c7      	b.n	801724c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	61bb      	str	r3, [r7, #24]
 80170c0:	69bb      	ldr	r3, [r7, #24]
 80170c2:	085b      	lsrs	r3, r3, #1
 80170c4:	69ba      	ldr	r2, [r7, #24]
 80170c6:	4413      	add	r3, r2
 80170c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170ce:	69bb      	ldr	r3, [r7, #24]
 80170d0:	0a5b      	lsrs	r3, r3, #9
 80170d2:	4413      	add	r3, r2
 80170d4:	4619      	mov	r1, r3
 80170d6:	68f8      	ldr	r0, [r7, #12]
 80170d8:	f7ff fe6e 	bl	8016db8 <move_window>
 80170dc:	4603      	mov	r3, r0
 80170de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80170e0:	7ffb      	ldrb	r3, [r7, #31]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	f040 80ab 	bne.w	801723e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80170ee:	69bb      	ldr	r3, [r7, #24]
 80170f0:	1c59      	adds	r1, r3, #1
 80170f2:	61b9      	str	r1, [r7, #24]
 80170f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80170f8:	4413      	add	r3, r2
 80170fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	f003 0301 	and.w	r3, r3, #1
 8017102:	2b00      	cmp	r3, #0
 8017104:	d00d      	beq.n	8017122 <put_fat+0xa4>
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	b25b      	sxtb	r3, r3
 801710c:	f003 030f 	and.w	r3, r3, #15
 8017110:	b25a      	sxtb	r2, r3
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	b2db      	uxtb	r3, r3
 8017116:	011b      	lsls	r3, r3, #4
 8017118:	b25b      	sxtb	r3, r3
 801711a:	4313      	orrs	r3, r2
 801711c:	b25b      	sxtb	r3, r3
 801711e:	b2db      	uxtb	r3, r3
 8017120:	e001      	b.n	8017126 <put_fat+0xa8>
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	b2db      	uxtb	r3, r3
 8017126:	697a      	ldr	r2, [r7, #20]
 8017128:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	2201      	movs	r2, #1
 801712e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017134:	69bb      	ldr	r3, [r7, #24]
 8017136:	0a5b      	lsrs	r3, r3, #9
 8017138:	4413      	add	r3, r2
 801713a:	4619      	mov	r1, r3
 801713c:	68f8      	ldr	r0, [r7, #12]
 801713e:	f7ff fe3b 	bl	8016db8 <move_window>
 8017142:	4603      	mov	r3, r0
 8017144:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017146:	7ffb      	ldrb	r3, [r7, #31]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d17a      	bne.n	8017242 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017158:	4413      	add	r3, r2
 801715a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	f003 0301 	and.w	r3, r3, #1
 8017162:	2b00      	cmp	r3, #0
 8017164:	d003      	beq.n	801716e <put_fat+0xf0>
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	091b      	lsrs	r3, r3, #4
 801716a:	b2db      	uxtb	r3, r3
 801716c:	e00e      	b.n	801718c <put_fat+0x10e>
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	b25b      	sxtb	r3, r3
 8017174:	f023 030f 	bic.w	r3, r3, #15
 8017178:	b25a      	sxtb	r2, r3
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	0a1b      	lsrs	r3, r3, #8
 801717e:	b25b      	sxtb	r3, r3
 8017180:	f003 030f 	and.w	r3, r3, #15
 8017184:	b25b      	sxtb	r3, r3
 8017186:	4313      	orrs	r3, r2
 8017188:	b25b      	sxtb	r3, r3
 801718a:	b2db      	uxtb	r3, r3
 801718c:	697a      	ldr	r2, [r7, #20]
 801718e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	2201      	movs	r2, #1
 8017194:	70da      	strb	r2, [r3, #3]
			break;
 8017196:	e059      	b.n	801724c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	0a1b      	lsrs	r3, r3, #8
 80171a0:	4413      	add	r3, r2
 80171a2:	4619      	mov	r1, r3
 80171a4:	68f8      	ldr	r0, [r7, #12]
 80171a6:	f7ff fe07 	bl	8016db8 <move_window>
 80171aa:	4603      	mov	r3, r0
 80171ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80171ae:	7ffb      	ldrb	r3, [r7, #31]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d148      	bne.n	8017246 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	005b      	lsls	r3, r3, #1
 80171be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80171c2:	4413      	add	r3, r2
 80171c4:	687a      	ldr	r2, [r7, #4]
 80171c6:	b292      	uxth	r2, r2
 80171c8:	4611      	mov	r1, r2
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7ff fb4d 	bl	801686a <st_word>
			fs->wflag = 1;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	2201      	movs	r2, #1
 80171d4:	70da      	strb	r2, [r3, #3]
			break;
 80171d6:	e039      	b.n	801724c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171dc:	68bb      	ldr	r3, [r7, #8]
 80171de:	09db      	lsrs	r3, r3, #7
 80171e0:	4413      	add	r3, r2
 80171e2:	4619      	mov	r1, r3
 80171e4:	68f8      	ldr	r0, [r7, #12]
 80171e6:	f7ff fde7 	bl	8016db8 <move_window>
 80171ea:	4603      	mov	r3, r0
 80171ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80171ee:	7ffb      	ldrb	r3, [r7, #31]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d12a      	bne.n	801724a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	009b      	lsls	r3, r3, #2
 8017204:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017208:	4413      	add	r3, r2
 801720a:	4618      	mov	r0, r3
 801720c:	f7ff fb0a 	bl	8016824 <ld_dword>
 8017210:	4603      	mov	r3, r0
 8017212:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017216:	4323      	orrs	r3, r4
 8017218:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	009b      	lsls	r3, r3, #2
 8017224:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017228:	4413      	add	r3, r2
 801722a:	6879      	ldr	r1, [r7, #4]
 801722c:	4618      	mov	r0, r3
 801722e:	f7ff fb37 	bl	80168a0 <st_dword>
			fs->wflag = 1;
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	2201      	movs	r2, #1
 8017236:	70da      	strb	r2, [r3, #3]
			break;
 8017238:	e008      	b.n	801724c <put_fat+0x1ce>
		}
	}
 801723a:	bf00      	nop
 801723c:	e006      	b.n	801724c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801723e:	bf00      	nop
 8017240:	e004      	b.n	801724c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017242:	bf00      	nop
 8017244:	e002      	b.n	801724c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017246:	bf00      	nop
 8017248:	e000      	b.n	801724c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801724a:	bf00      	nop
	return res;
 801724c:	7ffb      	ldrb	r3, [r7, #31]
}
 801724e:	4618      	mov	r0, r3
 8017250:	3724      	adds	r7, #36	; 0x24
 8017252:	46bd      	mov	sp, r7
 8017254:	bd90      	pop	{r4, r7, pc}

08017256 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017256:	b580      	push	{r7, lr}
 8017258:	b088      	sub	sp, #32
 801725a:	af00      	add	r7, sp, #0
 801725c:	60f8      	str	r0, [r7, #12]
 801725e:	60b9      	str	r1, [r7, #8]
 8017260:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017262:	2300      	movs	r3, #0
 8017264:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	2b01      	cmp	r3, #1
 8017270:	d904      	bls.n	801727c <remove_chain+0x26>
 8017272:	69bb      	ldr	r3, [r7, #24]
 8017274:	699b      	ldr	r3, [r3, #24]
 8017276:	68ba      	ldr	r2, [r7, #8]
 8017278:	429a      	cmp	r2, r3
 801727a:	d301      	bcc.n	8017280 <remove_chain+0x2a>
 801727c:	2302      	movs	r3, #2
 801727e:	e04b      	b.n	8017318 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d00c      	beq.n	80172a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017286:	f04f 32ff 	mov.w	r2, #4294967295
 801728a:	6879      	ldr	r1, [r7, #4]
 801728c:	69b8      	ldr	r0, [r7, #24]
 801728e:	f7ff fef6 	bl	801707e <put_fat>
 8017292:	4603      	mov	r3, r0
 8017294:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017296:	7ffb      	ldrb	r3, [r7, #31]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d001      	beq.n	80172a0 <remove_chain+0x4a>
 801729c:	7ffb      	ldrb	r3, [r7, #31]
 801729e:	e03b      	b.n	8017318 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80172a0:	68b9      	ldr	r1, [r7, #8]
 80172a2:	68f8      	ldr	r0, [r7, #12]
 80172a4:	f7ff fe43 	bl	8016f2e <get_fat>
 80172a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d031      	beq.n	8017314 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	2b01      	cmp	r3, #1
 80172b4:	d101      	bne.n	80172ba <remove_chain+0x64>
 80172b6:	2302      	movs	r3, #2
 80172b8:	e02e      	b.n	8017318 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172c0:	d101      	bne.n	80172c6 <remove_chain+0x70>
 80172c2:	2301      	movs	r3, #1
 80172c4:	e028      	b.n	8017318 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80172c6:	2200      	movs	r2, #0
 80172c8:	68b9      	ldr	r1, [r7, #8]
 80172ca:	69b8      	ldr	r0, [r7, #24]
 80172cc:	f7ff fed7 	bl	801707e <put_fat>
 80172d0:	4603      	mov	r3, r0
 80172d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80172d4:	7ffb      	ldrb	r3, [r7, #31]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d001      	beq.n	80172de <remove_chain+0x88>
 80172da:	7ffb      	ldrb	r3, [r7, #31]
 80172dc:	e01c      	b.n	8017318 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80172de:	69bb      	ldr	r3, [r7, #24]
 80172e0:	695a      	ldr	r2, [r3, #20]
 80172e2:	69bb      	ldr	r3, [r7, #24]
 80172e4:	699b      	ldr	r3, [r3, #24]
 80172e6:	3b02      	subs	r3, #2
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d20b      	bcs.n	8017304 <remove_chain+0xae>
			fs->free_clst++;
 80172ec:	69bb      	ldr	r3, [r7, #24]
 80172ee:	695b      	ldr	r3, [r3, #20]
 80172f0:	1c5a      	adds	r2, r3, #1
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80172f6:	69bb      	ldr	r3, [r7, #24]
 80172f8:	791b      	ldrb	r3, [r3, #4]
 80172fa:	f043 0301 	orr.w	r3, r3, #1
 80172fe:	b2da      	uxtb	r2, r3
 8017300:	69bb      	ldr	r3, [r7, #24]
 8017302:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017308:	69bb      	ldr	r3, [r7, #24]
 801730a:	699b      	ldr	r3, [r3, #24]
 801730c:	68ba      	ldr	r2, [r7, #8]
 801730e:	429a      	cmp	r2, r3
 8017310:	d3c6      	bcc.n	80172a0 <remove_chain+0x4a>
 8017312:	e000      	b.n	8017316 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017314:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017316:	2300      	movs	r3, #0
}
 8017318:	4618      	mov	r0, r3
 801731a:	3720      	adds	r7, #32
 801731c:	46bd      	mov	sp, r7
 801731e:	bd80      	pop	{r7, pc}

08017320 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b088      	sub	sp, #32
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017330:	683b      	ldr	r3, [r7, #0]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d10d      	bne.n	8017352 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	691b      	ldr	r3, [r3, #16]
 801733a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801733c:	69bb      	ldr	r3, [r7, #24]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d004      	beq.n	801734c <create_chain+0x2c>
 8017342:	693b      	ldr	r3, [r7, #16]
 8017344:	699b      	ldr	r3, [r3, #24]
 8017346:	69ba      	ldr	r2, [r7, #24]
 8017348:	429a      	cmp	r2, r3
 801734a:	d31b      	bcc.n	8017384 <create_chain+0x64>
 801734c:	2301      	movs	r3, #1
 801734e:	61bb      	str	r3, [r7, #24]
 8017350:	e018      	b.n	8017384 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017352:	6839      	ldr	r1, [r7, #0]
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	f7ff fdea 	bl	8016f2e <get_fat>
 801735a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	2b01      	cmp	r3, #1
 8017360:	d801      	bhi.n	8017366 <create_chain+0x46>
 8017362:	2301      	movs	r3, #1
 8017364:	e070      	b.n	8017448 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801736c:	d101      	bne.n	8017372 <create_chain+0x52>
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	e06a      	b.n	8017448 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	699b      	ldr	r3, [r3, #24]
 8017376:	68fa      	ldr	r2, [r7, #12]
 8017378:	429a      	cmp	r2, r3
 801737a:	d201      	bcs.n	8017380 <create_chain+0x60>
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	e063      	b.n	8017448 <create_chain+0x128>
		scl = clst;
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017384:	69bb      	ldr	r3, [r7, #24]
 8017386:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017388:	69fb      	ldr	r3, [r7, #28]
 801738a:	3301      	adds	r3, #1
 801738c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801738e:	693b      	ldr	r3, [r7, #16]
 8017390:	699b      	ldr	r3, [r3, #24]
 8017392:	69fa      	ldr	r2, [r7, #28]
 8017394:	429a      	cmp	r2, r3
 8017396:	d307      	bcc.n	80173a8 <create_chain+0x88>
				ncl = 2;
 8017398:	2302      	movs	r3, #2
 801739a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801739c:	69fa      	ldr	r2, [r7, #28]
 801739e:	69bb      	ldr	r3, [r7, #24]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d901      	bls.n	80173a8 <create_chain+0x88>
 80173a4:	2300      	movs	r3, #0
 80173a6:	e04f      	b.n	8017448 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80173a8:	69f9      	ldr	r1, [r7, #28]
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f7ff fdbf 	bl	8016f2e <get_fat>
 80173b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d00e      	beq.n	80173d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	2b01      	cmp	r3, #1
 80173bc:	d003      	beq.n	80173c6 <create_chain+0xa6>
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173c4:	d101      	bne.n	80173ca <create_chain+0xaa>
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	e03e      	b.n	8017448 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80173ca:	69fa      	ldr	r2, [r7, #28]
 80173cc:	69bb      	ldr	r3, [r7, #24]
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d1da      	bne.n	8017388 <create_chain+0x68>
 80173d2:	2300      	movs	r3, #0
 80173d4:	e038      	b.n	8017448 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80173d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80173d8:	f04f 32ff 	mov.w	r2, #4294967295
 80173dc:	69f9      	ldr	r1, [r7, #28]
 80173de:	6938      	ldr	r0, [r7, #16]
 80173e0:	f7ff fe4d 	bl	801707e <put_fat>
 80173e4:	4603      	mov	r3, r0
 80173e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80173e8:	7dfb      	ldrb	r3, [r7, #23]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d109      	bne.n	8017402 <create_chain+0xe2>
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d006      	beq.n	8017402 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80173f4:	69fa      	ldr	r2, [r7, #28]
 80173f6:	6839      	ldr	r1, [r7, #0]
 80173f8:	6938      	ldr	r0, [r7, #16]
 80173fa:	f7ff fe40 	bl	801707e <put_fat>
 80173fe:	4603      	mov	r3, r0
 8017400:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017402:	7dfb      	ldrb	r3, [r7, #23]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d116      	bne.n	8017436 <create_chain+0x116>
		fs->last_clst = ncl;
 8017408:	693b      	ldr	r3, [r7, #16]
 801740a:	69fa      	ldr	r2, [r7, #28]
 801740c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801740e:	693b      	ldr	r3, [r7, #16]
 8017410:	695a      	ldr	r2, [r3, #20]
 8017412:	693b      	ldr	r3, [r7, #16]
 8017414:	699b      	ldr	r3, [r3, #24]
 8017416:	3b02      	subs	r3, #2
 8017418:	429a      	cmp	r2, r3
 801741a:	d804      	bhi.n	8017426 <create_chain+0x106>
 801741c:	693b      	ldr	r3, [r7, #16]
 801741e:	695b      	ldr	r3, [r3, #20]
 8017420:	1e5a      	subs	r2, r3, #1
 8017422:	693b      	ldr	r3, [r7, #16]
 8017424:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	791b      	ldrb	r3, [r3, #4]
 801742a:	f043 0301 	orr.w	r3, r3, #1
 801742e:	b2da      	uxtb	r2, r3
 8017430:	693b      	ldr	r3, [r7, #16]
 8017432:	711a      	strb	r2, [r3, #4]
 8017434:	e007      	b.n	8017446 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017436:	7dfb      	ldrb	r3, [r7, #23]
 8017438:	2b01      	cmp	r3, #1
 801743a:	d102      	bne.n	8017442 <create_chain+0x122>
 801743c:	f04f 33ff 	mov.w	r3, #4294967295
 8017440:	e000      	b.n	8017444 <create_chain+0x124>
 8017442:	2301      	movs	r3, #1
 8017444:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017446:	69fb      	ldr	r3, [r7, #28]
}
 8017448:	4618      	mov	r0, r3
 801744a:	3720      	adds	r7, #32
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017450:	b480      	push	{r7}
 8017452:	b087      	sub	sp, #28
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017464:	3304      	adds	r3, #4
 8017466:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017468:	683b      	ldr	r3, [r7, #0]
 801746a:	0a5b      	lsrs	r3, r3, #9
 801746c:	68fa      	ldr	r2, [r7, #12]
 801746e:	8952      	ldrh	r2, [r2, #10]
 8017470:	fbb3 f3f2 	udiv	r3, r3, r2
 8017474:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017476:	693b      	ldr	r3, [r7, #16]
 8017478:	1d1a      	adds	r2, r3, #4
 801747a:	613a      	str	r2, [r7, #16]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017480:	68bb      	ldr	r3, [r7, #8]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d101      	bne.n	801748a <clmt_clust+0x3a>
 8017486:	2300      	movs	r3, #0
 8017488:	e010      	b.n	80174ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801748a:	697a      	ldr	r2, [r7, #20]
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	429a      	cmp	r2, r3
 8017490:	d307      	bcc.n	80174a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017492:	697a      	ldr	r2, [r7, #20]
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	1ad3      	subs	r3, r2, r3
 8017498:	617b      	str	r3, [r7, #20]
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	3304      	adds	r3, #4
 801749e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80174a0:	e7e9      	b.n	8017476 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80174a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80174a4:	693b      	ldr	r3, [r7, #16]
 80174a6:	681a      	ldr	r2, [r3, #0]
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	4413      	add	r3, r2
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	371c      	adds	r7, #28
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr

080174b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b086      	sub	sp, #24
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80174c8:	683b      	ldr	r3, [r7, #0]
 80174ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80174ce:	d204      	bcs.n	80174da <dir_sdi+0x22>
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	f003 031f 	and.w	r3, r3, #31
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d001      	beq.n	80174de <dir_sdi+0x26>
		return FR_INT_ERR;
 80174da:	2302      	movs	r3, #2
 80174dc:	e063      	b.n	80175a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	683a      	ldr	r2, [r7, #0]
 80174e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	689b      	ldr	r3, [r3, #8]
 80174e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d106      	bne.n	80174fe <dir_sdi+0x46>
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	2b02      	cmp	r3, #2
 80174f6:	d902      	bls.n	80174fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80174fe:	697b      	ldr	r3, [r7, #20]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d10c      	bne.n	801751e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	095b      	lsrs	r3, r3, #5
 8017508:	693a      	ldr	r2, [r7, #16]
 801750a:	8912      	ldrh	r2, [r2, #8]
 801750c:	4293      	cmp	r3, r2
 801750e:	d301      	bcc.n	8017514 <dir_sdi+0x5c>
 8017510:	2302      	movs	r3, #2
 8017512:	e048      	b.n	80175a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017514:	693b      	ldr	r3, [r7, #16]
 8017516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	61da      	str	r2, [r3, #28]
 801751c:	e029      	b.n	8017572 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801751e:	693b      	ldr	r3, [r7, #16]
 8017520:	895b      	ldrh	r3, [r3, #10]
 8017522:	025b      	lsls	r3, r3, #9
 8017524:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017526:	e019      	b.n	801755c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6979      	ldr	r1, [r7, #20]
 801752c:	4618      	mov	r0, r3
 801752e:	f7ff fcfe 	bl	8016f2e <get_fat>
 8017532:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017534:	697b      	ldr	r3, [r7, #20]
 8017536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801753a:	d101      	bne.n	8017540 <dir_sdi+0x88>
 801753c:	2301      	movs	r3, #1
 801753e:	e032      	b.n	80175a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017540:	697b      	ldr	r3, [r7, #20]
 8017542:	2b01      	cmp	r3, #1
 8017544:	d904      	bls.n	8017550 <dir_sdi+0x98>
 8017546:	693b      	ldr	r3, [r7, #16]
 8017548:	699b      	ldr	r3, [r3, #24]
 801754a:	697a      	ldr	r2, [r7, #20]
 801754c:	429a      	cmp	r2, r3
 801754e:	d301      	bcc.n	8017554 <dir_sdi+0x9c>
 8017550:	2302      	movs	r3, #2
 8017552:	e028      	b.n	80175a6 <dir_sdi+0xee>
			ofs -= csz;
 8017554:	683a      	ldr	r2, [r7, #0]
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	1ad3      	subs	r3, r2, r3
 801755a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801755c:	683a      	ldr	r2, [r7, #0]
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	429a      	cmp	r2, r3
 8017562:	d2e1      	bcs.n	8017528 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017564:	6979      	ldr	r1, [r7, #20]
 8017566:	6938      	ldr	r0, [r7, #16]
 8017568:	f7ff fcc2 	bl	8016ef0 <clust2sect>
 801756c:	4602      	mov	r2, r0
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	697a      	ldr	r2, [r7, #20]
 8017576:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	69db      	ldr	r3, [r3, #28]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d101      	bne.n	8017584 <dir_sdi+0xcc>
 8017580:	2302      	movs	r3, #2
 8017582:	e010      	b.n	80175a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	69da      	ldr	r2, [r3, #28]
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	0a5b      	lsrs	r3, r3, #9
 801758c:	441a      	add	r2, r3
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017592:	693b      	ldr	r3, [r7, #16]
 8017594:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801759e:	441a      	add	r2, r3
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80175a4:	2300      	movs	r3, #0
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3718      	adds	r7, #24
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}

080175ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b086      	sub	sp, #24
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	6078      	str	r0, [r7, #4]
 80175b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	695b      	ldr	r3, [r3, #20]
 80175c2:	3320      	adds	r3, #32
 80175c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	69db      	ldr	r3, [r3, #28]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d003      	beq.n	80175d6 <dir_next+0x28>
 80175ce:	68bb      	ldr	r3, [r7, #8]
 80175d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80175d4:	d301      	bcc.n	80175da <dir_next+0x2c>
 80175d6:	2304      	movs	r3, #4
 80175d8:	e0aa      	b.n	8017730 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	f040 8098 	bne.w	8017716 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	69db      	ldr	r3, [r3, #28]
 80175ea:	1c5a      	adds	r2, r3, #1
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	699b      	ldr	r3, [r3, #24]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d10b      	bne.n	8017610 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	095b      	lsrs	r3, r3, #5
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	8912      	ldrh	r2, [r2, #8]
 8017600:	4293      	cmp	r3, r2
 8017602:	f0c0 8088 	bcc.w	8017716 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	2200      	movs	r2, #0
 801760a:	61da      	str	r2, [r3, #28]
 801760c:	2304      	movs	r3, #4
 801760e:	e08f      	b.n	8017730 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	0a5b      	lsrs	r3, r3, #9
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	8952      	ldrh	r2, [r2, #10]
 8017618:	3a01      	subs	r2, #1
 801761a:	4013      	ands	r3, r2
 801761c:	2b00      	cmp	r3, #0
 801761e:	d17a      	bne.n	8017716 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017620:	687a      	ldr	r2, [r7, #4]
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	699b      	ldr	r3, [r3, #24]
 8017626:	4619      	mov	r1, r3
 8017628:	4610      	mov	r0, r2
 801762a:	f7ff fc80 	bl	8016f2e <get_fat>
 801762e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	2b01      	cmp	r3, #1
 8017634:	d801      	bhi.n	801763a <dir_next+0x8c>
 8017636:	2302      	movs	r3, #2
 8017638:	e07a      	b.n	8017730 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017640:	d101      	bne.n	8017646 <dir_next+0x98>
 8017642:	2301      	movs	r3, #1
 8017644:	e074      	b.n	8017730 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	699b      	ldr	r3, [r3, #24]
 801764a:	697a      	ldr	r2, [r7, #20]
 801764c:	429a      	cmp	r2, r3
 801764e:	d358      	bcc.n	8017702 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d104      	bne.n	8017660 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	2200      	movs	r2, #0
 801765a:	61da      	str	r2, [r3, #28]
 801765c:	2304      	movs	r3, #4
 801765e:	e067      	b.n	8017730 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017660:	687a      	ldr	r2, [r7, #4]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	699b      	ldr	r3, [r3, #24]
 8017666:	4619      	mov	r1, r3
 8017668:	4610      	mov	r0, r2
 801766a:	f7ff fe59 	bl	8017320 <create_chain>
 801766e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017670:	697b      	ldr	r3, [r7, #20]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d101      	bne.n	801767a <dir_next+0xcc>
 8017676:	2307      	movs	r3, #7
 8017678:	e05a      	b.n	8017730 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	2b01      	cmp	r3, #1
 801767e:	d101      	bne.n	8017684 <dir_next+0xd6>
 8017680:	2302      	movs	r3, #2
 8017682:	e055      	b.n	8017730 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017684:	697b      	ldr	r3, [r7, #20]
 8017686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801768a:	d101      	bne.n	8017690 <dir_next+0xe2>
 801768c:	2301      	movs	r3, #1
 801768e:	e04f      	b.n	8017730 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7ff fb4d 	bl	8016d30 <sync_window>
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d001      	beq.n	80176a0 <dir_next+0xf2>
 801769c:	2301      	movs	r3, #1
 801769e:	e047      	b.n	8017730 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	3334      	adds	r3, #52	; 0x34
 80176a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176a8:	2100      	movs	r1, #0
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7ff f945 	bl	801693a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80176b0:	2300      	movs	r3, #0
 80176b2:	613b      	str	r3, [r7, #16]
 80176b4:	6979      	ldr	r1, [r7, #20]
 80176b6:	68f8      	ldr	r0, [r7, #12]
 80176b8:	f7ff fc1a 	bl	8016ef0 <clust2sect>
 80176bc:	4602      	mov	r2, r0
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	631a      	str	r2, [r3, #48]	; 0x30
 80176c2:	e012      	b.n	80176ea <dir_next+0x13c>
						fs->wflag = 1;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2201      	movs	r2, #1
 80176c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80176ca:	68f8      	ldr	r0, [r7, #12]
 80176cc:	f7ff fb30 	bl	8016d30 <sync_window>
 80176d0:	4603      	mov	r3, r0
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d001      	beq.n	80176da <dir_next+0x12c>
 80176d6:	2301      	movs	r3, #1
 80176d8:	e02a      	b.n	8017730 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	3301      	adds	r3, #1
 80176de:	613b      	str	r3, [r7, #16]
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176e4:	1c5a      	adds	r2, r3, #1
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	631a      	str	r2, [r3, #48]	; 0x30
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	895b      	ldrh	r3, [r3, #10]
 80176ee:	461a      	mov	r2, r3
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d3e6      	bcc.n	80176c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80176fa:	693b      	ldr	r3, [r7, #16]
 80176fc:	1ad2      	subs	r2, r2, r3
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	697a      	ldr	r2, [r7, #20]
 8017706:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017708:	6979      	ldr	r1, [r7, #20]
 801770a:	68f8      	ldr	r0, [r7, #12]
 801770c:	f7ff fbf0 	bl	8016ef0 <clust2sect>
 8017710:	4602      	mov	r2, r0
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	68ba      	ldr	r2, [r7, #8]
 801771a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017722:	68bb      	ldr	r3, [r7, #8]
 8017724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017728:	441a      	add	r2, r3
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801772e:	2300      	movs	r3, #0
}
 8017730:	4618      	mov	r0, r3
 8017732:	3718      	adds	r7, #24
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}

08017738 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b086      	sub	sp, #24
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
 8017740:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017748:	2100      	movs	r1, #0
 801774a:	6878      	ldr	r0, [r7, #4]
 801774c:	f7ff feb4 	bl	80174b8 <dir_sdi>
 8017750:	4603      	mov	r3, r0
 8017752:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017754:	7dfb      	ldrb	r3, [r7, #23]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d12b      	bne.n	80177b2 <dir_alloc+0x7a>
		n = 0;
 801775a:	2300      	movs	r3, #0
 801775c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	69db      	ldr	r3, [r3, #28]
 8017762:	4619      	mov	r1, r3
 8017764:	68f8      	ldr	r0, [r7, #12]
 8017766:	f7ff fb27 	bl	8016db8 <move_window>
 801776a:	4603      	mov	r3, r0
 801776c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801776e:	7dfb      	ldrb	r3, [r7, #23]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d11d      	bne.n	80177b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	6a1b      	ldr	r3, [r3, #32]
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	2be5      	cmp	r3, #229	; 0xe5
 801777c:	d004      	beq.n	8017788 <dir_alloc+0x50>
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	6a1b      	ldr	r3, [r3, #32]
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d107      	bne.n	8017798 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017788:	693b      	ldr	r3, [r7, #16]
 801778a:	3301      	adds	r3, #1
 801778c:	613b      	str	r3, [r7, #16]
 801778e:	693a      	ldr	r2, [r7, #16]
 8017790:	683b      	ldr	r3, [r7, #0]
 8017792:	429a      	cmp	r2, r3
 8017794:	d102      	bne.n	801779c <dir_alloc+0x64>
 8017796:	e00c      	b.n	80177b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017798:	2300      	movs	r3, #0
 801779a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801779c:	2101      	movs	r1, #1
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f7ff ff05 	bl	80175ae <dir_next>
 80177a4:	4603      	mov	r3, r0
 80177a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80177a8:	7dfb      	ldrb	r3, [r7, #23]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d0d7      	beq.n	801775e <dir_alloc+0x26>
 80177ae:	e000      	b.n	80177b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80177b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80177b2:	7dfb      	ldrb	r3, [r7, #23]
 80177b4:	2b04      	cmp	r3, #4
 80177b6:	d101      	bne.n	80177bc <dir_alloc+0x84>
 80177b8:	2307      	movs	r3, #7
 80177ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80177bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80177be:	4618      	mov	r0, r3
 80177c0:	3718      	adds	r7, #24
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}

080177c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80177c6:	b580      	push	{r7, lr}
 80177c8:	b084      	sub	sp, #16
 80177ca:	af00      	add	r7, sp, #0
 80177cc:	6078      	str	r0, [r7, #4]
 80177ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80177d0:	683b      	ldr	r3, [r7, #0]
 80177d2:	331a      	adds	r3, #26
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7ff f80d 	bl	80167f4 <ld_word>
 80177da:	4603      	mov	r3, r0
 80177dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	781b      	ldrb	r3, [r3, #0]
 80177e2:	2b03      	cmp	r3, #3
 80177e4:	d109      	bne.n	80177fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	3314      	adds	r3, #20
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7ff f802 	bl	80167f4 <ld_word>
 80177f0:	4603      	mov	r3, r0
 80177f2:	041b      	lsls	r3, r3, #16
 80177f4:	68fa      	ldr	r2, [r7, #12]
 80177f6:	4313      	orrs	r3, r2
 80177f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80177fa:	68fb      	ldr	r3, [r7, #12]
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3710      	adds	r7, #16
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b084      	sub	sp, #16
 8017808:	af00      	add	r7, sp, #0
 801780a:	60f8      	str	r0, [r7, #12]
 801780c:	60b9      	str	r1, [r7, #8]
 801780e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	331a      	adds	r3, #26
 8017814:	687a      	ldr	r2, [r7, #4]
 8017816:	b292      	uxth	r2, r2
 8017818:	4611      	mov	r1, r2
 801781a:	4618      	mov	r0, r3
 801781c:	f7ff f825 	bl	801686a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	781b      	ldrb	r3, [r3, #0]
 8017824:	2b03      	cmp	r3, #3
 8017826:	d109      	bne.n	801783c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	f103 0214 	add.w	r2, r3, #20
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	0c1b      	lsrs	r3, r3, #16
 8017832:	b29b      	uxth	r3, r3
 8017834:	4619      	mov	r1, r3
 8017836:	4610      	mov	r0, r2
 8017838:	f7ff f817 	bl	801686a <st_word>
	}
}
 801783c:	bf00      	nop
 801783e:	3710      	adds	r7, #16
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b086      	sub	sp, #24
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801784e:	2304      	movs	r3, #4
 8017850:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8017858:	e03c      	b.n	80178d4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	69db      	ldr	r3, [r3, #28]
 801785e:	4619      	mov	r1, r3
 8017860:	6938      	ldr	r0, [r7, #16]
 8017862:	f7ff faa9 	bl	8016db8 <move_window>
 8017866:	4603      	mov	r3, r0
 8017868:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801786a:	7dfb      	ldrb	r3, [r7, #23]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d136      	bne.n	80178de <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6a1b      	ldr	r3, [r3, #32]
 8017874:	781b      	ldrb	r3, [r3, #0]
 8017876:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8017878:	7bfb      	ldrb	r3, [r7, #15]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d102      	bne.n	8017884 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801787e:	2304      	movs	r3, #4
 8017880:	75fb      	strb	r3, [r7, #23]
 8017882:	e031      	b.n	80178e8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	6a1b      	ldr	r3, [r3, #32]
 8017888:	330b      	adds	r3, #11
 801788a:	781b      	ldrb	r3, [r3, #0]
 801788c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017890:	73bb      	strb	r3, [r7, #14]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	7bba      	ldrb	r2, [r7, #14]
 8017896:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8017898:	7bfb      	ldrb	r3, [r7, #15]
 801789a:	2be5      	cmp	r3, #229	; 0xe5
 801789c:	d011      	beq.n	80178c2 <dir_read+0x7e>
 801789e:	7bfb      	ldrb	r3, [r7, #15]
 80178a0:	2b2e      	cmp	r3, #46	; 0x2e
 80178a2:	d00e      	beq.n	80178c2 <dir_read+0x7e>
 80178a4:	7bbb      	ldrb	r3, [r7, #14]
 80178a6:	2b0f      	cmp	r3, #15
 80178a8:	d00b      	beq.n	80178c2 <dir_read+0x7e>
 80178aa:	7bbb      	ldrb	r3, [r7, #14]
 80178ac:	f023 0320 	bic.w	r3, r3, #32
 80178b0:	2b08      	cmp	r3, #8
 80178b2:	bf0c      	ite	eq
 80178b4:	2301      	moveq	r3, #1
 80178b6:	2300      	movne	r3, #0
 80178b8:	b2db      	uxtb	r3, r3
 80178ba:	461a      	mov	r2, r3
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	4293      	cmp	r3, r2
 80178c0:	d00f      	beq.n	80178e2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80178c2:	2100      	movs	r1, #0
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	f7ff fe72 	bl	80175ae <dir_next>
 80178ca:	4603      	mov	r3, r0
 80178cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80178ce:	7dfb      	ldrb	r3, [r7, #23]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d108      	bne.n	80178e6 <dir_read+0xa2>
	while (dp->sect) {
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	69db      	ldr	r3, [r3, #28]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d1be      	bne.n	801785a <dir_read+0x16>
 80178dc:	e004      	b.n	80178e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80178de:	bf00      	nop
 80178e0:	e002      	b.n	80178e8 <dir_read+0xa4>
				break;
 80178e2:	bf00      	nop
 80178e4:	e000      	b.n	80178e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80178e6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80178e8:	7dfb      	ldrb	r3, [r7, #23]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d002      	beq.n	80178f4 <dir_read+0xb0>
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	2200      	movs	r2, #0
 80178f2:	61da      	str	r2, [r3, #28]
	return res;
 80178f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80178f6:	4618      	mov	r0, r3
 80178f8:	3718      	adds	r7, #24
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bd80      	pop	{r7, pc}

080178fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80178fe:	b580      	push	{r7, lr}
 8017900:	b086      	sub	sp, #24
 8017902:	af00      	add	r7, sp, #0
 8017904:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801790c:	2100      	movs	r1, #0
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	f7ff fdd2 	bl	80174b8 <dir_sdi>
 8017914:	4603      	mov	r3, r0
 8017916:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017918:	7dfb      	ldrb	r3, [r7, #23]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d001      	beq.n	8017922 <dir_find+0x24>
 801791e:	7dfb      	ldrb	r3, [r7, #23]
 8017920:	e03e      	b.n	80179a0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	69db      	ldr	r3, [r3, #28]
 8017926:	4619      	mov	r1, r3
 8017928:	6938      	ldr	r0, [r7, #16]
 801792a:	f7ff fa45 	bl	8016db8 <move_window>
 801792e:	4603      	mov	r3, r0
 8017930:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017932:	7dfb      	ldrb	r3, [r7, #23]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d12f      	bne.n	8017998 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	6a1b      	ldr	r3, [r3, #32]
 801793c:	781b      	ldrb	r3, [r3, #0]
 801793e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017940:	7bfb      	ldrb	r3, [r7, #15]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d102      	bne.n	801794c <dir_find+0x4e>
 8017946:	2304      	movs	r3, #4
 8017948:	75fb      	strb	r3, [r7, #23]
 801794a:	e028      	b.n	801799e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	6a1b      	ldr	r3, [r3, #32]
 8017950:	330b      	adds	r3, #11
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017958:	b2da      	uxtb	r2, r3
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6a1b      	ldr	r3, [r3, #32]
 8017962:	330b      	adds	r3, #11
 8017964:	781b      	ldrb	r3, [r3, #0]
 8017966:	f003 0308 	and.w	r3, r3, #8
 801796a:	2b00      	cmp	r3, #0
 801796c:	d10a      	bne.n	8017984 <dir_find+0x86>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6a18      	ldr	r0, [r3, #32]
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	3324      	adds	r3, #36	; 0x24
 8017976:	220b      	movs	r2, #11
 8017978:	4619      	mov	r1, r3
 801797a:	f7fe fff9 	bl	8016970 <mem_cmp>
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d00b      	beq.n	801799c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017984:	2100      	movs	r1, #0
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	f7ff fe11 	bl	80175ae <dir_next>
 801798c:	4603      	mov	r3, r0
 801798e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017990:	7dfb      	ldrb	r3, [r7, #23]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d0c5      	beq.n	8017922 <dir_find+0x24>
 8017996:	e002      	b.n	801799e <dir_find+0xa0>
		if (res != FR_OK) break;
 8017998:	bf00      	nop
 801799a:	e000      	b.n	801799e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801799c:	bf00      	nop

	return res;
 801799e:	7dfb      	ldrb	r3, [r7, #23]
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3718      	adds	r7, #24
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80179b6:	2101      	movs	r1, #1
 80179b8:	6878      	ldr	r0, [r7, #4]
 80179ba:	f7ff febd 	bl	8017738 <dir_alloc>
 80179be:	4603      	mov	r3, r0
 80179c0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80179c2:	7bfb      	ldrb	r3, [r7, #15]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d11c      	bne.n	8017a02 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	69db      	ldr	r3, [r3, #28]
 80179cc:	4619      	mov	r1, r3
 80179ce:	68b8      	ldr	r0, [r7, #8]
 80179d0:	f7ff f9f2 	bl	8016db8 <move_window>
 80179d4:	4603      	mov	r3, r0
 80179d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80179d8:	7bfb      	ldrb	r3, [r7, #15]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d111      	bne.n	8017a02 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	6a1b      	ldr	r3, [r3, #32]
 80179e2:	2220      	movs	r2, #32
 80179e4:	2100      	movs	r1, #0
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7fe ffa7 	bl	801693a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	6a18      	ldr	r0, [r3, #32]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	3324      	adds	r3, #36	; 0x24
 80179f4:	220b      	movs	r2, #11
 80179f6:	4619      	mov	r1, r3
 80179f8:	f7fe ff7e 	bl	80168f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80179fc:	68bb      	ldr	r3, [r7, #8]
 80179fe:	2201      	movs	r2, #1
 8017a00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3710      	adds	r7, #16
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b086      	sub	sp, #24
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8017a16:	683b      	ldr	r3, [r7, #0]
 8017a18:	2200      	movs	r2, #0
 8017a1a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	69db      	ldr	r3, [r3, #28]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d04e      	beq.n	8017ac2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8017a24:	2300      	movs	r3, #0
 8017a26:	613b      	str	r3, [r7, #16]
 8017a28:	693b      	ldr	r3, [r7, #16]
 8017a2a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8017a2c:	e021      	b.n	8017a72 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	6a1a      	ldr	r2, [r3, #32]
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	1c59      	adds	r1, r3, #1
 8017a36:	6179      	str	r1, [r7, #20]
 8017a38:	4413      	add	r3, r2
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8017a3e:	7bfb      	ldrb	r3, [r7, #15]
 8017a40:	2b20      	cmp	r3, #32
 8017a42:	d100      	bne.n	8017a46 <get_fileinfo+0x3a>
 8017a44:	e015      	b.n	8017a72 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8017a46:	7bfb      	ldrb	r3, [r7, #15]
 8017a48:	2b05      	cmp	r3, #5
 8017a4a:	d101      	bne.n	8017a50 <get_fileinfo+0x44>
 8017a4c:	23e5      	movs	r3, #229	; 0xe5
 8017a4e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8017a50:	697b      	ldr	r3, [r7, #20]
 8017a52:	2b09      	cmp	r3, #9
 8017a54:	d106      	bne.n	8017a64 <get_fileinfo+0x58>
 8017a56:	693b      	ldr	r3, [r7, #16]
 8017a58:	1c5a      	adds	r2, r3, #1
 8017a5a:	613a      	str	r2, [r7, #16]
 8017a5c:	683a      	ldr	r2, [r7, #0]
 8017a5e:	4413      	add	r3, r2
 8017a60:	222e      	movs	r2, #46	; 0x2e
 8017a62:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8017a64:	693b      	ldr	r3, [r7, #16]
 8017a66:	1c5a      	adds	r2, r3, #1
 8017a68:	613a      	str	r2, [r7, #16]
 8017a6a:	683a      	ldr	r2, [r7, #0]
 8017a6c:	4413      	add	r3, r2
 8017a6e:	7bfa      	ldrb	r2, [r7, #15]
 8017a70:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	2b0a      	cmp	r3, #10
 8017a76:	d9da      	bls.n	8017a2e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8017a78:	683a      	ldr	r2, [r7, #0]
 8017a7a:	693b      	ldr	r3, [r7, #16]
 8017a7c:	4413      	add	r3, r2
 8017a7e:	3309      	adds	r3, #9
 8017a80:	2200      	movs	r2, #0
 8017a82:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	6a1b      	ldr	r3, [r3, #32]
 8017a88:	7ada      	ldrb	r2, [r3, #11]
 8017a8a:	683b      	ldr	r3, [r7, #0]
 8017a8c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	6a1b      	ldr	r3, [r3, #32]
 8017a92:	331c      	adds	r3, #28
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7fe fec5 	bl	8016824 <ld_dword>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	6a1b      	ldr	r3, [r3, #32]
 8017aa4:	3316      	adds	r3, #22
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f7fe febc 	bl	8016824 <ld_dword>
 8017aac:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	b29a      	uxth	r2, r3
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	80da      	strh	r2, [r3, #6]
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	0c1b      	lsrs	r3, r3, #16
 8017aba:	b29a      	uxth	r2, r3
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	809a      	strh	r2, [r3, #4]
 8017ac0:	e000      	b.n	8017ac4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8017ac2:	bf00      	nop
}
 8017ac4:	3718      	adds	r7, #24
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd80      	pop	{r7, pc}
	...

08017acc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b088      	sub	sp, #32
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
 8017ad4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017ad6:	683b      	ldr	r3, [r7, #0]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	60fb      	str	r3, [r7, #12]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	3324      	adds	r3, #36	; 0x24
 8017ae0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017ae2:	220b      	movs	r2, #11
 8017ae4:	2120      	movs	r1, #32
 8017ae6:	68b8      	ldr	r0, [r7, #8]
 8017ae8:	f7fe ff27 	bl	801693a <mem_set>
	si = i = 0; ni = 8;
 8017aec:	2300      	movs	r3, #0
 8017aee:	613b      	str	r3, [r7, #16]
 8017af0:	693b      	ldr	r3, [r7, #16]
 8017af2:	61fb      	str	r3, [r7, #28]
 8017af4:	2308      	movs	r3, #8
 8017af6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	1c5a      	adds	r2, r3, #1
 8017afc:	61fa      	str	r2, [r7, #28]
 8017afe:	68fa      	ldr	r2, [r7, #12]
 8017b00:	4413      	add	r3, r2
 8017b02:	781b      	ldrb	r3, [r3, #0]
 8017b04:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017b06:	7efb      	ldrb	r3, [r7, #27]
 8017b08:	2b20      	cmp	r3, #32
 8017b0a:	d94e      	bls.n	8017baa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017b0c:	7efb      	ldrb	r3, [r7, #27]
 8017b0e:	2b2f      	cmp	r3, #47	; 0x2f
 8017b10:	d006      	beq.n	8017b20 <create_name+0x54>
 8017b12:	7efb      	ldrb	r3, [r7, #27]
 8017b14:	2b5c      	cmp	r3, #92	; 0x5c
 8017b16:	d110      	bne.n	8017b3a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017b18:	e002      	b.n	8017b20 <create_name+0x54>
 8017b1a:	69fb      	ldr	r3, [r7, #28]
 8017b1c:	3301      	adds	r3, #1
 8017b1e:	61fb      	str	r3, [r7, #28]
 8017b20:	68fa      	ldr	r2, [r7, #12]
 8017b22:	69fb      	ldr	r3, [r7, #28]
 8017b24:	4413      	add	r3, r2
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	2b2f      	cmp	r3, #47	; 0x2f
 8017b2a:	d0f6      	beq.n	8017b1a <create_name+0x4e>
 8017b2c:	68fa      	ldr	r2, [r7, #12]
 8017b2e:	69fb      	ldr	r3, [r7, #28]
 8017b30:	4413      	add	r3, r2
 8017b32:	781b      	ldrb	r3, [r3, #0]
 8017b34:	2b5c      	cmp	r3, #92	; 0x5c
 8017b36:	d0f0      	beq.n	8017b1a <create_name+0x4e>
			break;
 8017b38:	e038      	b.n	8017bac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017b3a:	7efb      	ldrb	r3, [r7, #27]
 8017b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8017b3e:	d003      	beq.n	8017b48 <create_name+0x7c>
 8017b40:	693a      	ldr	r2, [r7, #16]
 8017b42:	697b      	ldr	r3, [r7, #20]
 8017b44:	429a      	cmp	r2, r3
 8017b46:	d30c      	bcc.n	8017b62 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	2b0b      	cmp	r3, #11
 8017b4c:	d002      	beq.n	8017b54 <create_name+0x88>
 8017b4e:	7efb      	ldrb	r3, [r7, #27]
 8017b50:	2b2e      	cmp	r3, #46	; 0x2e
 8017b52:	d001      	beq.n	8017b58 <create_name+0x8c>
 8017b54:	2306      	movs	r3, #6
 8017b56:	e044      	b.n	8017be2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017b58:	2308      	movs	r3, #8
 8017b5a:	613b      	str	r3, [r7, #16]
 8017b5c:	230b      	movs	r3, #11
 8017b5e:	617b      	str	r3, [r7, #20]
			continue;
 8017b60:	e022      	b.n	8017ba8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8017b62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	da04      	bge.n	8017b74 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017b6a:	7efb      	ldrb	r3, [r7, #27]
 8017b6c:	3b80      	subs	r3, #128	; 0x80
 8017b6e:	4a1f      	ldr	r2, [pc, #124]	; (8017bec <create_name+0x120>)
 8017b70:	5cd3      	ldrb	r3, [r2, r3]
 8017b72:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017b74:	7efb      	ldrb	r3, [r7, #27]
 8017b76:	4619      	mov	r1, r3
 8017b78:	481d      	ldr	r0, [pc, #116]	; (8017bf0 <create_name+0x124>)
 8017b7a:	f7fe ff20 	bl	80169be <chk_chr>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d001      	beq.n	8017b88 <create_name+0xbc>
 8017b84:	2306      	movs	r3, #6
 8017b86:	e02c      	b.n	8017be2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017b88:	7efb      	ldrb	r3, [r7, #27]
 8017b8a:	2b60      	cmp	r3, #96	; 0x60
 8017b8c:	d905      	bls.n	8017b9a <create_name+0xce>
 8017b8e:	7efb      	ldrb	r3, [r7, #27]
 8017b90:	2b7a      	cmp	r3, #122	; 0x7a
 8017b92:	d802      	bhi.n	8017b9a <create_name+0xce>
 8017b94:	7efb      	ldrb	r3, [r7, #27]
 8017b96:	3b20      	subs	r3, #32
 8017b98:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	1c5a      	adds	r2, r3, #1
 8017b9e:	613a      	str	r2, [r7, #16]
 8017ba0:	68ba      	ldr	r2, [r7, #8]
 8017ba2:	4413      	add	r3, r2
 8017ba4:	7efa      	ldrb	r2, [r7, #27]
 8017ba6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017ba8:	e7a6      	b.n	8017af8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017baa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017bac:	68fa      	ldr	r2, [r7, #12]
 8017bae:	69fb      	ldr	r3, [r7, #28]
 8017bb0:	441a      	add	r2, r3
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017bb6:	693b      	ldr	r3, [r7, #16]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d101      	bne.n	8017bc0 <create_name+0xf4>
 8017bbc:	2306      	movs	r3, #6
 8017bbe:	e010      	b.n	8017be2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	2be5      	cmp	r3, #229	; 0xe5
 8017bc6:	d102      	bne.n	8017bce <create_name+0x102>
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	2205      	movs	r2, #5
 8017bcc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017bce:	7efb      	ldrb	r3, [r7, #27]
 8017bd0:	2b20      	cmp	r3, #32
 8017bd2:	d801      	bhi.n	8017bd8 <create_name+0x10c>
 8017bd4:	2204      	movs	r2, #4
 8017bd6:	e000      	b.n	8017bda <create_name+0x10e>
 8017bd8:	2200      	movs	r2, #0
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	330b      	adds	r3, #11
 8017bde:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017be0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3720      	adds	r7, #32
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}
 8017bea:	bf00      	nop
 8017bec:	0801f3d8 	.word	0x0801f3d8
 8017bf0:	0801d8a0 	.word	0x0801d8a0

08017bf4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b086      	sub	sp, #24
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017c02:	693b      	ldr	r3, [r7, #16]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017c08:	e002      	b.n	8017c10 <follow_path+0x1c>
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	3301      	adds	r3, #1
 8017c0e:	603b      	str	r3, [r7, #0]
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	2b2f      	cmp	r3, #47	; 0x2f
 8017c16:	d0f8      	beq.n	8017c0a <follow_path+0x16>
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	2b5c      	cmp	r3, #92	; 0x5c
 8017c1e:	d0f4      	beq.n	8017c0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017c20:	693b      	ldr	r3, [r7, #16]
 8017c22:	2200      	movs	r2, #0
 8017c24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	781b      	ldrb	r3, [r3, #0]
 8017c2a:	2b1f      	cmp	r3, #31
 8017c2c:	d80a      	bhi.n	8017c44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2280      	movs	r2, #128	; 0x80
 8017c32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017c36:	2100      	movs	r1, #0
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f7ff fc3d 	bl	80174b8 <dir_sdi>
 8017c3e:	4603      	mov	r3, r0
 8017c40:	75fb      	strb	r3, [r7, #23]
 8017c42:	e043      	b.n	8017ccc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017c44:	463b      	mov	r3, r7
 8017c46:	4619      	mov	r1, r3
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	f7ff ff3f 	bl	8017acc <create_name>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017c52:	7dfb      	ldrb	r3, [r7, #23]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d134      	bne.n	8017cc2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017c58:	6878      	ldr	r0, [r7, #4]
 8017c5a:	f7ff fe50 	bl	80178fe <dir_find>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017c68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017c6a:	7dfb      	ldrb	r3, [r7, #23]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d00a      	beq.n	8017c86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017c70:	7dfb      	ldrb	r3, [r7, #23]
 8017c72:	2b04      	cmp	r3, #4
 8017c74:	d127      	bne.n	8017cc6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017c76:	7afb      	ldrb	r3, [r7, #11]
 8017c78:	f003 0304 	and.w	r3, r3, #4
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d122      	bne.n	8017cc6 <follow_path+0xd2>
 8017c80:	2305      	movs	r3, #5
 8017c82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017c84:	e01f      	b.n	8017cc6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017c86:	7afb      	ldrb	r3, [r7, #11]
 8017c88:	f003 0304 	and.w	r3, r3, #4
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d11c      	bne.n	8017cca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	799b      	ldrb	r3, [r3, #6]
 8017c94:	f003 0310 	and.w	r3, r3, #16
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d102      	bne.n	8017ca2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017c9c:	2305      	movs	r3, #5
 8017c9e:	75fb      	strb	r3, [r7, #23]
 8017ca0:	e014      	b.n	8017ccc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	695b      	ldr	r3, [r3, #20]
 8017cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017cb0:	4413      	add	r3, r2
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	f7ff fd86 	bl	80177c6 <ld_clust>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	693b      	ldr	r3, [r7, #16]
 8017cbe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017cc0:	e7c0      	b.n	8017c44 <follow_path+0x50>
			if (res != FR_OK) break;
 8017cc2:	bf00      	nop
 8017cc4:	e002      	b.n	8017ccc <follow_path+0xd8>
				break;
 8017cc6:	bf00      	nop
 8017cc8:	e000      	b.n	8017ccc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017cca:	bf00      	nop
			}
		}
	}

	return res;
 8017ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8017cce:	4618      	mov	r0, r3
 8017cd0:	3718      	adds	r7, #24
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}

08017cd6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017cd6:	b480      	push	{r7}
 8017cd8:	b087      	sub	sp, #28
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8017cde:	f04f 33ff 	mov.w	r3, #4294967295
 8017ce2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d031      	beq.n	8017d50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	617b      	str	r3, [r7, #20]
 8017cf2:	e002      	b.n	8017cfa <get_ldnumber+0x24>
 8017cf4:	697b      	ldr	r3, [r7, #20]
 8017cf6:	3301      	adds	r3, #1
 8017cf8:	617b      	str	r3, [r7, #20]
 8017cfa:	697b      	ldr	r3, [r7, #20]
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	2b20      	cmp	r3, #32
 8017d00:	d903      	bls.n	8017d0a <get_ldnumber+0x34>
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	781b      	ldrb	r3, [r3, #0]
 8017d06:	2b3a      	cmp	r3, #58	; 0x3a
 8017d08:	d1f4      	bne.n	8017cf4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	781b      	ldrb	r3, [r3, #0]
 8017d0e:	2b3a      	cmp	r3, #58	; 0x3a
 8017d10:	d11c      	bne.n	8017d4c <get_ldnumber+0x76>
			tp = *path;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	1c5a      	adds	r2, r3, #1
 8017d1c:	60fa      	str	r2, [r7, #12]
 8017d1e:	781b      	ldrb	r3, [r3, #0]
 8017d20:	3b30      	subs	r3, #48	; 0x30
 8017d22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	2b09      	cmp	r3, #9
 8017d28:	d80e      	bhi.n	8017d48 <get_ldnumber+0x72>
 8017d2a:	68fa      	ldr	r2, [r7, #12]
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d10a      	bne.n	8017d48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d107      	bne.n	8017d48 <get_ldnumber+0x72>
					vol = (int)i;
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	3301      	adds	r3, #1
 8017d40:	617b      	str	r3, [r7, #20]
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	697a      	ldr	r2, [r7, #20]
 8017d46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017d48:	693b      	ldr	r3, [r7, #16]
 8017d4a:	e002      	b.n	8017d52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017d50:	693b      	ldr	r3, [r7, #16]
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	371c      	adds	r7, #28
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr
	...

08017d60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b082      	sub	sp, #8
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	70da      	strb	r2, [r3, #3]
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f04f 32ff 	mov.w	r2, #4294967295
 8017d76:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017d78:	6839      	ldr	r1, [r7, #0]
 8017d7a:	6878      	ldr	r0, [r7, #4]
 8017d7c:	f7ff f81c 	bl	8016db8 <move_window>
 8017d80:	4603      	mov	r3, r0
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d001      	beq.n	8017d8a <check_fs+0x2a>
 8017d86:	2304      	movs	r3, #4
 8017d88:	e038      	b.n	8017dfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	3334      	adds	r3, #52	; 0x34
 8017d8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7fe fd2e 	bl	80167f4 <ld_word>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	461a      	mov	r2, r3
 8017d9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d001      	beq.n	8017da8 <check_fs+0x48>
 8017da4:	2303      	movs	r3, #3
 8017da6:	e029      	b.n	8017dfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017dae:	2be9      	cmp	r3, #233	; 0xe9
 8017db0:	d009      	beq.n	8017dc6 <check_fs+0x66>
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017db8:	2beb      	cmp	r3, #235	; 0xeb
 8017dba:	d11e      	bne.n	8017dfa <check_fs+0x9a>
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017dc2:	2b90      	cmp	r3, #144	; 0x90
 8017dc4:	d119      	bne.n	8017dfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	3334      	adds	r3, #52	; 0x34
 8017dca:	3336      	adds	r3, #54	; 0x36
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f7fe fd29 	bl	8016824 <ld_dword>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017dd8:	4a0a      	ldr	r2, [pc, #40]	; (8017e04 <check_fs+0xa4>)
 8017dda:	4293      	cmp	r3, r2
 8017ddc:	d101      	bne.n	8017de2 <check_fs+0x82>
 8017dde:	2300      	movs	r3, #0
 8017de0:	e00c      	b.n	8017dfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	3334      	adds	r3, #52	; 0x34
 8017de6:	3352      	adds	r3, #82	; 0x52
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7fe fd1b 	bl	8016824 <ld_dword>
 8017dee:	4603      	mov	r3, r0
 8017df0:	4a05      	ldr	r2, [pc, #20]	; (8017e08 <check_fs+0xa8>)
 8017df2:	4293      	cmp	r3, r2
 8017df4:	d101      	bne.n	8017dfa <check_fs+0x9a>
 8017df6:	2300      	movs	r3, #0
 8017df8:	e000      	b.n	8017dfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017dfa:	2302      	movs	r3, #2
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3708      	adds	r7, #8
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}
 8017e04:	00544146 	.word	0x00544146
 8017e08:	33544146 	.word	0x33544146

08017e0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b096      	sub	sp, #88	; 0x58
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	4613      	mov	r3, r2
 8017e18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017e20:	68f8      	ldr	r0, [r7, #12]
 8017e22:	f7ff ff58 	bl	8017cd6 <get_ldnumber>
 8017e26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	da01      	bge.n	8017e32 <find_volume+0x26>
 8017e2e:	230b      	movs	r3, #11
 8017e30:	e235      	b.n	801829e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8017e32:	4aa5      	ldr	r2, [pc, #660]	; (80180c8 <find_volume+0x2bc>)
 8017e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d101      	bne.n	8017e46 <find_volume+0x3a>
 8017e42:	230c      	movs	r3, #12
 8017e44:	e22b      	b.n	801829e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8017e46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017e48:	f7fe fdd4 	bl	80169f4 <lock_fs>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d101      	bne.n	8017e56 <find_volume+0x4a>
 8017e52:	230f      	movs	r3, #15
 8017e54:	e223      	b.n	801829e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8017e56:	68bb      	ldr	r3, [r7, #8]
 8017e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017e5c:	79fb      	ldrb	r3, [r7, #7]
 8017e5e:	f023 0301 	bic.w	r3, r3, #1
 8017e62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e66:	781b      	ldrb	r3, [r3, #0]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d01a      	beq.n	8017ea2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8017e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e6e:	785b      	ldrb	r3, [r3, #1]
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7fe fc21 	bl	80166b8 <disk_status>
 8017e76:	4603      	mov	r3, r0
 8017e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e80:	f003 0301 	and.w	r3, r3, #1
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d10c      	bne.n	8017ea2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017e88:	79fb      	ldrb	r3, [r7, #7]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d007      	beq.n	8017e9e <find_volume+0x92>
 8017e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e92:	f003 0304 	and.w	r3, r3, #4
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d001      	beq.n	8017e9e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8017e9a:	230a      	movs	r3, #10
 8017e9c:	e1ff      	b.n	801829e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	e1fd      	b.n	801829e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017eaa:	b2da      	uxtb	r2, r3
 8017eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eb2:	785b      	ldrb	r3, [r3, #1]
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7fe fc19 	bl	80166ec <disk_initialize>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017ec4:	f003 0301 	and.w	r3, r3, #1
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d001      	beq.n	8017ed0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017ecc:	2303      	movs	r3, #3
 8017ece:	e1e6      	b.n	801829e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017ed0:	79fb      	ldrb	r3, [r7, #7]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d007      	beq.n	8017ee6 <find_volume+0xda>
 8017ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017eda:	f003 0304 	and.w	r3, r3, #4
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d001      	beq.n	8017ee6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8017ee2:	230a      	movs	r3, #10
 8017ee4:	e1db      	b.n	801829e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017eea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017eec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017eee:	f7ff ff37 	bl	8017d60 <check_fs>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017efc:	2b02      	cmp	r3, #2
 8017efe:	d149      	bne.n	8017f94 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017f00:	2300      	movs	r3, #0
 8017f02:	643b      	str	r3, [r7, #64]	; 0x40
 8017f04:	e01e      	b.n	8017f44 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f0e:	011b      	lsls	r3, r3, #4
 8017f10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017f14:	4413      	add	r3, r2
 8017f16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1a:	3304      	adds	r3, #4
 8017f1c:	781b      	ldrb	r3, [r3, #0]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d006      	beq.n	8017f30 <find_volume+0x124>
 8017f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f24:	3308      	adds	r3, #8
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7fe fc7c 	bl	8016824 <ld_dword>
 8017f2c:	4602      	mov	r2, r0
 8017f2e:	e000      	b.n	8017f32 <find_volume+0x126>
 8017f30:	2200      	movs	r2, #0
 8017f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f34:	009b      	lsls	r3, r3, #2
 8017f36:	3358      	adds	r3, #88	; 0x58
 8017f38:	443b      	add	r3, r7
 8017f3a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f40:	3301      	adds	r3, #1
 8017f42:	643b      	str	r3, [r7, #64]	; 0x40
 8017f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f46:	2b03      	cmp	r3, #3
 8017f48:	d9dd      	bls.n	8017f06 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d002      	beq.n	8017f5a <find_volume+0x14e>
 8017f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f56:	3b01      	subs	r3, #1
 8017f58:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f5c:	009b      	lsls	r3, r3, #2
 8017f5e:	3358      	adds	r3, #88	; 0x58
 8017f60:	443b      	add	r3, r7
 8017f62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017f66:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d005      	beq.n	8017f7a <find_volume+0x16e>
 8017f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017f72:	f7ff fef5 	bl	8017d60 <check_fs>
 8017f76:	4603      	mov	r3, r0
 8017f78:	e000      	b.n	8017f7c <find_volume+0x170>
 8017f7a:	2303      	movs	r3, #3
 8017f7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	d905      	bls.n	8017f94 <find_volume+0x188>
 8017f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f8a:	3301      	adds	r3, #1
 8017f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8017f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f90:	2b03      	cmp	r3, #3
 8017f92:	d9e2      	bls.n	8017f5a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017f98:	2b04      	cmp	r3, #4
 8017f9a:	d101      	bne.n	8017fa0 <find_volume+0x194>
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	e17e      	b.n	801829e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017fa4:	2b01      	cmp	r3, #1
 8017fa6:	d901      	bls.n	8017fac <find_volume+0x1a0>
 8017fa8:	230d      	movs	r3, #13
 8017faa:	e178      	b.n	801829e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fae:	3334      	adds	r3, #52	; 0x34
 8017fb0:	330b      	adds	r3, #11
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7fe fc1e 	bl	80167f4 <ld_word>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017fbe:	d001      	beq.n	8017fc4 <find_volume+0x1b8>
 8017fc0:	230d      	movs	r3, #13
 8017fc2:	e16c      	b.n	801829e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fc6:	3334      	adds	r3, #52	; 0x34
 8017fc8:	3316      	adds	r3, #22
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f7fe fc12 	bl	80167f4 <ld_word>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d106      	bne.n	8017fe8 <find_volume+0x1dc>
 8017fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fdc:	3334      	adds	r3, #52	; 0x34
 8017fde:	3324      	adds	r3, #36	; 0x24
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7fe fc1f 	bl	8016824 <ld_dword>
 8017fe6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017fec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ff0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8017ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ff6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ffa:	789b      	ldrb	r3, [r3, #2]
 8017ffc:	2b01      	cmp	r3, #1
 8017ffe:	d005      	beq.n	801800c <find_volume+0x200>
 8018000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018002:	789b      	ldrb	r3, [r3, #2]
 8018004:	2b02      	cmp	r3, #2
 8018006:	d001      	beq.n	801800c <find_volume+0x200>
 8018008:	230d      	movs	r3, #13
 801800a:	e148      	b.n	801829e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801800e:	789b      	ldrb	r3, [r3, #2]
 8018010:	461a      	mov	r2, r3
 8018012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018014:	fb02 f303 	mul.w	r3, r2, r3
 8018018:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801801c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018020:	b29a      	uxth	r2, r3
 8018022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018024:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018028:	895b      	ldrh	r3, [r3, #10]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d008      	beq.n	8018040 <find_volume+0x234>
 801802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018030:	895b      	ldrh	r3, [r3, #10]
 8018032:	461a      	mov	r2, r3
 8018034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018036:	895b      	ldrh	r3, [r3, #10]
 8018038:	3b01      	subs	r3, #1
 801803a:	4013      	ands	r3, r2
 801803c:	2b00      	cmp	r3, #0
 801803e:	d001      	beq.n	8018044 <find_volume+0x238>
 8018040:	230d      	movs	r3, #13
 8018042:	e12c      	b.n	801829e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018046:	3334      	adds	r3, #52	; 0x34
 8018048:	3311      	adds	r3, #17
 801804a:	4618      	mov	r0, r3
 801804c:	f7fe fbd2 	bl	80167f4 <ld_word>
 8018050:	4603      	mov	r3, r0
 8018052:	461a      	mov	r2, r3
 8018054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018056:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801805a:	891b      	ldrh	r3, [r3, #8]
 801805c:	f003 030f 	and.w	r3, r3, #15
 8018060:	b29b      	uxth	r3, r3
 8018062:	2b00      	cmp	r3, #0
 8018064:	d001      	beq.n	801806a <find_volume+0x25e>
 8018066:	230d      	movs	r3, #13
 8018068:	e119      	b.n	801829e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801806c:	3334      	adds	r3, #52	; 0x34
 801806e:	3313      	adds	r3, #19
 8018070:	4618      	mov	r0, r3
 8018072:	f7fe fbbf 	bl	80167f4 <ld_word>
 8018076:	4603      	mov	r3, r0
 8018078:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801807a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801807c:	2b00      	cmp	r3, #0
 801807e:	d106      	bne.n	801808e <find_volume+0x282>
 8018080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018082:	3334      	adds	r3, #52	; 0x34
 8018084:	3320      	adds	r3, #32
 8018086:	4618      	mov	r0, r3
 8018088:	f7fe fbcc 	bl	8016824 <ld_dword>
 801808c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018090:	3334      	adds	r3, #52	; 0x34
 8018092:	330e      	adds	r3, #14
 8018094:	4618      	mov	r0, r3
 8018096:	f7fe fbad 	bl	80167f4 <ld_word>
 801809a:	4603      	mov	r3, r0
 801809c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801809e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d101      	bne.n	80180a8 <find_volume+0x29c>
 80180a4:	230d      	movs	r3, #13
 80180a6:	e0fa      	b.n	801829e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80180a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80180aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180ac:	4413      	add	r3, r2
 80180ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80180b0:	8912      	ldrh	r2, [r2, #8]
 80180b2:	0912      	lsrs	r2, r2, #4
 80180b4:	b292      	uxth	r2, r2
 80180b6:	4413      	add	r3, r2
 80180b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80180ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80180bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180be:	429a      	cmp	r2, r3
 80180c0:	d204      	bcs.n	80180cc <find_volume+0x2c0>
 80180c2:	230d      	movs	r3, #13
 80180c4:	e0eb      	b.n	801829e <find_volume+0x492>
 80180c6:	bf00      	nop
 80180c8:	200134b0 	.word	0x200134b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80180cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80180ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d0:	1ad3      	subs	r3, r2, r3
 80180d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80180d4:	8952      	ldrh	r2, [r2, #10]
 80180d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80180da:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80180dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d101      	bne.n	80180e6 <find_volume+0x2da>
 80180e2:	230d      	movs	r3, #13
 80180e4:	e0db      	b.n	801829e <find_volume+0x492>
		fmt = FS_FAT32;
 80180e6:	2303      	movs	r3, #3
 80180e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80180f2:	4293      	cmp	r3, r2
 80180f4:	d802      	bhi.n	80180fc <find_volume+0x2f0>
 80180f6:	2302      	movs	r3, #2
 80180f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80180fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018102:	4293      	cmp	r3, r2
 8018104:	d802      	bhi.n	801810c <find_volume+0x300>
 8018106:	2301      	movs	r3, #1
 8018108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810e:	1c9a      	adds	r2, r3, #2
 8018110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018112:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8018114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018116:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018118:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801811a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801811c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801811e:	441a      	add	r2, r3
 8018120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018122:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8018124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018128:	441a      	add	r2, r3
 801812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801812c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801812e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018132:	2b03      	cmp	r3, #3
 8018134:	d11e      	bne.n	8018174 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018138:	3334      	adds	r3, #52	; 0x34
 801813a:	332a      	adds	r3, #42	; 0x2a
 801813c:	4618      	mov	r0, r3
 801813e:	f7fe fb59 	bl	80167f4 <ld_word>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	d001      	beq.n	801814c <find_volume+0x340>
 8018148:	230d      	movs	r3, #13
 801814a:	e0a8      	b.n	801829e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801814e:	891b      	ldrh	r3, [r3, #8]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d001      	beq.n	8018158 <find_volume+0x34c>
 8018154:	230d      	movs	r3, #13
 8018156:	e0a2      	b.n	801829e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801815a:	3334      	adds	r3, #52	; 0x34
 801815c:	332c      	adds	r3, #44	; 0x2c
 801815e:	4618      	mov	r0, r3
 8018160:	f7fe fb60 	bl	8016824 <ld_dword>
 8018164:	4602      	mov	r2, r0
 8018166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018168:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801816c:	699b      	ldr	r3, [r3, #24]
 801816e:	009b      	lsls	r3, r3, #2
 8018170:	647b      	str	r3, [r7, #68]	; 0x44
 8018172:	e01f      	b.n	80181b4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018176:	891b      	ldrh	r3, [r3, #8]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d101      	bne.n	8018180 <find_volume+0x374>
 801817c:	230d      	movs	r3, #13
 801817e:	e08e      	b.n	801829e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018186:	441a      	add	r2, r3
 8018188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801818a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801818c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018190:	2b02      	cmp	r3, #2
 8018192:	d103      	bne.n	801819c <find_volume+0x390>
 8018194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018196:	699b      	ldr	r3, [r3, #24]
 8018198:	005b      	lsls	r3, r3, #1
 801819a:	e00a      	b.n	80181b2 <find_volume+0x3a6>
 801819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801819e:	699a      	ldr	r2, [r3, #24]
 80181a0:	4613      	mov	r3, r2
 80181a2:	005b      	lsls	r3, r3, #1
 80181a4:	4413      	add	r3, r2
 80181a6:	085a      	lsrs	r2, r3, #1
 80181a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181aa:	699b      	ldr	r3, [r3, #24]
 80181ac:	f003 0301 	and.w	r3, r3, #1
 80181b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80181b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80181b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181b6:	69da      	ldr	r2, [r3, #28]
 80181b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80181be:	0a5b      	lsrs	r3, r3, #9
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d201      	bcs.n	80181c8 <find_volume+0x3bc>
 80181c4:	230d      	movs	r3, #13
 80181c6:	e06a      	b.n	801829e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80181c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ca:	f04f 32ff 	mov.w	r2, #4294967295
 80181ce:	615a      	str	r2, [r3, #20]
 80181d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181d2:	695a      	ldr	r2, [r3, #20]
 80181d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181d6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80181d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181da:	2280      	movs	r2, #128	; 0x80
 80181dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80181de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80181e2:	2b03      	cmp	r3, #3
 80181e4:	d149      	bne.n	801827a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80181e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e8:	3334      	adds	r3, #52	; 0x34
 80181ea:	3330      	adds	r3, #48	; 0x30
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7fe fb01 	bl	80167f4 <ld_word>
 80181f2:	4603      	mov	r3, r0
 80181f4:	2b01      	cmp	r3, #1
 80181f6:	d140      	bne.n	801827a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80181f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181fa:	3301      	adds	r3, #1
 80181fc:	4619      	mov	r1, r3
 80181fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018200:	f7fe fdda 	bl	8016db8 <move_window>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	d137      	bne.n	801827a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801820c:	2200      	movs	r2, #0
 801820e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018212:	3334      	adds	r3, #52	; 0x34
 8018214:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018218:	4618      	mov	r0, r3
 801821a:	f7fe faeb 	bl	80167f4 <ld_word>
 801821e:	4603      	mov	r3, r0
 8018220:	461a      	mov	r2, r3
 8018222:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018226:	429a      	cmp	r2, r3
 8018228:	d127      	bne.n	801827a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801822c:	3334      	adds	r3, #52	; 0x34
 801822e:	4618      	mov	r0, r3
 8018230:	f7fe faf8 	bl	8016824 <ld_dword>
 8018234:	4603      	mov	r3, r0
 8018236:	4a1c      	ldr	r2, [pc, #112]	; (80182a8 <find_volume+0x49c>)
 8018238:	4293      	cmp	r3, r2
 801823a:	d11e      	bne.n	801827a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801823e:	3334      	adds	r3, #52	; 0x34
 8018240:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018244:	4618      	mov	r0, r3
 8018246:	f7fe faed 	bl	8016824 <ld_dword>
 801824a:	4603      	mov	r3, r0
 801824c:	4a17      	ldr	r2, [pc, #92]	; (80182ac <find_volume+0x4a0>)
 801824e:	4293      	cmp	r3, r2
 8018250:	d113      	bne.n	801827a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018254:	3334      	adds	r3, #52	; 0x34
 8018256:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801825a:	4618      	mov	r0, r3
 801825c:	f7fe fae2 	bl	8016824 <ld_dword>
 8018260:	4602      	mov	r2, r0
 8018262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018264:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018268:	3334      	adds	r3, #52	; 0x34
 801826a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801826e:	4618      	mov	r0, r3
 8018270:	f7fe fad8 	bl	8016824 <ld_dword>
 8018274:	4602      	mov	r2, r0
 8018276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018278:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801827c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018280:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018282:	4b0b      	ldr	r3, [pc, #44]	; (80182b0 <find_volume+0x4a4>)
 8018284:	881b      	ldrh	r3, [r3, #0]
 8018286:	3301      	adds	r3, #1
 8018288:	b29a      	uxth	r2, r3
 801828a:	4b09      	ldr	r3, [pc, #36]	; (80182b0 <find_volume+0x4a4>)
 801828c:	801a      	strh	r2, [r3, #0]
 801828e:	4b08      	ldr	r3, [pc, #32]	; (80182b0 <find_volume+0x4a4>)
 8018290:	881a      	ldrh	r2, [r3, #0]
 8018292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018294:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018296:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018298:	f7fe fd26 	bl	8016ce8 <clear_lock>
#endif
	return FR_OK;
 801829c:	2300      	movs	r3, #0
}
 801829e:	4618      	mov	r0, r3
 80182a0:	3758      	adds	r7, #88	; 0x58
 80182a2:	46bd      	mov	sp, r7
 80182a4:	bd80      	pop	{r7, pc}
 80182a6:	bf00      	nop
 80182a8:	41615252 	.word	0x41615252
 80182ac:	61417272 	.word	0x61417272
 80182b0:	200134b4 	.word	0x200134b4

080182b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
 80182bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80182be:	2309      	movs	r3, #9
 80182c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d02e      	beq.n	8018326 <validate+0x72>
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d02a      	beq.n	8018326 <validate+0x72>
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	781b      	ldrb	r3, [r3, #0]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d025      	beq.n	8018326 <validate+0x72>
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	889a      	ldrh	r2, [r3, #4]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	88db      	ldrh	r3, [r3, #6]
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d11e      	bne.n	8018326 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7fe fb81 	bl	80169f4 <lock_fs>
 80182f2:	4603      	mov	r3, r0
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d014      	beq.n	8018322 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	785b      	ldrb	r3, [r3, #1]
 80182fe:	4618      	mov	r0, r3
 8018300:	f7fe f9da 	bl	80166b8 <disk_status>
 8018304:	4603      	mov	r3, r0
 8018306:	f003 0301 	and.w	r3, r3, #1
 801830a:	2b00      	cmp	r3, #0
 801830c:	d102      	bne.n	8018314 <validate+0x60>
				res = FR_OK;
 801830e:	2300      	movs	r3, #0
 8018310:	73fb      	strb	r3, [r7, #15]
 8018312:	e008      	b.n	8018326 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	2100      	movs	r1, #0
 801831a:	4618      	mov	r0, r3
 801831c:	f7fe fb80 	bl	8016a20 <unlock_fs>
 8018320:	e001      	b.n	8018326 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8018322:	230f      	movs	r3, #15
 8018324:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018326:	7bfb      	ldrb	r3, [r7, #15]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d102      	bne.n	8018332 <validate+0x7e>
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	e000      	b.n	8018334 <validate+0x80>
 8018332:	2300      	movs	r3, #0
 8018334:	683a      	ldr	r2, [r7, #0]
 8018336:	6013      	str	r3, [r2, #0]
	return res;
 8018338:	7bfb      	ldrb	r3, [r7, #15]
}
 801833a:	4618      	mov	r0, r3
 801833c:	3710      	adds	r7, #16
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}
	...

08018344 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b088      	sub	sp, #32
 8018348:	af00      	add	r7, sp, #0
 801834a:	60f8      	str	r0, [r7, #12]
 801834c:	60b9      	str	r1, [r7, #8]
 801834e:	4613      	mov	r3, r2
 8018350:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018352:	68bb      	ldr	r3, [r7, #8]
 8018354:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018356:	f107 0310 	add.w	r3, r7, #16
 801835a:	4618      	mov	r0, r3
 801835c:	f7ff fcbb 	bl	8017cd6 <get_ldnumber>
 8018360:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018362:	69fb      	ldr	r3, [r7, #28]
 8018364:	2b00      	cmp	r3, #0
 8018366:	da01      	bge.n	801836c <f_mount+0x28>
 8018368:	230b      	movs	r3, #11
 801836a:	e048      	b.n	80183fe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801836c:	4a26      	ldr	r2, [pc, #152]	; (8018408 <f_mount+0xc4>)
 801836e:	69fb      	ldr	r3, [r7, #28]
 8018370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018374:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018376:	69bb      	ldr	r3, [r7, #24]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d00f      	beq.n	801839c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801837c:	69b8      	ldr	r0, [r7, #24]
 801837e:	f7fe fcb3 	bl	8016ce8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8018382:	69bb      	ldr	r3, [r7, #24]
 8018384:	68db      	ldr	r3, [r3, #12]
 8018386:	4618      	mov	r0, r3
 8018388:	f001 f985 	bl	8019696 <ff_del_syncobj>
 801838c:	4603      	mov	r3, r0
 801838e:	2b00      	cmp	r3, #0
 8018390:	d101      	bne.n	8018396 <f_mount+0x52>
 8018392:	2302      	movs	r3, #2
 8018394:	e033      	b.n	80183fe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018396:	69bb      	ldr	r3, [r7, #24]
 8018398:	2200      	movs	r2, #0
 801839a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d00f      	beq.n	80183c2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	2200      	movs	r2, #0
 80183a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80183a8:	69fb      	ldr	r3, [r7, #28]
 80183aa:	b2da      	uxtb	r2, r3
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	330c      	adds	r3, #12
 80183b0:	4619      	mov	r1, r3
 80183b2:	4610      	mov	r0, r2
 80183b4:	f001 f94f 	bl	8019656 <ff_cre_syncobj>
 80183b8:	4603      	mov	r3, r0
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d101      	bne.n	80183c2 <f_mount+0x7e>
 80183be:	2302      	movs	r3, #2
 80183c0:	e01d      	b.n	80183fe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80183c2:	68fa      	ldr	r2, [r7, #12]
 80183c4:	4910      	ldr	r1, [pc, #64]	; (8018408 <f_mount+0xc4>)
 80183c6:	69fb      	ldr	r3, [r7, #28]
 80183c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d002      	beq.n	80183d8 <f_mount+0x94>
 80183d2:	79fb      	ldrb	r3, [r7, #7]
 80183d4:	2b01      	cmp	r3, #1
 80183d6:	d001      	beq.n	80183dc <f_mount+0x98>
 80183d8:	2300      	movs	r3, #0
 80183da:	e010      	b.n	80183fe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80183dc:	f107 010c 	add.w	r1, r7, #12
 80183e0:	f107 0308 	add.w	r3, r7, #8
 80183e4:	2200      	movs	r2, #0
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7ff fd10 	bl	8017e0c <find_volume>
 80183ec:	4603      	mov	r3, r0
 80183ee:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	7dfa      	ldrb	r2, [r7, #23]
 80183f4:	4611      	mov	r1, r2
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7fe fb12 	bl	8016a20 <unlock_fs>
 80183fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3720      	adds	r7, #32
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
 8018406:	bf00      	nop
 8018408:	200134b0 	.word	0x200134b0

0801840c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b098      	sub	sp, #96	; 0x60
 8018410:	af00      	add	r7, sp, #0
 8018412:	60f8      	str	r0, [r7, #12]
 8018414:	60b9      	str	r1, [r7, #8]
 8018416:	4613      	mov	r3, r2
 8018418:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d101      	bne.n	8018424 <f_open+0x18>
 8018420:	2309      	movs	r3, #9
 8018422:	e1b4      	b.n	801878e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018424:	79fb      	ldrb	r3, [r7, #7]
 8018426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801842a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801842c:	79fa      	ldrb	r2, [r7, #7]
 801842e:	f107 0110 	add.w	r1, r7, #16
 8018432:	f107 0308 	add.w	r3, r7, #8
 8018436:	4618      	mov	r0, r3
 8018438:	f7ff fce8 	bl	8017e0c <find_volume>
 801843c:	4603      	mov	r3, r0
 801843e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8018442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018446:	2b00      	cmp	r3, #0
 8018448:	f040 8191 	bne.w	801876e <f_open+0x362>
		dj.obj.fs = fs;
 801844c:	693b      	ldr	r3, [r7, #16]
 801844e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018450:	68ba      	ldr	r2, [r7, #8]
 8018452:	f107 0314 	add.w	r3, r7, #20
 8018456:	4611      	mov	r1, r2
 8018458:	4618      	mov	r0, r3
 801845a:	f7ff fbcb 	bl	8017bf4 <follow_path>
 801845e:	4603      	mov	r3, r0
 8018460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018468:	2b00      	cmp	r3, #0
 801846a:	d11a      	bne.n	80184a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801846c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018470:	b25b      	sxtb	r3, r3
 8018472:	2b00      	cmp	r3, #0
 8018474:	da03      	bge.n	801847e <f_open+0x72>
				res = FR_INVALID_NAME;
 8018476:	2306      	movs	r3, #6
 8018478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801847c:	e011      	b.n	80184a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801847e:	79fb      	ldrb	r3, [r7, #7]
 8018480:	f023 0301 	bic.w	r3, r3, #1
 8018484:	2b00      	cmp	r3, #0
 8018486:	bf14      	ite	ne
 8018488:	2301      	movne	r3, #1
 801848a:	2300      	moveq	r3, #0
 801848c:	b2db      	uxtb	r3, r3
 801848e:	461a      	mov	r2, r3
 8018490:	f107 0314 	add.w	r3, r7, #20
 8018494:	4611      	mov	r1, r2
 8018496:	4618      	mov	r0, r3
 8018498:	f7fe fade 	bl	8016a58 <chk_lock>
 801849c:	4603      	mov	r3, r0
 801849e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80184a2:	79fb      	ldrb	r3, [r7, #7]
 80184a4:	f003 031c 	and.w	r3, r3, #28
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d07f      	beq.n	80185ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80184ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d017      	beq.n	80184e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80184b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80184b8:	2b04      	cmp	r3, #4
 80184ba:	d10e      	bne.n	80184da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80184bc:	f7fe fb28 	bl	8016b10 <enq_lock>
 80184c0:	4603      	mov	r3, r0
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d006      	beq.n	80184d4 <f_open+0xc8>
 80184c6:	f107 0314 	add.w	r3, r7, #20
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7ff fa6c 	bl	80179a8 <dir_register>
 80184d0:	4603      	mov	r3, r0
 80184d2:	e000      	b.n	80184d6 <f_open+0xca>
 80184d4:	2312      	movs	r3, #18
 80184d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80184da:	79fb      	ldrb	r3, [r7, #7]
 80184dc:	f043 0308 	orr.w	r3, r3, #8
 80184e0:	71fb      	strb	r3, [r7, #7]
 80184e2:	e010      	b.n	8018506 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80184e4:	7ebb      	ldrb	r3, [r7, #26]
 80184e6:	f003 0311 	and.w	r3, r3, #17
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d003      	beq.n	80184f6 <f_open+0xea>
					res = FR_DENIED;
 80184ee:	2307      	movs	r3, #7
 80184f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80184f4:	e007      	b.n	8018506 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80184f6:	79fb      	ldrb	r3, [r7, #7]
 80184f8:	f003 0304 	and.w	r3, r3, #4
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d002      	beq.n	8018506 <f_open+0xfa>
 8018500:	2308      	movs	r3, #8
 8018502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801850a:	2b00      	cmp	r3, #0
 801850c:	d168      	bne.n	80185e0 <f_open+0x1d4>
 801850e:	79fb      	ldrb	r3, [r7, #7]
 8018510:	f003 0308 	and.w	r3, r3, #8
 8018514:	2b00      	cmp	r3, #0
 8018516:	d063      	beq.n	80185e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018518:	f7fb fc1a 	bl	8013d50 <get_fattime>
 801851c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018520:	330e      	adds	r3, #14
 8018522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018524:	4618      	mov	r0, r3
 8018526:	f7fe f9bb 	bl	80168a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801852c:	3316      	adds	r3, #22
 801852e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018530:	4618      	mov	r0, r3
 8018532:	f7fe f9b5 	bl	80168a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018538:	330b      	adds	r3, #11
 801853a:	2220      	movs	r2, #32
 801853c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018542:	4611      	mov	r1, r2
 8018544:	4618      	mov	r0, r3
 8018546:	f7ff f93e 	bl	80177c6 <ld_clust>
 801854a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801854c:	693b      	ldr	r3, [r7, #16]
 801854e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018550:	2200      	movs	r2, #0
 8018552:	4618      	mov	r0, r3
 8018554:	f7ff f956 	bl	8017804 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801855a:	331c      	adds	r3, #28
 801855c:	2100      	movs	r1, #0
 801855e:	4618      	mov	r0, r3
 8018560:	f7fe f99e 	bl	80168a0 <st_dword>
					fs->wflag = 1;
 8018564:	693b      	ldr	r3, [r7, #16]
 8018566:	2201      	movs	r2, #1
 8018568:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801856c:	2b00      	cmp	r3, #0
 801856e:	d037      	beq.n	80185e0 <f_open+0x1d4>
						dw = fs->winsect;
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018574:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8018576:	f107 0314 	add.w	r3, r7, #20
 801857a:	2200      	movs	r2, #0
 801857c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801857e:	4618      	mov	r0, r3
 8018580:	f7fe fe69 	bl	8017256 <remove_chain>
 8018584:	4603      	mov	r3, r0
 8018586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801858a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801858e:	2b00      	cmp	r3, #0
 8018590:	d126      	bne.n	80185e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018592:	693b      	ldr	r3, [r7, #16]
 8018594:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018596:	4618      	mov	r0, r3
 8018598:	f7fe fc0e 	bl	8016db8 <move_window>
 801859c:	4603      	mov	r3, r0
 801859e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80185a2:	693b      	ldr	r3, [r7, #16]
 80185a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80185a6:	3a01      	subs	r2, #1
 80185a8:	611a      	str	r2, [r3, #16]
 80185aa:	e019      	b.n	80185e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80185ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d115      	bne.n	80185e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80185b4:	7ebb      	ldrb	r3, [r7, #26]
 80185b6:	f003 0310 	and.w	r3, r3, #16
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d003      	beq.n	80185c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80185be:	2304      	movs	r3, #4
 80185c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80185c4:	e00c      	b.n	80185e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80185c6:	79fb      	ldrb	r3, [r7, #7]
 80185c8:	f003 0302 	and.w	r3, r3, #2
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d007      	beq.n	80185e0 <f_open+0x1d4>
 80185d0:	7ebb      	ldrb	r3, [r7, #26]
 80185d2:	f003 0301 	and.w	r3, r3, #1
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d002      	beq.n	80185e0 <f_open+0x1d4>
						res = FR_DENIED;
 80185da:	2307      	movs	r3, #7
 80185dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80185e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d128      	bne.n	801863a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80185e8:	79fb      	ldrb	r3, [r7, #7]
 80185ea:	f003 0308 	and.w	r3, r3, #8
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d003      	beq.n	80185fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80185f2:	79fb      	ldrb	r3, [r7, #7]
 80185f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018608:	79fb      	ldrb	r3, [r7, #7]
 801860a:	f023 0301 	bic.w	r3, r3, #1
 801860e:	2b00      	cmp	r3, #0
 8018610:	bf14      	ite	ne
 8018612:	2301      	movne	r3, #1
 8018614:	2300      	moveq	r3, #0
 8018616:	b2db      	uxtb	r3, r3
 8018618:	461a      	mov	r2, r3
 801861a:	f107 0314 	add.w	r3, r7, #20
 801861e:	4611      	mov	r1, r2
 8018620:	4618      	mov	r0, r3
 8018622:	f7fe fa97 	bl	8016b54 <inc_lock>
 8018626:	4602      	mov	r2, r0
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	691b      	ldr	r3, [r3, #16]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d102      	bne.n	801863a <f_open+0x22e>
 8018634:	2302      	movs	r3, #2
 8018636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801863a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801863e:	2b00      	cmp	r3, #0
 8018640:	f040 8095 	bne.w	801876e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018644:	693b      	ldr	r3, [r7, #16]
 8018646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018648:	4611      	mov	r1, r2
 801864a:	4618      	mov	r0, r3
 801864c:	f7ff f8bb 	bl	80177c6 <ld_clust>
 8018650:	4602      	mov	r2, r0
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018658:	331c      	adds	r3, #28
 801865a:	4618      	mov	r0, r3
 801865c:	f7fe f8e2 	bl	8016824 <ld_dword>
 8018660:	4602      	mov	r2, r0
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	2200      	movs	r2, #0
 801866a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801866c:	693a      	ldr	r2, [r7, #16]
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	88da      	ldrh	r2, [r3, #6]
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	79fa      	ldrb	r2, [r7, #7]
 801867e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	2200      	movs	r2, #0
 8018684:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	2200      	movs	r2, #0
 801868a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	2200      	movs	r2, #0
 8018690:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	3330      	adds	r3, #48	; 0x30
 8018696:	f44f 7200 	mov.w	r2, #512	; 0x200
 801869a:	2100      	movs	r1, #0
 801869c:	4618      	mov	r0, r3
 801869e:	f7fe f94c 	bl	801693a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80186a2:	79fb      	ldrb	r3, [r7, #7]
 80186a4:	f003 0320 	and.w	r3, r3, #32
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d060      	beq.n	801876e <f_open+0x362>
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	68db      	ldr	r3, [r3, #12]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d05c      	beq.n	801876e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	68da      	ldr	r2, [r3, #12]
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80186bc:	693b      	ldr	r3, [r7, #16]
 80186be:	895b      	ldrh	r3, [r3, #10]
 80186c0:	025b      	lsls	r3, r3, #9
 80186c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	689b      	ldr	r3, [r3, #8]
 80186c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	68db      	ldr	r3, [r3, #12]
 80186ce:	657b      	str	r3, [r7, #84]	; 0x54
 80186d0:	e016      	b.n	8018700 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80186d6:	4618      	mov	r0, r3
 80186d8:	f7fe fc29 	bl	8016f2e <get_fat>
 80186dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80186de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186e0:	2b01      	cmp	r3, #1
 80186e2:	d802      	bhi.n	80186ea <f_open+0x2de>
 80186e4:	2302      	movs	r3, #2
 80186e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80186ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186f0:	d102      	bne.n	80186f8 <f_open+0x2ec>
 80186f2:	2301      	movs	r3, #1
 80186f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80186f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80186fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186fc:	1ad3      	subs	r3, r2, r3
 80186fe:	657b      	str	r3, [r7, #84]	; 0x54
 8018700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018704:	2b00      	cmp	r3, #0
 8018706:	d103      	bne.n	8018710 <f_open+0x304>
 8018708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801870a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801870c:	429a      	cmp	r2, r3
 801870e:	d8e0      	bhi.n	80186d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018714:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801871a:	2b00      	cmp	r3, #0
 801871c:	d127      	bne.n	801876e <f_open+0x362>
 801871e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018724:	2b00      	cmp	r3, #0
 8018726:	d022      	beq.n	801876e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801872c:	4618      	mov	r0, r3
 801872e:	f7fe fbdf 	bl	8016ef0 <clust2sect>
 8018732:	6478      	str	r0, [r7, #68]	; 0x44
 8018734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018736:	2b00      	cmp	r3, #0
 8018738:	d103      	bne.n	8018742 <f_open+0x336>
						res = FR_INT_ERR;
 801873a:	2302      	movs	r3, #2
 801873c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018740:	e015      	b.n	801876e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018744:	0a5a      	lsrs	r2, r3, #9
 8018746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018748:	441a      	add	r2, r3
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	7858      	ldrb	r0, [r3, #1]
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	6a1a      	ldr	r2, [r3, #32]
 801875c:	2301      	movs	r3, #1
 801875e:	f7fd ffeb 	bl	8016738 <disk_read>
 8018762:	4603      	mov	r3, r0
 8018764:	2b00      	cmp	r3, #0
 8018766:	d002      	beq.n	801876e <f_open+0x362>
 8018768:	2301      	movs	r3, #1
 801876a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801876e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018772:	2b00      	cmp	r3, #0
 8018774:	d002      	beq.n	801877c <f_open+0x370>
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	2200      	movs	r2, #0
 801877a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801877c:	693b      	ldr	r3, [r7, #16]
 801877e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8018782:	4611      	mov	r1, r2
 8018784:	4618      	mov	r0, r3
 8018786:	f7fe f94b 	bl	8016a20 <unlock_fs>
 801878a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801878e:	4618      	mov	r0, r3
 8018790:	3760      	adds	r7, #96	; 0x60
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}

08018796 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018796:	b580      	push	{r7, lr}
 8018798:	b08e      	sub	sp, #56	; 0x38
 801879a:	af00      	add	r7, sp, #0
 801879c:	60f8      	str	r0, [r7, #12]
 801879e:	60b9      	str	r1, [r7, #8]
 80187a0:	607a      	str	r2, [r7, #4]
 80187a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	2200      	movs	r2, #0
 80187ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	f107 0214 	add.w	r2, r7, #20
 80187b4:	4611      	mov	r1, r2
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7ff fd7c 	bl	80182b4 <validate>
 80187bc:	4603      	mov	r3, r0
 80187be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80187c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d107      	bne.n	80187da <f_read+0x44>
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	7d5b      	ldrb	r3, [r3, #21]
 80187ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80187d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d009      	beq.n	80187ee <f_read+0x58>
 80187da:	697b      	ldr	r3, [r7, #20]
 80187dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80187e0:	4611      	mov	r1, r2
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7fe f91c 	bl	8016a20 <unlock_fs>
 80187e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80187ec:	e13d      	b.n	8018a6a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	7d1b      	ldrb	r3, [r3, #20]
 80187f2:	f003 0301 	and.w	r3, r3, #1
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d106      	bne.n	8018808 <f_read+0x72>
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	2107      	movs	r1, #7
 80187fe:	4618      	mov	r0, r3
 8018800:	f7fe f90e 	bl	8016a20 <unlock_fs>
 8018804:	2307      	movs	r3, #7
 8018806:	e130      	b.n	8018a6a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	68da      	ldr	r2, [r3, #12]
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	699b      	ldr	r3, [r3, #24]
 8018810:	1ad3      	subs	r3, r2, r3
 8018812:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	6a3b      	ldr	r3, [r7, #32]
 8018818:	429a      	cmp	r2, r3
 801881a:	f240 811c 	bls.w	8018a56 <f_read+0x2c0>
 801881e:	6a3b      	ldr	r3, [r7, #32]
 8018820:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8018822:	e118      	b.n	8018a56 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	699b      	ldr	r3, [r3, #24]
 8018828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801882c:	2b00      	cmp	r3, #0
 801882e:	f040 80e4 	bne.w	80189fa <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	699b      	ldr	r3, [r3, #24]
 8018836:	0a5b      	lsrs	r3, r3, #9
 8018838:	697a      	ldr	r2, [r7, #20]
 801883a:	8952      	ldrh	r2, [r2, #10]
 801883c:	3a01      	subs	r2, #1
 801883e:	4013      	ands	r3, r2
 8018840:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018842:	69fb      	ldr	r3, [r7, #28]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d139      	bne.n	80188bc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	699b      	ldr	r3, [r3, #24]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d103      	bne.n	8018858 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	689b      	ldr	r3, [r3, #8]
 8018854:	633b      	str	r3, [r7, #48]	; 0x30
 8018856:	e013      	b.n	8018880 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801885c:	2b00      	cmp	r3, #0
 801885e:	d007      	beq.n	8018870 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	699b      	ldr	r3, [r3, #24]
 8018864:	4619      	mov	r1, r3
 8018866:	68f8      	ldr	r0, [r7, #12]
 8018868:	f7fe fdf2 	bl	8017450 <clmt_clust>
 801886c:	6338      	str	r0, [r7, #48]	; 0x30
 801886e:	e007      	b.n	8018880 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018870:	68fa      	ldr	r2, [r7, #12]
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	69db      	ldr	r3, [r3, #28]
 8018876:	4619      	mov	r1, r3
 8018878:	4610      	mov	r0, r2
 801887a:	f7fe fb58 	bl	8016f2e <get_fat>
 801887e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018882:	2b01      	cmp	r3, #1
 8018884:	d809      	bhi.n	801889a <f_read+0x104>
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	2202      	movs	r2, #2
 801888a:	755a      	strb	r2, [r3, #21]
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	2102      	movs	r1, #2
 8018890:	4618      	mov	r0, r3
 8018892:	f7fe f8c5 	bl	8016a20 <unlock_fs>
 8018896:	2302      	movs	r3, #2
 8018898:	e0e7      	b.n	8018a6a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188a0:	d109      	bne.n	80188b6 <f_read+0x120>
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	2201      	movs	r2, #1
 80188a6:	755a      	strb	r2, [r3, #21]
 80188a8:	697b      	ldr	r3, [r7, #20]
 80188aa:	2101      	movs	r1, #1
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7fe f8b7 	bl	8016a20 <unlock_fs>
 80188b2:	2301      	movs	r3, #1
 80188b4:	e0d9      	b.n	8018a6a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188ba:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80188bc:	697a      	ldr	r2, [r7, #20]
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	69db      	ldr	r3, [r3, #28]
 80188c2:	4619      	mov	r1, r3
 80188c4:	4610      	mov	r0, r2
 80188c6:	f7fe fb13 	bl	8016ef0 <clust2sect>
 80188ca:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80188cc:	69bb      	ldr	r3, [r7, #24]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d109      	bne.n	80188e6 <f_read+0x150>
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2202      	movs	r2, #2
 80188d6:	755a      	strb	r2, [r3, #21]
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	2102      	movs	r1, #2
 80188dc:	4618      	mov	r0, r3
 80188de:	f7fe f89f 	bl	8016a20 <unlock_fs>
 80188e2:	2302      	movs	r3, #2
 80188e4:	e0c1      	b.n	8018a6a <f_read+0x2d4>
			sect += csect;
 80188e6:	69ba      	ldr	r2, [r7, #24]
 80188e8:	69fb      	ldr	r3, [r7, #28]
 80188ea:	4413      	add	r3, r2
 80188ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	0a5b      	lsrs	r3, r3, #9
 80188f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80188f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d03e      	beq.n	8018978 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80188fa:	69fa      	ldr	r2, [r7, #28]
 80188fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188fe:	4413      	add	r3, r2
 8018900:	697a      	ldr	r2, [r7, #20]
 8018902:	8952      	ldrh	r2, [r2, #10]
 8018904:	4293      	cmp	r3, r2
 8018906:	d905      	bls.n	8018914 <f_read+0x17e>
					cc = fs->csize - csect;
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	895b      	ldrh	r3, [r3, #10]
 801890c:	461a      	mov	r2, r3
 801890e:	69fb      	ldr	r3, [r7, #28]
 8018910:	1ad3      	subs	r3, r2, r3
 8018912:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018914:	697b      	ldr	r3, [r7, #20]
 8018916:	7858      	ldrb	r0, [r3, #1]
 8018918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891a:	69ba      	ldr	r2, [r7, #24]
 801891c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801891e:	f7fd ff0b 	bl	8016738 <disk_read>
 8018922:	4603      	mov	r3, r0
 8018924:	2b00      	cmp	r3, #0
 8018926:	d009      	beq.n	801893c <f_read+0x1a6>
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	2201      	movs	r2, #1
 801892c:	755a      	strb	r2, [r3, #21]
 801892e:	697b      	ldr	r3, [r7, #20]
 8018930:	2101      	movs	r1, #1
 8018932:	4618      	mov	r0, r3
 8018934:	f7fe f874 	bl	8016a20 <unlock_fs>
 8018938:	2301      	movs	r3, #1
 801893a:	e096      	b.n	8018a6a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	7d1b      	ldrb	r3, [r3, #20]
 8018940:	b25b      	sxtb	r3, r3
 8018942:	2b00      	cmp	r3, #0
 8018944:	da14      	bge.n	8018970 <f_read+0x1da>
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	6a1a      	ldr	r2, [r3, #32]
 801894a:	69bb      	ldr	r3, [r7, #24]
 801894c:	1ad3      	subs	r3, r2, r3
 801894e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018950:	429a      	cmp	r2, r3
 8018952:	d90d      	bls.n	8018970 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	6a1a      	ldr	r2, [r3, #32]
 8018958:	69bb      	ldr	r3, [r7, #24]
 801895a:	1ad3      	subs	r3, r2, r3
 801895c:	025b      	lsls	r3, r3, #9
 801895e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018960:	18d0      	adds	r0, r2, r3
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	3330      	adds	r3, #48	; 0x30
 8018966:	f44f 7200 	mov.w	r2, #512	; 0x200
 801896a:	4619      	mov	r1, r3
 801896c:	f7fd ffc4 	bl	80168f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8018970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018972:	025b      	lsls	r3, r3, #9
 8018974:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018976:	e05a      	b.n	8018a2e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	6a1b      	ldr	r3, [r3, #32]
 801897c:	69ba      	ldr	r2, [r7, #24]
 801897e:	429a      	cmp	r2, r3
 8018980:	d038      	beq.n	80189f4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	7d1b      	ldrb	r3, [r3, #20]
 8018986:	b25b      	sxtb	r3, r3
 8018988:	2b00      	cmp	r3, #0
 801898a:	da1d      	bge.n	80189c8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801898c:	697b      	ldr	r3, [r7, #20]
 801898e:	7858      	ldrb	r0, [r3, #1]
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	6a1a      	ldr	r2, [r3, #32]
 801899a:	2301      	movs	r3, #1
 801899c:	f7fd feec 	bl	8016778 <disk_write>
 80189a0:	4603      	mov	r3, r0
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d009      	beq.n	80189ba <f_read+0x224>
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	2201      	movs	r2, #1
 80189aa:	755a      	strb	r2, [r3, #21]
 80189ac:	697b      	ldr	r3, [r7, #20]
 80189ae:	2101      	movs	r1, #1
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7fe f835 	bl	8016a20 <unlock_fs>
 80189b6:	2301      	movs	r3, #1
 80189b8:	e057      	b.n	8018a6a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	7d1b      	ldrb	r3, [r3, #20]
 80189be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80189c2:	b2da      	uxtb	r2, r3
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	7858      	ldrb	r0, [r3, #1]
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80189d2:	2301      	movs	r3, #1
 80189d4:	69ba      	ldr	r2, [r7, #24]
 80189d6:	f7fd feaf 	bl	8016738 <disk_read>
 80189da:	4603      	mov	r3, r0
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d009      	beq.n	80189f4 <f_read+0x25e>
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	2201      	movs	r2, #1
 80189e4:	755a      	strb	r2, [r3, #21]
 80189e6:	697b      	ldr	r3, [r7, #20]
 80189e8:	2101      	movs	r1, #1
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7fe f818 	bl	8016a20 <unlock_fs>
 80189f0:	2301      	movs	r3, #1
 80189f2:	e03a      	b.n	8018a6a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	69ba      	ldr	r2, [r7, #24]
 80189f8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	699b      	ldr	r3, [r3, #24]
 80189fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a02:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018a06:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8018a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d901      	bls.n	8018a14 <f_read+0x27e>
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	699b      	ldr	r3, [r3, #24]
 8018a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a22:	4413      	add	r3, r2
 8018a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a26:	4619      	mov	r1, r3
 8018a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a2a:	f7fd ff65 	bl	80168f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8018a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a32:	4413      	add	r3, r2
 8018a34:	627b      	str	r3, [r7, #36]	; 0x24
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	699a      	ldr	r2, [r3, #24]
 8018a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a3c:	441a      	add	r2, r3
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	619a      	str	r2, [r3, #24]
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	681a      	ldr	r2, [r3, #0]
 8018a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a48:	441a      	add	r2, r3
 8018a4a:	683b      	ldr	r3, [r7, #0]
 8018a4c:	601a      	str	r2, [r3, #0]
 8018a4e:	687a      	ldr	r2, [r7, #4]
 8018a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a52:	1ad3      	subs	r3, r2, r3
 8018a54:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	f47f aee3 	bne.w	8018824 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	2100      	movs	r1, #0
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7fd ffdc 	bl	8016a20 <unlock_fs>
 8018a68:	2300      	movs	r3, #0
}
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	3738      	adds	r7, #56	; 0x38
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}

08018a72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018a72:	b580      	push	{r7, lr}
 8018a74:	b08c      	sub	sp, #48	; 0x30
 8018a76:	af00      	add	r7, sp, #0
 8018a78:	60f8      	str	r0, [r7, #12]
 8018a7a:	60b9      	str	r1, [r7, #8]
 8018a7c:	607a      	str	r2, [r7, #4]
 8018a7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018a84:	683b      	ldr	r3, [r7, #0]
 8018a86:	2200      	movs	r2, #0
 8018a88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	f107 0210 	add.w	r2, r7, #16
 8018a90:	4611      	mov	r1, r2
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7ff fc0e 	bl	80182b4 <validate>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d107      	bne.n	8018ab6 <f_write+0x44>
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	7d5b      	ldrb	r3, [r3, #21]
 8018aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d009      	beq.n	8018aca <f_write+0x58>
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018abc:	4611      	mov	r1, r2
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7fd ffae 	bl	8016a20 <unlock_fs>
 8018ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ac8:	e173      	b.n	8018db2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	7d1b      	ldrb	r3, [r3, #20]
 8018ace:	f003 0302 	and.w	r3, r3, #2
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d106      	bne.n	8018ae4 <f_write+0x72>
 8018ad6:	693b      	ldr	r3, [r7, #16]
 8018ad8:	2107      	movs	r1, #7
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7fd ffa0 	bl	8016a20 <unlock_fs>
 8018ae0:	2307      	movs	r3, #7
 8018ae2:	e166      	b.n	8018db2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	699a      	ldr	r2, [r3, #24]
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	441a      	add	r2, r3
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	699b      	ldr	r3, [r3, #24]
 8018af0:	429a      	cmp	r2, r3
 8018af2:	f080 814b 	bcs.w	8018d8c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	699b      	ldr	r3, [r3, #24]
 8018afa:	43db      	mvns	r3, r3
 8018afc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018afe:	e145      	b.n	8018d8c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	699b      	ldr	r3, [r3, #24]
 8018b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	f040 8101 	bne.w	8018d10 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	699b      	ldr	r3, [r3, #24]
 8018b12:	0a5b      	lsrs	r3, r3, #9
 8018b14:	693a      	ldr	r2, [r7, #16]
 8018b16:	8952      	ldrh	r2, [r2, #10]
 8018b18:	3a01      	subs	r2, #1
 8018b1a:	4013      	ands	r3, r2
 8018b1c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d14d      	bne.n	8018bc0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	699b      	ldr	r3, [r3, #24]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d10c      	bne.n	8018b46 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	689b      	ldr	r3, [r3, #8]
 8018b30:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d11a      	bne.n	8018b6e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	2100      	movs	r1, #0
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f7fe fbef 	bl	8017320 <create_chain>
 8018b42:	62b8      	str	r0, [r7, #40]	; 0x28
 8018b44:	e013      	b.n	8018b6e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d007      	beq.n	8018b5e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	699b      	ldr	r3, [r3, #24]
 8018b52:	4619      	mov	r1, r3
 8018b54:	68f8      	ldr	r0, [r7, #12]
 8018b56:	f7fe fc7b 	bl	8017450 <clmt_clust>
 8018b5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8018b5c:	e007      	b.n	8018b6e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018b5e:	68fa      	ldr	r2, [r7, #12]
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	69db      	ldr	r3, [r3, #28]
 8018b64:	4619      	mov	r1, r3
 8018b66:	4610      	mov	r0, r2
 8018b68:	f7fe fbda 	bl	8017320 <create_chain>
 8018b6c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	f000 8110 	beq.w	8018d96 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b78:	2b01      	cmp	r3, #1
 8018b7a:	d109      	bne.n	8018b90 <f_write+0x11e>
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	2202      	movs	r2, #2
 8018b80:	755a      	strb	r2, [r3, #21]
 8018b82:	693b      	ldr	r3, [r7, #16]
 8018b84:	2102      	movs	r1, #2
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fd ff4a 	bl	8016a20 <unlock_fs>
 8018b8c:	2302      	movs	r3, #2
 8018b8e:	e110      	b.n	8018db2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b96:	d109      	bne.n	8018bac <f_write+0x13a>
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	2201      	movs	r2, #1
 8018b9c:	755a      	strb	r2, [r3, #21]
 8018b9e:	693b      	ldr	r3, [r7, #16]
 8018ba0:	2101      	movs	r1, #1
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7fd ff3c 	bl	8016a20 <unlock_fs>
 8018ba8:	2301      	movs	r3, #1
 8018baa:	e102      	b.n	8018db2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bb0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	689b      	ldr	r3, [r3, #8]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d102      	bne.n	8018bc0 <f_write+0x14e>
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bbe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	7d1b      	ldrb	r3, [r3, #20]
 8018bc4:	b25b      	sxtb	r3, r3
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	da1d      	bge.n	8018c06 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018bca:	693b      	ldr	r3, [r7, #16]
 8018bcc:	7858      	ldrb	r0, [r3, #1]
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	6a1a      	ldr	r2, [r3, #32]
 8018bd8:	2301      	movs	r3, #1
 8018bda:	f7fd fdcd 	bl	8016778 <disk_write>
 8018bde:	4603      	mov	r3, r0
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d009      	beq.n	8018bf8 <f_write+0x186>
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2201      	movs	r2, #1
 8018be8:	755a      	strb	r2, [r3, #21]
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	2101      	movs	r1, #1
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7fd ff16 	bl	8016a20 <unlock_fs>
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	e0dc      	b.n	8018db2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	7d1b      	ldrb	r3, [r3, #20]
 8018bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c00:	b2da      	uxtb	r2, r3
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018c06:	693a      	ldr	r2, [r7, #16]
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	69db      	ldr	r3, [r3, #28]
 8018c0c:	4619      	mov	r1, r3
 8018c0e:	4610      	mov	r0, r2
 8018c10:	f7fe f96e 	bl	8016ef0 <clust2sect>
 8018c14:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018c16:	697b      	ldr	r3, [r7, #20]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d109      	bne.n	8018c30 <f_write+0x1be>
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	2202      	movs	r2, #2
 8018c20:	755a      	strb	r2, [r3, #21]
 8018c22:	693b      	ldr	r3, [r7, #16]
 8018c24:	2102      	movs	r1, #2
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fd fefa 	bl	8016a20 <unlock_fs>
 8018c2c:	2302      	movs	r3, #2
 8018c2e:	e0c0      	b.n	8018db2 <f_write+0x340>
			sect += csect;
 8018c30:	697a      	ldr	r2, [r7, #20]
 8018c32:	69bb      	ldr	r3, [r7, #24]
 8018c34:	4413      	add	r3, r2
 8018c36:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	0a5b      	lsrs	r3, r3, #9
 8018c3c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018c3e:	6a3b      	ldr	r3, [r7, #32]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d041      	beq.n	8018cc8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018c44:	69ba      	ldr	r2, [r7, #24]
 8018c46:	6a3b      	ldr	r3, [r7, #32]
 8018c48:	4413      	add	r3, r2
 8018c4a:	693a      	ldr	r2, [r7, #16]
 8018c4c:	8952      	ldrh	r2, [r2, #10]
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	d905      	bls.n	8018c5e <f_write+0x1ec>
					cc = fs->csize - csect;
 8018c52:	693b      	ldr	r3, [r7, #16]
 8018c54:	895b      	ldrh	r3, [r3, #10]
 8018c56:	461a      	mov	r2, r3
 8018c58:	69bb      	ldr	r3, [r7, #24]
 8018c5a:	1ad3      	subs	r3, r2, r3
 8018c5c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018c5e:	693b      	ldr	r3, [r7, #16]
 8018c60:	7858      	ldrb	r0, [r3, #1]
 8018c62:	6a3b      	ldr	r3, [r7, #32]
 8018c64:	697a      	ldr	r2, [r7, #20]
 8018c66:	69f9      	ldr	r1, [r7, #28]
 8018c68:	f7fd fd86 	bl	8016778 <disk_write>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d009      	beq.n	8018c86 <f_write+0x214>
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	2201      	movs	r2, #1
 8018c76:	755a      	strb	r2, [r3, #21]
 8018c78:	693b      	ldr	r3, [r7, #16]
 8018c7a:	2101      	movs	r1, #1
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f7fd fecf 	bl	8016a20 <unlock_fs>
 8018c82:	2301      	movs	r3, #1
 8018c84:	e095      	b.n	8018db2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	6a1a      	ldr	r2, [r3, #32]
 8018c8a:	697b      	ldr	r3, [r7, #20]
 8018c8c:	1ad3      	subs	r3, r2, r3
 8018c8e:	6a3a      	ldr	r2, [r7, #32]
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d915      	bls.n	8018cc0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	6a1a      	ldr	r2, [r3, #32]
 8018c9e:	697b      	ldr	r3, [r7, #20]
 8018ca0:	1ad3      	subs	r3, r2, r3
 8018ca2:	025b      	lsls	r3, r3, #9
 8018ca4:	69fa      	ldr	r2, [r7, #28]
 8018ca6:	4413      	add	r3, r2
 8018ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018cac:	4619      	mov	r1, r3
 8018cae:	f7fd fe23 	bl	80168f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	7d1b      	ldrb	r3, [r3, #20]
 8018cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018cba:	b2da      	uxtb	r2, r3
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018cc0:	6a3b      	ldr	r3, [r7, #32]
 8018cc2:	025b      	lsls	r3, r3, #9
 8018cc4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018cc6:	e044      	b.n	8018d52 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	6a1b      	ldr	r3, [r3, #32]
 8018ccc:	697a      	ldr	r2, [r7, #20]
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	d01b      	beq.n	8018d0a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	699a      	ldr	r2, [r3, #24]
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d215      	bcs.n	8018d0a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	7858      	ldrb	r0, [r3, #1]
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018ce8:	2301      	movs	r3, #1
 8018cea:	697a      	ldr	r2, [r7, #20]
 8018cec:	f7fd fd24 	bl	8016738 <disk_read>
 8018cf0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d009      	beq.n	8018d0a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	2201      	movs	r2, #1
 8018cfa:	755a      	strb	r2, [r3, #21]
 8018cfc:	693b      	ldr	r3, [r7, #16]
 8018cfe:	2101      	movs	r1, #1
 8018d00:	4618      	mov	r0, r3
 8018d02:	f7fd fe8d 	bl	8016a20 <unlock_fs>
 8018d06:	2301      	movs	r3, #1
 8018d08:	e053      	b.n	8018db2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	697a      	ldr	r2, [r7, #20]
 8018d0e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	699b      	ldr	r3, [r3, #24]
 8018d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d18:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018d1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	429a      	cmp	r2, r3
 8018d24:	d901      	bls.n	8018d2a <f_write+0x2b8>
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	699b      	ldr	r3, [r3, #24]
 8018d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d38:	4413      	add	r3, r2
 8018d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d3c:	69f9      	ldr	r1, [r7, #28]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7fd fdda 	bl	80168f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	7d1b      	ldrb	r3, [r3, #20]
 8018d48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018d4c:	b2da      	uxtb	r2, r3
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018d52:	69fa      	ldr	r2, [r7, #28]
 8018d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d56:	4413      	add	r3, r2
 8018d58:	61fb      	str	r3, [r7, #28]
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	699a      	ldr	r2, [r3, #24]
 8018d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d60:	441a      	add	r2, r3
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	619a      	str	r2, [r3, #24]
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	68da      	ldr	r2, [r3, #12]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	699b      	ldr	r3, [r3, #24]
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	bf38      	it	cc
 8018d72:	461a      	movcc	r2, r3
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	60da      	str	r2, [r3, #12]
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	681a      	ldr	r2, [r3, #0]
 8018d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d7e:	441a      	add	r2, r3
 8018d80:	683b      	ldr	r3, [r7, #0]
 8018d82:	601a      	str	r2, [r3, #0]
 8018d84:	687a      	ldr	r2, [r7, #4]
 8018d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d88:	1ad3      	subs	r3, r2, r3
 8018d8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	f47f aeb6 	bne.w	8018b00 <f_write+0x8e>
 8018d94:	e000      	b.n	8018d98 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018d96:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	7d1b      	ldrb	r3, [r3, #20]
 8018d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018da0:	b2da      	uxtb	r2, r3
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	2100      	movs	r1, #0
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7fd fe38 	bl	8016a20 <unlock_fs>
 8018db0:	2300      	movs	r3, #0
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3730      	adds	r7, #48	; 0x30
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}

08018dba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018dba:	b580      	push	{r7, lr}
 8018dbc:	b086      	sub	sp, #24
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	f107 0208 	add.w	r2, r7, #8
 8018dc8:	4611      	mov	r1, r2
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f7ff fa72 	bl	80182b4 <validate>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018dd4:	7dfb      	ldrb	r3, [r7, #23]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d16d      	bne.n	8018eb6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	7d1b      	ldrb	r3, [r3, #20]
 8018dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d067      	beq.n	8018eb6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	7d1b      	ldrb	r3, [r3, #20]
 8018dea:	b25b      	sxtb	r3, r3
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	da1a      	bge.n	8018e26 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018df0:	68bb      	ldr	r3, [r7, #8]
 8018df2:	7858      	ldrb	r0, [r3, #1]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	6a1a      	ldr	r2, [r3, #32]
 8018dfe:	2301      	movs	r3, #1
 8018e00:	f7fd fcba 	bl	8016778 <disk_write>
 8018e04:	4603      	mov	r3, r0
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d006      	beq.n	8018e18 <f_sync+0x5e>
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	2101      	movs	r1, #1
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7fd fe06 	bl	8016a20 <unlock_fs>
 8018e14:	2301      	movs	r3, #1
 8018e16:	e055      	b.n	8018ec4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	7d1b      	ldrb	r3, [r3, #20]
 8018e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e20:	b2da      	uxtb	r2, r3
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018e26:	f7fa ff93 	bl	8013d50 <get_fattime>
 8018e2a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018e2c:	68ba      	ldr	r2, [r7, #8]
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e32:	4619      	mov	r1, r3
 8018e34:	4610      	mov	r0, r2
 8018e36:	f7fd ffbf 	bl	8016db8 <move_window>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018e3e:	7dfb      	ldrb	r3, [r7, #23]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d138      	bne.n	8018eb6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e48:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	330b      	adds	r3, #11
 8018e4e:	781a      	ldrb	r2, [r3, #0]
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	330b      	adds	r3, #11
 8018e54:	f042 0220 	orr.w	r2, r2, #32
 8018e58:	b2d2      	uxtb	r2, r2
 8018e5a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6818      	ldr	r0, [r3, #0]
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	689b      	ldr	r3, [r3, #8]
 8018e64:	461a      	mov	r2, r3
 8018e66:	68f9      	ldr	r1, [r7, #12]
 8018e68:	f7fe fccc 	bl	8017804 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	f103 021c 	add.w	r2, r3, #28
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	4619      	mov	r1, r3
 8018e78:	4610      	mov	r0, r2
 8018e7a:	f7fd fd11 	bl	80168a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	3316      	adds	r3, #22
 8018e82:	6939      	ldr	r1, [r7, #16]
 8018e84:	4618      	mov	r0, r3
 8018e86:	f7fd fd0b 	bl	80168a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	3312      	adds	r3, #18
 8018e8e:	2100      	movs	r1, #0
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7fd fcea 	bl	801686a <st_word>
					fs->wflag = 1;
 8018e96:	68bb      	ldr	r3, [r7, #8]
 8018e98:	2201      	movs	r2, #1
 8018e9a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018e9c:	68bb      	ldr	r3, [r7, #8]
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f7fd ffb8 	bl	8016e14 <sync_fs>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	7d1b      	ldrb	r3, [r3, #20]
 8018eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018eb0:	b2da      	uxtb	r2, r3
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018eb6:	68bb      	ldr	r3, [r7, #8]
 8018eb8:	7dfa      	ldrb	r2, [r7, #23]
 8018eba:	4611      	mov	r1, r2
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f7fd fdaf 	bl	8016a20 <unlock_fs>
 8018ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	3718      	adds	r7, #24
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}

08018ecc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b084      	sub	sp, #16
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f7ff ff70 	bl	8018dba <f_sync>
 8018eda:	4603      	mov	r3, r0
 8018edc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018ede:	7bfb      	ldrb	r3, [r7, #15]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d11d      	bne.n	8018f20 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	f107 0208 	add.w	r2, r7, #8
 8018eea:	4611      	mov	r1, r2
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7ff f9e1 	bl	80182b4 <validate>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018ef6:	7bfb      	ldrb	r3, [r7, #15]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d111      	bne.n	8018f20 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	691b      	ldr	r3, [r3, #16]
 8018f00:	4618      	mov	r0, r3
 8018f02:	f7fd feb5 	bl	8016c70 <dec_lock>
 8018f06:	4603      	mov	r3, r0
 8018f08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018f0a:	7bfb      	ldrb	r3, [r7, #15]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d102      	bne.n	8018f16 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	2200      	movs	r2, #0
 8018f14:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8018f16:	68bb      	ldr	r3, [r7, #8]
 8018f18:	2100      	movs	r1, #0
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f7fd fd80 	bl	8016a20 <unlock_fs>
#endif
		}
	}
	return res;
 8018f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f22:	4618      	mov	r0, r3
 8018f24:	3710      	adds	r7, #16
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bd80      	pop	{r7, pc}

08018f2a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8018f2a:	b580      	push	{r7, lr}
 8018f2c:	b090      	sub	sp, #64	; 0x40
 8018f2e:	af00      	add	r7, sp, #0
 8018f30:	6078      	str	r0, [r7, #4]
 8018f32:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	f107 0208 	add.w	r2, r7, #8
 8018f3a:	4611      	mov	r1, r2
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7ff f9b9 	bl	80182b4 <validate>
 8018f42:	4603      	mov	r3, r0
 8018f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8018f48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d103      	bne.n	8018f58 <f_lseek+0x2e>
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	7d5b      	ldrb	r3, [r3, #21]
 8018f54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8018f58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d009      	beq.n	8018f74 <f_lseek+0x4a>
 8018f60:	68bb      	ldr	r3, [r7, #8]
 8018f62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8018f66:	4611      	mov	r1, r2
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f7fd fd59 	bl	8016a20 <unlock_fs>
 8018f6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f72:	e229      	b.n	80193c8 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	f000 80ea 	beq.w	8019152 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8018f7e:	683b      	ldr	r3, [r7, #0]
 8018f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f84:	d164      	bne.n	8019050 <f_lseek+0x126>
			tbl = fp->cltbl;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f8a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8018f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f8e:	1d1a      	adds	r2, r3, #4
 8018f90:	627a      	str	r2, [r7, #36]	; 0x24
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	617b      	str	r3, [r7, #20]
 8018f96:	2302      	movs	r3, #2
 8018f98:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	689b      	ldr	r3, [r3, #8]
 8018f9e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8018fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d044      	beq.n	8019030 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8018fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa8:	613b      	str	r3, [r7, #16]
 8018faa:	2300      	movs	r3, #0
 8018fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb0:	3302      	adds	r3, #2
 8018fb2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8018fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb6:	60fb      	str	r3, [r7, #12]
 8018fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fba:	3301      	adds	r3, #1
 8018fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7fd ffb3 	bl	8016f2e <get_fat>
 8018fc8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8018fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fcc:	2b01      	cmp	r3, #1
 8018fce:	d809      	bhi.n	8018fe4 <f_lseek+0xba>
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2202      	movs	r2, #2
 8018fd4:	755a      	strb	r2, [r3, #21]
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	2102      	movs	r1, #2
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7fd fd20 	bl	8016a20 <unlock_fs>
 8018fe0:	2302      	movs	r3, #2
 8018fe2:	e1f1      	b.n	80193c8 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fea:	d109      	bne.n	8019000 <f_lseek+0xd6>
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	2201      	movs	r2, #1
 8018ff0:	755a      	strb	r2, [r3, #21]
 8018ff2:	68bb      	ldr	r3, [r7, #8]
 8018ff4:	2101      	movs	r1, #1
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7fd fd12 	bl	8016a20 <unlock_fs>
 8018ffc:	2301      	movs	r3, #1
 8018ffe:	e1e3      	b.n	80193c8 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	3301      	adds	r3, #1
 8019004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019006:	429a      	cmp	r2, r3
 8019008:	d0d4      	beq.n	8018fb4 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801900a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801900c:	697b      	ldr	r3, [r7, #20]
 801900e:	429a      	cmp	r2, r3
 8019010:	d809      	bhi.n	8019026 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8019012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019014:	1d1a      	adds	r2, r3, #4
 8019016:	627a      	str	r2, [r7, #36]	; 0x24
 8019018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801901a:	601a      	str	r2, [r3, #0]
 801901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801901e:	1d1a      	adds	r2, r3, #4
 8019020:	627a      	str	r2, [r7, #36]	; 0x24
 8019022:	693a      	ldr	r2, [r7, #16]
 8019024:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	699b      	ldr	r3, [r3, #24]
 801902a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801902c:	429a      	cmp	r2, r3
 801902e:	d3ba      	bcc.n	8018fa6 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019036:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8019038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801903a:	697b      	ldr	r3, [r7, #20]
 801903c:	429a      	cmp	r2, r3
 801903e:	d803      	bhi.n	8019048 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8019040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019042:	2200      	movs	r2, #0
 8019044:	601a      	str	r2, [r3, #0]
 8019046:	e1b6      	b.n	80193b6 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8019048:	2311      	movs	r3, #17
 801904a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801904e:	e1b2      	b.n	80193b6 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	68db      	ldr	r3, [r3, #12]
 8019054:	683a      	ldr	r2, [r7, #0]
 8019056:	429a      	cmp	r2, r3
 8019058:	d902      	bls.n	8019060 <f_lseek+0x136>
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	68db      	ldr	r3, [r3, #12]
 801905e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	683a      	ldr	r2, [r7, #0]
 8019064:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	2b00      	cmp	r3, #0
 801906a:	f000 81a4 	beq.w	80193b6 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	3b01      	subs	r3, #1
 8019072:	4619      	mov	r1, r3
 8019074:	6878      	ldr	r0, [r7, #4]
 8019076:	f7fe f9eb 	bl	8017450 <clmt_clust>
 801907a:	4602      	mov	r2, r0
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8019080:	68ba      	ldr	r2, [r7, #8]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	69db      	ldr	r3, [r3, #28]
 8019086:	4619      	mov	r1, r3
 8019088:	4610      	mov	r0, r2
 801908a:	f7fd ff31 	bl	8016ef0 <clust2sect>
 801908e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8019090:	69bb      	ldr	r3, [r7, #24]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d109      	bne.n	80190aa <f_lseek+0x180>
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	2202      	movs	r2, #2
 801909a:	755a      	strb	r2, [r3, #21]
 801909c:	68bb      	ldr	r3, [r7, #8]
 801909e:	2102      	movs	r1, #2
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7fd fcbd 	bl	8016a20 <unlock_fs>
 80190a6:	2302      	movs	r3, #2
 80190a8:	e18e      	b.n	80193c8 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	3b01      	subs	r3, #1
 80190ae:	0a5b      	lsrs	r3, r3, #9
 80190b0:	68ba      	ldr	r2, [r7, #8]
 80190b2:	8952      	ldrh	r2, [r2, #10]
 80190b4:	3a01      	subs	r2, #1
 80190b6:	4013      	ands	r3, r2
 80190b8:	69ba      	ldr	r2, [r7, #24]
 80190ba:	4413      	add	r3, r2
 80190bc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	699b      	ldr	r3, [r3, #24]
 80190c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	f000 8175 	beq.w	80193b6 <f_lseek+0x48c>
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	6a1b      	ldr	r3, [r3, #32]
 80190d0:	69ba      	ldr	r2, [r7, #24]
 80190d2:	429a      	cmp	r2, r3
 80190d4:	f000 816f 	beq.w	80193b6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	7d1b      	ldrb	r3, [r3, #20]
 80190dc:	b25b      	sxtb	r3, r3
 80190de:	2b00      	cmp	r3, #0
 80190e0:	da1d      	bge.n	801911e <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80190e2:	68bb      	ldr	r3, [r7, #8]
 80190e4:	7858      	ldrb	r0, [r3, #1]
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	6a1a      	ldr	r2, [r3, #32]
 80190f0:	2301      	movs	r3, #1
 80190f2:	f7fd fb41 	bl	8016778 <disk_write>
 80190f6:	4603      	mov	r3, r0
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d009      	beq.n	8019110 <f_lseek+0x1e6>
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	2201      	movs	r2, #1
 8019100:	755a      	strb	r2, [r3, #21]
 8019102:	68bb      	ldr	r3, [r7, #8]
 8019104:	2101      	movs	r1, #1
 8019106:	4618      	mov	r0, r3
 8019108:	f7fd fc8a 	bl	8016a20 <unlock_fs>
 801910c:	2301      	movs	r3, #1
 801910e:	e15b      	b.n	80193c8 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	7d1b      	ldrb	r3, [r3, #20]
 8019114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019118:	b2da      	uxtb	r2, r3
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801911e:	68bb      	ldr	r3, [r7, #8]
 8019120:	7858      	ldrb	r0, [r3, #1]
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019128:	2301      	movs	r3, #1
 801912a:	69ba      	ldr	r2, [r7, #24]
 801912c:	f7fd fb04 	bl	8016738 <disk_read>
 8019130:	4603      	mov	r3, r0
 8019132:	2b00      	cmp	r3, #0
 8019134:	d009      	beq.n	801914a <f_lseek+0x220>
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	2201      	movs	r2, #1
 801913a:	755a      	strb	r2, [r3, #21]
 801913c:	68bb      	ldr	r3, [r7, #8]
 801913e:	2101      	movs	r1, #1
 8019140:	4618      	mov	r0, r3
 8019142:	f7fd fc6d 	bl	8016a20 <unlock_fs>
 8019146:	2301      	movs	r3, #1
 8019148:	e13e      	b.n	80193c8 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	69ba      	ldr	r2, [r7, #24]
 801914e:	621a      	str	r2, [r3, #32]
 8019150:	e131      	b.n	80193b6 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	68db      	ldr	r3, [r3, #12]
 8019156:	683a      	ldr	r2, [r7, #0]
 8019158:	429a      	cmp	r2, r3
 801915a:	d908      	bls.n	801916e <f_lseek+0x244>
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	7d1b      	ldrb	r3, [r3, #20]
 8019160:	f003 0302 	and.w	r3, r3, #2
 8019164:	2b00      	cmp	r3, #0
 8019166:	d102      	bne.n	801916e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	68db      	ldr	r3, [r3, #12]
 801916c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	699b      	ldr	r3, [r3, #24]
 8019172:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8019174:	2300      	movs	r3, #0
 8019176:	637b      	str	r3, [r7, #52]	; 0x34
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801917c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801917e:	683b      	ldr	r3, [r7, #0]
 8019180:	2b00      	cmp	r3, #0
 8019182:	f000 80c0 	beq.w	8019306 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8019186:	68bb      	ldr	r3, [r7, #8]
 8019188:	895b      	ldrh	r3, [r3, #10]
 801918a:	025b      	lsls	r3, r3, #9
 801918c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801918e:	6a3b      	ldr	r3, [r7, #32]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d01b      	beq.n	80191cc <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	1e5a      	subs	r2, r3, #1
 8019198:	69fb      	ldr	r3, [r7, #28]
 801919a:	fbb2 f2f3 	udiv	r2, r2, r3
 801919e:	6a3b      	ldr	r3, [r7, #32]
 80191a0:	1e59      	subs	r1, r3, #1
 80191a2:	69fb      	ldr	r3, [r7, #28]
 80191a4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80191a8:	429a      	cmp	r2, r3
 80191aa:	d30f      	bcc.n	80191cc <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80191ac:	6a3b      	ldr	r3, [r7, #32]
 80191ae:	1e5a      	subs	r2, r3, #1
 80191b0:	69fb      	ldr	r3, [r7, #28]
 80191b2:	425b      	negs	r3, r3
 80191b4:	401a      	ands	r2, r3
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	699b      	ldr	r3, [r3, #24]
 80191be:	683a      	ldr	r2, [r7, #0]
 80191c0:	1ad3      	subs	r3, r2, r3
 80191c2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	69db      	ldr	r3, [r3, #28]
 80191c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80191ca:	e02c      	b.n	8019226 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	689b      	ldr	r3, [r3, #8]
 80191d0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80191d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d123      	bne.n	8019220 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2100      	movs	r1, #0
 80191dc:	4618      	mov	r0, r3
 80191de:	f7fe f89f 	bl	8017320 <create_chain>
 80191e2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80191e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191e6:	2b01      	cmp	r3, #1
 80191e8:	d109      	bne.n	80191fe <f_lseek+0x2d4>
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2202      	movs	r2, #2
 80191ee:	755a      	strb	r2, [r3, #21]
 80191f0:	68bb      	ldr	r3, [r7, #8]
 80191f2:	2102      	movs	r1, #2
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7fd fc13 	bl	8016a20 <unlock_fs>
 80191fa:	2302      	movs	r3, #2
 80191fc:	e0e4      	b.n	80193c8 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80191fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019204:	d109      	bne.n	801921a <f_lseek+0x2f0>
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	2201      	movs	r2, #1
 801920a:	755a      	strb	r2, [r3, #21]
 801920c:	68bb      	ldr	r3, [r7, #8]
 801920e:	2101      	movs	r1, #1
 8019210:	4618      	mov	r0, r3
 8019212:	f7fd fc05 	bl	8016a20 <unlock_fs>
 8019216:	2301      	movs	r3, #1
 8019218:	e0d6      	b.n	80193c8 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801921e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019224:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8019226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019228:	2b00      	cmp	r3, #0
 801922a:	d06c      	beq.n	8019306 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 801922c:	e044      	b.n	80192b8 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801922e:	683a      	ldr	r2, [r7, #0]
 8019230:	69fb      	ldr	r3, [r7, #28]
 8019232:	1ad3      	subs	r3, r2, r3
 8019234:	603b      	str	r3, [r7, #0]
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	699a      	ldr	r2, [r3, #24]
 801923a:	69fb      	ldr	r3, [r7, #28]
 801923c:	441a      	add	r2, r3
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	7d1b      	ldrb	r3, [r3, #20]
 8019246:	f003 0302 	and.w	r3, r3, #2
 801924a:	2b00      	cmp	r3, #0
 801924c:	d00b      	beq.n	8019266 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019252:	4618      	mov	r0, r3
 8019254:	f7fe f864 	bl	8017320 <create_chain>
 8019258:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801925c:	2b00      	cmp	r3, #0
 801925e:	d108      	bne.n	8019272 <f_lseek+0x348>
							ofs = 0; break;
 8019260:	2300      	movs	r3, #0
 8019262:	603b      	str	r3, [r7, #0]
 8019264:	e02c      	b.n	80192c0 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801926a:	4618      	mov	r0, r3
 801926c:	f7fd fe5f 	bl	8016f2e <get_fat>
 8019270:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019278:	d109      	bne.n	801928e <f_lseek+0x364>
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	2201      	movs	r2, #1
 801927e:	755a      	strb	r2, [r3, #21]
 8019280:	68bb      	ldr	r3, [r7, #8]
 8019282:	2101      	movs	r1, #1
 8019284:	4618      	mov	r0, r3
 8019286:	f7fd fbcb 	bl	8016a20 <unlock_fs>
 801928a:	2301      	movs	r3, #1
 801928c:	e09c      	b.n	80193c8 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019290:	2b01      	cmp	r3, #1
 8019292:	d904      	bls.n	801929e <f_lseek+0x374>
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	699b      	ldr	r3, [r3, #24]
 8019298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801929a:	429a      	cmp	r2, r3
 801929c:	d309      	bcc.n	80192b2 <f_lseek+0x388>
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	2202      	movs	r2, #2
 80192a2:	755a      	strb	r2, [r3, #21]
 80192a4:	68bb      	ldr	r3, [r7, #8]
 80192a6:	2102      	movs	r1, #2
 80192a8:	4618      	mov	r0, r3
 80192aa:	f7fd fbb9 	bl	8016a20 <unlock_fs>
 80192ae:	2302      	movs	r3, #2
 80192b0:	e08a      	b.n	80193c8 <f_lseek+0x49e>
					fp->clust = clst;
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80192b6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80192b8:	683a      	ldr	r2, [r7, #0]
 80192ba:	69fb      	ldr	r3, [r7, #28]
 80192bc:	429a      	cmp	r2, r3
 80192be:	d8b6      	bhi.n	801922e <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	699a      	ldr	r2, [r3, #24]
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	441a      	add	r2, r3
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80192cc:	683b      	ldr	r3, [r7, #0]
 80192ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d017      	beq.n	8019306 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80192da:	4618      	mov	r0, r3
 80192dc:	f7fd fe08 	bl	8016ef0 <clust2sect>
 80192e0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80192e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d109      	bne.n	80192fc <f_lseek+0x3d2>
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	2202      	movs	r2, #2
 80192ec:	755a      	strb	r2, [r3, #21]
 80192ee:	68bb      	ldr	r3, [r7, #8]
 80192f0:	2102      	movs	r1, #2
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7fd fb94 	bl	8016a20 <unlock_fs>
 80192f8:	2302      	movs	r3, #2
 80192fa:	e065      	b.n	80193c8 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	0a5b      	lsrs	r3, r3, #9
 8019300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019302:	4413      	add	r3, r2
 8019304:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	699a      	ldr	r2, [r3, #24]
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	68db      	ldr	r3, [r3, #12]
 801930e:	429a      	cmp	r2, r3
 8019310:	d90a      	bls.n	8019328 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	699a      	ldr	r2, [r3, #24]
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	7d1b      	ldrb	r3, [r3, #20]
 801931e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019322:	b2da      	uxtb	r2, r3
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	699b      	ldr	r3, [r3, #24]
 801932c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019330:	2b00      	cmp	r3, #0
 8019332:	d040      	beq.n	80193b6 <f_lseek+0x48c>
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	6a1b      	ldr	r3, [r3, #32]
 8019338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801933a:	429a      	cmp	r2, r3
 801933c:	d03b      	beq.n	80193b6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	7d1b      	ldrb	r3, [r3, #20]
 8019342:	b25b      	sxtb	r3, r3
 8019344:	2b00      	cmp	r3, #0
 8019346:	da1d      	bge.n	8019384 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019348:	68bb      	ldr	r3, [r7, #8]
 801934a:	7858      	ldrb	r0, [r3, #1]
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	6a1a      	ldr	r2, [r3, #32]
 8019356:	2301      	movs	r3, #1
 8019358:	f7fd fa0e 	bl	8016778 <disk_write>
 801935c:	4603      	mov	r3, r0
 801935e:	2b00      	cmp	r3, #0
 8019360:	d009      	beq.n	8019376 <f_lseek+0x44c>
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2201      	movs	r2, #1
 8019366:	755a      	strb	r2, [r3, #21]
 8019368:	68bb      	ldr	r3, [r7, #8]
 801936a:	2101      	movs	r1, #1
 801936c:	4618      	mov	r0, r3
 801936e:	f7fd fb57 	bl	8016a20 <unlock_fs>
 8019372:	2301      	movs	r3, #1
 8019374:	e028      	b.n	80193c8 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	7d1b      	ldrb	r3, [r3, #20]
 801937a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801937e:	b2da      	uxtb	r2, r3
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8019384:	68bb      	ldr	r3, [r7, #8]
 8019386:	7858      	ldrb	r0, [r3, #1]
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801938e:	2301      	movs	r3, #1
 8019390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019392:	f7fd f9d1 	bl	8016738 <disk_read>
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	d009      	beq.n	80193b0 <f_lseek+0x486>
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	2201      	movs	r2, #1
 80193a0:	755a      	strb	r2, [r3, #21]
 80193a2:	68bb      	ldr	r3, [r7, #8]
 80193a4:	2101      	movs	r1, #1
 80193a6:	4618      	mov	r0, r3
 80193a8:	f7fd fb3a 	bl	8016a20 <unlock_fs>
 80193ac:	2301      	movs	r3, #1
 80193ae:	e00b      	b.n	80193c8 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193b4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80193bc:	4611      	mov	r1, r2
 80193be:	4618      	mov	r0, r3
 80193c0:	f7fd fb2e 	bl	8016a20 <unlock_fs>
 80193c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80193c8:	4618      	mov	r0, r3
 80193ca:	3740      	adds	r7, #64	; 0x40
 80193cc:	46bd      	mov	sp, r7
 80193ce:	bd80      	pop	{r7, pc}

080193d0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b086      	sub	sp, #24
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
 80193d8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d101      	bne.n	80193e4 <f_opendir+0x14>
 80193e0:	2309      	movs	r3, #9
 80193e2:	e06a      	b.n	80194ba <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80193e8:	f107 010c 	add.w	r1, r7, #12
 80193ec:	463b      	mov	r3, r7
 80193ee:	2200      	movs	r2, #0
 80193f0:	4618      	mov	r0, r3
 80193f2:	f7fe fd0b 	bl	8017e0c <find_volume>
 80193f6:	4603      	mov	r3, r0
 80193f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80193fa:	7dfb      	ldrb	r3, [r7, #23]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d14f      	bne.n	80194a0 <f_opendir+0xd0>
		obj->fs = fs;
 8019400:	68fa      	ldr	r2, [r7, #12]
 8019402:	693b      	ldr	r3, [r7, #16]
 8019404:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	4619      	mov	r1, r3
 801940a:	6878      	ldr	r0, [r7, #4]
 801940c:	f7fe fbf2 	bl	8017bf4 <follow_path>
 8019410:	4603      	mov	r3, r0
 8019412:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8019414:	7dfb      	ldrb	r3, [r7, #23]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d13d      	bne.n	8019496 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019420:	b25b      	sxtb	r3, r3
 8019422:	2b00      	cmp	r3, #0
 8019424:	db12      	blt.n	801944c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8019426:	693b      	ldr	r3, [r7, #16]
 8019428:	799b      	ldrb	r3, [r3, #6]
 801942a:	f003 0310 	and.w	r3, r3, #16
 801942e:	2b00      	cmp	r3, #0
 8019430:	d00a      	beq.n	8019448 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8019432:	68fa      	ldr	r2, [r7, #12]
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	6a1b      	ldr	r3, [r3, #32]
 8019438:	4619      	mov	r1, r3
 801943a:	4610      	mov	r0, r2
 801943c:	f7fe f9c3 	bl	80177c6 <ld_clust>
 8019440:	4602      	mov	r2, r0
 8019442:	693b      	ldr	r3, [r7, #16]
 8019444:	609a      	str	r2, [r3, #8]
 8019446:	e001      	b.n	801944c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8019448:	2305      	movs	r3, #5
 801944a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801944c:	7dfb      	ldrb	r3, [r7, #23]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d121      	bne.n	8019496 <f_opendir+0xc6>
				obj->id = fs->id;
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	88da      	ldrh	r2, [r3, #6]
 8019456:	693b      	ldr	r3, [r7, #16]
 8019458:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801945a:	2100      	movs	r1, #0
 801945c:	6878      	ldr	r0, [r7, #4]
 801945e:	f7fe f82b 	bl	80174b8 <dir_sdi>
 8019462:	4603      	mov	r3, r0
 8019464:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8019466:	7dfb      	ldrb	r3, [r7, #23]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d114      	bne.n	8019496 <f_opendir+0xc6>
					if (obj->sclust) {
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	689b      	ldr	r3, [r3, #8]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d00d      	beq.n	8019490 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8019474:	2100      	movs	r1, #0
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f7fd fb6c 	bl	8016b54 <inc_lock>
 801947c:	4602      	mov	r2, r0
 801947e:	693b      	ldr	r3, [r7, #16]
 8019480:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8019482:	693b      	ldr	r3, [r7, #16]
 8019484:	691b      	ldr	r3, [r3, #16]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d105      	bne.n	8019496 <f_opendir+0xc6>
 801948a:	2312      	movs	r3, #18
 801948c:	75fb      	strb	r3, [r7, #23]
 801948e:	e002      	b.n	8019496 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8019490:	693b      	ldr	r3, [r7, #16]
 8019492:	2200      	movs	r2, #0
 8019494:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8019496:	7dfb      	ldrb	r3, [r7, #23]
 8019498:	2b04      	cmp	r3, #4
 801949a:	d101      	bne.n	80194a0 <f_opendir+0xd0>
 801949c:	2305      	movs	r3, #5
 801949e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80194a0:	7dfb      	ldrb	r3, [r7, #23]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d002      	beq.n	80194ac <f_opendir+0xdc>
 80194a6:	693b      	ldr	r3, [r7, #16]
 80194a8:	2200      	movs	r2, #0
 80194aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	7dfa      	ldrb	r2, [r7, #23]
 80194b0:	4611      	mov	r1, r2
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7fd fab4 	bl	8016a20 <unlock_fs>
 80194b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3718      	adds	r7, #24
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}

080194c2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80194c2:	b580      	push	{r7, lr}
 80194c4:	b084      	sub	sp, #16
 80194c6:	af00      	add	r7, sp, #0
 80194c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	f107 0208 	add.w	r2, r7, #8
 80194d0:	4611      	mov	r1, r2
 80194d2:	4618      	mov	r0, r3
 80194d4:	f7fe feee 	bl	80182b4 <validate>
 80194d8:	4603      	mov	r3, r0
 80194da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80194dc:	7bfb      	ldrb	r3, [r7, #15]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d115      	bne.n	801950e <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	691b      	ldr	r3, [r3, #16]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d006      	beq.n	80194f8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	691b      	ldr	r3, [r3, #16]
 80194ee:	4618      	mov	r0, r3
 80194f0:	f7fd fbbe 	bl	8016c70 <dec_lock>
 80194f4:	4603      	mov	r3, r0
 80194f6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80194f8:	7bfb      	ldrb	r3, [r7, #15]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d102      	bne.n	8019504 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2200      	movs	r2, #0
 8019502:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	2100      	movs	r1, #0
 8019508:	4618      	mov	r0, r3
 801950a:	f7fd fa89 	bl	8016a20 <unlock_fs>
#endif
	}
	return res;
 801950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3710      	adds	r7, #16
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}

08019518 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b084      	sub	sp, #16
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
 8019520:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	f107 0208 	add.w	r2, r7, #8
 8019528:	4611      	mov	r1, r2
 801952a:	4618      	mov	r0, r3
 801952c:	f7fe fec2 	bl	80182b4 <validate>
 8019530:	4603      	mov	r3, r0
 8019532:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019534:	7bfb      	ldrb	r3, [r7, #15]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d126      	bne.n	8019588 <f_readdir+0x70>
		if (!fno) {
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d106      	bne.n	801954e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8019540:	2100      	movs	r1, #0
 8019542:	6878      	ldr	r0, [r7, #4]
 8019544:	f7fd ffb8 	bl	80174b8 <dir_sdi>
 8019548:	4603      	mov	r3, r0
 801954a:	73fb      	strb	r3, [r7, #15]
 801954c:	e01c      	b.n	8019588 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801954e:	2100      	movs	r1, #0
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f7fe f977 	bl	8017844 <dir_read>
 8019556:	4603      	mov	r3, r0
 8019558:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801955a:	7bfb      	ldrb	r3, [r7, #15]
 801955c:	2b04      	cmp	r3, #4
 801955e:	d101      	bne.n	8019564 <f_readdir+0x4c>
 8019560:	2300      	movs	r3, #0
 8019562:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8019564:	7bfb      	ldrb	r3, [r7, #15]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d10e      	bne.n	8019588 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801956a:	6839      	ldr	r1, [r7, #0]
 801956c:	6878      	ldr	r0, [r7, #4]
 801956e:	f7fe fa4d 	bl	8017a0c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8019572:	2100      	movs	r1, #0
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	f7fe f81a 	bl	80175ae <dir_next>
 801957a:	4603      	mov	r3, r0
 801957c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801957e:	7bfb      	ldrb	r3, [r7, #15]
 8019580:	2b04      	cmp	r3, #4
 8019582:	d101      	bne.n	8019588 <f_readdir+0x70>
 8019584:	2300      	movs	r3, #0
 8019586:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	7bfa      	ldrb	r2, [r7, #15]
 801958c:	4611      	mov	r1, r2
 801958e:	4618      	mov	r0, r3
 8019590:	f7fd fa46 	bl	8016a20 <unlock_fs>
 8019594:	7bfb      	ldrb	r3, [r7, #15]
}
 8019596:	4618      	mov	r0, r3
 8019598:	3710      	adds	r7, #16
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}
	...

080195a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80195a0:	b480      	push	{r7}
 80195a2:	b087      	sub	sp, #28
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	60f8      	str	r0, [r7, #12]
 80195a8:	60b9      	str	r1, [r7, #8]
 80195aa:	4613      	mov	r3, r2
 80195ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80195ae:	2301      	movs	r3, #1
 80195b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80195b2:	2300      	movs	r3, #0
 80195b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80195b6:	4b1f      	ldr	r3, [pc, #124]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195b8:	7a5b      	ldrb	r3, [r3, #9]
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d131      	bne.n	8019624 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80195c0:	4b1c      	ldr	r3, [pc, #112]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195c2:	7a5b      	ldrb	r3, [r3, #9]
 80195c4:	b2db      	uxtb	r3, r3
 80195c6:	461a      	mov	r2, r3
 80195c8:	4b1a      	ldr	r3, [pc, #104]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195ca:	2100      	movs	r1, #0
 80195cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80195ce:	4b19      	ldr	r3, [pc, #100]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195d0:	7a5b      	ldrb	r3, [r3, #9]
 80195d2:	b2db      	uxtb	r3, r3
 80195d4:	4a17      	ldr	r2, [pc, #92]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195d6:	009b      	lsls	r3, r3, #2
 80195d8:	4413      	add	r3, r2
 80195da:	68fa      	ldr	r2, [r7, #12]
 80195dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80195de:	4b15      	ldr	r3, [pc, #84]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195e0:	7a5b      	ldrb	r3, [r3, #9]
 80195e2:	b2db      	uxtb	r3, r3
 80195e4:	461a      	mov	r2, r3
 80195e6:	4b13      	ldr	r3, [pc, #76]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195e8:	4413      	add	r3, r2
 80195ea:	79fa      	ldrb	r2, [r7, #7]
 80195ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80195ee:	4b11      	ldr	r3, [pc, #68]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195f0:	7a5b      	ldrb	r3, [r3, #9]
 80195f2:	b2db      	uxtb	r3, r3
 80195f4:	1c5a      	adds	r2, r3, #1
 80195f6:	b2d1      	uxtb	r1, r2
 80195f8:	4a0e      	ldr	r2, [pc, #56]	; (8019634 <FATFS_LinkDriverEx+0x94>)
 80195fa:	7251      	strb	r1, [r2, #9]
 80195fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80195fe:	7dbb      	ldrb	r3, [r7, #22]
 8019600:	3330      	adds	r3, #48	; 0x30
 8019602:	b2da      	uxtb	r2, r3
 8019604:	68bb      	ldr	r3, [r7, #8]
 8019606:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	3301      	adds	r3, #1
 801960c:	223a      	movs	r2, #58	; 0x3a
 801960e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	3302      	adds	r3, #2
 8019614:	222f      	movs	r2, #47	; 0x2f
 8019616:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	3303      	adds	r3, #3
 801961c:	2200      	movs	r2, #0
 801961e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019620:	2300      	movs	r3, #0
 8019622:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019624:	7dfb      	ldrb	r3, [r7, #23]
}
 8019626:	4618      	mov	r0, r3
 8019628:	371c      	adds	r7, #28
 801962a:	46bd      	mov	sp, r7
 801962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019630:	4770      	bx	lr
 8019632:	bf00      	nop
 8019634:	200134d8 	.word	0x200134d8

08019638 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b082      	sub	sp, #8
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
 8019640:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019642:	2200      	movs	r2, #0
 8019644:	6839      	ldr	r1, [r7, #0]
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	f7ff ffaa 	bl	80195a0 <FATFS_LinkDriverEx>
 801964c:	4603      	mov	r3, r0
}
 801964e:	4618      	mov	r0, r3
 8019650:	3708      	adds	r7, #8
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}

08019656 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8019656:	b580      	push	{r7, lr}
 8019658:	b086      	sub	sp, #24
 801965a:	af00      	add	r7, sp, #0
 801965c:	4603      	mov	r3, r0
 801965e:	6039      	str	r1, [r7, #0]
 8019660:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8019662:	2300      	movs	r3, #0
 8019664:	60fb      	str	r3, [r7, #12]
 8019666:	2300      	movs	r3, #0
 8019668:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801966a:	f107 030c 	add.w	r3, r7, #12
 801966e:	2101      	movs	r1, #1
 8019670:	4618      	mov	r0, r3
 8019672:	f000 f8e9 	bl	8019848 <osSemaphoreCreate>
 8019676:	4602      	mov	r2, r0
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	2b00      	cmp	r3, #0
 8019682:	bf14      	ite	ne
 8019684:	2301      	movne	r3, #1
 8019686:	2300      	moveq	r3, #0
 8019688:	b2db      	uxtb	r3, r3
 801968a:	617b      	str	r3, [r7, #20]

    return ret;
 801968c:	697b      	ldr	r3, [r7, #20]
}
 801968e:	4618      	mov	r0, r3
 8019690:	3718      	adds	r7, #24
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}

08019696 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8019696:	b580      	push	{r7, lr}
 8019698:	b082      	sub	sp, #8
 801969a:	af00      	add	r7, sp, #0
 801969c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f000 f996 	bl	80199d0 <osSemaphoreDelete>
#endif
    return 1;
 80196a4:	2301      	movs	r3, #1
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3708      	adds	r7, #8
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}

080196ae <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80196ae:	b580      	push	{r7, lr}
 80196b0:	b084      	sub	sp, #16
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80196b6:	2300      	movs	r3, #0
 80196b8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80196ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80196be:	6878      	ldr	r0, [r7, #4]
 80196c0:	f000 f902 	bl	80198c8 <osSemaphoreWait>
 80196c4:	4603      	mov	r3, r0
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d101      	bne.n	80196ce <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80196ca:	2301      	movs	r3, #1
 80196cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80196ce:	68fb      	ldr	r3, [r7, #12]
}
 80196d0:	4618      	mov	r0, r3
 80196d2:	3710      	adds	r7, #16
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}

080196d8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b082      	sub	sp, #8
 80196dc:	af00      	add	r7, sp, #0
 80196de:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80196e0:	6878      	ldr	r0, [r7, #4]
 80196e2:	f000 f93f 	bl	8019964 <osSemaphoreRelease>
#endif
}
 80196e6:	bf00      	nop
 80196e8:	3708      	adds	r7, #8
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}

080196ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80196ee:	b480      	push	{r7}
 80196f0:	b085      	sub	sp, #20
 80196f2:	af00      	add	r7, sp, #0
 80196f4:	4603      	mov	r3, r0
 80196f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80196f8:	2300      	movs	r3, #0
 80196fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80196fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019700:	2b84      	cmp	r3, #132	; 0x84
 8019702:	d005      	beq.n	8019710 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8019704:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	4413      	add	r3, r2
 801970c:	3303      	adds	r3, #3
 801970e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8019710:	68fb      	ldr	r3, [r7, #12]
}
 8019712:	4618      	mov	r0, r3
 8019714:	3714      	adds	r7, #20
 8019716:	46bd      	mov	sp, r7
 8019718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971c:	4770      	bx	lr

0801971e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801971e:	b480      	push	{r7}
 8019720:	b083      	sub	sp, #12
 8019722:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019724:	f3ef 8305 	mrs	r3, IPSR
 8019728:	607b      	str	r3, [r7, #4]
  return(result);
 801972a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801972c:	2b00      	cmp	r3, #0
 801972e:	bf14      	ite	ne
 8019730:	2301      	movne	r3, #1
 8019732:	2300      	moveq	r3, #0
 8019734:	b2db      	uxtb	r3, r3
}
 8019736:	4618      	mov	r0, r3
 8019738:	370c      	adds	r7, #12
 801973a:	46bd      	mov	sp, r7
 801973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019740:	4770      	bx	lr

08019742 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8019742:	b580      	push	{r7, lr}
 8019744:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8019746:	f001 fcb7 	bl	801b0b8 <vTaskStartScheduler>
  
  return osOK;
 801974a:	2300      	movs	r3, #0
}
 801974c:	4618      	mov	r0, r3
 801974e:	bd80      	pop	{r7, pc}

08019750 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8019754:	f002 f90a 	bl	801b96c <xTaskGetSchedulerState>
 8019758:	4603      	mov	r3, r0
 801975a:	2b01      	cmp	r3, #1
 801975c:	d101      	bne.n	8019762 <osKernelRunning+0x12>
    return 0;
 801975e:	2300      	movs	r3, #0
 8019760:	e000      	b.n	8019764 <osKernelRunning+0x14>
  else
    return 1;
 8019762:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8019764:	4618      	mov	r0, r3
 8019766:	bd80      	pop	{r7, pc}

08019768 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8019768:	b580      	push	{r7, lr}
 801976a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801976c:	f7ff ffd7 	bl	801971e <inHandlerMode>
 8019770:	4603      	mov	r3, r0
 8019772:	2b00      	cmp	r3, #0
 8019774:	d003      	beq.n	801977e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8019776:	f001 fdbf 	bl	801b2f8 <xTaskGetTickCountFromISR>
 801977a:	4603      	mov	r3, r0
 801977c:	e002      	b.n	8019784 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801977e:	f001 fdab 	bl	801b2d8 <xTaskGetTickCount>
 8019782:	4603      	mov	r3, r0
  }
}
 8019784:	4618      	mov	r0, r3
 8019786:	bd80      	pop	{r7, pc}

08019788 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8019788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801978a:	b089      	sub	sp, #36	; 0x24
 801978c:	af04      	add	r7, sp, #16
 801978e:	6078      	str	r0, [r7, #4]
 8019790:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	695b      	ldr	r3, [r3, #20]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d020      	beq.n	80197dc <osThreadCreate+0x54>
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	699b      	ldr	r3, [r3, #24]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d01c      	beq.n	80197dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	685c      	ldr	r4, [r3, #4]
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681d      	ldr	r5, [r3, #0]
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	691e      	ldr	r6, [r3, #16]
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7ff ff9a 	bl	80196ee <makeFreeRtosPriority>
 80197ba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	695b      	ldr	r3, [r3, #20]
 80197c0:	687a      	ldr	r2, [r7, #4]
 80197c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80197c4:	9202      	str	r2, [sp, #8]
 80197c6:	9301      	str	r3, [sp, #4]
 80197c8:	9100      	str	r1, [sp, #0]
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	4632      	mov	r2, r6
 80197ce:	4629      	mov	r1, r5
 80197d0:	4620      	mov	r0, r4
 80197d2:	f001 fa95 	bl	801ad00 <xTaskCreateStatic>
 80197d6:	4603      	mov	r3, r0
 80197d8:	60fb      	str	r3, [r7, #12]
 80197da:	e01c      	b.n	8019816 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	685c      	ldr	r4, [r3, #4]
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80197e8:	b29e      	uxth	r6, r3
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80197f0:	4618      	mov	r0, r3
 80197f2:	f7ff ff7c 	bl	80196ee <makeFreeRtosPriority>
 80197f6:	4602      	mov	r2, r0
 80197f8:	f107 030c 	add.w	r3, r7, #12
 80197fc:	9301      	str	r3, [sp, #4]
 80197fe:	9200      	str	r2, [sp, #0]
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	4632      	mov	r2, r6
 8019804:	4629      	mov	r1, r5
 8019806:	4620      	mov	r0, r4
 8019808:	f001 fadd 	bl	801adc6 <xTaskCreate>
 801980c:	4603      	mov	r3, r0
 801980e:	2b01      	cmp	r3, #1
 8019810:	d001      	beq.n	8019816 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8019812:	2300      	movs	r3, #0
 8019814:	e000      	b.n	8019818 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8019816:	68fb      	ldr	r3, [r7, #12]
}
 8019818:	4618      	mov	r0, r3
 801981a:	3714      	adds	r7, #20
 801981c:	46bd      	mov	sp, r7
 801981e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019820 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8019820:	b580      	push	{r7, lr}
 8019822:	b084      	sub	sp, #16
 8019824:	af00      	add	r7, sp, #0
 8019826:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d001      	beq.n	8019836 <osDelay+0x16>
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	e000      	b.n	8019838 <osDelay+0x18>
 8019836:	2301      	movs	r3, #1
 8019838:	4618      	mov	r0, r3
 801983a:	f001 fc07 	bl	801b04c <vTaskDelay>
  
  return osOK;
 801983e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8019840:	4618      	mov	r0, r3
 8019842:	3710      	adds	r7, #16
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}

08019848 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8019848:	b580      	push	{r7, lr}
 801984a:	b086      	sub	sp, #24
 801984c:	af02      	add	r7, sp, #8
 801984e:	6078      	str	r0, [r7, #4]
 8019850:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d016      	beq.n	8019888 <osSemaphoreCreate+0x40>
    if (count == 1) {
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	2b01      	cmp	r3, #1
 801985e:	d10a      	bne.n	8019876 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	2203      	movs	r2, #3
 8019866:	9200      	str	r2, [sp, #0]
 8019868:	2200      	movs	r2, #0
 801986a:	2100      	movs	r1, #0
 801986c:	2001      	movs	r0, #1
 801986e:	f000 fabd 	bl	8019dec <xQueueGenericCreateStatic>
 8019872:	4603      	mov	r3, r0
 8019874:	e023      	b.n	80198be <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8019876:	6838      	ldr	r0, [r7, #0]
 8019878:	6839      	ldr	r1, [r7, #0]
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	685b      	ldr	r3, [r3, #4]
 801987e:	461a      	mov	r2, r3
 8019880:	f000 fb97 	bl	8019fb2 <xQueueCreateCountingSemaphoreStatic>
 8019884:	4603      	mov	r3, r0
 8019886:	e01a      	b.n	80198be <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8019888:	683b      	ldr	r3, [r7, #0]
 801988a:	2b01      	cmp	r3, #1
 801988c:	d110      	bne.n	80198b0 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 801988e:	2203      	movs	r2, #3
 8019890:	2100      	movs	r1, #0
 8019892:	2001      	movs	r0, #1
 8019894:	f000 fb2c 	bl	8019ef0 <xQueueGenericCreate>
 8019898:	60f8      	str	r0, [r7, #12]
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	2b00      	cmp	r3, #0
 801989e:	d005      	beq.n	80198ac <osSemaphoreCreate+0x64>
 80198a0:	2300      	movs	r3, #0
 80198a2:	2200      	movs	r2, #0
 80198a4:	2100      	movs	r1, #0
 80198a6:	68f8      	ldr	r0, [r7, #12]
 80198a8:	f000 fbf6 	bl	801a098 <xQueueGenericSend>
      return sema;
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	e006      	b.n	80198be <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80198b0:	683b      	ldr	r3, [r7, #0]
 80198b2:	683a      	ldr	r2, [r7, #0]
 80198b4:	4611      	mov	r1, r2
 80198b6:	4618      	mov	r0, r3
 80198b8:	f000 fbb6 	bl	801a028 <xQueueCreateCountingSemaphore>
 80198bc:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80198be:	4618      	mov	r0, r3
 80198c0:	3710      	adds	r7, #16
 80198c2:	46bd      	mov	sp, r7
 80198c4:	bd80      	pop	{r7, pc}
	...

080198c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b084      	sub	sp, #16
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
 80198d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80198d2:	2300      	movs	r3, #0
 80198d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d101      	bne.n	80198e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80198dc:	2380      	movs	r3, #128	; 0x80
 80198de:	e03a      	b.n	8019956 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80198e0:	2300      	movs	r3, #0
 80198e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80198e4:	683b      	ldr	r3, [r7, #0]
 80198e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198ea:	d103      	bne.n	80198f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80198ec:	f04f 33ff 	mov.w	r3, #4294967295
 80198f0:	60fb      	str	r3, [r7, #12]
 80198f2:	e009      	b.n	8019908 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80198f4:	683b      	ldr	r3, [r7, #0]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d006      	beq.n	8019908 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	2b00      	cmp	r3, #0
 8019902:	d101      	bne.n	8019908 <osSemaphoreWait+0x40>
      ticks = 1;
 8019904:	2301      	movs	r3, #1
 8019906:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8019908:	f7ff ff09 	bl	801971e <inHandlerMode>
 801990c:	4603      	mov	r3, r0
 801990e:	2b00      	cmp	r3, #0
 8019910:	d017      	beq.n	8019942 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8019912:	f107 0308 	add.w	r3, r7, #8
 8019916:	461a      	mov	r2, r3
 8019918:	2100      	movs	r1, #0
 801991a:	6878      	ldr	r0, [r7, #4]
 801991c:	f000 fff2 	bl	801a904 <xQueueReceiveFromISR>
 8019920:	4603      	mov	r3, r0
 8019922:	2b01      	cmp	r3, #1
 8019924:	d001      	beq.n	801992a <osSemaphoreWait+0x62>
      return osErrorOS;
 8019926:	23ff      	movs	r3, #255	; 0xff
 8019928:	e015      	b.n	8019956 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d011      	beq.n	8019954 <osSemaphoreWait+0x8c>
 8019930:	4b0b      	ldr	r3, [pc, #44]	; (8019960 <osSemaphoreWait+0x98>)
 8019932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019936:	601a      	str	r2, [r3, #0]
 8019938:	f3bf 8f4f 	dsb	sy
 801993c:	f3bf 8f6f 	isb	sy
 8019940:	e008      	b.n	8019954 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8019942:	68f9      	ldr	r1, [r7, #12]
 8019944:	6878      	ldr	r0, [r7, #4]
 8019946:	f000 fec9 	bl	801a6dc <xQueueSemaphoreTake>
 801994a:	4603      	mov	r3, r0
 801994c:	2b01      	cmp	r3, #1
 801994e:	d001      	beq.n	8019954 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8019950:	23ff      	movs	r3, #255	; 0xff
 8019952:	e000      	b.n	8019956 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8019954:	2300      	movs	r3, #0
}
 8019956:	4618      	mov	r0, r3
 8019958:	3710      	adds	r7, #16
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	e000ed04 	.word	0xe000ed04

08019964 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8019964:	b580      	push	{r7, lr}
 8019966:	b084      	sub	sp, #16
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801996c:	2300      	movs	r3, #0
 801996e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8019970:	2300      	movs	r3, #0
 8019972:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8019974:	f7ff fed3 	bl	801971e <inHandlerMode>
 8019978:	4603      	mov	r3, r0
 801997a:	2b00      	cmp	r3, #0
 801997c:	d016      	beq.n	80199ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801997e:	f107 0308 	add.w	r3, r7, #8
 8019982:	4619      	mov	r1, r3
 8019984:	6878      	ldr	r0, [r7, #4]
 8019986:	f000 fd2d 	bl	801a3e4 <xQueueGiveFromISR>
 801998a:	4603      	mov	r3, r0
 801998c:	2b01      	cmp	r3, #1
 801998e:	d001      	beq.n	8019994 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8019990:	23ff      	movs	r3, #255	; 0xff
 8019992:	e017      	b.n	80199c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019994:	68bb      	ldr	r3, [r7, #8]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d013      	beq.n	80199c2 <osSemaphoreRelease+0x5e>
 801999a:	4b0c      	ldr	r3, [pc, #48]	; (80199cc <osSemaphoreRelease+0x68>)
 801999c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199a0:	601a      	str	r2, [r3, #0]
 80199a2:	f3bf 8f4f 	dsb	sy
 80199a6:	f3bf 8f6f 	isb	sy
 80199aa:	e00a      	b.n	80199c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80199ac:	2300      	movs	r3, #0
 80199ae:	2200      	movs	r2, #0
 80199b0:	2100      	movs	r1, #0
 80199b2:	6878      	ldr	r0, [r7, #4]
 80199b4:	f000 fb70 	bl	801a098 <xQueueGenericSend>
 80199b8:	4603      	mov	r3, r0
 80199ba:	2b01      	cmp	r3, #1
 80199bc:	d001      	beq.n	80199c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80199be:	23ff      	movs	r3, #255	; 0xff
 80199c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80199c2:	68fb      	ldr	r3, [r7, #12]
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	3710      	adds	r7, #16
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bd80      	pop	{r7, pc}
 80199cc:	e000ed04 	.word	0xe000ed04

080199d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b082      	sub	sp, #8
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80199d8:	f7ff fea1 	bl	801971e <inHandlerMode>
 80199dc:	4603      	mov	r3, r0
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d001      	beq.n	80199e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80199e2:	2382      	movs	r3, #130	; 0x82
 80199e4:	e003      	b.n	80199ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80199e6:	6878      	ldr	r0, [r7, #4]
 80199e8:	f001 f812 	bl	801aa10 <vQueueDelete>

  return osOK; 
 80199ec:	2300      	movs	r3, #0
}
 80199ee:	4618      	mov	r0, r3
 80199f0:	3708      	adds	r7, #8
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}

080199f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80199f6:	b590      	push	{r4, r7, lr}
 80199f8:	b085      	sub	sp, #20
 80199fa:	af02      	add	r7, sp, #8
 80199fc:	6078      	str	r0, [r7, #4]
 80199fe:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	689b      	ldr	r3, [r3, #8]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d011      	beq.n	8019a2c <osMessageCreate+0x36>
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	68db      	ldr	r3, [r3, #12]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d00d      	beq.n	8019a2c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	6818      	ldr	r0, [r3, #0]
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	6859      	ldr	r1, [r3, #4]
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	689a      	ldr	r2, [r3, #8]
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	68db      	ldr	r3, [r3, #12]
 8019a20:	2400      	movs	r4, #0
 8019a22:	9400      	str	r4, [sp, #0]
 8019a24:	f000 f9e2 	bl	8019dec <xQueueGenericCreateStatic>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	e008      	b.n	8019a3e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	6818      	ldr	r0, [r3, #0]
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	685b      	ldr	r3, [r3, #4]
 8019a34:	2200      	movs	r2, #0
 8019a36:	4619      	mov	r1, r3
 8019a38:	f000 fa5a 	bl	8019ef0 <xQueueGenericCreate>
 8019a3c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8019a3e:	4618      	mov	r0, r3
 8019a40:	370c      	adds	r7, #12
 8019a42:	46bd      	mov	sp, r7
 8019a44:	bd90      	pop	{r4, r7, pc}
	...

08019a48 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b086      	sub	sp, #24
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	60b9      	str	r1, [r7, #8]
 8019a52:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8019a54:	2300      	movs	r3, #0
 8019a56:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d101      	bne.n	8019a66 <osMessagePut+0x1e>
    ticks = 1;
 8019a62:	2301      	movs	r3, #1
 8019a64:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8019a66:	f7ff fe5a 	bl	801971e <inHandlerMode>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d018      	beq.n	8019aa2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8019a70:	f107 0210 	add.w	r2, r7, #16
 8019a74:	f107 0108 	add.w	r1, r7, #8
 8019a78:	2300      	movs	r3, #0
 8019a7a:	68f8      	ldr	r0, [r7, #12]
 8019a7c:	f000 fc12 	bl	801a2a4 <xQueueGenericSendFromISR>
 8019a80:	4603      	mov	r3, r0
 8019a82:	2b01      	cmp	r3, #1
 8019a84:	d001      	beq.n	8019a8a <osMessagePut+0x42>
      return osErrorOS;
 8019a86:	23ff      	movs	r3, #255	; 0xff
 8019a88:	e018      	b.n	8019abc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019a8a:	693b      	ldr	r3, [r7, #16]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d014      	beq.n	8019aba <osMessagePut+0x72>
 8019a90:	4b0c      	ldr	r3, [pc, #48]	; (8019ac4 <osMessagePut+0x7c>)
 8019a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a96:	601a      	str	r2, [r3, #0]
 8019a98:	f3bf 8f4f 	dsb	sy
 8019a9c:	f3bf 8f6f 	isb	sy
 8019aa0:	e00b      	b.n	8019aba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8019aa2:	f107 0108 	add.w	r1, r7, #8
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	697a      	ldr	r2, [r7, #20]
 8019aaa:	68f8      	ldr	r0, [r7, #12]
 8019aac:	f000 faf4 	bl	801a098 <xQueueGenericSend>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	2b01      	cmp	r3, #1
 8019ab4:	d001      	beq.n	8019aba <osMessagePut+0x72>
      return osErrorOS;
 8019ab6:	23ff      	movs	r3, #255	; 0xff
 8019ab8:	e000      	b.n	8019abc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8019aba:	2300      	movs	r3, #0
}
 8019abc:	4618      	mov	r0, r3
 8019abe:	3718      	adds	r7, #24
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}
 8019ac4:	e000ed04 	.word	0xe000ed04

08019ac8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8019ac8:	b590      	push	{r4, r7, lr}
 8019aca:	b08b      	sub	sp, #44	; 0x2c
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	60f8      	str	r0, [r7, #12]
 8019ad0:	60b9      	str	r1, [r7, #8]
 8019ad2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8019ad4:	68bb      	ldr	r3, [r7, #8]
 8019ad6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8019ad8:	2300      	movs	r3, #0
 8019ada:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8019adc:	68bb      	ldr	r3, [r7, #8]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d10a      	bne.n	8019af8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8019ae2:	2380      	movs	r3, #128	; 0x80
 8019ae4:	617b      	str	r3, [r7, #20]
    return event;
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	461c      	mov	r4, r3
 8019aea:	f107 0314 	add.w	r3, r7, #20
 8019aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019af6:	e054      	b.n	8019ba2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8019af8:	2300      	movs	r3, #0
 8019afa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8019afc:	2300      	movs	r3, #0
 8019afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b06:	d103      	bne.n	8019b10 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8019b08:	f04f 33ff 	mov.w	r3, #4294967295
 8019b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8019b0e:	e009      	b.n	8019b24 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d006      	beq.n	8019b24 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8019b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d101      	bne.n	8019b24 <osMessageGet+0x5c>
      ticks = 1;
 8019b20:	2301      	movs	r3, #1
 8019b22:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8019b24:	f7ff fdfb 	bl	801971e <inHandlerMode>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d01c      	beq.n	8019b68 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8019b2e:	f107 0220 	add.w	r2, r7, #32
 8019b32:	f107 0314 	add.w	r3, r7, #20
 8019b36:	3304      	adds	r3, #4
 8019b38:	4619      	mov	r1, r3
 8019b3a:	68b8      	ldr	r0, [r7, #8]
 8019b3c:	f000 fee2 	bl	801a904 <xQueueReceiveFromISR>
 8019b40:	4603      	mov	r3, r0
 8019b42:	2b01      	cmp	r3, #1
 8019b44:	d102      	bne.n	8019b4c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8019b46:	2310      	movs	r3, #16
 8019b48:	617b      	str	r3, [r7, #20]
 8019b4a:	e001      	b.n	8019b50 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019b50:	6a3b      	ldr	r3, [r7, #32]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d01d      	beq.n	8019b92 <osMessageGet+0xca>
 8019b56:	4b15      	ldr	r3, [pc, #84]	; (8019bac <osMessageGet+0xe4>)
 8019b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b5c:	601a      	str	r2, [r3, #0]
 8019b5e:	f3bf 8f4f 	dsb	sy
 8019b62:	f3bf 8f6f 	isb	sy
 8019b66:	e014      	b.n	8019b92 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8019b68:	f107 0314 	add.w	r3, r7, #20
 8019b6c:	3304      	adds	r3, #4
 8019b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b70:	4619      	mov	r1, r3
 8019b72:	68b8      	ldr	r0, [r7, #8]
 8019b74:	f000 fccc 	bl	801a510 <xQueueReceive>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	2b01      	cmp	r3, #1
 8019b7c:	d102      	bne.n	8019b84 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8019b7e:	2310      	movs	r3, #16
 8019b80:	617b      	str	r3, [r7, #20]
 8019b82:	e006      	b.n	8019b92 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8019b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d101      	bne.n	8019b8e <osMessageGet+0xc6>
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	e000      	b.n	8019b90 <osMessageGet+0xc8>
 8019b8e:	2340      	movs	r3, #64	; 0x40
 8019b90:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	461c      	mov	r4, r3
 8019b96:	f107 0314 	add.w	r3, r7, #20
 8019b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8019ba2:	68f8      	ldr	r0, [r7, #12]
 8019ba4:	372c      	adds	r7, #44	; 0x2c
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd90      	pop	{r4, r7, pc}
 8019baa:	bf00      	nop
 8019bac:	e000ed04 	.word	0xe000ed04

08019bb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019bb0:	b480      	push	{r7}
 8019bb2:	b083      	sub	sp, #12
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	f103 0208 	add.w	r2, r3, #8
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8019bc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	f103 0208 	add.w	r2, r3, #8
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f103 0208 	add.w	r2, r3, #8
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	2200      	movs	r2, #0
 8019be2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019be4:	bf00      	nop
 8019be6:	370c      	adds	r7, #12
 8019be8:	46bd      	mov	sp, r7
 8019bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bee:	4770      	bx	lr

08019bf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019bf0:	b480      	push	{r7}
 8019bf2:	b083      	sub	sp, #12
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019bfe:	bf00      	nop
 8019c00:	370c      	adds	r7, #12
 8019c02:	46bd      	mov	sp, r7
 8019c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c08:	4770      	bx	lr

08019c0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019c0a:	b480      	push	{r7}
 8019c0c:	b085      	sub	sp, #20
 8019c0e:	af00      	add	r7, sp, #0
 8019c10:	6078      	str	r0, [r7, #4]
 8019c12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	685b      	ldr	r3, [r3, #4]
 8019c18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	68fa      	ldr	r2, [r7, #12]
 8019c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	689a      	ldr	r2, [r3, #8]
 8019c24:	683b      	ldr	r3, [r7, #0]
 8019c26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	689b      	ldr	r3, [r3, #8]
 8019c2c:	683a      	ldr	r2, [r7, #0]
 8019c2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	683a      	ldr	r2, [r7, #0]
 8019c34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019c36:	683b      	ldr	r3, [r7, #0]
 8019c38:	687a      	ldr	r2, [r7, #4]
 8019c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	1c5a      	adds	r2, r3, #1
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	601a      	str	r2, [r3, #0]
}
 8019c46:	bf00      	nop
 8019c48:	3714      	adds	r7, #20
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c50:	4770      	bx	lr

08019c52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019c52:	b480      	push	{r7}
 8019c54:	b085      	sub	sp, #20
 8019c56:	af00      	add	r7, sp, #0
 8019c58:	6078      	str	r0, [r7, #4]
 8019c5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019c62:	68bb      	ldr	r3, [r7, #8]
 8019c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c68:	d103      	bne.n	8019c72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	691b      	ldr	r3, [r3, #16]
 8019c6e:	60fb      	str	r3, [r7, #12]
 8019c70:	e00c      	b.n	8019c8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	3308      	adds	r3, #8
 8019c76:	60fb      	str	r3, [r7, #12]
 8019c78:	e002      	b.n	8019c80 <vListInsert+0x2e>
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	685b      	ldr	r3, [r3, #4]
 8019c7e:	60fb      	str	r3, [r7, #12]
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	685b      	ldr	r3, [r3, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	68ba      	ldr	r2, [r7, #8]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d2f6      	bcs.n	8019c7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	685a      	ldr	r2, [r3, #4]
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019c94:	683b      	ldr	r3, [r7, #0]
 8019c96:	685b      	ldr	r3, [r3, #4]
 8019c98:	683a      	ldr	r2, [r7, #0]
 8019c9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	68fa      	ldr	r2, [r7, #12]
 8019ca0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	683a      	ldr	r2, [r7, #0]
 8019ca6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	687a      	ldr	r2, [r7, #4]
 8019cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	1c5a      	adds	r2, r3, #1
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	601a      	str	r2, [r3, #0]
}
 8019cb8:	bf00      	nop
 8019cba:	3714      	adds	r7, #20
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc2:	4770      	bx	lr

08019cc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019cc4:	b480      	push	{r7}
 8019cc6:	b085      	sub	sp, #20
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	691b      	ldr	r3, [r3, #16]
 8019cd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	685b      	ldr	r3, [r3, #4]
 8019cd6:	687a      	ldr	r2, [r7, #4]
 8019cd8:	6892      	ldr	r2, [r2, #8]
 8019cda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	689b      	ldr	r3, [r3, #8]
 8019ce0:	687a      	ldr	r2, [r7, #4]
 8019ce2:	6852      	ldr	r2, [r2, #4]
 8019ce4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	685b      	ldr	r3, [r3, #4]
 8019cea:	687a      	ldr	r2, [r7, #4]
 8019cec:	429a      	cmp	r2, r3
 8019cee:	d103      	bne.n	8019cf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	689a      	ldr	r2, [r3, #8]
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	2200      	movs	r2, #0
 8019cfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	1e5a      	subs	r2, r3, #1
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	681b      	ldr	r3, [r3, #0]
}
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	3714      	adds	r7, #20
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr

08019d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b084      	sub	sp, #16
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d10c      	bne.n	8019d46 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d30:	b672      	cpsid	i
 8019d32:	f383 8811 	msr	BASEPRI, r3
 8019d36:	f3bf 8f6f 	isb	sy
 8019d3a:	f3bf 8f4f 	dsb	sy
 8019d3e:	b662      	cpsie	i
 8019d40:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019d42:	bf00      	nop
 8019d44:	e7fe      	b.n	8019d44 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8019d46:	f002 f961 	bl	801c00c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	681a      	ldr	r2, [r3, #0]
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d52:	68f9      	ldr	r1, [r7, #12]
 8019d54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019d56:	fb01 f303 	mul.w	r3, r1, r3
 8019d5a:	441a      	add	r2, r3
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	2200      	movs	r2, #0
 8019d64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	681a      	ldr	r2, [r3, #0]
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	681a      	ldr	r2, [r3, #0]
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d76:	3b01      	subs	r3, #1
 8019d78:	68f9      	ldr	r1, [r7, #12]
 8019d7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019d7c:	fb01 f303 	mul.w	r3, r1, r3
 8019d80:	441a      	add	r2, r3
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	22ff      	movs	r2, #255	; 0xff
 8019d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	22ff      	movs	r2, #255	; 0xff
 8019d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d114      	bne.n	8019dc6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	691b      	ldr	r3, [r3, #16]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d01a      	beq.n	8019dda <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	3310      	adds	r3, #16
 8019da8:	4618      	mov	r0, r3
 8019daa:	f001 fc19 	bl	801b5e0 <xTaskRemoveFromEventList>
 8019dae:	4603      	mov	r3, r0
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d012      	beq.n	8019dda <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019db4:	4b0c      	ldr	r3, [pc, #48]	; (8019de8 <xQueueGenericReset+0xd0>)
 8019db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019dba:	601a      	str	r2, [r3, #0]
 8019dbc:	f3bf 8f4f 	dsb	sy
 8019dc0:	f3bf 8f6f 	isb	sy
 8019dc4:	e009      	b.n	8019dda <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	3310      	adds	r3, #16
 8019dca:	4618      	mov	r0, r3
 8019dcc:	f7ff fef0 	bl	8019bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	3324      	adds	r3, #36	; 0x24
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f7ff feeb 	bl	8019bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019dda:	f002 f94b 	bl	801c074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019dde:	2301      	movs	r3, #1
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	3710      	adds	r7, #16
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}
 8019de8:	e000ed04 	.word	0xe000ed04

08019dec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b08e      	sub	sp, #56	; 0x38
 8019df0:	af02      	add	r7, sp, #8
 8019df2:	60f8      	str	r0, [r7, #12]
 8019df4:	60b9      	str	r1, [r7, #8]
 8019df6:	607a      	str	r2, [r7, #4]
 8019df8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d10c      	bne.n	8019e1a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8019e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e04:	b672      	cpsid	i
 8019e06:	f383 8811 	msr	BASEPRI, r3
 8019e0a:	f3bf 8f6f 	isb	sy
 8019e0e:	f3bf 8f4f 	dsb	sy
 8019e12:	b662      	cpsie	i
 8019e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019e16:	bf00      	nop
 8019e18:	e7fe      	b.n	8019e18 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019e1a:	683b      	ldr	r3, [r7, #0]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d10c      	bne.n	8019e3a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8019e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e24:	b672      	cpsid	i
 8019e26:	f383 8811 	msr	BASEPRI, r3
 8019e2a:	f3bf 8f6f 	isb	sy
 8019e2e:	f3bf 8f4f 	dsb	sy
 8019e32:	b662      	cpsie	i
 8019e34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019e36:	bf00      	nop
 8019e38:	e7fe      	b.n	8019e38 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d002      	beq.n	8019e46 <xQueueGenericCreateStatic+0x5a>
 8019e40:	68bb      	ldr	r3, [r7, #8]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d001      	beq.n	8019e4a <xQueueGenericCreateStatic+0x5e>
 8019e46:	2301      	movs	r3, #1
 8019e48:	e000      	b.n	8019e4c <xQueueGenericCreateStatic+0x60>
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d10c      	bne.n	8019e6a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8019e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e54:	b672      	cpsid	i
 8019e56:	f383 8811 	msr	BASEPRI, r3
 8019e5a:	f3bf 8f6f 	isb	sy
 8019e5e:	f3bf 8f4f 	dsb	sy
 8019e62:	b662      	cpsie	i
 8019e64:	623b      	str	r3, [r7, #32]
}
 8019e66:	bf00      	nop
 8019e68:	e7fe      	b.n	8019e68 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d102      	bne.n	8019e76 <xQueueGenericCreateStatic+0x8a>
 8019e70:	68bb      	ldr	r3, [r7, #8]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d101      	bne.n	8019e7a <xQueueGenericCreateStatic+0x8e>
 8019e76:	2301      	movs	r3, #1
 8019e78:	e000      	b.n	8019e7c <xQueueGenericCreateStatic+0x90>
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d10c      	bne.n	8019e9a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8019e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e84:	b672      	cpsid	i
 8019e86:	f383 8811 	msr	BASEPRI, r3
 8019e8a:	f3bf 8f6f 	isb	sy
 8019e8e:	f3bf 8f4f 	dsb	sy
 8019e92:	b662      	cpsie	i
 8019e94:	61fb      	str	r3, [r7, #28]
}
 8019e96:	bf00      	nop
 8019e98:	e7fe      	b.n	8019e98 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019e9a:	2348      	movs	r3, #72	; 0x48
 8019e9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019e9e:	697b      	ldr	r3, [r7, #20]
 8019ea0:	2b48      	cmp	r3, #72	; 0x48
 8019ea2:	d00c      	beq.n	8019ebe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8019ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ea8:	b672      	cpsid	i
 8019eaa:	f383 8811 	msr	BASEPRI, r3
 8019eae:	f3bf 8f6f 	isb	sy
 8019eb2:	f3bf 8f4f 	dsb	sy
 8019eb6:	b662      	cpsie	i
 8019eb8:	61bb      	str	r3, [r7, #24]
}
 8019eba:	bf00      	nop
 8019ebc:	e7fe      	b.n	8019ebc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019ebe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019ec0:	683b      	ldr	r3, [r7, #0]
 8019ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d00d      	beq.n	8019ee6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ecc:	2201      	movs	r2, #1
 8019ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019ed2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed8:	9300      	str	r3, [sp, #0]
 8019eda:	4613      	mov	r3, r2
 8019edc:	687a      	ldr	r2, [r7, #4]
 8019ede:	68b9      	ldr	r1, [r7, #8]
 8019ee0:	68f8      	ldr	r0, [r7, #12]
 8019ee2:	f000 f847 	bl	8019f74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8019ee8:	4618      	mov	r0, r3
 8019eea:	3730      	adds	r7, #48	; 0x30
 8019eec:	46bd      	mov	sp, r7
 8019eee:	bd80      	pop	{r7, pc}

08019ef0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b08a      	sub	sp, #40	; 0x28
 8019ef4:	af02      	add	r7, sp, #8
 8019ef6:	60f8      	str	r0, [r7, #12]
 8019ef8:	60b9      	str	r1, [r7, #8]
 8019efa:	4613      	mov	r3, r2
 8019efc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d10c      	bne.n	8019f1e <xQueueGenericCreate+0x2e>
	__asm volatile
 8019f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f08:	b672      	cpsid	i
 8019f0a:	f383 8811 	msr	BASEPRI, r3
 8019f0e:	f3bf 8f6f 	isb	sy
 8019f12:	f3bf 8f4f 	dsb	sy
 8019f16:	b662      	cpsie	i
 8019f18:	613b      	str	r3, [r7, #16]
}
 8019f1a:	bf00      	nop
 8019f1c:	e7fe      	b.n	8019f1c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d102      	bne.n	8019f2a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8019f24:	2300      	movs	r3, #0
 8019f26:	61fb      	str	r3, [r7, #28]
 8019f28:	e004      	b.n	8019f34 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	68ba      	ldr	r2, [r7, #8]
 8019f2e:	fb02 f303 	mul.w	r3, r2, r3
 8019f32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019f34:	69fb      	ldr	r3, [r7, #28]
 8019f36:	3348      	adds	r3, #72	; 0x48
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f002 f993 	bl	801c264 <pvPortMalloc>
 8019f3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019f40:	69bb      	ldr	r3, [r7, #24]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d011      	beq.n	8019f6a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019f46:	69bb      	ldr	r3, [r7, #24]
 8019f48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019f4a:	697b      	ldr	r3, [r7, #20]
 8019f4c:	3348      	adds	r3, #72	; 0x48
 8019f4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019f50:	69bb      	ldr	r3, [r7, #24]
 8019f52:	2200      	movs	r2, #0
 8019f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019f58:	79fa      	ldrb	r2, [r7, #7]
 8019f5a:	69bb      	ldr	r3, [r7, #24]
 8019f5c:	9300      	str	r3, [sp, #0]
 8019f5e:	4613      	mov	r3, r2
 8019f60:	697a      	ldr	r2, [r7, #20]
 8019f62:	68b9      	ldr	r1, [r7, #8]
 8019f64:	68f8      	ldr	r0, [r7, #12]
 8019f66:	f000 f805 	bl	8019f74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019f6a:	69bb      	ldr	r3, [r7, #24]
	}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	3720      	adds	r7, #32
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}

08019f74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b084      	sub	sp, #16
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	60f8      	str	r0, [r7, #12]
 8019f7c:	60b9      	str	r1, [r7, #8]
 8019f7e:	607a      	str	r2, [r7, #4]
 8019f80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019f82:	68bb      	ldr	r3, [r7, #8]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d103      	bne.n	8019f90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019f88:	69bb      	ldr	r3, [r7, #24]
 8019f8a:	69ba      	ldr	r2, [r7, #24]
 8019f8c:	601a      	str	r2, [r3, #0]
 8019f8e:	e002      	b.n	8019f96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019f90:	69bb      	ldr	r3, [r7, #24]
 8019f92:	687a      	ldr	r2, [r7, #4]
 8019f94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019f96:	69bb      	ldr	r3, [r7, #24]
 8019f98:	68fa      	ldr	r2, [r7, #12]
 8019f9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019f9c:	69bb      	ldr	r3, [r7, #24]
 8019f9e:	68ba      	ldr	r2, [r7, #8]
 8019fa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019fa2:	2101      	movs	r1, #1
 8019fa4:	69b8      	ldr	r0, [r7, #24]
 8019fa6:	f7ff feb7 	bl	8019d18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019faa:	bf00      	nop
 8019fac:	3710      	adds	r7, #16
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}

08019fb2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8019fb2:	b580      	push	{r7, lr}
 8019fb4:	b08a      	sub	sp, #40	; 0x28
 8019fb6:	af02      	add	r7, sp, #8
 8019fb8:	60f8      	str	r0, [r7, #12]
 8019fba:	60b9      	str	r1, [r7, #8]
 8019fbc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d10c      	bne.n	8019fde <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8019fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fc8:	b672      	cpsid	i
 8019fca:	f383 8811 	msr	BASEPRI, r3
 8019fce:	f3bf 8f6f 	isb	sy
 8019fd2:	f3bf 8f4f 	dsb	sy
 8019fd6:	b662      	cpsie	i
 8019fd8:	61bb      	str	r3, [r7, #24]
}
 8019fda:	bf00      	nop
 8019fdc:	e7fe      	b.n	8019fdc <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019fde:	68ba      	ldr	r2, [r7, #8]
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	429a      	cmp	r2, r3
 8019fe4:	d90c      	bls.n	801a000 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8019fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fea:	b672      	cpsid	i
 8019fec:	f383 8811 	msr	BASEPRI, r3
 8019ff0:	f3bf 8f6f 	isb	sy
 8019ff4:	f3bf 8f4f 	dsb	sy
 8019ff8:	b662      	cpsie	i
 8019ffa:	617b      	str	r3, [r7, #20]
}
 8019ffc:	bf00      	nop
 8019ffe:	e7fe      	b.n	8019ffe <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801a000:	2302      	movs	r3, #2
 801a002:	9300      	str	r3, [sp, #0]
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2200      	movs	r2, #0
 801a008:	2100      	movs	r1, #0
 801a00a:	68f8      	ldr	r0, [r7, #12]
 801a00c:	f7ff feee 	bl	8019dec <xQueueGenericCreateStatic>
 801a010:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801a012:	69fb      	ldr	r3, [r7, #28]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d002      	beq.n	801a01e <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801a018:	69fb      	ldr	r3, [r7, #28]
 801a01a:	68ba      	ldr	r2, [r7, #8]
 801a01c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801a01e:	69fb      	ldr	r3, [r7, #28]
	}
 801a020:	4618      	mov	r0, r3
 801a022:	3720      	adds	r7, #32
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}

0801a028 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b086      	sub	sp, #24
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d10c      	bne.n	801a052 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 801a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a03c:	b672      	cpsid	i
 801a03e:	f383 8811 	msr	BASEPRI, r3
 801a042:	f3bf 8f6f 	isb	sy
 801a046:	f3bf 8f4f 	dsb	sy
 801a04a:	b662      	cpsie	i
 801a04c:	613b      	str	r3, [r7, #16]
}
 801a04e:	bf00      	nop
 801a050:	e7fe      	b.n	801a050 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801a052:	683a      	ldr	r2, [r7, #0]
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	429a      	cmp	r2, r3
 801a058:	d90c      	bls.n	801a074 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 801a05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a05e:	b672      	cpsid	i
 801a060:	f383 8811 	msr	BASEPRI, r3
 801a064:	f3bf 8f6f 	isb	sy
 801a068:	f3bf 8f4f 	dsb	sy
 801a06c:	b662      	cpsie	i
 801a06e:	60fb      	str	r3, [r7, #12]
}
 801a070:	bf00      	nop
 801a072:	e7fe      	b.n	801a072 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801a074:	2202      	movs	r2, #2
 801a076:	2100      	movs	r1, #0
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	f7ff ff39 	bl	8019ef0 <xQueueGenericCreate>
 801a07e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801a080:	697b      	ldr	r3, [r7, #20]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d002      	beq.n	801a08c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	683a      	ldr	r2, [r7, #0]
 801a08a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801a08c:	697b      	ldr	r3, [r7, #20]
	}
 801a08e:	4618      	mov	r0, r3
 801a090:	3718      	adds	r7, #24
 801a092:	46bd      	mov	sp, r7
 801a094:	bd80      	pop	{r7, pc}
	...

0801a098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a098:	b580      	push	{r7, lr}
 801a09a:	b08e      	sub	sp, #56	; 0x38
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	60f8      	str	r0, [r7, #12]
 801a0a0:	60b9      	str	r1, [r7, #8]
 801a0a2:	607a      	str	r2, [r7, #4]
 801a0a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d10c      	bne.n	801a0ce <xQueueGenericSend+0x36>
	__asm volatile
 801a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0b8:	b672      	cpsid	i
 801a0ba:	f383 8811 	msr	BASEPRI, r3
 801a0be:	f3bf 8f6f 	isb	sy
 801a0c2:	f3bf 8f4f 	dsb	sy
 801a0c6:	b662      	cpsie	i
 801a0c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a0ca:	bf00      	nop
 801a0cc:	e7fe      	b.n	801a0cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a0ce:	68bb      	ldr	r3, [r7, #8]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d103      	bne.n	801a0dc <xQueueGenericSend+0x44>
 801a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d101      	bne.n	801a0e0 <xQueueGenericSend+0x48>
 801a0dc:	2301      	movs	r3, #1
 801a0de:	e000      	b.n	801a0e2 <xQueueGenericSend+0x4a>
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d10c      	bne.n	801a100 <xQueueGenericSend+0x68>
	__asm volatile
 801a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0ea:	b672      	cpsid	i
 801a0ec:	f383 8811 	msr	BASEPRI, r3
 801a0f0:	f3bf 8f6f 	isb	sy
 801a0f4:	f3bf 8f4f 	dsb	sy
 801a0f8:	b662      	cpsie	i
 801a0fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a0fc:	bf00      	nop
 801a0fe:	e7fe      	b.n	801a0fe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	2b02      	cmp	r3, #2
 801a104:	d103      	bne.n	801a10e <xQueueGenericSend+0x76>
 801a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a10a:	2b01      	cmp	r3, #1
 801a10c:	d101      	bne.n	801a112 <xQueueGenericSend+0x7a>
 801a10e:	2301      	movs	r3, #1
 801a110:	e000      	b.n	801a114 <xQueueGenericSend+0x7c>
 801a112:	2300      	movs	r3, #0
 801a114:	2b00      	cmp	r3, #0
 801a116:	d10c      	bne.n	801a132 <xQueueGenericSend+0x9a>
	__asm volatile
 801a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a11c:	b672      	cpsid	i
 801a11e:	f383 8811 	msr	BASEPRI, r3
 801a122:	f3bf 8f6f 	isb	sy
 801a126:	f3bf 8f4f 	dsb	sy
 801a12a:	b662      	cpsie	i
 801a12c:	623b      	str	r3, [r7, #32]
}
 801a12e:	bf00      	nop
 801a130:	e7fe      	b.n	801a130 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a132:	f001 fc1b 	bl	801b96c <xTaskGetSchedulerState>
 801a136:	4603      	mov	r3, r0
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d102      	bne.n	801a142 <xQueueGenericSend+0xaa>
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d101      	bne.n	801a146 <xQueueGenericSend+0xae>
 801a142:	2301      	movs	r3, #1
 801a144:	e000      	b.n	801a148 <xQueueGenericSend+0xb0>
 801a146:	2300      	movs	r3, #0
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d10c      	bne.n	801a166 <xQueueGenericSend+0xce>
	__asm volatile
 801a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a150:	b672      	cpsid	i
 801a152:	f383 8811 	msr	BASEPRI, r3
 801a156:	f3bf 8f6f 	isb	sy
 801a15a:	f3bf 8f4f 	dsb	sy
 801a15e:	b662      	cpsie	i
 801a160:	61fb      	str	r3, [r7, #28]
}
 801a162:	bf00      	nop
 801a164:	e7fe      	b.n	801a164 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a166:	f001 ff51 	bl	801c00c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a16c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a172:	429a      	cmp	r2, r3
 801a174:	d302      	bcc.n	801a17c <xQueueGenericSend+0xe4>
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	2b02      	cmp	r3, #2
 801a17a:	d129      	bne.n	801a1d0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a17c:	683a      	ldr	r2, [r7, #0]
 801a17e:	68b9      	ldr	r1, [r7, #8]
 801a180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a182:	f000 fc82 	bl	801aa8a <prvCopyDataToQueue>
 801a186:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d010      	beq.n	801a1b2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a192:	3324      	adds	r3, #36	; 0x24
 801a194:	4618      	mov	r0, r3
 801a196:	f001 fa23 	bl	801b5e0 <xTaskRemoveFromEventList>
 801a19a:	4603      	mov	r3, r0
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d013      	beq.n	801a1c8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a1a0:	4b3f      	ldr	r3, [pc, #252]	; (801a2a0 <xQueueGenericSend+0x208>)
 801a1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1a6:	601a      	str	r2, [r3, #0]
 801a1a8:	f3bf 8f4f 	dsb	sy
 801a1ac:	f3bf 8f6f 	isb	sy
 801a1b0:	e00a      	b.n	801a1c8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d007      	beq.n	801a1c8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a1b8:	4b39      	ldr	r3, [pc, #228]	; (801a2a0 <xQueueGenericSend+0x208>)
 801a1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1be:	601a      	str	r2, [r3, #0]
 801a1c0:	f3bf 8f4f 	dsb	sy
 801a1c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a1c8:	f001 ff54 	bl	801c074 <vPortExitCritical>
				return pdPASS;
 801a1cc:	2301      	movs	r3, #1
 801a1ce:	e063      	b.n	801a298 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d103      	bne.n	801a1de <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a1d6:	f001 ff4d 	bl	801c074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	e05c      	b.n	801a298 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d106      	bne.n	801a1f2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a1e4:	f107 0314 	add.w	r3, r7, #20
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	f001 fa5d 	bl	801b6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a1ee:	2301      	movs	r3, #1
 801a1f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a1f2:	f001 ff3f 	bl	801c074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a1f6:	f000 ffc3 	bl	801b180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a1fa:	f001 ff07 	bl	801c00c <vPortEnterCritical>
 801a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a204:	b25b      	sxtb	r3, r3
 801a206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a20a:	d103      	bne.n	801a214 <xQueueGenericSend+0x17c>
 801a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a20e:	2200      	movs	r2, #0
 801a210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a21a:	b25b      	sxtb	r3, r3
 801a21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a220:	d103      	bne.n	801a22a <xQueueGenericSend+0x192>
 801a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a224:	2200      	movs	r2, #0
 801a226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a22a:	f001 ff23 	bl	801c074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a22e:	1d3a      	adds	r2, r7, #4
 801a230:	f107 0314 	add.w	r3, r7, #20
 801a234:	4611      	mov	r1, r2
 801a236:	4618      	mov	r0, r3
 801a238:	f001 fa4c 	bl	801b6d4 <xTaskCheckForTimeOut>
 801a23c:	4603      	mov	r3, r0
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d124      	bne.n	801a28c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a244:	f000 fd19 	bl	801ac7a <prvIsQueueFull>
 801a248:	4603      	mov	r3, r0
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d018      	beq.n	801a280 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a250:	3310      	adds	r3, #16
 801a252:	687a      	ldr	r2, [r7, #4]
 801a254:	4611      	mov	r1, r2
 801a256:	4618      	mov	r0, r3
 801a258:	f001 f99c 	bl	801b594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a25c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a25e:	f000 fca4 	bl	801abaa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a262:	f000 ff9b 	bl	801b19c <xTaskResumeAll>
 801a266:	4603      	mov	r3, r0
 801a268:	2b00      	cmp	r3, #0
 801a26a:	f47f af7c 	bne.w	801a166 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801a26e:	4b0c      	ldr	r3, [pc, #48]	; (801a2a0 <xQueueGenericSend+0x208>)
 801a270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a274:	601a      	str	r2, [r3, #0]
 801a276:	f3bf 8f4f 	dsb	sy
 801a27a:	f3bf 8f6f 	isb	sy
 801a27e:	e772      	b.n	801a166 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a282:	f000 fc92 	bl	801abaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a286:	f000 ff89 	bl	801b19c <xTaskResumeAll>
 801a28a:	e76c      	b.n	801a166 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a28e:	f000 fc8c 	bl	801abaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a292:	f000 ff83 	bl	801b19c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a296:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a298:	4618      	mov	r0, r3
 801a29a:	3738      	adds	r7, #56	; 0x38
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bd80      	pop	{r7, pc}
 801a2a0:	e000ed04 	.word	0xe000ed04

0801a2a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b08e      	sub	sp, #56	; 0x38
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	60f8      	str	r0, [r7, #12]
 801a2ac:	60b9      	str	r1, [r7, #8]
 801a2ae:	607a      	str	r2, [r7, #4]
 801a2b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d10c      	bne.n	801a2d6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 801a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2c0:	b672      	cpsid	i
 801a2c2:	f383 8811 	msr	BASEPRI, r3
 801a2c6:	f3bf 8f6f 	isb	sy
 801a2ca:	f3bf 8f4f 	dsb	sy
 801a2ce:	b662      	cpsie	i
 801a2d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a2d2:	bf00      	nop
 801a2d4:	e7fe      	b.n	801a2d4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a2d6:	68bb      	ldr	r3, [r7, #8]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d103      	bne.n	801a2e4 <xQueueGenericSendFromISR+0x40>
 801a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d101      	bne.n	801a2e8 <xQueueGenericSendFromISR+0x44>
 801a2e4:	2301      	movs	r3, #1
 801a2e6:	e000      	b.n	801a2ea <xQueueGenericSendFromISR+0x46>
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d10c      	bne.n	801a308 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 801a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2f2:	b672      	cpsid	i
 801a2f4:	f383 8811 	msr	BASEPRI, r3
 801a2f8:	f3bf 8f6f 	isb	sy
 801a2fc:	f3bf 8f4f 	dsb	sy
 801a300:	b662      	cpsie	i
 801a302:	623b      	str	r3, [r7, #32]
}
 801a304:	bf00      	nop
 801a306:	e7fe      	b.n	801a306 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	2b02      	cmp	r3, #2
 801a30c:	d103      	bne.n	801a316 <xQueueGenericSendFromISR+0x72>
 801a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a312:	2b01      	cmp	r3, #1
 801a314:	d101      	bne.n	801a31a <xQueueGenericSendFromISR+0x76>
 801a316:	2301      	movs	r3, #1
 801a318:	e000      	b.n	801a31c <xQueueGenericSendFromISR+0x78>
 801a31a:	2300      	movs	r3, #0
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d10c      	bne.n	801a33a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 801a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a324:	b672      	cpsid	i
 801a326:	f383 8811 	msr	BASEPRI, r3
 801a32a:	f3bf 8f6f 	isb	sy
 801a32e:	f3bf 8f4f 	dsb	sy
 801a332:	b662      	cpsie	i
 801a334:	61fb      	str	r3, [r7, #28]
}
 801a336:	bf00      	nop
 801a338:	e7fe      	b.n	801a338 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a33a:	f001 ff4f 	bl	801c1dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a33e:	f3ef 8211 	mrs	r2, BASEPRI
 801a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a346:	b672      	cpsid	i
 801a348:	f383 8811 	msr	BASEPRI, r3
 801a34c:	f3bf 8f6f 	isb	sy
 801a350:	f3bf 8f4f 	dsb	sy
 801a354:	b662      	cpsie	i
 801a356:	61ba      	str	r2, [r7, #24]
 801a358:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a35a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a35c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a366:	429a      	cmp	r2, r3
 801a368:	d302      	bcc.n	801a370 <xQueueGenericSendFromISR+0xcc>
 801a36a:	683b      	ldr	r3, [r7, #0]
 801a36c:	2b02      	cmp	r3, #2
 801a36e:	d12c      	bne.n	801a3ca <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a37a:	683a      	ldr	r2, [r7, #0]
 801a37c:	68b9      	ldr	r1, [r7, #8]
 801a37e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a380:	f000 fb83 	bl	801aa8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a384:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801a388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a38c:	d112      	bne.n	801a3b4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a392:	2b00      	cmp	r3, #0
 801a394:	d016      	beq.n	801a3c4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a398:	3324      	adds	r3, #36	; 0x24
 801a39a:	4618      	mov	r0, r3
 801a39c:	f001 f920 	bl	801b5e0 <xTaskRemoveFromEventList>
 801a3a0:	4603      	mov	r3, r0
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d00e      	beq.n	801a3c4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d00b      	beq.n	801a3c4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	2201      	movs	r2, #1
 801a3b0:	601a      	str	r2, [r3, #0]
 801a3b2:	e007      	b.n	801a3c4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a3b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a3b8:	3301      	adds	r3, #1
 801a3ba:	b2db      	uxtb	r3, r3
 801a3bc:	b25a      	sxtb	r2, r3
 801a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801a3c8:	e001      	b.n	801a3ce <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	637b      	str	r3, [r7, #52]	; 0x34
 801a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3d0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a3d2:	693b      	ldr	r3, [r7, #16]
 801a3d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a3d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a3dc:	4618      	mov	r0, r3
 801a3de:	3738      	adds	r7, #56	; 0x38
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}

0801a3e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a3e4:	b580      	push	{r7, lr}
 801a3e6:	b08e      	sub	sp, #56	; 0x38
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	6078      	str	r0, [r7, #4]
 801a3ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d10c      	bne.n	801a412 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3fc:	b672      	cpsid	i
 801a3fe:	f383 8811 	msr	BASEPRI, r3
 801a402:	f3bf 8f6f 	isb	sy
 801a406:	f3bf 8f4f 	dsb	sy
 801a40a:	b662      	cpsie	i
 801a40c:	623b      	str	r3, [r7, #32]
}
 801a40e:	bf00      	nop
 801a410:	e7fe      	b.n	801a410 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a416:	2b00      	cmp	r3, #0
 801a418:	d00c      	beq.n	801a434 <xQueueGiveFromISR+0x50>
	__asm volatile
 801a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a41e:	b672      	cpsid	i
 801a420:	f383 8811 	msr	BASEPRI, r3
 801a424:	f3bf 8f6f 	isb	sy
 801a428:	f3bf 8f4f 	dsb	sy
 801a42c:	b662      	cpsie	i
 801a42e:	61fb      	str	r3, [r7, #28]
}
 801a430:	bf00      	nop
 801a432:	e7fe      	b.n	801a432 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d103      	bne.n	801a444 <xQueueGiveFromISR+0x60>
 801a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a43e:	689b      	ldr	r3, [r3, #8]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d101      	bne.n	801a448 <xQueueGiveFromISR+0x64>
 801a444:	2301      	movs	r3, #1
 801a446:	e000      	b.n	801a44a <xQueueGiveFromISR+0x66>
 801a448:	2300      	movs	r3, #0
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d10c      	bne.n	801a468 <xQueueGiveFromISR+0x84>
	__asm volatile
 801a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a452:	b672      	cpsid	i
 801a454:	f383 8811 	msr	BASEPRI, r3
 801a458:	f3bf 8f6f 	isb	sy
 801a45c:	f3bf 8f4f 	dsb	sy
 801a460:	b662      	cpsie	i
 801a462:	61bb      	str	r3, [r7, #24]
}
 801a464:	bf00      	nop
 801a466:	e7fe      	b.n	801a466 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a468:	f001 feb8 	bl	801c1dc <vPortValidateInterruptPriority>
	__asm volatile
 801a46c:	f3ef 8211 	mrs	r2, BASEPRI
 801a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a474:	b672      	cpsid	i
 801a476:	f383 8811 	msr	BASEPRI, r3
 801a47a:	f3bf 8f6f 	isb	sy
 801a47e:	f3bf 8f4f 	dsb	sy
 801a482:	b662      	cpsie	i
 801a484:	617a      	str	r2, [r7, #20]
 801a486:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a488:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a490:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a498:	429a      	cmp	r2, r3
 801a49a:	d22b      	bcs.n	801a4f4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a49e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4a8:	1c5a      	adds	r2, r3, #1
 801a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a4ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4b6:	d112      	bne.n	801a4de <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d016      	beq.n	801a4ee <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4c2:	3324      	adds	r3, #36	; 0x24
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f001 f88b 	bl	801b5e0 <xTaskRemoveFromEventList>
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d00e      	beq.n	801a4ee <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a4d0:	683b      	ldr	r3, [r7, #0]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d00b      	beq.n	801a4ee <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	2201      	movs	r2, #1
 801a4da:	601a      	str	r2, [r3, #0]
 801a4dc:	e007      	b.n	801a4ee <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a4de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a4e2:	3301      	adds	r3, #1
 801a4e4:	b2db      	uxtb	r3, r3
 801a4e6:	b25a      	sxtb	r2, r3
 801a4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	637b      	str	r3, [r7, #52]	; 0x34
 801a4f2:	e001      	b.n	801a4f8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	637b      	str	r3, [r7, #52]	; 0x34
 801a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4fa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	f383 8811 	msr	BASEPRI, r3
}
 801a502:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a506:	4618      	mov	r0, r3
 801a508:	3738      	adds	r7, #56	; 0x38
 801a50a:	46bd      	mov	sp, r7
 801a50c:	bd80      	pop	{r7, pc}
	...

0801a510 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b08c      	sub	sp, #48	; 0x30
 801a514:	af00      	add	r7, sp, #0
 801a516:	60f8      	str	r0, [r7, #12]
 801a518:	60b9      	str	r1, [r7, #8]
 801a51a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a51c:	2300      	movs	r3, #0
 801a51e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a526:	2b00      	cmp	r3, #0
 801a528:	d10c      	bne.n	801a544 <xQueueReceive+0x34>
	__asm volatile
 801a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a52e:	b672      	cpsid	i
 801a530:	f383 8811 	msr	BASEPRI, r3
 801a534:	f3bf 8f6f 	isb	sy
 801a538:	f3bf 8f4f 	dsb	sy
 801a53c:	b662      	cpsie	i
 801a53e:	623b      	str	r3, [r7, #32]
}
 801a540:	bf00      	nop
 801a542:	e7fe      	b.n	801a542 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a544:	68bb      	ldr	r3, [r7, #8]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d103      	bne.n	801a552 <xQueueReceive+0x42>
 801a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d101      	bne.n	801a556 <xQueueReceive+0x46>
 801a552:	2301      	movs	r3, #1
 801a554:	e000      	b.n	801a558 <xQueueReceive+0x48>
 801a556:	2300      	movs	r3, #0
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d10c      	bne.n	801a576 <xQueueReceive+0x66>
	__asm volatile
 801a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a560:	b672      	cpsid	i
 801a562:	f383 8811 	msr	BASEPRI, r3
 801a566:	f3bf 8f6f 	isb	sy
 801a56a:	f3bf 8f4f 	dsb	sy
 801a56e:	b662      	cpsie	i
 801a570:	61fb      	str	r3, [r7, #28]
}
 801a572:	bf00      	nop
 801a574:	e7fe      	b.n	801a574 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a576:	f001 f9f9 	bl	801b96c <xTaskGetSchedulerState>
 801a57a:	4603      	mov	r3, r0
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d102      	bne.n	801a586 <xQueueReceive+0x76>
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d101      	bne.n	801a58a <xQueueReceive+0x7a>
 801a586:	2301      	movs	r3, #1
 801a588:	e000      	b.n	801a58c <xQueueReceive+0x7c>
 801a58a:	2300      	movs	r3, #0
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d10c      	bne.n	801a5aa <xQueueReceive+0x9a>
	__asm volatile
 801a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a594:	b672      	cpsid	i
 801a596:	f383 8811 	msr	BASEPRI, r3
 801a59a:	f3bf 8f6f 	isb	sy
 801a59e:	f3bf 8f4f 	dsb	sy
 801a5a2:	b662      	cpsie	i
 801a5a4:	61bb      	str	r3, [r7, #24]
}
 801a5a6:	bf00      	nop
 801a5a8:	e7fe      	b.n	801a5a8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a5aa:	f001 fd2f 	bl	801c00c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d01f      	beq.n	801a5fa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a5ba:	68b9      	ldr	r1, [r7, #8]
 801a5bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a5be:	f000 face 	bl	801ab5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c4:	1e5a      	subs	r2, r3, #1
 801a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5cc:	691b      	ldr	r3, [r3, #16]
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d00f      	beq.n	801a5f2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5d4:	3310      	adds	r3, #16
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f001 f802 	bl	801b5e0 <xTaskRemoveFromEventList>
 801a5dc:	4603      	mov	r3, r0
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d007      	beq.n	801a5f2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a5e2:	4b3d      	ldr	r3, [pc, #244]	; (801a6d8 <xQueueReceive+0x1c8>)
 801a5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a5e8:	601a      	str	r2, [r3, #0]
 801a5ea:	f3bf 8f4f 	dsb	sy
 801a5ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a5f2:	f001 fd3f 	bl	801c074 <vPortExitCritical>
				return pdPASS;
 801a5f6:	2301      	movs	r3, #1
 801a5f8:	e069      	b.n	801a6ce <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d103      	bne.n	801a608 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a600:	f001 fd38 	bl	801c074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a604:	2300      	movs	r3, #0
 801a606:	e062      	b.n	801a6ce <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d106      	bne.n	801a61c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a60e:	f107 0310 	add.w	r3, r7, #16
 801a612:	4618      	mov	r0, r3
 801a614:	f001 f848 	bl	801b6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a618:	2301      	movs	r3, #1
 801a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a61c:	f001 fd2a 	bl	801c074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a620:	f000 fdae 	bl	801b180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a624:	f001 fcf2 	bl	801c00c <vPortEnterCritical>
 801a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a62a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a62e:	b25b      	sxtb	r3, r3
 801a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a634:	d103      	bne.n	801a63e <xQueueReceive+0x12e>
 801a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a638:	2200      	movs	r2, #0
 801a63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a644:	b25b      	sxtb	r3, r3
 801a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a64a:	d103      	bne.n	801a654 <xQueueReceive+0x144>
 801a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a64e:	2200      	movs	r2, #0
 801a650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a654:	f001 fd0e 	bl	801c074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a658:	1d3a      	adds	r2, r7, #4
 801a65a:	f107 0310 	add.w	r3, r7, #16
 801a65e:	4611      	mov	r1, r2
 801a660:	4618      	mov	r0, r3
 801a662:	f001 f837 	bl	801b6d4 <xTaskCheckForTimeOut>
 801a666:	4603      	mov	r3, r0
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d123      	bne.n	801a6b4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a66c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a66e:	f000 faee 	bl	801ac4e <prvIsQueueEmpty>
 801a672:	4603      	mov	r3, r0
 801a674:	2b00      	cmp	r3, #0
 801a676:	d017      	beq.n	801a6a8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a67a:	3324      	adds	r3, #36	; 0x24
 801a67c:	687a      	ldr	r2, [r7, #4]
 801a67e:	4611      	mov	r1, r2
 801a680:	4618      	mov	r0, r3
 801a682:	f000 ff87 	bl	801b594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a688:	f000 fa8f 	bl	801abaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a68c:	f000 fd86 	bl	801b19c <xTaskResumeAll>
 801a690:	4603      	mov	r3, r0
 801a692:	2b00      	cmp	r3, #0
 801a694:	d189      	bne.n	801a5aa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801a696:	4b10      	ldr	r3, [pc, #64]	; (801a6d8 <xQueueReceive+0x1c8>)
 801a698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a69c:	601a      	str	r2, [r3, #0]
 801a69e:	f3bf 8f4f 	dsb	sy
 801a6a2:	f3bf 8f6f 	isb	sy
 801a6a6:	e780      	b.n	801a5aa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a6a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a6aa:	f000 fa7e 	bl	801abaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a6ae:	f000 fd75 	bl	801b19c <xTaskResumeAll>
 801a6b2:	e77a      	b.n	801a5aa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a6b6:	f000 fa78 	bl	801abaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a6ba:	f000 fd6f 	bl	801b19c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a6c0:	f000 fac5 	bl	801ac4e <prvIsQueueEmpty>
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	f43f af6f 	beq.w	801a5aa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a6cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	3730      	adds	r7, #48	; 0x30
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bd80      	pop	{r7, pc}
 801a6d6:	bf00      	nop
 801a6d8:	e000ed04 	.word	0xe000ed04

0801a6dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b08e      	sub	sp, #56	; 0x38
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
 801a6e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d10c      	bne.n	801a712 <xQueueSemaphoreTake+0x36>
	__asm volatile
 801a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6fc:	b672      	cpsid	i
 801a6fe:	f383 8811 	msr	BASEPRI, r3
 801a702:	f3bf 8f6f 	isb	sy
 801a706:	f3bf 8f4f 	dsb	sy
 801a70a:	b662      	cpsie	i
 801a70c:	623b      	str	r3, [r7, #32]
}
 801a70e:	bf00      	nop
 801a710:	e7fe      	b.n	801a710 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a716:	2b00      	cmp	r3, #0
 801a718:	d00c      	beq.n	801a734 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a71e:	b672      	cpsid	i
 801a720:	f383 8811 	msr	BASEPRI, r3
 801a724:	f3bf 8f6f 	isb	sy
 801a728:	f3bf 8f4f 	dsb	sy
 801a72c:	b662      	cpsie	i
 801a72e:	61fb      	str	r3, [r7, #28]
}
 801a730:	bf00      	nop
 801a732:	e7fe      	b.n	801a732 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a734:	f001 f91a 	bl	801b96c <xTaskGetSchedulerState>
 801a738:	4603      	mov	r3, r0
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d102      	bne.n	801a744 <xQueueSemaphoreTake+0x68>
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d101      	bne.n	801a748 <xQueueSemaphoreTake+0x6c>
 801a744:	2301      	movs	r3, #1
 801a746:	e000      	b.n	801a74a <xQueueSemaphoreTake+0x6e>
 801a748:	2300      	movs	r3, #0
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d10c      	bne.n	801a768 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a752:	b672      	cpsid	i
 801a754:	f383 8811 	msr	BASEPRI, r3
 801a758:	f3bf 8f6f 	isb	sy
 801a75c:	f3bf 8f4f 	dsb	sy
 801a760:	b662      	cpsie	i
 801a762:	61bb      	str	r3, [r7, #24]
}
 801a764:	bf00      	nop
 801a766:	e7fe      	b.n	801a766 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a768:	f001 fc50 	bl	801c00c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a770:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a774:	2b00      	cmp	r3, #0
 801a776:	d024      	beq.n	801a7c2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a77a:	1e5a      	subs	r2, r3, #1
 801a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a77e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d104      	bne.n	801a792 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a788:	f001 fab6 	bl	801bcf8 <pvTaskIncrementMutexHeldCount>
 801a78c:	4602      	mov	r2, r0
 801a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a790:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a794:	691b      	ldr	r3, [r3, #16]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d00f      	beq.n	801a7ba <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a79c:	3310      	adds	r3, #16
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f000 ff1e 	bl	801b5e0 <xTaskRemoveFromEventList>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d007      	beq.n	801a7ba <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a7aa:	4b55      	ldr	r3, [pc, #340]	; (801a900 <xQueueSemaphoreTake+0x224>)
 801a7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7b0:	601a      	str	r2, [r3, #0]
 801a7b2:	f3bf 8f4f 	dsb	sy
 801a7b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a7ba:	f001 fc5b 	bl	801c074 <vPortExitCritical>
				return pdPASS;
 801a7be:	2301      	movs	r3, #1
 801a7c0:	e099      	b.n	801a8f6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d113      	bne.n	801a7f0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d00c      	beq.n	801a7e8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7d2:	b672      	cpsid	i
 801a7d4:	f383 8811 	msr	BASEPRI, r3
 801a7d8:	f3bf 8f6f 	isb	sy
 801a7dc:	f3bf 8f4f 	dsb	sy
 801a7e0:	b662      	cpsie	i
 801a7e2:	617b      	str	r3, [r7, #20]
}
 801a7e4:	bf00      	nop
 801a7e6:	e7fe      	b.n	801a7e6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a7e8:	f001 fc44 	bl	801c074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	e082      	b.n	801a8f6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d106      	bne.n	801a804 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a7f6:	f107 030c 	add.w	r3, r7, #12
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f000 ff54 	bl	801b6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a800:	2301      	movs	r3, #1
 801a802:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a804:	f001 fc36 	bl	801c074 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a808:	f000 fcba 	bl	801b180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a80c:	f001 fbfe 	bl	801c00c <vPortEnterCritical>
 801a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a816:	b25b      	sxtb	r3, r3
 801a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a81c:	d103      	bne.n	801a826 <xQueueSemaphoreTake+0x14a>
 801a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a820:	2200      	movs	r2, #0
 801a822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a82c:	b25b      	sxtb	r3, r3
 801a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a832:	d103      	bne.n	801a83c <xQueueSemaphoreTake+0x160>
 801a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a836:	2200      	movs	r2, #0
 801a838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a83c:	f001 fc1a 	bl	801c074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a840:	463a      	mov	r2, r7
 801a842:	f107 030c 	add.w	r3, r7, #12
 801a846:	4611      	mov	r1, r2
 801a848:	4618      	mov	r0, r3
 801a84a:	f000 ff43 	bl	801b6d4 <xTaskCheckForTimeOut>
 801a84e:	4603      	mov	r3, r0
 801a850:	2b00      	cmp	r3, #0
 801a852:	d132      	bne.n	801a8ba <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a856:	f000 f9fa 	bl	801ac4e <prvIsQueueEmpty>
 801a85a:	4603      	mov	r3, r0
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d026      	beq.n	801a8ae <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d109      	bne.n	801a87c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 801a868:	f001 fbd0 	bl	801c00c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a86e:	689b      	ldr	r3, [r3, #8]
 801a870:	4618      	mov	r0, r3
 801a872:	f001 f899 	bl	801b9a8 <xTaskPriorityInherit>
 801a876:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a878:	f001 fbfc 	bl	801c074 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a87e:	3324      	adds	r3, #36	; 0x24
 801a880:	683a      	ldr	r2, [r7, #0]
 801a882:	4611      	mov	r1, r2
 801a884:	4618      	mov	r0, r3
 801a886:	f000 fe85 	bl	801b594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a88a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a88c:	f000 f98d 	bl	801abaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a890:	f000 fc84 	bl	801b19c <xTaskResumeAll>
 801a894:	4603      	mov	r3, r0
 801a896:	2b00      	cmp	r3, #0
 801a898:	f47f af66 	bne.w	801a768 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 801a89c:	4b18      	ldr	r3, [pc, #96]	; (801a900 <xQueueSemaphoreTake+0x224>)
 801a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a8a2:	601a      	str	r2, [r3, #0]
 801a8a4:	f3bf 8f4f 	dsb	sy
 801a8a8:	f3bf 8f6f 	isb	sy
 801a8ac:	e75c      	b.n	801a768 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8b0:	f000 f97b 	bl	801abaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a8b4:	f000 fc72 	bl	801b19c <xTaskResumeAll>
 801a8b8:	e756      	b.n	801a768 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a8ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8bc:	f000 f975 	bl	801abaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a8c0:	f000 fc6c 	bl	801b19c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a8c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8c6:	f000 f9c2 	bl	801ac4e <prvIsQueueEmpty>
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	f43f af4b 	beq.w	801a768 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d00d      	beq.n	801a8f4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801a8d8:	f001 fb98 	bl	801c00c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a8dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8de:	f000 f8bc 	bl	801aa5a <prvGetDisinheritPriorityAfterTimeout>
 801a8e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8e6:	689b      	ldr	r3, [r3, #8]
 801a8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	f001 f966 	bl	801bbbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a8f0:	f001 fbc0 	bl	801c074 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a8f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	3738      	adds	r7, #56	; 0x38
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd80      	pop	{r7, pc}
 801a8fe:	bf00      	nop
 801a900:	e000ed04 	.word	0xe000ed04

0801a904 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b08e      	sub	sp, #56	; 0x38
 801a908:	af00      	add	r7, sp, #0
 801a90a:	60f8      	str	r0, [r7, #12]
 801a90c:	60b9      	str	r1, [r7, #8]
 801a90e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a916:	2b00      	cmp	r3, #0
 801a918:	d10c      	bne.n	801a934 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a91e:	b672      	cpsid	i
 801a920:	f383 8811 	msr	BASEPRI, r3
 801a924:	f3bf 8f6f 	isb	sy
 801a928:	f3bf 8f4f 	dsb	sy
 801a92c:	b662      	cpsie	i
 801a92e:	623b      	str	r3, [r7, #32]
}
 801a930:	bf00      	nop
 801a932:	e7fe      	b.n	801a932 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d103      	bne.n	801a942 <xQueueReceiveFromISR+0x3e>
 801a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d101      	bne.n	801a946 <xQueueReceiveFromISR+0x42>
 801a942:	2301      	movs	r3, #1
 801a944:	e000      	b.n	801a948 <xQueueReceiveFromISR+0x44>
 801a946:	2300      	movs	r3, #0
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d10c      	bne.n	801a966 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a950:	b672      	cpsid	i
 801a952:	f383 8811 	msr	BASEPRI, r3
 801a956:	f3bf 8f6f 	isb	sy
 801a95a:	f3bf 8f4f 	dsb	sy
 801a95e:	b662      	cpsie	i
 801a960:	61fb      	str	r3, [r7, #28]
}
 801a962:	bf00      	nop
 801a964:	e7fe      	b.n	801a964 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a966:	f001 fc39 	bl	801c1dc <vPortValidateInterruptPriority>
	__asm volatile
 801a96a:	f3ef 8211 	mrs	r2, BASEPRI
 801a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a972:	b672      	cpsid	i
 801a974:	f383 8811 	msr	BASEPRI, r3
 801a978:	f3bf 8f6f 	isb	sy
 801a97c:	f3bf 8f4f 	dsb	sy
 801a980:	b662      	cpsie	i
 801a982:	61ba      	str	r2, [r7, #24]
 801a984:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a986:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a988:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a98e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a992:	2b00      	cmp	r3, #0
 801a994:	d02f      	beq.n	801a9f6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a9a0:	68b9      	ldr	r1, [r7, #8]
 801a9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9a4:	f000 f8db 	bl	801ab5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9aa:	1e5a      	subs	r2, r3, #1
 801a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a9b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9b8:	d112      	bne.n	801a9e0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9bc:	691b      	ldr	r3, [r3, #16]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d016      	beq.n	801a9f0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9c4:	3310      	adds	r3, #16
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f000 fe0a 	bl	801b5e0 <xTaskRemoveFromEventList>
 801a9cc:	4603      	mov	r3, r0
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d00e      	beq.n	801a9f0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d00b      	beq.n	801a9f0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	2201      	movs	r2, #1
 801a9dc:	601a      	str	r2, [r3, #0]
 801a9de:	e007      	b.n	801a9f0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9e4:	3301      	adds	r3, #1
 801a9e6:	b2db      	uxtb	r3, r3
 801a9e8:	b25a      	sxtb	r2, r3
 801a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	637b      	str	r3, [r7, #52]	; 0x34
 801a9f4:	e001      	b.n	801a9fa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	637b      	str	r3, [r7, #52]	; 0x34
 801a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a9fe:	693b      	ldr	r3, [r7, #16]
 801aa00:	f383 8811 	msr	BASEPRI, r3
}
 801aa04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801aa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801aa08:	4618      	mov	r0, r3
 801aa0a:	3738      	adds	r7, #56	; 0x38
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd80      	pop	{r7, pc}

0801aa10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b084      	sub	sp, #16
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d10c      	bne.n	801aa3c <vQueueDelete+0x2c>
	__asm volatile
 801aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa26:	b672      	cpsid	i
 801aa28:	f383 8811 	msr	BASEPRI, r3
 801aa2c:	f3bf 8f6f 	isb	sy
 801aa30:	f3bf 8f4f 	dsb	sy
 801aa34:	b662      	cpsie	i
 801aa36:	60bb      	str	r3, [r7, #8]
}
 801aa38:	bf00      	nop
 801aa3a:	e7fe      	b.n	801aa3a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801aa3c:	68f8      	ldr	r0, [r7, #12]
 801aa3e:	f000 f935 	bl	801acac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d102      	bne.n	801aa52 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 801aa4c:	68f8      	ldr	r0, [r7, #12]
 801aa4e:	f001 fcd9 	bl	801c404 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801aa52:	bf00      	nop
 801aa54:	3710      	adds	r7, #16
 801aa56:	46bd      	mov	sp, r7
 801aa58:	bd80      	pop	{r7, pc}

0801aa5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801aa5a:	b480      	push	{r7}
 801aa5c:	b085      	sub	sp, #20
 801aa5e:	af00      	add	r7, sp, #0
 801aa60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d006      	beq.n	801aa78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	f1c3 0307 	rsb	r3, r3, #7
 801aa74:	60fb      	str	r3, [r7, #12]
 801aa76:	e001      	b.n	801aa7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801aa78:	2300      	movs	r3, #0
 801aa7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801aa7c:	68fb      	ldr	r3, [r7, #12]
	}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3714      	adds	r7, #20
 801aa82:	46bd      	mov	sp, r7
 801aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa88:	4770      	bx	lr

0801aa8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801aa8a:	b580      	push	{r7, lr}
 801aa8c:	b086      	sub	sp, #24
 801aa8e:	af00      	add	r7, sp, #0
 801aa90:	60f8      	str	r0, [r7, #12]
 801aa92:	60b9      	str	r1, [r7, #8]
 801aa94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801aa96:	2300      	movs	r3, #0
 801aa98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d10d      	bne.n	801aac4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d14d      	bne.n	801ab4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	689b      	ldr	r3, [r3, #8]
 801aab4:	4618      	mov	r0, r3
 801aab6:	f000 fff7 	bl	801baa8 <xTaskPriorityDisinherit>
 801aaba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	2200      	movs	r2, #0
 801aac0:	609a      	str	r2, [r3, #8]
 801aac2:	e043      	b.n	801ab4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d119      	bne.n	801aafe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	6858      	ldr	r0, [r3, #4]
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aad2:	461a      	mov	r2, r3
 801aad4:	68b9      	ldr	r1, [r7, #8]
 801aad6:	f002 f8df 	bl	801cc98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	685a      	ldr	r2, [r3, #4]
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aae2:	441a      	add	r2, r3
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	685a      	ldr	r2, [r3, #4]
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	689b      	ldr	r3, [r3, #8]
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d32b      	bcc.n	801ab4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	681a      	ldr	r2, [r3, #0]
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	605a      	str	r2, [r3, #4]
 801aafc:	e026      	b.n	801ab4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	68d8      	ldr	r0, [r3, #12]
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab06:	461a      	mov	r2, r3
 801ab08:	68b9      	ldr	r1, [r7, #8]
 801ab0a:	f002 f8c5 	bl	801cc98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	68da      	ldr	r2, [r3, #12]
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab16:	425b      	negs	r3, r3
 801ab18:	441a      	add	r2, r3
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	68da      	ldr	r2, [r3, #12]
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	429a      	cmp	r2, r3
 801ab28:	d207      	bcs.n	801ab3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	689a      	ldr	r2, [r3, #8]
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab32:	425b      	negs	r3, r3
 801ab34:	441a      	add	r2, r3
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2b02      	cmp	r3, #2
 801ab3e:	d105      	bne.n	801ab4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ab40:	693b      	ldr	r3, [r7, #16]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d002      	beq.n	801ab4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801ab46:	693b      	ldr	r3, [r7, #16]
 801ab48:	3b01      	subs	r3, #1
 801ab4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801ab4c:	693b      	ldr	r3, [r7, #16]
 801ab4e:	1c5a      	adds	r2, r3, #1
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801ab54:	697b      	ldr	r3, [r7, #20]
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	3718      	adds	r7, #24
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd80      	pop	{r7, pc}

0801ab5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801ab5e:	b580      	push	{r7, lr}
 801ab60:	b082      	sub	sp, #8
 801ab62:	af00      	add	r7, sp, #0
 801ab64:	6078      	str	r0, [r7, #4]
 801ab66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d018      	beq.n	801aba2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	68da      	ldr	r2, [r3, #12]
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab78:	441a      	add	r2, r3
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	68da      	ldr	r2, [r3, #12]
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	689b      	ldr	r3, [r3, #8]
 801ab86:	429a      	cmp	r2, r3
 801ab88:	d303      	bcc.n	801ab92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	681a      	ldr	r2, [r3, #0]
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	68d9      	ldr	r1, [r3, #12]
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	6838      	ldr	r0, [r7, #0]
 801ab9e:	f002 f87b 	bl	801cc98 <memcpy>
	}
}
 801aba2:	bf00      	nop
 801aba4:	3708      	adds	r7, #8
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd80      	pop	{r7, pc}

0801abaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801abaa:	b580      	push	{r7, lr}
 801abac:	b084      	sub	sp, #16
 801abae:	af00      	add	r7, sp, #0
 801abb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801abb2:	f001 fa2b 	bl	801c00c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801abbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801abbe:	e011      	b.n	801abe4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d012      	beq.n	801abee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	3324      	adds	r3, #36	; 0x24
 801abcc:	4618      	mov	r0, r3
 801abce:	f000 fd07 	bl	801b5e0 <xTaskRemoveFromEventList>
 801abd2:	4603      	mov	r3, r0
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d001      	beq.n	801abdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801abd8:	f000 fde2 	bl	801b7a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801abdc:	7bfb      	ldrb	r3, [r7, #15]
 801abde:	3b01      	subs	r3, #1
 801abe0:	b2db      	uxtb	r3, r3
 801abe2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801abe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	dce9      	bgt.n	801abc0 <prvUnlockQueue+0x16>
 801abec:	e000      	b.n	801abf0 <prvUnlockQueue+0x46>
					break;
 801abee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	22ff      	movs	r2, #255	; 0xff
 801abf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801abf8:	f001 fa3c 	bl	801c074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801abfc:	f001 fa06 	bl	801c00c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ac06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ac08:	e011      	b.n	801ac2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	691b      	ldr	r3, [r3, #16]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d012      	beq.n	801ac38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	3310      	adds	r3, #16
 801ac16:	4618      	mov	r0, r3
 801ac18:	f000 fce2 	bl	801b5e0 <xTaskRemoveFromEventList>
 801ac1c:	4603      	mov	r3, r0
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d001      	beq.n	801ac26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801ac22:	f000 fdbd 	bl	801b7a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801ac26:	7bbb      	ldrb	r3, [r7, #14]
 801ac28:	3b01      	subs	r3, #1
 801ac2a:	b2db      	uxtb	r3, r3
 801ac2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ac2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	dce9      	bgt.n	801ac0a <prvUnlockQueue+0x60>
 801ac36:	e000      	b.n	801ac3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801ac38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	22ff      	movs	r2, #255	; 0xff
 801ac3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801ac42:	f001 fa17 	bl	801c074 <vPortExitCritical>
}
 801ac46:	bf00      	nop
 801ac48:	3710      	adds	r7, #16
 801ac4a:	46bd      	mov	sp, r7
 801ac4c:	bd80      	pop	{r7, pc}

0801ac4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801ac4e:	b580      	push	{r7, lr}
 801ac50:	b084      	sub	sp, #16
 801ac52:	af00      	add	r7, sp, #0
 801ac54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ac56:	f001 f9d9 	bl	801c00c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d102      	bne.n	801ac68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801ac62:	2301      	movs	r3, #1
 801ac64:	60fb      	str	r3, [r7, #12]
 801ac66:	e001      	b.n	801ac6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801ac68:	2300      	movs	r3, #0
 801ac6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ac6c:	f001 fa02 	bl	801c074 <vPortExitCritical>

	return xReturn;
 801ac70:	68fb      	ldr	r3, [r7, #12]
}
 801ac72:	4618      	mov	r0, r3
 801ac74:	3710      	adds	r7, #16
 801ac76:	46bd      	mov	sp, r7
 801ac78:	bd80      	pop	{r7, pc}

0801ac7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801ac7a:	b580      	push	{r7, lr}
 801ac7c:	b084      	sub	sp, #16
 801ac7e:	af00      	add	r7, sp, #0
 801ac80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ac82:	f001 f9c3 	bl	801c00c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d102      	bne.n	801ac98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801ac92:	2301      	movs	r3, #1
 801ac94:	60fb      	str	r3, [r7, #12]
 801ac96:	e001      	b.n	801ac9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801ac98:	2300      	movs	r3, #0
 801ac9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ac9c:	f001 f9ea 	bl	801c074 <vPortExitCritical>

	return xReturn;
 801aca0:	68fb      	ldr	r3, [r7, #12]
}
 801aca2:	4618      	mov	r0, r3
 801aca4:	3710      	adds	r7, #16
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd80      	pop	{r7, pc}
	...

0801acac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801acac:	b480      	push	{r7}
 801acae:	b085      	sub	sp, #20
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801acb4:	2300      	movs	r3, #0
 801acb6:	60fb      	str	r3, [r7, #12]
 801acb8:	e016      	b.n	801ace8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801acba:	4a10      	ldr	r2, [pc, #64]	; (801acfc <vQueueUnregisterQueue+0x50>)
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	00db      	lsls	r3, r3, #3
 801acc0:	4413      	add	r3, r2
 801acc2:	685b      	ldr	r3, [r3, #4]
 801acc4:	687a      	ldr	r2, [r7, #4]
 801acc6:	429a      	cmp	r2, r3
 801acc8:	d10b      	bne.n	801ace2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801acca:	4a0c      	ldr	r2, [pc, #48]	; (801acfc <vQueueUnregisterQueue+0x50>)
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	2100      	movs	r1, #0
 801acd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801acd4:	4a09      	ldr	r2, [pc, #36]	; (801acfc <vQueueUnregisterQueue+0x50>)
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	00db      	lsls	r3, r3, #3
 801acda:	4413      	add	r3, r2
 801acdc:	2200      	movs	r2, #0
 801acde:	605a      	str	r2, [r3, #4]
				break;
 801ace0:	e006      	b.n	801acf0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	3301      	adds	r3, #1
 801ace6:	60fb      	str	r3, [r7, #12]
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	2b07      	cmp	r3, #7
 801acec:	d9e5      	bls.n	801acba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801acee:	bf00      	nop
 801acf0:	bf00      	nop
 801acf2:	3714      	adds	r7, #20
 801acf4:	46bd      	mov	sp, r7
 801acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acfa:	4770      	bx	lr
 801acfc:	200134e4 	.word	0x200134e4

0801ad00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b08e      	sub	sp, #56	; 0x38
 801ad04:	af04      	add	r7, sp, #16
 801ad06:	60f8      	str	r0, [r7, #12]
 801ad08:	60b9      	str	r1, [r7, #8]
 801ad0a:	607a      	str	r2, [r7, #4]
 801ad0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801ad0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d10c      	bne.n	801ad2e <xTaskCreateStatic+0x2e>
	__asm volatile
 801ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad18:	b672      	cpsid	i
 801ad1a:	f383 8811 	msr	BASEPRI, r3
 801ad1e:	f3bf 8f6f 	isb	sy
 801ad22:	f3bf 8f4f 	dsb	sy
 801ad26:	b662      	cpsie	i
 801ad28:	623b      	str	r3, [r7, #32]
}
 801ad2a:	bf00      	nop
 801ad2c:	e7fe      	b.n	801ad2c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d10c      	bne.n	801ad4e <xTaskCreateStatic+0x4e>
	__asm volatile
 801ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad38:	b672      	cpsid	i
 801ad3a:	f383 8811 	msr	BASEPRI, r3
 801ad3e:	f3bf 8f6f 	isb	sy
 801ad42:	f3bf 8f4f 	dsb	sy
 801ad46:	b662      	cpsie	i
 801ad48:	61fb      	str	r3, [r7, #28]
}
 801ad4a:	bf00      	nop
 801ad4c:	e7fe      	b.n	801ad4c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801ad4e:	2358      	movs	r3, #88	; 0x58
 801ad50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801ad52:	693b      	ldr	r3, [r7, #16]
 801ad54:	2b58      	cmp	r3, #88	; 0x58
 801ad56:	d00c      	beq.n	801ad72 <xTaskCreateStatic+0x72>
	__asm volatile
 801ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad5c:	b672      	cpsid	i
 801ad5e:	f383 8811 	msr	BASEPRI, r3
 801ad62:	f3bf 8f6f 	isb	sy
 801ad66:	f3bf 8f4f 	dsb	sy
 801ad6a:	b662      	cpsie	i
 801ad6c:	61bb      	str	r3, [r7, #24]
}
 801ad6e:	bf00      	nop
 801ad70:	e7fe      	b.n	801ad70 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ad72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d01e      	beq.n	801adb8 <xTaskCreateStatic+0xb8>
 801ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d01b      	beq.n	801adb8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ad88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8c:	2202      	movs	r2, #2
 801ad8e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ad92:	2300      	movs	r3, #0
 801ad94:	9303      	str	r3, [sp, #12]
 801ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad98:	9302      	str	r3, [sp, #8]
 801ad9a:	f107 0314 	add.w	r3, r7, #20
 801ad9e:	9301      	str	r3, [sp, #4]
 801ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada2:	9300      	str	r3, [sp, #0]
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	687a      	ldr	r2, [r7, #4]
 801ada8:	68b9      	ldr	r1, [r7, #8]
 801adaa:	68f8      	ldr	r0, [r7, #12]
 801adac:	f000 f850 	bl	801ae50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801adb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801adb2:	f000 f8e1 	bl	801af78 <prvAddNewTaskToReadyList>
 801adb6:	e001      	b.n	801adbc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801adb8:	2300      	movs	r3, #0
 801adba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801adbc:	697b      	ldr	r3, [r7, #20]
	}
 801adbe:	4618      	mov	r0, r3
 801adc0:	3728      	adds	r7, #40	; 0x28
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}

0801adc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801adc6:	b580      	push	{r7, lr}
 801adc8:	b08c      	sub	sp, #48	; 0x30
 801adca:	af04      	add	r7, sp, #16
 801adcc:	60f8      	str	r0, [r7, #12]
 801adce:	60b9      	str	r1, [r7, #8]
 801add0:	603b      	str	r3, [r7, #0]
 801add2:	4613      	mov	r3, r2
 801add4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801add6:	88fb      	ldrh	r3, [r7, #6]
 801add8:	009b      	lsls	r3, r3, #2
 801adda:	4618      	mov	r0, r3
 801addc:	f001 fa42 	bl	801c264 <pvPortMalloc>
 801ade0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801ade2:	697b      	ldr	r3, [r7, #20]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d00e      	beq.n	801ae06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801ade8:	2058      	movs	r0, #88	; 0x58
 801adea:	f001 fa3b 	bl	801c264 <pvPortMalloc>
 801adee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801adf0:	69fb      	ldr	r3, [r7, #28]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d003      	beq.n	801adfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801adf6:	69fb      	ldr	r3, [r7, #28]
 801adf8:	697a      	ldr	r2, [r7, #20]
 801adfa:	631a      	str	r2, [r3, #48]	; 0x30
 801adfc:	e005      	b.n	801ae0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801adfe:	6978      	ldr	r0, [r7, #20]
 801ae00:	f001 fb00 	bl	801c404 <vPortFree>
 801ae04:	e001      	b.n	801ae0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801ae06:	2300      	movs	r3, #0
 801ae08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801ae0a:	69fb      	ldr	r3, [r7, #28]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d017      	beq.n	801ae40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801ae10:	69fb      	ldr	r3, [r7, #28]
 801ae12:	2200      	movs	r2, #0
 801ae14:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801ae18:	88fa      	ldrh	r2, [r7, #6]
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	9303      	str	r3, [sp, #12]
 801ae1e:	69fb      	ldr	r3, [r7, #28]
 801ae20:	9302      	str	r3, [sp, #8]
 801ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae24:	9301      	str	r3, [sp, #4]
 801ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae28:	9300      	str	r3, [sp, #0]
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	68b9      	ldr	r1, [r7, #8]
 801ae2e:	68f8      	ldr	r0, [r7, #12]
 801ae30:	f000 f80e 	bl	801ae50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ae34:	69f8      	ldr	r0, [r7, #28]
 801ae36:	f000 f89f 	bl	801af78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ae3a:	2301      	movs	r3, #1
 801ae3c:	61bb      	str	r3, [r7, #24]
 801ae3e:	e002      	b.n	801ae46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ae40:	f04f 33ff 	mov.w	r3, #4294967295
 801ae44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ae46:	69bb      	ldr	r3, [r7, #24]
	}
 801ae48:	4618      	mov	r0, r3
 801ae4a:	3720      	adds	r7, #32
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd80      	pop	{r7, pc}

0801ae50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b088      	sub	sp, #32
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	60f8      	str	r0, [r7, #12]
 801ae58:	60b9      	str	r1, [r7, #8]
 801ae5a:	607a      	str	r2, [r7, #4]
 801ae5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	009b      	lsls	r3, r3, #2
 801ae66:	461a      	mov	r2, r3
 801ae68:	21a5      	movs	r1, #165	; 0xa5
 801ae6a:	f001 ff23 	bl	801ccb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae72:	6879      	ldr	r1, [r7, #4]
 801ae74:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801ae78:	440b      	add	r3, r1
 801ae7a:	009b      	lsls	r3, r3, #2
 801ae7c:	4413      	add	r3, r2
 801ae7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ae80:	69bb      	ldr	r3, [r7, #24]
 801ae82:	f023 0307 	bic.w	r3, r3, #7
 801ae86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ae88:	69bb      	ldr	r3, [r7, #24]
 801ae8a:	f003 0307 	and.w	r3, r3, #7
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d00c      	beq.n	801aeac <prvInitialiseNewTask+0x5c>
	__asm volatile
 801ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae96:	b672      	cpsid	i
 801ae98:	f383 8811 	msr	BASEPRI, r3
 801ae9c:	f3bf 8f6f 	isb	sy
 801aea0:	f3bf 8f4f 	dsb	sy
 801aea4:	b662      	cpsie	i
 801aea6:	617b      	str	r3, [r7, #20]
}
 801aea8:	bf00      	nop
 801aeaa:	e7fe      	b.n	801aeaa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d01f      	beq.n	801aef2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801aeb2:	2300      	movs	r3, #0
 801aeb4:	61fb      	str	r3, [r7, #28]
 801aeb6:	e012      	b.n	801aede <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801aeb8:	68ba      	ldr	r2, [r7, #8]
 801aeba:	69fb      	ldr	r3, [r7, #28]
 801aebc:	4413      	add	r3, r2
 801aebe:	7819      	ldrb	r1, [r3, #0]
 801aec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aec2:	69fb      	ldr	r3, [r7, #28]
 801aec4:	4413      	add	r3, r2
 801aec6:	3334      	adds	r3, #52	; 0x34
 801aec8:	460a      	mov	r2, r1
 801aeca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801aecc:	68ba      	ldr	r2, [r7, #8]
 801aece:	69fb      	ldr	r3, [r7, #28]
 801aed0:	4413      	add	r3, r2
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d006      	beq.n	801aee6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801aed8:	69fb      	ldr	r3, [r7, #28]
 801aeda:	3301      	adds	r3, #1
 801aedc:	61fb      	str	r3, [r7, #28]
 801aede:	69fb      	ldr	r3, [r7, #28]
 801aee0:	2b0f      	cmp	r3, #15
 801aee2:	d9e9      	bls.n	801aeb8 <prvInitialiseNewTask+0x68>
 801aee4:	e000      	b.n	801aee8 <prvInitialiseNewTask+0x98>
			{
				break;
 801aee6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeea:	2200      	movs	r2, #0
 801aeec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801aef0:	e003      	b.n	801aefa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aef4:	2200      	movs	r2, #0
 801aef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aefc:	2b06      	cmp	r3, #6
 801aefe:	d901      	bls.n	801af04 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801af00:	2306      	movs	r3, #6
 801af02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801af08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801af0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af12:	2200      	movs	r2, #0
 801af14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af18:	3304      	adds	r3, #4
 801af1a:	4618      	mov	r0, r3
 801af1c:	f7fe fe68 	bl	8019bf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af22:	3318      	adds	r3, #24
 801af24:	4618      	mov	r0, r3
 801af26:	f7fe fe63 	bl	8019bf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af32:	f1c3 0207 	rsb	r2, r3, #7
 801af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af42:	2200      	movs	r2, #0
 801af44:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af48:	2200      	movs	r2, #0
 801af4a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801af4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af4e:	2200      	movs	r2, #0
 801af50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801af54:	683a      	ldr	r2, [r7, #0]
 801af56:	68f9      	ldr	r1, [r7, #12]
 801af58:	69b8      	ldr	r0, [r7, #24]
 801af5a:	f000 ff47 	bl	801bdec <pxPortInitialiseStack>
 801af5e:	4602      	mov	r2, r0
 801af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801af64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af66:	2b00      	cmp	r3, #0
 801af68:	d002      	beq.n	801af70 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801af70:	bf00      	nop
 801af72:	3720      	adds	r7, #32
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}

0801af78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b082      	sub	sp, #8
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801af80:	f001 f844 	bl	801c00c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801af84:	4b2a      	ldr	r3, [pc, #168]	; (801b030 <prvAddNewTaskToReadyList+0xb8>)
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	3301      	adds	r3, #1
 801af8a:	4a29      	ldr	r2, [pc, #164]	; (801b030 <prvAddNewTaskToReadyList+0xb8>)
 801af8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801af8e:	4b29      	ldr	r3, [pc, #164]	; (801b034 <prvAddNewTaskToReadyList+0xbc>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d109      	bne.n	801afaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801af96:	4a27      	ldr	r2, [pc, #156]	; (801b034 <prvAddNewTaskToReadyList+0xbc>)
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801af9c:	4b24      	ldr	r3, [pc, #144]	; (801b030 <prvAddNewTaskToReadyList+0xb8>)
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	2b01      	cmp	r3, #1
 801afa2:	d110      	bne.n	801afc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801afa4:	f000 fc22 	bl	801b7ec <prvInitialiseTaskLists>
 801afa8:	e00d      	b.n	801afc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801afaa:	4b23      	ldr	r3, [pc, #140]	; (801b038 <prvAddNewTaskToReadyList+0xc0>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d109      	bne.n	801afc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801afb2:	4b20      	ldr	r3, [pc, #128]	; (801b034 <prvAddNewTaskToReadyList+0xbc>)
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afbc:	429a      	cmp	r2, r3
 801afbe:	d802      	bhi.n	801afc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801afc0:	4a1c      	ldr	r2, [pc, #112]	; (801b034 <prvAddNewTaskToReadyList+0xbc>)
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801afc6:	4b1d      	ldr	r3, [pc, #116]	; (801b03c <prvAddNewTaskToReadyList+0xc4>)
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	3301      	adds	r3, #1
 801afcc:	4a1b      	ldr	r2, [pc, #108]	; (801b03c <prvAddNewTaskToReadyList+0xc4>)
 801afce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afd4:	2201      	movs	r2, #1
 801afd6:	409a      	lsls	r2, r3
 801afd8:	4b19      	ldr	r3, [pc, #100]	; (801b040 <prvAddNewTaskToReadyList+0xc8>)
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	4313      	orrs	r3, r2
 801afde:	4a18      	ldr	r2, [pc, #96]	; (801b040 <prvAddNewTaskToReadyList+0xc8>)
 801afe0:	6013      	str	r3, [r2, #0]
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801afe6:	4613      	mov	r3, r2
 801afe8:	009b      	lsls	r3, r3, #2
 801afea:	4413      	add	r3, r2
 801afec:	009b      	lsls	r3, r3, #2
 801afee:	4a15      	ldr	r2, [pc, #84]	; (801b044 <prvAddNewTaskToReadyList+0xcc>)
 801aff0:	441a      	add	r2, r3
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	3304      	adds	r3, #4
 801aff6:	4619      	mov	r1, r3
 801aff8:	4610      	mov	r0, r2
 801affa:	f7fe fe06 	bl	8019c0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801affe:	f001 f839 	bl	801c074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b002:	4b0d      	ldr	r3, [pc, #52]	; (801b038 <prvAddNewTaskToReadyList+0xc0>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d00e      	beq.n	801b028 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b00a:	4b0a      	ldr	r3, [pc, #40]	; (801b034 <prvAddNewTaskToReadyList+0xbc>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b014:	429a      	cmp	r2, r3
 801b016:	d207      	bcs.n	801b028 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b018:	4b0b      	ldr	r3, [pc, #44]	; (801b048 <prvAddNewTaskToReadyList+0xd0>)
 801b01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b01e:	601a      	str	r2, [r3, #0]
 801b020:	f3bf 8f4f 	dsb	sy
 801b024:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b028:	bf00      	nop
 801b02a:	3708      	adds	r7, #8
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bd80      	pop	{r7, pc}
 801b030:	20013624 	.word	0x20013624
 801b034:	20013524 	.word	0x20013524
 801b038:	20013630 	.word	0x20013630
 801b03c:	20013640 	.word	0x20013640
 801b040:	2001362c 	.word	0x2001362c
 801b044:	20013528 	.word	0x20013528
 801b048:	e000ed04 	.word	0xe000ed04

0801b04c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b084      	sub	sp, #16
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b054:	2300      	movs	r3, #0
 801b056:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d019      	beq.n	801b092 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b05e:	4b14      	ldr	r3, [pc, #80]	; (801b0b0 <vTaskDelay+0x64>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d00c      	beq.n	801b080 <vTaskDelay+0x34>
	__asm volatile
 801b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b06a:	b672      	cpsid	i
 801b06c:	f383 8811 	msr	BASEPRI, r3
 801b070:	f3bf 8f6f 	isb	sy
 801b074:	f3bf 8f4f 	dsb	sy
 801b078:	b662      	cpsie	i
 801b07a:	60bb      	str	r3, [r7, #8]
}
 801b07c:	bf00      	nop
 801b07e:	e7fe      	b.n	801b07e <vTaskDelay+0x32>
			vTaskSuspendAll();
 801b080:	f000 f87e 	bl	801b180 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b084:	2100      	movs	r1, #0
 801b086:	6878      	ldr	r0, [r7, #4]
 801b088:	f000 fe4a 	bl	801bd20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b08c:	f000 f886 	bl	801b19c <xTaskResumeAll>
 801b090:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d107      	bne.n	801b0a8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 801b098:	4b06      	ldr	r3, [pc, #24]	; (801b0b4 <vTaskDelay+0x68>)
 801b09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b09e:	601a      	str	r2, [r3, #0]
 801b0a0:	f3bf 8f4f 	dsb	sy
 801b0a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b0a8:	bf00      	nop
 801b0aa:	3710      	adds	r7, #16
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	bd80      	pop	{r7, pc}
 801b0b0:	2001364c 	.word	0x2001364c
 801b0b4:	e000ed04 	.word	0xe000ed04

0801b0b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b08a      	sub	sp, #40	; 0x28
 801b0bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b0be:	2300      	movs	r3, #0
 801b0c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b0c6:	463a      	mov	r2, r7
 801b0c8:	1d39      	adds	r1, r7, #4
 801b0ca:	f107 0308 	add.w	r3, r7, #8
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f7e5 fa8a 	bl	80005e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b0d4:	6839      	ldr	r1, [r7, #0]
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	68ba      	ldr	r2, [r7, #8]
 801b0da:	9202      	str	r2, [sp, #8]
 801b0dc:	9301      	str	r3, [sp, #4]
 801b0de:	2300      	movs	r3, #0
 801b0e0:	9300      	str	r3, [sp, #0]
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	460a      	mov	r2, r1
 801b0e6:	4920      	ldr	r1, [pc, #128]	; (801b168 <vTaskStartScheduler+0xb0>)
 801b0e8:	4820      	ldr	r0, [pc, #128]	; (801b16c <vTaskStartScheduler+0xb4>)
 801b0ea:	f7ff fe09 	bl	801ad00 <xTaskCreateStatic>
 801b0ee:	4603      	mov	r3, r0
 801b0f0:	4a1f      	ldr	r2, [pc, #124]	; (801b170 <vTaskStartScheduler+0xb8>)
 801b0f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b0f4:	4b1e      	ldr	r3, [pc, #120]	; (801b170 <vTaskStartScheduler+0xb8>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d002      	beq.n	801b102 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	617b      	str	r3, [r7, #20]
 801b100:	e001      	b.n	801b106 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b102:	2300      	movs	r3, #0
 801b104:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	2b01      	cmp	r3, #1
 801b10a:	d118      	bne.n	801b13e <vTaskStartScheduler+0x86>
	__asm volatile
 801b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b110:	b672      	cpsid	i
 801b112:	f383 8811 	msr	BASEPRI, r3
 801b116:	f3bf 8f6f 	isb	sy
 801b11a:	f3bf 8f4f 	dsb	sy
 801b11e:	b662      	cpsie	i
 801b120:	613b      	str	r3, [r7, #16]
}
 801b122:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b124:	4b13      	ldr	r3, [pc, #76]	; (801b174 <vTaskStartScheduler+0xbc>)
 801b126:	f04f 32ff 	mov.w	r2, #4294967295
 801b12a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b12c:	4b12      	ldr	r3, [pc, #72]	; (801b178 <vTaskStartScheduler+0xc0>)
 801b12e:	2201      	movs	r2, #1
 801b130:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b132:	4b12      	ldr	r3, [pc, #72]	; (801b17c <vTaskStartScheduler+0xc4>)
 801b134:	2200      	movs	r2, #0
 801b136:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b138:	f000 feea 	bl	801bf10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b13c:	e010      	b.n	801b160 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b13e:	697b      	ldr	r3, [r7, #20]
 801b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b144:	d10c      	bne.n	801b160 <vTaskStartScheduler+0xa8>
	__asm volatile
 801b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b14a:	b672      	cpsid	i
 801b14c:	f383 8811 	msr	BASEPRI, r3
 801b150:	f3bf 8f6f 	isb	sy
 801b154:	f3bf 8f4f 	dsb	sy
 801b158:	b662      	cpsie	i
 801b15a:	60fb      	str	r3, [r7, #12]
}
 801b15c:	bf00      	nop
 801b15e:	e7fe      	b.n	801b15e <vTaskStartScheduler+0xa6>
}
 801b160:	bf00      	nop
 801b162:	3718      	adds	r7, #24
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}
 801b168:	0801d8e4 	.word	0x0801d8e4
 801b16c:	0801b7b9 	.word	0x0801b7b9
 801b170:	20013648 	.word	0x20013648
 801b174:	20013644 	.word	0x20013644
 801b178:	20013630 	.word	0x20013630
 801b17c:	20013628 	.word	0x20013628

0801b180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b180:	b480      	push	{r7}
 801b182:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801b184:	4b04      	ldr	r3, [pc, #16]	; (801b198 <vTaskSuspendAll+0x18>)
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	3301      	adds	r3, #1
 801b18a:	4a03      	ldr	r2, [pc, #12]	; (801b198 <vTaskSuspendAll+0x18>)
 801b18c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801b18e:	bf00      	nop
 801b190:	46bd      	mov	sp, r7
 801b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b196:	4770      	bx	lr
 801b198:	2001364c 	.word	0x2001364c

0801b19c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b084      	sub	sp, #16
 801b1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b1aa:	4b42      	ldr	r3, [pc, #264]	; (801b2b4 <xTaskResumeAll+0x118>)
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d10c      	bne.n	801b1cc <xTaskResumeAll+0x30>
	__asm volatile
 801b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1b6:	b672      	cpsid	i
 801b1b8:	f383 8811 	msr	BASEPRI, r3
 801b1bc:	f3bf 8f6f 	isb	sy
 801b1c0:	f3bf 8f4f 	dsb	sy
 801b1c4:	b662      	cpsie	i
 801b1c6:	603b      	str	r3, [r7, #0]
}
 801b1c8:	bf00      	nop
 801b1ca:	e7fe      	b.n	801b1ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b1cc:	f000 ff1e 	bl	801c00c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b1d0:	4b38      	ldr	r3, [pc, #224]	; (801b2b4 <xTaskResumeAll+0x118>)
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	3b01      	subs	r3, #1
 801b1d6:	4a37      	ldr	r2, [pc, #220]	; (801b2b4 <xTaskResumeAll+0x118>)
 801b1d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b1da:	4b36      	ldr	r3, [pc, #216]	; (801b2b4 <xTaskResumeAll+0x118>)
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d161      	bne.n	801b2a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b1e2:	4b35      	ldr	r3, [pc, #212]	; (801b2b8 <xTaskResumeAll+0x11c>)
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d05d      	beq.n	801b2a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b1ea:	e02e      	b.n	801b24a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1ec:	4b33      	ldr	r3, [pc, #204]	; (801b2bc <xTaskResumeAll+0x120>)
 801b1ee:	68db      	ldr	r3, [r3, #12]
 801b1f0:	68db      	ldr	r3, [r3, #12]
 801b1f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	3318      	adds	r3, #24
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f7fe fd63 	bl	8019cc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	3304      	adds	r3, #4
 801b202:	4618      	mov	r0, r3
 801b204:	f7fe fd5e 	bl	8019cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b20c:	2201      	movs	r2, #1
 801b20e:	409a      	lsls	r2, r3
 801b210:	4b2b      	ldr	r3, [pc, #172]	; (801b2c0 <xTaskResumeAll+0x124>)
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	4313      	orrs	r3, r2
 801b216:	4a2a      	ldr	r2, [pc, #168]	; (801b2c0 <xTaskResumeAll+0x124>)
 801b218:	6013      	str	r3, [r2, #0]
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b21e:	4613      	mov	r3, r2
 801b220:	009b      	lsls	r3, r3, #2
 801b222:	4413      	add	r3, r2
 801b224:	009b      	lsls	r3, r3, #2
 801b226:	4a27      	ldr	r2, [pc, #156]	; (801b2c4 <xTaskResumeAll+0x128>)
 801b228:	441a      	add	r2, r3
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	3304      	adds	r3, #4
 801b22e:	4619      	mov	r1, r3
 801b230:	4610      	mov	r0, r2
 801b232:	f7fe fcea 	bl	8019c0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b23a:	4b23      	ldr	r3, [pc, #140]	; (801b2c8 <xTaskResumeAll+0x12c>)
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b240:	429a      	cmp	r2, r3
 801b242:	d302      	bcc.n	801b24a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801b244:	4b21      	ldr	r3, [pc, #132]	; (801b2cc <xTaskResumeAll+0x130>)
 801b246:	2201      	movs	r2, #1
 801b248:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b24a:	4b1c      	ldr	r3, [pc, #112]	; (801b2bc <xTaskResumeAll+0x120>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d1cc      	bne.n	801b1ec <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d001      	beq.n	801b25c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b258:	f000 fb68 	bl	801b92c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801b25c:	4b1c      	ldr	r3, [pc, #112]	; (801b2d0 <xTaskResumeAll+0x134>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d010      	beq.n	801b28a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b268:	f000 f858 	bl	801b31c <xTaskIncrementTick>
 801b26c:	4603      	mov	r3, r0
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d002      	beq.n	801b278 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801b272:	4b16      	ldr	r3, [pc, #88]	; (801b2cc <xTaskResumeAll+0x130>)
 801b274:	2201      	movs	r2, #1
 801b276:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	3b01      	subs	r3, #1
 801b27c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d1f1      	bne.n	801b268 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801b284:	4b12      	ldr	r3, [pc, #72]	; (801b2d0 <xTaskResumeAll+0x134>)
 801b286:	2200      	movs	r2, #0
 801b288:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b28a:	4b10      	ldr	r3, [pc, #64]	; (801b2cc <xTaskResumeAll+0x130>)
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d009      	beq.n	801b2a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b292:	2301      	movs	r3, #1
 801b294:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b296:	4b0f      	ldr	r3, [pc, #60]	; (801b2d4 <xTaskResumeAll+0x138>)
 801b298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b29c:	601a      	str	r2, [r3, #0]
 801b29e:	f3bf 8f4f 	dsb	sy
 801b2a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b2a6:	f000 fee5 	bl	801c074 <vPortExitCritical>

	return xAlreadyYielded;
 801b2aa:	68bb      	ldr	r3, [r7, #8]
}
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	3710      	adds	r7, #16
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}
 801b2b4:	2001364c 	.word	0x2001364c
 801b2b8:	20013624 	.word	0x20013624
 801b2bc:	200135e4 	.word	0x200135e4
 801b2c0:	2001362c 	.word	0x2001362c
 801b2c4:	20013528 	.word	0x20013528
 801b2c8:	20013524 	.word	0x20013524
 801b2cc:	20013638 	.word	0x20013638
 801b2d0:	20013634 	.word	0x20013634
 801b2d4:	e000ed04 	.word	0xe000ed04

0801b2d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b2d8:	b480      	push	{r7}
 801b2da:	b083      	sub	sp, #12
 801b2dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b2de:	4b05      	ldr	r3, [pc, #20]	; (801b2f4 <xTaskGetTickCount+0x1c>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b2e4:	687b      	ldr	r3, [r7, #4]
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	370c      	adds	r7, #12
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f0:	4770      	bx	lr
 801b2f2:	bf00      	nop
 801b2f4:	20013628 	.word	0x20013628

0801b2f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b082      	sub	sp, #8
 801b2fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801b2fe:	f000 ff6d 	bl	801c1dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801b302:	2300      	movs	r3, #0
 801b304:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801b306:	4b04      	ldr	r3, [pc, #16]	; (801b318 <xTaskGetTickCountFromISR+0x20>)
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801b30c:	683b      	ldr	r3, [r7, #0]
}
 801b30e:	4618      	mov	r0, r3
 801b310:	3708      	adds	r7, #8
 801b312:	46bd      	mov	sp, r7
 801b314:	bd80      	pop	{r7, pc}
 801b316:	bf00      	nop
 801b318:	20013628 	.word	0x20013628

0801b31c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b086      	sub	sp, #24
 801b320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b322:	2300      	movs	r3, #0
 801b324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b326:	4b4f      	ldr	r3, [pc, #316]	; (801b464 <xTaskIncrementTick+0x148>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	f040 808a 	bne.w	801b444 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b330:	4b4d      	ldr	r3, [pc, #308]	; (801b468 <xTaskIncrementTick+0x14c>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	3301      	adds	r3, #1
 801b336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b338:	4a4b      	ldr	r2, [pc, #300]	; (801b468 <xTaskIncrementTick+0x14c>)
 801b33a:	693b      	ldr	r3, [r7, #16]
 801b33c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b33e:	693b      	ldr	r3, [r7, #16]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d122      	bne.n	801b38a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801b344:	4b49      	ldr	r3, [pc, #292]	; (801b46c <xTaskIncrementTick+0x150>)
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d00c      	beq.n	801b368 <xTaskIncrementTick+0x4c>
	__asm volatile
 801b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b352:	b672      	cpsid	i
 801b354:	f383 8811 	msr	BASEPRI, r3
 801b358:	f3bf 8f6f 	isb	sy
 801b35c:	f3bf 8f4f 	dsb	sy
 801b360:	b662      	cpsie	i
 801b362:	603b      	str	r3, [r7, #0]
}
 801b364:	bf00      	nop
 801b366:	e7fe      	b.n	801b366 <xTaskIncrementTick+0x4a>
 801b368:	4b40      	ldr	r3, [pc, #256]	; (801b46c <xTaskIncrementTick+0x150>)
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	60fb      	str	r3, [r7, #12]
 801b36e:	4b40      	ldr	r3, [pc, #256]	; (801b470 <xTaskIncrementTick+0x154>)
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	4a3e      	ldr	r2, [pc, #248]	; (801b46c <xTaskIncrementTick+0x150>)
 801b374:	6013      	str	r3, [r2, #0]
 801b376:	4a3e      	ldr	r2, [pc, #248]	; (801b470 <xTaskIncrementTick+0x154>)
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	6013      	str	r3, [r2, #0]
 801b37c:	4b3d      	ldr	r3, [pc, #244]	; (801b474 <xTaskIncrementTick+0x158>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	3301      	adds	r3, #1
 801b382:	4a3c      	ldr	r2, [pc, #240]	; (801b474 <xTaskIncrementTick+0x158>)
 801b384:	6013      	str	r3, [r2, #0]
 801b386:	f000 fad1 	bl	801b92c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b38a:	4b3b      	ldr	r3, [pc, #236]	; (801b478 <xTaskIncrementTick+0x15c>)
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	693a      	ldr	r2, [r7, #16]
 801b390:	429a      	cmp	r2, r3
 801b392:	d348      	bcc.n	801b426 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b394:	4b35      	ldr	r3, [pc, #212]	; (801b46c <xTaskIncrementTick+0x150>)
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d104      	bne.n	801b3a8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b39e:	4b36      	ldr	r3, [pc, #216]	; (801b478 <xTaskIncrementTick+0x15c>)
 801b3a0:	f04f 32ff 	mov.w	r2, #4294967295
 801b3a4:	601a      	str	r2, [r3, #0]
					break;
 801b3a6:	e03e      	b.n	801b426 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b3a8:	4b30      	ldr	r3, [pc, #192]	; (801b46c <xTaskIncrementTick+0x150>)
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	68db      	ldr	r3, [r3, #12]
 801b3ae:	68db      	ldr	r3, [r3, #12]
 801b3b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b3b2:	68bb      	ldr	r3, [r7, #8]
 801b3b4:	685b      	ldr	r3, [r3, #4]
 801b3b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b3b8:	693a      	ldr	r2, [r7, #16]
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	429a      	cmp	r2, r3
 801b3be:	d203      	bcs.n	801b3c8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b3c0:	4a2d      	ldr	r2, [pc, #180]	; (801b478 <xTaskIncrementTick+0x15c>)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b3c6:	e02e      	b.n	801b426 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	3304      	adds	r3, #4
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	f7fe fc79 	bl	8019cc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b3d2:	68bb      	ldr	r3, [r7, #8]
 801b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d004      	beq.n	801b3e4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	3318      	adds	r3, #24
 801b3de:	4618      	mov	r0, r3
 801b3e0:	f7fe fc70 	bl	8019cc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3e8:	2201      	movs	r2, #1
 801b3ea:	409a      	lsls	r2, r3
 801b3ec:	4b23      	ldr	r3, [pc, #140]	; (801b47c <xTaskIncrementTick+0x160>)
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	4313      	orrs	r3, r2
 801b3f2:	4a22      	ldr	r2, [pc, #136]	; (801b47c <xTaskIncrementTick+0x160>)
 801b3f4:	6013      	str	r3, [r2, #0]
 801b3f6:	68bb      	ldr	r3, [r7, #8]
 801b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3fa:	4613      	mov	r3, r2
 801b3fc:	009b      	lsls	r3, r3, #2
 801b3fe:	4413      	add	r3, r2
 801b400:	009b      	lsls	r3, r3, #2
 801b402:	4a1f      	ldr	r2, [pc, #124]	; (801b480 <xTaskIncrementTick+0x164>)
 801b404:	441a      	add	r2, r3
 801b406:	68bb      	ldr	r3, [r7, #8]
 801b408:	3304      	adds	r3, #4
 801b40a:	4619      	mov	r1, r3
 801b40c:	4610      	mov	r0, r2
 801b40e:	f7fe fbfc 	bl	8019c0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b412:	68bb      	ldr	r3, [r7, #8]
 801b414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b416:	4b1b      	ldr	r3, [pc, #108]	; (801b484 <xTaskIncrementTick+0x168>)
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b41c:	429a      	cmp	r2, r3
 801b41e:	d3b9      	bcc.n	801b394 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801b420:	2301      	movs	r3, #1
 801b422:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b424:	e7b6      	b.n	801b394 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b426:	4b17      	ldr	r3, [pc, #92]	; (801b484 <xTaskIncrementTick+0x168>)
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b42c:	4914      	ldr	r1, [pc, #80]	; (801b480 <xTaskIncrementTick+0x164>)
 801b42e:	4613      	mov	r3, r2
 801b430:	009b      	lsls	r3, r3, #2
 801b432:	4413      	add	r3, r2
 801b434:	009b      	lsls	r3, r3, #2
 801b436:	440b      	add	r3, r1
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	2b01      	cmp	r3, #1
 801b43c:	d907      	bls.n	801b44e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801b43e:	2301      	movs	r3, #1
 801b440:	617b      	str	r3, [r7, #20]
 801b442:	e004      	b.n	801b44e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801b444:	4b10      	ldr	r3, [pc, #64]	; (801b488 <xTaskIncrementTick+0x16c>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	3301      	adds	r3, #1
 801b44a:	4a0f      	ldr	r2, [pc, #60]	; (801b488 <xTaskIncrementTick+0x16c>)
 801b44c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801b44e:	4b0f      	ldr	r3, [pc, #60]	; (801b48c <xTaskIncrementTick+0x170>)
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d001      	beq.n	801b45a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801b456:	2301      	movs	r3, #1
 801b458:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801b45a:	697b      	ldr	r3, [r7, #20]
}
 801b45c:	4618      	mov	r0, r3
 801b45e:	3718      	adds	r7, #24
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}
 801b464:	2001364c 	.word	0x2001364c
 801b468:	20013628 	.word	0x20013628
 801b46c:	200135dc 	.word	0x200135dc
 801b470:	200135e0 	.word	0x200135e0
 801b474:	2001363c 	.word	0x2001363c
 801b478:	20013644 	.word	0x20013644
 801b47c:	2001362c 	.word	0x2001362c
 801b480:	20013528 	.word	0x20013528
 801b484:	20013524 	.word	0x20013524
 801b488:	20013634 	.word	0x20013634
 801b48c:	20013638 	.word	0x20013638

0801b490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b490:	b580      	push	{r7, lr}
 801b492:	b088      	sub	sp, #32
 801b494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b496:	4b3a      	ldr	r3, [pc, #232]	; (801b580 <vTaskSwitchContext+0xf0>)
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d003      	beq.n	801b4a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b49e:	4b39      	ldr	r3, [pc, #228]	; (801b584 <vTaskSwitchContext+0xf4>)
 801b4a0:	2201      	movs	r2, #1
 801b4a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b4a4:	e068      	b.n	801b578 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801b4a6:	4b37      	ldr	r3, [pc, #220]	; (801b584 <vTaskSwitchContext+0xf4>)
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801b4ac:	4b36      	ldr	r3, [pc, #216]	; (801b588 <vTaskSwitchContext+0xf8>)
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4b2:	61fb      	str	r3, [r7, #28]
 801b4b4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801b4b8:	61bb      	str	r3, [r7, #24]
 801b4ba:	69fb      	ldr	r3, [r7, #28]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	69ba      	ldr	r2, [r7, #24]
 801b4c0:	429a      	cmp	r2, r3
 801b4c2:	d111      	bne.n	801b4e8 <vTaskSwitchContext+0x58>
 801b4c4:	69fb      	ldr	r3, [r7, #28]
 801b4c6:	3304      	adds	r3, #4
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	69ba      	ldr	r2, [r7, #24]
 801b4cc:	429a      	cmp	r2, r3
 801b4ce:	d10b      	bne.n	801b4e8 <vTaskSwitchContext+0x58>
 801b4d0:	69fb      	ldr	r3, [r7, #28]
 801b4d2:	3308      	adds	r3, #8
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	69ba      	ldr	r2, [r7, #24]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d105      	bne.n	801b4e8 <vTaskSwitchContext+0x58>
 801b4dc:	69fb      	ldr	r3, [r7, #28]
 801b4de:	330c      	adds	r3, #12
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	69ba      	ldr	r2, [r7, #24]
 801b4e4:	429a      	cmp	r2, r3
 801b4e6:	d008      	beq.n	801b4fa <vTaskSwitchContext+0x6a>
 801b4e8:	4b27      	ldr	r3, [pc, #156]	; (801b588 <vTaskSwitchContext+0xf8>)
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	4b26      	ldr	r3, [pc, #152]	; (801b588 <vTaskSwitchContext+0xf8>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	3334      	adds	r3, #52	; 0x34
 801b4f2:	4619      	mov	r1, r3
 801b4f4:	4610      	mov	r0, r2
 801b4f6:	f7e5 f864 	bl	80005c2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b4fa:	4b24      	ldr	r3, [pc, #144]	; (801b58c <vTaskSwitchContext+0xfc>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	fab3 f383 	clz	r3, r3
 801b506:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801b508:	7afb      	ldrb	r3, [r7, #11]
 801b50a:	f1c3 031f 	rsb	r3, r3, #31
 801b50e:	617b      	str	r3, [r7, #20]
 801b510:	491f      	ldr	r1, [pc, #124]	; (801b590 <vTaskSwitchContext+0x100>)
 801b512:	697a      	ldr	r2, [r7, #20]
 801b514:	4613      	mov	r3, r2
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	4413      	add	r3, r2
 801b51a:	009b      	lsls	r3, r3, #2
 801b51c:	440b      	add	r3, r1
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d10c      	bne.n	801b53e <vTaskSwitchContext+0xae>
	__asm volatile
 801b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b528:	b672      	cpsid	i
 801b52a:	f383 8811 	msr	BASEPRI, r3
 801b52e:	f3bf 8f6f 	isb	sy
 801b532:	f3bf 8f4f 	dsb	sy
 801b536:	b662      	cpsie	i
 801b538:	607b      	str	r3, [r7, #4]
}
 801b53a:	bf00      	nop
 801b53c:	e7fe      	b.n	801b53c <vTaskSwitchContext+0xac>
 801b53e:	697a      	ldr	r2, [r7, #20]
 801b540:	4613      	mov	r3, r2
 801b542:	009b      	lsls	r3, r3, #2
 801b544:	4413      	add	r3, r2
 801b546:	009b      	lsls	r3, r3, #2
 801b548:	4a11      	ldr	r2, [pc, #68]	; (801b590 <vTaskSwitchContext+0x100>)
 801b54a:	4413      	add	r3, r2
 801b54c:	613b      	str	r3, [r7, #16]
 801b54e:	693b      	ldr	r3, [r7, #16]
 801b550:	685b      	ldr	r3, [r3, #4]
 801b552:	685a      	ldr	r2, [r3, #4]
 801b554:	693b      	ldr	r3, [r7, #16]
 801b556:	605a      	str	r2, [r3, #4]
 801b558:	693b      	ldr	r3, [r7, #16]
 801b55a:	685a      	ldr	r2, [r3, #4]
 801b55c:	693b      	ldr	r3, [r7, #16]
 801b55e:	3308      	adds	r3, #8
 801b560:	429a      	cmp	r2, r3
 801b562:	d104      	bne.n	801b56e <vTaskSwitchContext+0xde>
 801b564:	693b      	ldr	r3, [r7, #16]
 801b566:	685b      	ldr	r3, [r3, #4]
 801b568:	685a      	ldr	r2, [r3, #4]
 801b56a:	693b      	ldr	r3, [r7, #16]
 801b56c:	605a      	str	r2, [r3, #4]
 801b56e:	693b      	ldr	r3, [r7, #16]
 801b570:	685b      	ldr	r3, [r3, #4]
 801b572:	68db      	ldr	r3, [r3, #12]
 801b574:	4a04      	ldr	r2, [pc, #16]	; (801b588 <vTaskSwitchContext+0xf8>)
 801b576:	6013      	str	r3, [r2, #0]
}
 801b578:	bf00      	nop
 801b57a:	3720      	adds	r7, #32
 801b57c:	46bd      	mov	sp, r7
 801b57e:	bd80      	pop	{r7, pc}
 801b580:	2001364c 	.word	0x2001364c
 801b584:	20013638 	.word	0x20013638
 801b588:	20013524 	.word	0x20013524
 801b58c:	2001362c 	.word	0x2001362c
 801b590:	20013528 	.word	0x20013528

0801b594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b594:	b580      	push	{r7, lr}
 801b596:	b084      	sub	sp, #16
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]
 801b59c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d10c      	bne.n	801b5be <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5a8:	b672      	cpsid	i
 801b5aa:	f383 8811 	msr	BASEPRI, r3
 801b5ae:	f3bf 8f6f 	isb	sy
 801b5b2:	f3bf 8f4f 	dsb	sy
 801b5b6:	b662      	cpsie	i
 801b5b8:	60fb      	str	r3, [r7, #12]
}
 801b5ba:	bf00      	nop
 801b5bc:	e7fe      	b.n	801b5bc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b5be:	4b07      	ldr	r3, [pc, #28]	; (801b5dc <vTaskPlaceOnEventList+0x48>)
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	3318      	adds	r3, #24
 801b5c4:	4619      	mov	r1, r3
 801b5c6:	6878      	ldr	r0, [r7, #4]
 801b5c8:	f7fe fb43 	bl	8019c52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b5cc:	2101      	movs	r1, #1
 801b5ce:	6838      	ldr	r0, [r7, #0]
 801b5d0:	f000 fba6 	bl	801bd20 <prvAddCurrentTaskToDelayedList>
}
 801b5d4:	bf00      	nop
 801b5d6:	3710      	adds	r7, #16
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	20013524 	.word	0x20013524

0801b5e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b086      	sub	sp, #24
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	68db      	ldr	r3, [r3, #12]
 801b5ec:	68db      	ldr	r3, [r3, #12]
 801b5ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b5f0:	693b      	ldr	r3, [r7, #16]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d10c      	bne.n	801b610 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5fa:	b672      	cpsid	i
 801b5fc:	f383 8811 	msr	BASEPRI, r3
 801b600:	f3bf 8f6f 	isb	sy
 801b604:	f3bf 8f4f 	dsb	sy
 801b608:	b662      	cpsie	i
 801b60a:	60fb      	str	r3, [r7, #12]
}
 801b60c:	bf00      	nop
 801b60e:	e7fe      	b.n	801b60e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b610:	693b      	ldr	r3, [r7, #16]
 801b612:	3318      	adds	r3, #24
 801b614:	4618      	mov	r0, r3
 801b616:	f7fe fb55 	bl	8019cc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b61a:	4b1d      	ldr	r3, [pc, #116]	; (801b690 <xTaskRemoveFromEventList+0xb0>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d11c      	bne.n	801b65c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b622:	693b      	ldr	r3, [r7, #16]
 801b624:	3304      	adds	r3, #4
 801b626:	4618      	mov	r0, r3
 801b628:	f7fe fb4c 	bl	8019cc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b62c:	693b      	ldr	r3, [r7, #16]
 801b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b630:	2201      	movs	r2, #1
 801b632:	409a      	lsls	r2, r3
 801b634:	4b17      	ldr	r3, [pc, #92]	; (801b694 <xTaskRemoveFromEventList+0xb4>)
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	4313      	orrs	r3, r2
 801b63a:	4a16      	ldr	r2, [pc, #88]	; (801b694 <xTaskRemoveFromEventList+0xb4>)
 801b63c:	6013      	str	r3, [r2, #0]
 801b63e:	693b      	ldr	r3, [r7, #16]
 801b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b642:	4613      	mov	r3, r2
 801b644:	009b      	lsls	r3, r3, #2
 801b646:	4413      	add	r3, r2
 801b648:	009b      	lsls	r3, r3, #2
 801b64a:	4a13      	ldr	r2, [pc, #76]	; (801b698 <xTaskRemoveFromEventList+0xb8>)
 801b64c:	441a      	add	r2, r3
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	3304      	adds	r3, #4
 801b652:	4619      	mov	r1, r3
 801b654:	4610      	mov	r0, r2
 801b656:	f7fe fad8 	bl	8019c0a <vListInsertEnd>
 801b65a:	e005      	b.n	801b668 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b65c:	693b      	ldr	r3, [r7, #16]
 801b65e:	3318      	adds	r3, #24
 801b660:	4619      	mov	r1, r3
 801b662:	480e      	ldr	r0, [pc, #56]	; (801b69c <xTaskRemoveFromEventList+0xbc>)
 801b664:	f7fe fad1 	bl	8019c0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b668:	693b      	ldr	r3, [r7, #16]
 801b66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b66c:	4b0c      	ldr	r3, [pc, #48]	; (801b6a0 <xTaskRemoveFromEventList+0xc0>)
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b672:	429a      	cmp	r2, r3
 801b674:	d905      	bls.n	801b682 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b676:	2301      	movs	r3, #1
 801b678:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b67a:	4b0a      	ldr	r3, [pc, #40]	; (801b6a4 <xTaskRemoveFromEventList+0xc4>)
 801b67c:	2201      	movs	r2, #1
 801b67e:	601a      	str	r2, [r3, #0]
 801b680:	e001      	b.n	801b686 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801b682:	2300      	movs	r3, #0
 801b684:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b686:	697b      	ldr	r3, [r7, #20]
}
 801b688:	4618      	mov	r0, r3
 801b68a:	3718      	adds	r7, #24
 801b68c:	46bd      	mov	sp, r7
 801b68e:	bd80      	pop	{r7, pc}
 801b690:	2001364c 	.word	0x2001364c
 801b694:	2001362c 	.word	0x2001362c
 801b698:	20013528 	.word	0x20013528
 801b69c:	200135e4 	.word	0x200135e4
 801b6a0:	20013524 	.word	0x20013524
 801b6a4:	20013638 	.word	0x20013638

0801b6a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b6a8:	b480      	push	{r7}
 801b6aa:	b083      	sub	sp, #12
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b6b0:	4b06      	ldr	r3, [pc, #24]	; (801b6cc <vTaskInternalSetTimeOutState+0x24>)
 801b6b2:	681a      	ldr	r2, [r3, #0]
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b6b8:	4b05      	ldr	r3, [pc, #20]	; (801b6d0 <vTaskInternalSetTimeOutState+0x28>)
 801b6ba:	681a      	ldr	r2, [r3, #0]
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	605a      	str	r2, [r3, #4]
}
 801b6c0:	bf00      	nop
 801b6c2:	370c      	adds	r7, #12
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ca:	4770      	bx	lr
 801b6cc:	2001363c 	.word	0x2001363c
 801b6d0:	20013628 	.word	0x20013628

0801b6d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b088      	sub	sp, #32
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
 801b6dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d10c      	bne.n	801b6fe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6e8:	b672      	cpsid	i
 801b6ea:	f383 8811 	msr	BASEPRI, r3
 801b6ee:	f3bf 8f6f 	isb	sy
 801b6f2:	f3bf 8f4f 	dsb	sy
 801b6f6:	b662      	cpsie	i
 801b6f8:	613b      	str	r3, [r7, #16]
}
 801b6fa:	bf00      	nop
 801b6fc:	e7fe      	b.n	801b6fc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801b6fe:	683b      	ldr	r3, [r7, #0]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d10c      	bne.n	801b71e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b708:	b672      	cpsid	i
 801b70a:	f383 8811 	msr	BASEPRI, r3
 801b70e:	f3bf 8f6f 	isb	sy
 801b712:	f3bf 8f4f 	dsb	sy
 801b716:	b662      	cpsie	i
 801b718:	60fb      	str	r3, [r7, #12]
}
 801b71a:	bf00      	nop
 801b71c:	e7fe      	b.n	801b71c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801b71e:	f000 fc75 	bl	801c00c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b722:	4b1d      	ldr	r3, [pc, #116]	; (801b798 <xTaskCheckForTimeOut+0xc4>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	685b      	ldr	r3, [r3, #4]
 801b72c:	69ba      	ldr	r2, [r7, #24]
 801b72e:	1ad3      	subs	r3, r2, r3
 801b730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b732:	683b      	ldr	r3, [r7, #0]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b73a:	d102      	bne.n	801b742 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b73c:	2300      	movs	r3, #0
 801b73e:	61fb      	str	r3, [r7, #28]
 801b740:	e023      	b.n	801b78a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	681a      	ldr	r2, [r3, #0]
 801b746:	4b15      	ldr	r3, [pc, #84]	; (801b79c <xTaskCheckForTimeOut+0xc8>)
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	429a      	cmp	r2, r3
 801b74c:	d007      	beq.n	801b75e <xTaskCheckForTimeOut+0x8a>
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	685b      	ldr	r3, [r3, #4]
 801b752:	69ba      	ldr	r2, [r7, #24]
 801b754:	429a      	cmp	r2, r3
 801b756:	d302      	bcc.n	801b75e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b758:	2301      	movs	r3, #1
 801b75a:	61fb      	str	r3, [r7, #28]
 801b75c:	e015      	b.n	801b78a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b75e:	683b      	ldr	r3, [r7, #0]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	697a      	ldr	r2, [r7, #20]
 801b764:	429a      	cmp	r2, r3
 801b766:	d20b      	bcs.n	801b780 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b768:	683b      	ldr	r3, [r7, #0]
 801b76a:	681a      	ldr	r2, [r3, #0]
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	1ad2      	subs	r2, r2, r3
 801b770:	683b      	ldr	r3, [r7, #0]
 801b772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b774:	6878      	ldr	r0, [r7, #4]
 801b776:	f7ff ff97 	bl	801b6a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b77a:	2300      	movs	r3, #0
 801b77c:	61fb      	str	r3, [r7, #28]
 801b77e:	e004      	b.n	801b78a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801b780:	683b      	ldr	r3, [r7, #0]
 801b782:	2200      	movs	r2, #0
 801b784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b786:	2301      	movs	r3, #1
 801b788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b78a:	f000 fc73 	bl	801c074 <vPortExitCritical>

	return xReturn;
 801b78e:	69fb      	ldr	r3, [r7, #28]
}
 801b790:	4618      	mov	r0, r3
 801b792:	3720      	adds	r7, #32
 801b794:	46bd      	mov	sp, r7
 801b796:	bd80      	pop	{r7, pc}
 801b798:	20013628 	.word	0x20013628
 801b79c:	2001363c 	.word	0x2001363c

0801b7a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b7a0:	b480      	push	{r7}
 801b7a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b7a4:	4b03      	ldr	r3, [pc, #12]	; (801b7b4 <vTaskMissedYield+0x14>)
 801b7a6:	2201      	movs	r2, #1
 801b7a8:	601a      	str	r2, [r3, #0]
}
 801b7aa:	bf00      	nop
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b2:	4770      	bx	lr
 801b7b4:	20013638 	.word	0x20013638

0801b7b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b082      	sub	sp, #8
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b7c0:	f000 f854 	bl	801b86c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b7c4:	4b07      	ldr	r3, [pc, #28]	; (801b7e4 <prvIdleTask+0x2c>)
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	2b01      	cmp	r3, #1
 801b7ca:	d907      	bls.n	801b7dc <prvIdleTask+0x24>
			{
				taskYIELD();
 801b7cc:	4b06      	ldr	r3, [pc, #24]	; (801b7e8 <prvIdleTask+0x30>)
 801b7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b7d2:	601a      	str	r2, [r3, #0]
 801b7d4:	f3bf 8f4f 	dsb	sy
 801b7d8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801b7dc:	f7e4 feea 	bl	80005b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801b7e0:	e7ee      	b.n	801b7c0 <prvIdleTask+0x8>
 801b7e2:	bf00      	nop
 801b7e4:	20013528 	.word	0x20013528
 801b7e8:	e000ed04 	.word	0xe000ed04

0801b7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b082      	sub	sp, #8
 801b7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	607b      	str	r3, [r7, #4]
 801b7f6:	e00c      	b.n	801b812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b7f8:	687a      	ldr	r2, [r7, #4]
 801b7fa:	4613      	mov	r3, r2
 801b7fc:	009b      	lsls	r3, r3, #2
 801b7fe:	4413      	add	r3, r2
 801b800:	009b      	lsls	r3, r3, #2
 801b802:	4a12      	ldr	r2, [pc, #72]	; (801b84c <prvInitialiseTaskLists+0x60>)
 801b804:	4413      	add	r3, r2
 801b806:	4618      	mov	r0, r3
 801b808:	f7fe f9d2 	bl	8019bb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	3301      	adds	r3, #1
 801b810:	607b      	str	r3, [r7, #4]
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	2b06      	cmp	r3, #6
 801b816:	d9ef      	bls.n	801b7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b818:	480d      	ldr	r0, [pc, #52]	; (801b850 <prvInitialiseTaskLists+0x64>)
 801b81a:	f7fe f9c9 	bl	8019bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b81e:	480d      	ldr	r0, [pc, #52]	; (801b854 <prvInitialiseTaskLists+0x68>)
 801b820:	f7fe f9c6 	bl	8019bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b824:	480c      	ldr	r0, [pc, #48]	; (801b858 <prvInitialiseTaskLists+0x6c>)
 801b826:	f7fe f9c3 	bl	8019bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b82a:	480c      	ldr	r0, [pc, #48]	; (801b85c <prvInitialiseTaskLists+0x70>)
 801b82c:	f7fe f9c0 	bl	8019bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b830:	480b      	ldr	r0, [pc, #44]	; (801b860 <prvInitialiseTaskLists+0x74>)
 801b832:	f7fe f9bd 	bl	8019bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b836:	4b0b      	ldr	r3, [pc, #44]	; (801b864 <prvInitialiseTaskLists+0x78>)
 801b838:	4a05      	ldr	r2, [pc, #20]	; (801b850 <prvInitialiseTaskLists+0x64>)
 801b83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b83c:	4b0a      	ldr	r3, [pc, #40]	; (801b868 <prvInitialiseTaskLists+0x7c>)
 801b83e:	4a05      	ldr	r2, [pc, #20]	; (801b854 <prvInitialiseTaskLists+0x68>)
 801b840:	601a      	str	r2, [r3, #0]
}
 801b842:	bf00      	nop
 801b844:	3708      	adds	r7, #8
 801b846:	46bd      	mov	sp, r7
 801b848:	bd80      	pop	{r7, pc}
 801b84a:	bf00      	nop
 801b84c:	20013528 	.word	0x20013528
 801b850:	200135b4 	.word	0x200135b4
 801b854:	200135c8 	.word	0x200135c8
 801b858:	200135e4 	.word	0x200135e4
 801b85c:	200135f8 	.word	0x200135f8
 801b860:	20013610 	.word	0x20013610
 801b864:	200135dc 	.word	0x200135dc
 801b868:	200135e0 	.word	0x200135e0

0801b86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b86c:	b580      	push	{r7, lr}
 801b86e:	b082      	sub	sp, #8
 801b870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b872:	e019      	b.n	801b8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b874:	f000 fbca 	bl	801c00c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b878:	4b10      	ldr	r3, [pc, #64]	; (801b8bc <prvCheckTasksWaitingTermination+0x50>)
 801b87a:	68db      	ldr	r3, [r3, #12]
 801b87c:	68db      	ldr	r3, [r3, #12]
 801b87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	3304      	adds	r3, #4
 801b884:	4618      	mov	r0, r3
 801b886:	f7fe fa1d 	bl	8019cc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b88a:	4b0d      	ldr	r3, [pc, #52]	; (801b8c0 <prvCheckTasksWaitingTermination+0x54>)
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	3b01      	subs	r3, #1
 801b890:	4a0b      	ldr	r2, [pc, #44]	; (801b8c0 <prvCheckTasksWaitingTermination+0x54>)
 801b892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b894:	4b0b      	ldr	r3, [pc, #44]	; (801b8c4 <prvCheckTasksWaitingTermination+0x58>)
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	3b01      	subs	r3, #1
 801b89a:	4a0a      	ldr	r2, [pc, #40]	; (801b8c4 <prvCheckTasksWaitingTermination+0x58>)
 801b89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b89e:	f000 fbe9 	bl	801c074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b8a2:	6878      	ldr	r0, [r7, #4]
 801b8a4:	f000 f810 	bl	801b8c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b8a8:	4b06      	ldr	r3, [pc, #24]	; (801b8c4 <prvCheckTasksWaitingTermination+0x58>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d1e1      	bne.n	801b874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b8b0:	bf00      	nop
 801b8b2:	bf00      	nop
 801b8b4:	3708      	adds	r7, #8
 801b8b6:	46bd      	mov	sp, r7
 801b8b8:	bd80      	pop	{r7, pc}
 801b8ba:	bf00      	nop
 801b8bc:	200135f8 	.word	0x200135f8
 801b8c0:	20013624 	.word	0x20013624
 801b8c4:	2001360c 	.word	0x2001360c

0801b8c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	b084      	sub	sp, #16
 801b8cc:	af00      	add	r7, sp, #0
 801b8ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d108      	bne.n	801b8ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b8de:	4618      	mov	r0, r3
 801b8e0:	f000 fd90 	bl	801c404 <vPortFree>
				vPortFree( pxTCB );
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f000 fd8d 	bl	801c404 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b8ea:	e01a      	b.n	801b922 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801b8f2:	2b01      	cmp	r3, #1
 801b8f4:	d103      	bne.n	801b8fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f000 fd84 	bl	801c404 <vPortFree>
	}
 801b8fc:	e011      	b.n	801b922 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801b904:	2b02      	cmp	r3, #2
 801b906:	d00c      	beq.n	801b922 <prvDeleteTCB+0x5a>
	__asm volatile
 801b908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b90c:	b672      	cpsid	i
 801b90e:	f383 8811 	msr	BASEPRI, r3
 801b912:	f3bf 8f6f 	isb	sy
 801b916:	f3bf 8f4f 	dsb	sy
 801b91a:	b662      	cpsie	i
 801b91c:	60fb      	str	r3, [r7, #12]
}
 801b91e:	bf00      	nop
 801b920:	e7fe      	b.n	801b920 <prvDeleteTCB+0x58>
	}
 801b922:	bf00      	nop
 801b924:	3710      	adds	r7, #16
 801b926:	46bd      	mov	sp, r7
 801b928:	bd80      	pop	{r7, pc}
	...

0801b92c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b92c:	b480      	push	{r7}
 801b92e:	b083      	sub	sp, #12
 801b930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b932:	4b0c      	ldr	r3, [pc, #48]	; (801b964 <prvResetNextTaskUnblockTime+0x38>)
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d104      	bne.n	801b946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b93c:	4b0a      	ldr	r3, [pc, #40]	; (801b968 <prvResetNextTaskUnblockTime+0x3c>)
 801b93e:	f04f 32ff 	mov.w	r2, #4294967295
 801b942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b944:	e008      	b.n	801b958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b946:	4b07      	ldr	r3, [pc, #28]	; (801b964 <prvResetNextTaskUnblockTime+0x38>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	68db      	ldr	r3, [r3, #12]
 801b94c:	68db      	ldr	r3, [r3, #12]
 801b94e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	685b      	ldr	r3, [r3, #4]
 801b954:	4a04      	ldr	r2, [pc, #16]	; (801b968 <prvResetNextTaskUnblockTime+0x3c>)
 801b956:	6013      	str	r3, [r2, #0]
}
 801b958:	bf00      	nop
 801b95a:	370c      	adds	r7, #12
 801b95c:	46bd      	mov	sp, r7
 801b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b962:	4770      	bx	lr
 801b964:	200135dc 	.word	0x200135dc
 801b968:	20013644 	.word	0x20013644

0801b96c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b96c:	b480      	push	{r7}
 801b96e:	b083      	sub	sp, #12
 801b970:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b972:	4b0b      	ldr	r3, [pc, #44]	; (801b9a0 <xTaskGetSchedulerState+0x34>)
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	2b00      	cmp	r3, #0
 801b978:	d102      	bne.n	801b980 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b97a:	2301      	movs	r3, #1
 801b97c:	607b      	str	r3, [r7, #4]
 801b97e:	e008      	b.n	801b992 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b980:	4b08      	ldr	r3, [pc, #32]	; (801b9a4 <xTaskGetSchedulerState+0x38>)
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d102      	bne.n	801b98e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b988:	2302      	movs	r3, #2
 801b98a:	607b      	str	r3, [r7, #4]
 801b98c:	e001      	b.n	801b992 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b98e:	2300      	movs	r3, #0
 801b990:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b992:	687b      	ldr	r3, [r7, #4]
	}
 801b994:	4618      	mov	r0, r3
 801b996:	370c      	adds	r7, #12
 801b998:	46bd      	mov	sp, r7
 801b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b99e:	4770      	bx	lr
 801b9a0:	20013630 	.word	0x20013630
 801b9a4:	2001364c 	.word	0x2001364c

0801b9a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b084      	sub	sp, #16
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d069      	beq.n	801ba92 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b9be:	68bb      	ldr	r3, [r7, #8]
 801b9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b9c2:	4b36      	ldr	r3, [pc, #216]	; (801ba9c <xTaskPriorityInherit+0xf4>)
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9c8:	429a      	cmp	r2, r3
 801b9ca:	d259      	bcs.n	801ba80 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	699b      	ldr	r3, [r3, #24]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	db06      	blt.n	801b9e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b9d4:	4b31      	ldr	r3, [pc, #196]	; (801ba9c <xTaskPriorityInherit+0xf4>)
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9da:	f1c3 0207 	rsb	r2, r3, #7
 801b9de:	68bb      	ldr	r3, [r7, #8]
 801b9e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b9e2:	68bb      	ldr	r3, [r7, #8]
 801b9e4:	6959      	ldr	r1, [r3, #20]
 801b9e6:	68bb      	ldr	r3, [r7, #8]
 801b9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b9ea:	4613      	mov	r3, r2
 801b9ec:	009b      	lsls	r3, r3, #2
 801b9ee:	4413      	add	r3, r2
 801b9f0:	009b      	lsls	r3, r3, #2
 801b9f2:	4a2b      	ldr	r2, [pc, #172]	; (801baa0 <xTaskPriorityInherit+0xf8>)
 801b9f4:	4413      	add	r3, r2
 801b9f6:	4299      	cmp	r1, r3
 801b9f8:	d13a      	bne.n	801ba70 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b9fa:	68bb      	ldr	r3, [r7, #8]
 801b9fc:	3304      	adds	r3, #4
 801b9fe:	4618      	mov	r0, r3
 801ba00:	f7fe f960 	bl	8019cc4 <uxListRemove>
 801ba04:	4603      	mov	r3, r0
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d115      	bne.n	801ba36 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801ba0a:	68bb      	ldr	r3, [r7, #8]
 801ba0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba0e:	4924      	ldr	r1, [pc, #144]	; (801baa0 <xTaskPriorityInherit+0xf8>)
 801ba10:	4613      	mov	r3, r2
 801ba12:	009b      	lsls	r3, r3, #2
 801ba14:	4413      	add	r3, r2
 801ba16:	009b      	lsls	r3, r3, #2
 801ba18:	440b      	add	r3, r1
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d10a      	bne.n	801ba36 <xTaskPriorityInherit+0x8e>
 801ba20:	68bb      	ldr	r3, [r7, #8]
 801ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba24:	2201      	movs	r2, #1
 801ba26:	fa02 f303 	lsl.w	r3, r2, r3
 801ba2a:	43da      	mvns	r2, r3
 801ba2c:	4b1d      	ldr	r3, [pc, #116]	; (801baa4 <xTaskPriorityInherit+0xfc>)
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	4013      	ands	r3, r2
 801ba32:	4a1c      	ldr	r2, [pc, #112]	; (801baa4 <xTaskPriorityInherit+0xfc>)
 801ba34:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ba36:	4b19      	ldr	r3, [pc, #100]	; (801ba9c <xTaskPriorityInherit+0xf4>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba3c:	68bb      	ldr	r3, [r7, #8]
 801ba3e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ba40:	68bb      	ldr	r3, [r7, #8]
 801ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba44:	2201      	movs	r2, #1
 801ba46:	409a      	lsls	r2, r3
 801ba48:	4b16      	ldr	r3, [pc, #88]	; (801baa4 <xTaskPriorityInherit+0xfc>)
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	4313      	orrs	r3, r2
 801ba4e:	4a15      	ldr	r2, [pc, #84]	; (801baa4 <xTaskPriorityInherit+0xfc>)
 801ba50:	6013      	str	r3, [r2, #0]
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba56:	4613      	mov	r3, r2
 801ba58:	009b      	lsls	r3, r3, #2
 801ba5a:	4413      	add	r3, r2
 801ba5c:	009b      	lsls	r3, r3, #2
 801ba5e:	4a10      	ldr	r2, [pc, #64]	; (801baa0 <xTaskPriorityInherit+0xf8>)
 801ba60:	441a      	add	r2, r3
 801ba62:	68bb      	ldr	r3, [r7, #8]
 801ba64:	3304      	adds	r3, #4
 801ba66:	4619      	mov	r1, r3
 801ba68:	4610      	mov	r0, r2
 801ba6a:	f7fe f8ce 	bl	8019c0a <vListInsertEnd>
 801ba6e:	e004      	b.n	801ba7a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ba70:	4b0a      	ldr	r3, [pc, #40]	; (801ba9c <xTaskPriorityInherit+0xf4>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba76:	68bb      	ldr	r3, [r7, #8]
 801ba78:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	60fb      	str	r3, [r7, #12]
 801ba7e:	e008      	b.n	801ba92 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ba84:	4b05      	ldr	r3, [pc, #20]	; (801ba9c <xTaskPriorityInherit+0xf4>)
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba8a:	429a      	cmp	r2, r3
 801ba8c:	d201      	bcs.n	801ba92 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801ba8e:	2301      	movs	r3, #1
 801ba90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ba92:	68fb      	ldr	r3, [r7, #12]
	}
 801ba94:	4618      	mov	r0, r3
 801ba96:	3710      	adds	r7, #16
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}
 801ba9c:	20013524 	.word	0x20013524
 801baa0:	20013528 	.word	0x20013528
 801baa4:	2001362c 	.word	0x2001362c

0801baa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b086      	sub	sp, #24
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bab4:	2300      	movs	r3, #0
 801bab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d072      	beq.n	801bba4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801babe:	4b3c      	ldr	r3, [pc, #240]	; (801bbb0 <xTaskPriorityDisinherit+0x108>)
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	693a      	ldr	r2, [r7, #16]
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d00c      	beq.n	801bae2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bacc:	b672      	cpsid	i
 801bace:	f383 8811 	msr	BASEPRI, r3
 801bad2:	f3bf 8f6f 	isb	sy
 801bad6:	f3bf 8f4f 	dsb	sy
 801bada:	b662      	cpsie	i
 801badc:	60fb      	str	r3, [r7, #12]
}
 801bade:	bf00      	nop
 801bae0:	e7fe      	b.n	801bae0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801bae2:	693b      	ldr	r3, [r7, #16]
 801bae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d10c      	bne.n	801bb04 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801baee:	b672      	cpsid	i
 801baf0:	f383 8811 	msr	BASEPRI, r3
 801baf4:	f3bf 8f6f 	isb	sy
 801baf8:	f3bf 8f4f 	dsb	sy
 801bafc:	b662      	cpsie	i
 801bafe:	60bb      	str	r3, [r7, #8]
}
 801bb00:	bf00      	nop
 801bb02:	e7fe      	b.n	801bb02 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801bb04:	693b      	ldr	r3, [r7, #16]
 801bb06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb08:	1e5a      	subs	r2, r3, #1
 801bb0a:	693b      	ldr	r3, [r7, #16]
 801bb0c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bb0e:	693b      	ldr	r3, [r7, #16]
 801bb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb12:	693b      	ldr	r3, [r7, #16]
 801bb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb16:	429a      	cmp	r2, r3
 801bb18:	d044      	beq.n	801bba4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bb1a:	693b      	ldr	r3, [r7, #16]
 801bb1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d140      	bne.n	801bba4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bb22:	693b      	ldr	r3, [r7, #16]
 801bb24:	3304      	adds	r3, #4
 801bb26:	4618      	mov	r0, r3
 801bb28:	f7fe f8cc 	bl	8019cc4 <uxListRemove>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d115      	bne.n	801bb5e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801bb32:	693b      	ldr	r3, [r7, #16]
 801bb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb36:	491f      	ldr	r1, [pc, #124]	; (801bbb4 <xTaskPriorityDisinherit+0x10c>)
 801bb38:	4613      	mov	r3, r2
 801bb3a:	009b      	lsls	r3, r3, #2
 801bb3c:	4413      	add	r3, r2
 801bb3e:	009b      	lsls	r3, r3, #2
 801bb40:	440b      	add	r3, r1
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d10a      	bne.n	801bb5e <xTaskPriorityDisinherit+0xb6>
 801bb48:	693b      	ldr	r3, [r7, #16]
 801bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb4c:	2201      	movs	r2, #1
 801bb4e:	fa02 f303 	lsl.w	r3, r2, r3
 801bb52:	43da      	mvns	r2, r3
 801bb54:	4b18      	ldr	r3, [pc, #96]	; (801bbb8 <xTaskPriorityDisinherit+0x110>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	4013      	ands	r3, r2
 801bb5a:	4a17      	ldr	r2, [pc, #92]	; (801bbb8 <xTaskPriorityDisinherit+0x110>)
 801bb5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801bb5e:	693b      	ldr	r3, [r7, #16]
 801bb60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bb62:	693b      	ldr	r3, [r7, #16]
 801bb64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bb66:	693b      	ldr	r3, [r7, #16]
 801bb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb6a:	f1c3 0207 	rsb	r2, r3, #7
 801bb6e:	693b      	ldr	r3, [r7, #16]
 801bb70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801bb72:	693b      	ldr	r3, [r7, #16]
 801bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb76:	2201      	movs	r2, #1
 801bb78:	409a      	lsls	r2, r3
 801bb7a:	4b0f      	ldr	r3, [pc, #60]	; (801bbb8 <xTaskPriorityDisinherit+0x110>)
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	4313      	orrs	r3, r2
 801bb80:	4a0d      	ldr	r2, [pc, #52]	; (801bbb8 <xTaskPriorityDisinherit+0x110>)
 801bb82:	6013      	str	r3, [r2, #0]
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb88:	4613      	mov	r3, r2
 801bb8a:	009b      	lsls	r3, r3, #2
 801bb8c:	4413      	add	r3, r2
 801bb8e:	009b      	lsls	r3, r3, #2
 801bb90:	4a08      	ldr	r2, [pc, #32]	; (801bbb4 <xTaskPriorityDisinherit+0x10c>)
 801bb92:	441a      	add	r2, r3
 801bb94:	693b      	ldr	r3, [r7, #16]
 801bb96:	3304      	adds	r3, #4
 801bb98:	4619      	mov	r1, r3
 801bb9a:	4610      	mov	r0, r2
 801bb9c:	f7fe f835 	bl	8019c0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801bba0:	2301      	movs	r3, #1
 801bba2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bba4:	697b      	ldr	r3, [r7, #20]
	}
 801bba6:	4618      	mov	r0, r3
 801bba8:	3718      	adds	r7, #24
 801bbaa:	46bd      	mov	sp, r7
 801bbac:	bd80      	pop	{r7, pc}
 801bbae:	bf00      	nop
 801bbb0:	20013524 	.word	0x20013524
 801bbb4:	20013528 	.word	0x20013528
 801bbb8:	2001362c 	.word	0x2001362c

0801bbbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801bbbc:	b580      	push	{r7, lr}
 801bbbe:	b088      	sub	sp, #32
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
 801bbc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801bbca:	2301      	movs	r3, #1
 801bbcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	f000 8087 	beq.w	801bce4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801bbd6:	69bb      	ldr	r3, [r7, #24]
 801bbd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d10c      	bne.n	801bbf8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801bbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbe2:	b672      	cpsid	i
 801bbe4:	f383 8811 	msr	BASEPRI, r3
 801bbe8:	f3bf 8f6f 	isb	sy
 801bbec:	f3bf 8f4f 	dsb	sy
 801bbf0:	b662      	cpsie	i
 801bbf2:	60fb      	str	r3, [r7, #12]
}
 801bbf4:	bf00      	nop
 801bbf6:	e7fe      	b.n	801bbf6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801bbf8:	69bb      	ldr	r3, [r7, #24]
 801bbfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbfc:	683a      	ldr	r2, [r7, #0]
 801bbfe:	429a      	cmp	r2, r3
 801bc00:	d902      	bls.n	801bc08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801bc02:	683b      	ldr	r3, [r7, #0]
 801bc04:	61fb      	str	r3, [r7, #28]
 801bc06:	e002      	b.n	801bc0e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801bc08:	69bb      	ldr	r3, [r7, #24]
 801bc0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc0c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801bc0e:	69bb      	ldr	r3, [r7, #24]
 801bc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc12:	69fa      	ldr	r2, [r7, #28]
 801bc14:	429a      	cmp	r2, r3
 801bc16:	d065      	beq.n	801bce4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801bc18:	69bb      	ldr	r3, [r7, #24]
 801bc1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc1c:	697a      	ldr	r2, [r7, #20]
 801bc1e:	429a      	cmp	r2, r3
 801bc20:	d160      	bne.n	801bce4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801bc22:	4b32      	ldr	r3, [pc, #200]	; (801bcec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	69ba      	ldr	r2, [r7, #24]
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d10c      	bne.n	801bc46 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 801bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc30:	b672      	cpsid	i
 801bc32:	f383 8811 	msr	BASEPRI, r3
 801bc36:	f3bf 8f6f 	isb	sy
 801bc3a:	f3bf 8f4f 	dsb	sy
 801bc3e:	b662      	cpsie	i
 801bc40:	60bb      	str	r3, [r7, #8]
}
 801bc42:	bf00      	nop
 801bc44:	e7fe      	b.n	801bc44 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801bc46:	69bb      	ldr	r3, [r7, #24]
 801bc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801bc4c:	69bb      	ldr	r3, [r7, #24]
 801bc4e:	69fa      	ldr	r2, [r7, #28]
 801bc50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bc52:	69bb      	ldr	r3, [r7, #24]
 801bc54:	699b      	ldr	r3, [r3, #24]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	db04      	blt.n	801bc64 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bc5a:	69fb      	ldr	r3, [r7, #28]
 801bc5c:	f1c3 0207 	rsb	r2, r3, #7
 801bc60:	69bb      	ldr	r3, [r7, #24]
 801bc62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801bc64:	69bb      	ldr	r3, [r7, #24]
 801bc66:	6959      	ldr	r1, [r3, #20]
 801bc68:	693a      	ldr	r2, [r7, #16]
 801bc6a:	4613      	mov	r3, r2
 801bc6c:	009b      	lsls	r3, r3, #2
 801bc6e:	4413      	add	r3, r2
 801bc70:	009b      	lsls	r3, r3, #2
 801bc72:	4a1f      	ldr	r2, [pc, #124]	; (801bcf0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801bc74:	4413      	add	r3, r2
 801bc76:	4299      	cmp	r1, r3
 801bc78:	d134      	bne.n	801bce4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bc7a:	69bb      	ldr	r3, [r7, #24]
 801bc7c:	3304      	adds	r3, #4
 801bc7e:	4618      	mov	r0, r3
 801bc80:	f7fe f820 	bl	8019cc4 <uxListRemove>
 801bc84:	4603      	mov	r3, r0
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d115      	bne.n	801bcb6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801bc8a:	69bb      	ldr	r3, [r7, #24]
 801bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc8e:	4918      	ldr	r1, [pc, #96]	; (801bcf0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801bc90:	4613      	mov	r3, r2
 801bc92:	009b      	lsls	r3, r3, #2
 801bc94:	4413      	add	r3, r2
 801bc96:	009b      	lsls	r3, r3, #2
 801bc98:	440b      	add	r3, r1
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d10a      	bne.n	801bcb6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 801bca0:	69bb      	ldr	r3, [r7, #24]
 801bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bca4:	2201      	movs	r2, #1
 801bca6:	fa02 f303 	lsl.w	r3, r2, r3
 801bcaa:	43da      	mvns	r2, r3
 801bcac:	4b11      	ldr	r3, [pc, #68]	; (801bcf4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	4013      	ands	r3, r2
 801bcb2:	4a10      	ldr	r2, [pc, #64]	; (801bcf4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801bcb4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801bcb6:	69bb      	ldr	r3, [r7, #24]
 801bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcba:	2201      	movs	r2, #1
 801bcbc:	409a      	lsls	r2, r3
 801bcbe:	4b0d      	ldr	r3, [pc, #52]	; (801bcf4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	4313      	orrs	r3, r2
 801bcc4:	4a0b      	ldr	r2, [pc, #44]	; (801bcf4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801bcc6:	6013      	str	r3, [r2, #0]
 801bcc8:	69bb      	ldr	r3, [r7, #24]
 801bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bccc:	4613      	mov	r3, r2
 801bcce:	009b      	lsls	r3, r3, #2
 801bcd0:	4413      	add	r3, r2
 801bcd2:	009b      	lsls	r3, r3, #2
 801bcd4:	4a06      	ldr	r2, [pc, #24]	; (801bcf0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801bcd6:	441a      	add	r2, r3
 801bcd8:	69bb      	ldr	r3, [r7, #24]
 801bcda:	3304      	adds	r3, #4
 801bcdc:	4619      	mov	r1, r3
 801bcde:	4610      	mov	r0, r2
 801bce0:	f7fd ff93 	bl	8019c0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801bce4:	bf00      	nop
 801bce6:	3720      	adds	r7, #32
 801bce8:	46bd      	mov	sp, r7
 801bcea:	bd80      	pop	{r7, pc}
 801bcec:	20013524 	.word	0x20013524
 801bcf0:	20013528 	.word	0x20013528
 801bcf4:	2001362c 	.word	0x2001362c

0801bcf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801bcf8:	b480      	push	{r7}
 801bcfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801bcfc:	4b07      	ldr	r3, [pc, #28]	; (801bd1c <pvTaskIncrementMutexHeldCount+0x24>)
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d004      	beq.n	801bd0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801bd04:	4b05      	ldr	r3, [pc, #20]	; (801bd1c <pvTaskIncrementMutexHeldCount+0x24>)
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bd0a:	3201      	adds	r2, #1
 801bd0c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801bd0e:	4b03      	ldr	r3, [pc, #12]	; (801bd1c <pvTaskIncrementMutexHeldCount+0x24>)
 801bd10:	681b      	ldr	r3, [r3, #0]
	}
 801bd12:	4618      	mov	r0, r3
 801bd14:	46bd      	mov	sp, r7
 801bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd1a:	4770      	bx	lr
 801bd1c:	20013524 	.word	0x20013524

0801bd20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b084      	sub	sp, #16
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
 801bd28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801bd2a:	4b29      	ldr	r3, [pc, #164]	; (801bdd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bd30:	4b28      	ldr	r3, [pc, #160]	; (801bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	3304      	adds	r3, #4
 801bd36:	4618      	mov	r0, r3
 801bd38:	f7fd ffc4 	bl	8019cc4 <uxListRemove>
 801bd3c:	4603      	mov	r3, r0
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d10b      	bne.n	801bd5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801bd42:	4b24      	ldr	r3, [pc, #144]	; (801bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd48:	2201      	movs	r2, #1
 801bd4a:	fa02 f303 	lsl.w	r3, r2, r3
 801bd4e:	43da      	mvns	r2, r3
 801bd50:	4b21      	ldr	r3, [pc, #132]	; (801bdd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	4013      	ands	r3, r2
 801bd56:	4a20      	ldr	r2, [pc, #128]	; (801bdd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bd58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd60:	d10a      	bne.n	801bd78 <prvAddCurrentTaskToDelayedList+0x58>
 801bd62:	683b      	ldr	r3, [r7, #0]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d007      	beq.n	801bd78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bd68:	4b1a      	ldr	r3, [pc, #104]	; (801bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	3304      	adds	r3, #4
 801bd6e:	4619      	mov	r1, r3
 801bd70:	481a      	ldr	r0, [pc, #104]	; (801bddc <prvAddCurrentTaskToDelayedList+0xbc>)
 801bd72:	f7fd ff4a 	bl	8019c0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bd76:	e026      	b.n	801bdc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bd78:	68fa      	ldr	r2, [r7, #12]
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	4413      	add	r3, r2
 801bd7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bd80:	4b14      	ldr	r3, [pc, #80]	; (801bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	68ba      	ldr	r2, [r7, #8]
 801bd86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bd88:	68ba      	ldr	r2, [r7, #8]
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	429a      	cmp	r2, r3
 801bd8e:	d209      	bcs.n	801bda4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bd90:	4b13      	ldr	r3, [pc, #76]	; (801bde0 <prvAddCurrentTaskToDelayedList+0xc0>)
 801bd92:	681a      	ldr	r2, [r3, #0]
 801bd94:	4b0f      	ldr	r3, [pc, #60]	; (801bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	3304      	adds	r3, #4
 801bd9a:	4619      	mov	r1, r3
 801bd9c:	4610      	mov	r0, r2
 801bd9e:	f7fd ff58 	bl	8019c52 <vListInsert>
}
 801bda2:	e010      	b.n	801bdc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bda4:	4b0f      	ldr	r3, [pc, #60]	; (801bde4 <prvAddCurrentTaskToDelayedList+0xc4>)
 801bda6:	681a      	ldr	r2, [r3, #0]
 801bda8:	4b0a      	ldr	r3, [pc, #40]	; (801bdd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	3304      	adds	r3, #4
 801bdae:	4619      	mov	r1, r3
 801bdb0:	4610      	mov	r0, r2
 801bdb2:	f7fd ff4e 	bl	8019c52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bdb6:	4b0c      	ldr	r3, [pc, #48]	; (801bde8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	68ba      	ldr	r2, [r7, #8]
 801bdbc:	429a      	cmp	r2, r3
 801bdbe:	d202      	bcs.n	801bdc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801bdc0:	4a09      	ldr	r2, [pc, #36]	; (801bde8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	6013      	str	r3, [r2, #0]
}
 801bdc6:	bf00      	nop
 801bdc8:	3710      	adds	r7, #16
 801bdca:	46bd      	mov	sp, r7
 801bdcc:	bd80      	pop	{r7, pc}
 801bdce:	bf00      	nop
 801bdd0:	20013628 	.word	0x20013628
 801bdd4:	20013524 	.word	0x20013524
 801bdd8:	2001362c 	.word	0x2001362c
 801bddc:	20013610 	.word	0x20013610
 801bde0:	200135e0 	.word	0x200135e0
 801bde4:	200135dc 	.word	0x200135dc
 801bde8:	20013644 	.word	0x20013644

0801bdec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801bdec:	b480      	push	{r7}
 801bdee:	b085      	sub	sp, #20
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	60f8      	str	r0, [r7, #12]
 801bdf4:	60b9      	str	r1, [r7, #8]
 801bdf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	3b04      	subs	r3, #4
 801bdfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801be04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801be06:	68fb      	ldr	r3, [r7, #12]
 801be08:	3b04      	subs	r3, #4
 801be0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801be0c:	68bb      	ldr	r3, [r7, #8]
 801be0e:	f023 0201 	bic.w	r2, r3, #1
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	3b04      	subs	r3, #4
 801be1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801be1c:	4a0c      	ldr	r2, [pc, #48]	; (801be50 <pxPortInitialiseStack+0x64>)
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	3b14      	subs	r3, #20
 801be26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801be28:	687a      	ldr	r2, [r7, #4]
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	3b04      	subs	r3, #4
 801be32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	f06f 0202 	mvn.w	r2, #2
 801be3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	3b20      	subs	r3, #32
 801be40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801be42:	68fb      	ldr	r3, [r7, #12]
}
 801be44:	4618      	mov	r0, r3
 801be46:	3714      	adds	r7, #20
 801be48:	46bd      	mov	sp, r7
 801be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be4e:	4770      	bx	lr
 801be50:	0801be55 	.word	0x0801be55

0801be54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801be54:	b480      	push	{r7}
 801be56:	b085      	sub	sp, #20
 801be58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801be5a:	2300      	movs	r3, #0
 801be5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801be5e:	4b14      	ldr	r3, [pc, #80]	; (801beb0 <prvTaskExitError+0x5c>)
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be66:	d00c      	beq.n	801be82 <prvTaskExitError+0x2e>
	__asm volatile
 801be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be6c:	b672      	cpsid	i
 801be6e:	f383 8811 	msr	BASEPRI, r3
 801be72:	f3bf 8f6f 	isb	sy
 801be76:	f3bf 8f4f 	dsb	sy
 801be7a:	b662      	cpsie	i
 801be7c:	60fb      	str	r3, [r7, #12]
}
 801be7e:	bf00      	nop
 801be80:	e7fe      	b.n	801be80 <prvTaskExitError+0x2c>
	__asm volatile
 801be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be86:	b672      	cpsid	i
 801be88:	f383 8811 	msr	BASEPRI, r3
 801be8c:	f3bf 8f6f 	isb	sy
 801be90:	f3bf 8f4f 	dsb	sy
 801be94:	b662      	cpsie	i
 801be96:	60bb      	str	r3, [r7, #8]
}
 801be98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801be9a:	bf00      	nop
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d0fc      	beq.n	801be9c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801bea2:	bf00      	nop
 801bea4:	bf00      	nop
 801bea6:	3714      	adds	r7, #20
 801bea8:	46bd      	mov	sp, r7
 801beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beae:	4770      	bx	lr
 801beb0:	2000007c 	.word	0x2000007c
	...

0801bec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801bec0:	4b07      	ldr	r3, [pc, #28]	; (801bee0 <pxCurrentTCBConst2>)
 801bec2:	6819      	ldr	r1, [r3, #0]
 801bec4:	6808      	ldr	r0, [r1, #0]
 801bec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beca:	f380 8809 	msr	PSP, r0
 801bece:	f3bf 8f6f 	isb	sy
 801bed2:	f04f 0000 	mov.w	r0, #0
 801bed6:	f380 8811 	msr	BASEPRI, r0
 801beda:	4770      	bx	lr
 801bedc:	f3af 8000 	nop.w

0801bee0 <pxCurrentTCBConst2>:
 801bee0:	20013524 	.word	0x20013524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801bee4:	bf00      	nop
 801bee6:	bf00      	nop

0801bee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801bee8:	4808      	ldr	r0, [pc, #32]	; (801bf0c <prvPortStartFirstTask+0x24>)
 801beea:	6800      	ldr	r0, [r0, #0]
 801beec:	6800      	ldr	r0, [r0, #0]
 801beee:	f380 8808 	msr	MSP, r0
 801bef2:	f04f 0000 	mov.w	r0, #0
 801bef6:	f380 8814 	msr	CONTROL, r0
 801befa:	b662      	cpsie	i
 801befc:	b661      	cpsie	f
 801befe:	f3bf 8f4f 	dsb	sy
 801bf02:	f3bf 8f6f 	isb	sy
 801bf06:	df00      	svc	0
 801bf08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801bf0a:	bf00      	nop
 801bf0c:	e000ed08 	.word	0xe000ed08

0801bf10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b084      	sub	sp, #16
 801bf14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801bf16:	4b37      	ldr	r3, [pc, #220]	; (801bff4 <xPortStartScheduler+0xe4>)
 801bf18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	781b      	ldrb	r3, [r3, #0]
 801bf1e:	b2db      	uxtb	r3, r3
 801bf20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	22ff      	movs	r2, #255	; 0xff
 801bf26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	781b      	ldrb	r3, [r3, #0]
 801bf2c:	b2db      	uxtb	r3, r3
 801bf2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801bf30:	78fb      	ldrb	r3, [r7, #3]
 801bf32:	b2db      	uxtb	r3, r3
 801bf34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801bf38:	b2da      	uxtb	r2, r3
 801bf3a:	4b2f      	ldr	r3, [pc, #188]	; (801bff8 <xPortStartScheduler+0xe8>)
 801bf3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801bf3e:	4b2f      	ldr	r3, [pc, #188]	; (801bffc <xPortStartScheduler+0xec>)
 801bf40:	2207      	movs	r2, #7
 801bf42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bf44:	e009      	b.n	801bf5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801bf46:	4b2d      	ldr	r3, [pc, #180]	; (801bffc <xPortStartScheduler+0xec>)
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	3b01      	subs	r3, #1
 801bf4c:	4a2b      	ldr	r2, [pc, #172]	; (801bffc <xPortStartScheduler+0xec>)
 801bf4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801bf50:	78fb      	ldrb	r3, [r7, #3]
 801bf52:	b2db      	uxtb	r3, r3
 801bf54:	005b      	lsls	r3, r3, #1
 801bf56:	b2db      	uxtb	r3, r3
 801bf58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bf5a:	78fb      	ldrb	r3, [r7, #3]
 801bf5c:	b2db      	uxtb	r3, r3
 801bf5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bf62:	2b80      	cmp	r3, #128	; 0x80
 801bf64:	d0ef      	beq.n	801bf46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801bf66:	4b25      	ldr	r3, [pc, #148]	; (801bffc <xPortStartScheduler+0xec>)
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	f1c3 0307 	rsb	r3, r3, #7
 801bf6e:	2b04      	cmp	r3, #4
 801bf70:	d00c      	beq.n	801bf8c <xPortStartScheduler+0x7c>
	__asm volatile
 801bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf76:	b672      	cpsid	i
 801bf78:	f383 8811 	msr	BASEPRI, r3
 801bf7c:	f3bf 8f6f 	isb	sy
 801bf80:	f3bf 8f4f 	dsb	sy
 801bf84:	b662      	cpsie	i
 801bf86:	60bb      	str	r3, [r7, #8]
}
 801bf88:	bf00      	nop
 801bf8a:	e7fe      	b.n	801bf8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801bf8c:	4b1b      	ldr	r3, [pc, #108]	; (801bffc <xPortStartScheduler+0xec>)
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	021b      	lsls	r3, r3, #8
 801bf92:	4a1a      	ldr	r2, [pc, #104]	; (801bffc <xPortStartScheduler+0xec>)
 801bf94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801bf96:	4b19      	ldr	r3, [pc, #100]	; (801bffc <xPortStartScheduler+0xec>)
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801bf9e:	4a17      	ldr	r2, [pc, #92]	; (801bffc <xPortStartScheduler+0xec>)
 801bfa0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	b2da      	uxtb	r2, r3
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801bfaa:	4b15      	ldr	r3, [pc, #84]	; (801c000 <xPortStartScheduler+0xf0>)
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	4a14      	ldr	r2, [pc, #80]	; (801c000 <xPortStartScheduler+0xf0>)
 801bfb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801bfb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801bfb6:	4b12      	ldr	r3, [pc, #72]	; (801c000 <xPortStartScheduler+0xf0>)
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	4a11      	ldr	r2, [pc, #68]	; (801c000 <xPortStartScheduler+0xf0>)
 801bfbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801bfc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801bfc2:	f000 f8dd 	bl	801c180 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801bfc6:	4b0f      	ldr	r3, [pc, #60]	; (801c004 <xPortStartScheduler+0xf4>)
 801bfc8:	2200      	movs	r2, #0
 801bfca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801bfcc:	f000 f8fc 	bl	801c1c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801bfd0:	4b0d      	ldr	r3, [pc, #52]	; (801c008 <xPortStartScheduler+0xf8>)
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	4a0c      	ldr	r2, [pc, #48]	; (801c008 <xPortStartScheduler+0xf8>)
 801bfd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801bfda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801bfdc:	f7ff ff84 	bl	801bee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801bfe0:	f7ff fa56 	bl	801b490 <vTaskSwitchContext>
	prvTaskExitError();
 801bfe4:	f7ff ff36 	bl	801be54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801bfe8:	2300      	movs	r3, #0
}
 801bfea:	4618      	mov	r0, r3
 801bfec:	3710      	adds	r7, #16
 801bfee:	46bd      	mov	sp, r7
 801bff0:	bd80      	pop	{r7, pc}
 801bff2:	bf00      	nop
 801bff4:	e000e400 	.word	0xe000e400
 801bff8:	20013650 	.word	0x20013650
 801bffc:	20013654 	.word	0x20013654
 801c000:	e000ed20 	.word	0xe000ed20
 801c004:	2000007c 	.word	0x2000007c
 801c008:	e000ef34 	.word	0xe000ef34

0801c00c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c00c:	b480      	push	{r7}
 801c00e:	b083      	sub	sp, #12
 801c010:	af00      	add	r7, sp, #0
	__asm volatile
 801c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c016:	b672      	cpsid	i
 801c018:	f383 8811 	msr	BASEPRI, r3
 801c01c:	f3bf 8f6f 	isb	sy
 801c020:	f3bf 8f4f 	dsb	sy
 801c024:	b662      	cpsie	i
 801c026:	607b      	str	r3, [r7, #4]
}
 801c028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c02a:	4b10      	ldr	r3, [pc, #64]	; (801c06c <vPortEnterCritical+0x60>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	3301      	adds	r3, #1
 801c030:	4a0e      	ldr	r2, [pc, #56]	; (801c06c <vPortEnterCritical+0x60>)
 801c032:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c034:	4b0d      	ldr	r3, [pc, #52]	; (801c06c <vPortEnterCritical+0x60>)
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	2b01      	cmp	r3, #1
 801c03a:	d111      	bne.n	801c060 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c03c:	4b0c      	ldr	r3, [pc, #48]	; (801c070 <vPortEnterCritical+0x64>)
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	b2db      	uxtb	r3, r3
 801c042:	2b00      	cmp	r3, #0
 801c044:	d00c      	beq.n	801c060 <vPortEnterCritical+0x54>
	__asm volatile
 801c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c04a:	b672      	cpsid	i
 801c04c:	f383 8811 	msr	BASEPRI, r3
 801c050:	f3bf 8f6f 	isb	sy
 801c054:	f3bf 8f4f 	dsb	sy
 801c058:	b662      	cpsie	i
 801c05a:	603b      	str	r3, [r7, #0]
}
 801c05c:	bf00      	nop
 801c05e:	e7fe      	b.n	801c05e <vPortEnterCritical+0x52>
	}
}
 801c060:	bf00      	nop
 801c062:	370c      	adds	r7, #12
 801c064:	46bd      	mov	sp, r7
 801c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c06a:	4770      	bx	lr
 801c06c:	2000007c 	.word	0x2000007c
 801c070:	e000ed04 	.word	0xe000ed04

0801c074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c074:	b480      	push	{r7}
 801c076:	b083      	sub	sp, #12
 801c078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c07a:	4b13      	ldr	r3, [pc, #76]	; (801c0c8 <vPortExitCritical+0x54>)
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d10c      	bne.n	801c09c <vPortExitCritical+0x28>
	__asm volatile
 801c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c086:	b672      	cpsid	i
 801c088:	f383 8811 	msr	BASEPRI, r3
 801c08c:	f3bf 8f6f 	isb	sy
 801c090:	f3bf 8f4f 	dsb	sy
 801c094:	b662      	cpsie	i
 801c096:	607b      	str	r3, [r7, #4]
}
 801c098:	bf00      	nop
 801c09a:	e7fe      	b.n	801c09a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801c09c:	4b0a      	ldr	r3, [pc, #40]	; (801c0c8 <vPortExitCritical+0x54>)
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	3b01      	subs	r3, #1
 801c0a2:	4a09      	ldr	r2, [pc, #36]	; (801c0c8 <vPortExitCritical+0x54>)
 801c0a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c0a6:	4b08      	ldr	r3, [pc, #32]	; (801c0c8 <vPortExitCritical+0x54>)
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d105      	bne.n	801c0ba <vPortExitCritical+0x46>
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c0b2:	683b      	ldr	r3, [r7, #0]
 801c0b4:	f383 8811 	msr	BASEPRI, r3
}
 801c0b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c0ba:	bf00      	nop
 801c0bc:	370c      	adds	r7, #12
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c4:	4770      	bx	lr
 801c0c6:	bf00      	nop
 801c0c8:	2000007c 	.word	0x2000007c
 801c0cc:	00000000 	.word	0x00000000

0801c0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c0d0:	f3ef 8009 	mrs	r0, PSP
 801c0d4:	f3bf 8f6f 	isb	sy
 801c0d8:	4b15      	ldr	r3, [pc, #84]	; (801c130 <pxCurrentTCBConst>)
 801c0da:	681a      	ldr	r2, [r3, #0]
 801c0dc:	f01e 0f10 	tst.w	lr, #16
 801c0e0:	bf08      	it	eq
 801c0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ea:	6010      	str	r0, [r2, #0]
 801c0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c0f4:	b672      	cpsid	i
 801c0f6:	f380 8811 	msr	BASEPRI, r0
 801c0fa:	f3bf 8f4f 	dsb	sy
 801c0fe:	f3bf 8f6f 	isb	sy
 801c102:	b662      	cpsie	i
 801c104:	f7ff f9c4 	bl	801b490 <vTaskSwitchContext>
 801c108:	f04f 0000 	mov.w	r0, #0
 801c10c:	f380 8811 	msr	BASEPRI, r0
 801c110:	bc09      	pop	{r0, r3}
 801c112:	6819      	ldr	r1, [r3, #0]
 801c114:	6808      	ldr	r0, [r1, #0]
 801c116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c11a:	f01e 0f10 	tst.w	lr, #16
 801c11e:	bf08      	it	eq
 801c120:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c124:	f380 8809 	msr	PSP, r0
 801c128:	f3bf 8f6f 	isb	sy
 801c12c:	4770      	bx	lr
 801c12e:	bf00      	nop

0801c130 <pxCurrentTCBConst>:
 801c130:	20013524 	.word	0x20013524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c134:	bf00      	nop
 801c136:	bf00      	nop

0801c138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c138:	b580      	push	{r7, lr}
 801c13a:	b082      	sub	sp, #8
 801c13c:	af00      	add	r7, sp, #0
	__asm volatile
 801c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c142:	b672      	cpsid	i
 801c144:	f383 8811 	msr	BASEPRI, r3
 801c148:	f3bf 8f6f 	isb	sy
 801c14c:	f3bf 8f4f 	dsb	sy
 801c150:	b662      	cpsie	i
 801c152:	607b      	str	r3, [r7, #4]
}
 801c154:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c156:	f7ff f8e1 	bl	801b31c <xTaskIncrementTick>
 801c15a:	4603      	mov	r3, r0
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d003      	beq.n	801c168 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c160:	4b06      	ldr	r3, [pc, #24]	; (801c17c <SysTick_Handler+0x44>)
 801c162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c166:	601a      	str	r2, [r3, #0]
 801c168:	2300      	movs	r3, #0
 801c16a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c16c:	683b      	ldr	r3, [r7, #0]
 801c16e:	f383 8811 	msr	BASEPRI, r3
}
 801c172:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c174:	bf00      	nop
 801c176:	3708      	adds	r7, #8
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}
 801c17c:	e000ed04 	.word	0xe000ed04

0801c180 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c180:	b480      	push	{r7}
 801c182:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c184:	4b0b      	ldr	r3, [pc, #44]	; (801c1b4 <vPortSetupTimerInterrupt+0x34>)
 801c186:	2200      	movs	r2, #0
 801c188:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c18a:	4b0b      	ldr	r3, [pc, #44]	; (801c1b8 <vPortSetupTimerInterrupt+0x38>)
 801c18c:	2200      	movs	r2, #0
 801c18e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c190:	4b0a      	ldr	r3, [pc, #40]	; (801c1bc <vPortSetupTimerInterrupt+0x3c>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	4a0a      	ldr	r2, [pc, #40]	; (801c1c0 <vPortSetupTimerInterrupt+0x40>)
 801c196:	fba2 2303 	umull	r2, r3, r2, r3
 801c19a:	099b      	lsrs	r3, r3, #6
 801c19c:	4a09      	ldr	r2, [pc, #36]	; (801c1c4 <vPortSetupTimerInterrupt+0x44>)
 801c19e:	3b01      	subs	r3, #1
 801c1a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c1a2:	4b04      	ldr	r3, [pc, #16]	; (801c1b4 <vPortSetupTimerInterrupt+0x34>)
 801c1a4:	2207      	movs	r2, #7
 801c1a6:	601a      	str	r2, [r3, #0]
}
 801c1a8:	bf00      	nop
 801c1aa:	46bd      	mov	sp, r7
 801c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b0:	4770      	bx	lr
 801c1b2:	bf00      	nop
 801c1b4:	e000e010 	.word	0xe000e010
 801c1b8:	e000e018 	.word	0xe000e018
 801c1bc:	20000010 	.word	0x20000010
 801c1c0:	10624dd3 	.word	0x10624dd3
 801c1c4:	e000e014 	.word	0xe000e014

0801c1c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c1c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c1d8 <vPortEnableVFP+0x10>
 801c1cc:	6801      	ldr	r1, [r0, #0]
 801c1ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c1d2:	6001      	str	r1, [r0, #0]
 801c1d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c1d6:	bf00      	nop
 801c1d8:	e000ed88 	.word	0xe000ed88

0801c1dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c1dc:	b480      	push	{r7}
 801c1de:	b085      	sub	sp, #20
 801c1e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c1e2:	f3ef 8305 	mrs	r3, IPSR
 801c1e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	2b0f      	cmp	r3, #15
 801c1ec:	d916      	bls.n	801c21c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c1ee:	4a19      	ldr	r2, [pc, #100]	; (801c254 <vPortValidateInterruptPriority+0x78>)
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	4413      	add	r3, r2
 801c1f4:	781b      	ldrb	r3, [r3, #0]
 801c1f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c1f8:	4b17      	ldr	r3, [pc, #92]	; (801c258 <vPortValidateInterruptPriority+0x7c>)
 801c1fa:	781b      	ldrb	r3, [r3, #0]
 801c1fc:	7afa      	ldrb	r2, [r7, #11]
 801c1fe:	429a      	cmp	r2, r3
 801c200:	d20c      	bcs.n	801c21c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 801c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c206:	b672      	cpsid	i
 801c208:	f383 8811 	msr	BASEPRI, r3
 801c20c:	f3bf 8f6f 	isb	sy
 801c210:	f3bf 8f4f 	dsb	sy
 801c214:	b662      	cpsie	i
 801c216:	607b      	str	r3, [r7, #4]
}
 801c218:	bf00      	nop
 801c21a:	e7fe      	b.n	801c21a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c21c:	4b0f      	ldr	r3, [pc, #60]	; (801c25c <vPortValidateInterruptPriority+0x80>)
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c224:	4b0e      	ldr	r3, [pc, #56]	; (801c260 <vPortValidateInterruptPriority+0x84>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	429a      	cmp	r2, r3
 801c22a:	d90c      	bls.n	801c246 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c230:	b672      	cpsid	i
 801c232:	f383 8811 	msr	BASEPRI, r3
 801c236:	f3bf 8f6f 	isb	sy
 801c23a:	f3bf 8f4f 	dsb	sy
 801c23e:	b662      	cpsie	i
 801c240:	603b      	str	r3, [r7, #0]
}
 801c242:	bf00      	nop
 801c244:	e7fe      	b.n	801c244 <vPortValidateInterruptPriority+0x68>
	}
 801c246:	bf00      	nop
 801c248:	3714      	adds	r7, #20
 801c24a:	46bd      	mov	sp, r7
 801c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c250:	4770      	bx	lr
 801c252:	bf00      	nop
 801c254:	e000e3f0 	.word	0xe000e3f0
 801c258:	20013650 	.word	0x20013650
 801c25c:	e000ed0c 	.word	0xe000ed0c
 801c260:	20013654 	.word	0x20013654

0801c264 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c264:	b580      	push	{r7, lr}
 801c266:	b08a      	sub	sp, #40	; 0x28
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c26c:	2300      	movs	r3, #0
 801c26e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c270:	f7fe ff86 	bl	801b180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c274:	4b5e      	ldr	r3, [pc, #376]	; (801c3f0 <pvPortMalloc+0x18c>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d101      	bne.n	801c280 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c27c:	f000 f920 	bl	801c4c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c280:	4b5c      	ldr	r3, [pc, #368]	; (801c3f4 <pvPortMalloc+0x190>)
 801c282:	681a      	ldr	r2, [r3, #0]
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	4013      	ands	r3, r2
 801c288:	2b00      	cmp	r3, #0
 801c28a:	f040 8092 	bne.w	801c3b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d01f      	beq.n	801c2d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 801c294:	2208      	movs	r2, #8
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	4413      	add	r3, r2
 801c29a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	f003 0307 	and.w	r3, r3, #7
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d016      	beq.n	801c2d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	f023 0307 	bic.w	r3, r3, #7
 801c2ac:	3308      	adds	r3, #8
 801c2ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	f003 0307 	and.w	r3, r3, #7
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d00c      	beq.n	801c2d4 <pvPortMalloc+0x70>
	__asm volatile
 801c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2be:	b672      	cpsid	i
 801c2c0:	f383 8811 	msr	BASEPRI, r3
 801c2c4:	f3bf 8f6f 	isb	sy
 801c2c8:	f3bf 8f4f 	dsb	sy
 801c2cc:	b662      	cpsie	i
 801c2ce:	617b      	str	r3, [r7, #20]
}
 801c2d0:	bf00      	nop
 801c2d2:	e7fe      	b.n	801c2d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d06b      	beq.n	801c3b2 <pvPortMalloc+0x14e>
 801c2da:	4b47      	ldr	r3, [pc, #284]	; (801c3f8 <pvPortMalloc+0x194>)
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	687a      	ldr	r2, [r7, #4]
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	d866      	bhi.n	801c3b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c2e4:	4b45      	ldr	r3, [pc, #276]	; (801c3fc <pvPortMalloc+0x198>)
 801c2e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c2e8:	4b44      	ldr	r3, [pc, #272]	; (801c3fc <pvPortMalloc+0x198>)
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c2ee:	e004      	b.n	801c2fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 801c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2fc:	685b      	ldr	r3, [r3, #4]
 801c2fe:	687a      	ldr	r2, [r7, #4]
 801c300:	429a      	cmp	r2, r3
 801c302:	d903      	bls.n	801c30c <pvPortMalloc+0xa8>
 801c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d1f1      	bne.n	801c2f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c30c:	4b38      	ldr	r3, [pc, #224]	; (801c3f0 <pvPortMalloc+0x18c>)
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c312:	429a      	cmp	r2, r3
 801c314:	d04d      	beq.n	801c3b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c316:	6a3b      	ldr	r3, [r7, #32]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	2208      	movs	r2, #8
 801c31c:	4413      	add	r3, r2
 801c31e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c322:	681a      	ldr	r2, [r3, #0]
 801c324:	6a3b      	ldr	r3, [r7, #32]
 801c326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c32a:	685a      	ldr	r2, [r3, #4]
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	1ad2      	subs	r2, r2, r3
 801c330:	2308      	movs	r3, #8
 801c332:	005b      	lsls	r3, r3, #1
 801c334:	429a      	cmp	r2, r3
 801c336:	d921      	bls.n	801c37c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	4413      	add	r3, r2
 801c33e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c340:	69bb      	ldr	r3, [r7, #24]
 801c342:	f003 0307 	and.w	r3, r3, #7
 801c346:	2b00      	cmp	r3, #0
 801c348:	d00c      	beq.n	801c364 <pvPortMalloc+0x100>
	__asm volatile
 801c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c34e:	b672      	cpsid	i
 801c350:	f383 8811 	msr	BASEPRI, r3
 801c354:	f3bf 8f6f 	isb	sy
 801c358:	f3bf 8f4f 	dsb	sy
 801c35c:	b662      	cpsie	i
 801c35e:	613b      	str	r3, [r7, #16]
}
 801c360:	bf00      	nop
 801c362:	e7fe      	b.n	801c362 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c366:	685a      	ldr	r2, [r3, #4]
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	1ad2      	subs	r2, r2, r3
 801c36c:	69bb      	ldr	r3, [r7, #24]
 801c36e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c372:	687a      	ldr	r2, [r7, #4]
 801c374:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c376:	69b8      	ldr	r0, [r7, #24]
 801c378:	f000 f904 	bl	801c584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c37c:	4b1e      	ldr	r3, [pc, #120]	; (801c3f8 <pvPortMalloc+0x194>)
 801c37e:	681a      	ldr	r2, [r3, #0]
 801c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c382:	685b      	ldr	r3, [r3, #4]
 801c384:	1ad3      	subs	r3, r2, r3
 801c386:	4a1c      	ldr	r2, [pc, #112]	; (801c3f8 <pvPortMalloc+0x194>)
 801c388:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c38a:	4b1b      	ldr	r3, [pc, #108]	; (801c3f8 <pvPortMalloc+0x194>)
 801c38c:	681a      	ldr	r2, [r3, #0]
 801c38e:	4b1c      	ldr	r3, [pc, #112]	; (801c400 <pvPortMalloc+0x19c>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	429a      	cmp	r2, r3
 801c394:	d203      	bcs.n	801c39e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c396:	4b18      	ldr	r3, [pc, #96]	; (801c3f8 <pvPortMalloc+0x194>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	4a19      	ldr	r2, [pc, #100]	; (801c400 <pvPortMalloc+0x19c>)
 801c39c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3a0:	685a      	ldr	r2, [r3, #4]
 801c3a2:	4b14      	ldr	r3, [pc, #80]	; (801c3f4 <pvPortMalloc+0x190>)
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	431a      	orrs	r2, r3
 801c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c3b2:	f7fe fef3 	bl	801b19c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801c3b6:	69fb      	ldr	r3, [r7, #28]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d101      	bne.n	801c3c0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801c3bc:	f7e4 f90c 	bl	80005d8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c3c0:	69fb      	ldr	r3, [r7, #28]
 801c3c2:	f003 0307 	and.w	r3, r3, #7
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d00c      	beq.n	801c3e4 <pvPortMalloc+0x180>
	__asm volatile
 801c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3ce:	b672      	cpsid	i
 801c3d0:	f383 8811 	msr	BASEPRI, r3
 801c3d4:	f3bf 8f6f 	isb	sy
 801c3d8:	f3bf 8f4f 	dsb	sy
 801c3dc:	b662      	cpsie	i
 801c3de:	60fb      	str	r3, [r7, #12]
}
 801c3e0:	bf00      	nop
 801c3e2:	e7fe      	b.n	801c3e2 <pvPortMalloc+0x17e>
	return pvReturn;
 801c3e4:	69fb      	ldr	r3, [r7, #28]
}
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	3728      	adds	r7, #40	; 0x28
 801c3ea:	46bd      	mov	sp, r7
 801c3ec:	bd80      	pop	{r7, pc}
 801c3ee:	bf00      	nop
 801c3f0:	2001b660 	.word	0x2001b660
 801c3f4:	2001b66c 	.word	0x2001b66c
 801c3f8:	2001b664 	.word	0x2001b664
 801c3fc:	2001b658 	.word	0x2001b658
 801c400:	2001b668 	.word	0x2001b668

0801c404 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b086      	sub	sp, #24
 801c408:	af00      	add	r7, sp, #0
 801c40a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d04c      	beq.n	801c4b0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c416:	2308      	movs	r3, #8
 801c418:	425b      	negs	r3, r3
 801c41a:	697a      	ldr	r2, [r7, #20]
 801c41c:	4413      	add	r3, r2
 801c41e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c420:	697b      	ldr	r3, [r7, #20]
 801c422:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c424:	693b      	ldr	r3, [r7, #16]
 801c426:	685a      	ldr	r2, [r3, #4]
 801c428:	4b23      	ldr	r3, [pc, #140]	; (801c4b8 <vPortFree+0xb4>)
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	4013      	ands	r3, r2
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d10c      	bne.n	801c44c <vPortFree+0x48>
	__asm volatile
 801c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c436:	b672      	cpsid	i
 801c438:	f383 8811 	msr	BASEPRI, r3
 801c43c:	f3bf 8f6f 	isb	sy
 801c440:	f3bf 8f4f 	dsb	sy
 801c444:	b662      	cpsie	i
 801c446:	60fb      	str	r3, [r7, #12]
}
 801c448:	bf00      	nop
 801c44a:	e7fe      	b.n	801c44a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c44c:	693b      	ldr	r3, [r7, #16]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d00c      	beq.n	801c46e <vPortFree+0x6a>
	__asm volatile
 801c454:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c458:	b672      	cpsid	i
 801c45a:	f383 8811 	msr	BASEPRI, r3
 801c45e:	f3bf 8f6f 	isb	sy
 801c462:	f3bf 8f4f 	dsb	sy
 801c466:	b662      	cpsie	i
 801c468:	60bb      	str	r3, [r7, #8]
}
 801c46a:	bf00      	nop
 801c46c:	e7fe      	b.n	801c46c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c46e:	693b      	ldr	r3, [r7, #16]
 801c470:	685a      	ldr	r2, [r3, #4]
 801c472:	4b11      	ldr	r3, [pc, #68]	; (801c4b8 <vPortFree+0xb4>)
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	4013      	ands	r3, r2
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d019      	beq.n	801c4b0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c47c:	693b      	ldr	r3, [r7, #16]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d115      	bne.n	801c4b0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c484:	693b      	ldr	r3, [r7, #16]
 801c486:	685a      	ldr	r2, [r3, #4]
 801c488:	4b0b      	ldr	r3, [pc, #44]	; (801c4b8 <vPortFree+0xb4>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	43db      	mvns	r3, r3
 801c48e:	401a      	ands	r2, r3
 801c490:	693b      	ldr	r3, [r7, #16]
 801c492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c494:	f7fe fe74 	bl	801b180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c498:	693b      	ldr	r3, [r7, #16]
 801c49a:	685a      	ldr	r2, [r3, #4]
 801c49c:	4b07      	ldr	r3, [pc, #28]	; (801c4bc <vPortFree+0xb8>)
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	4413      	add	r3, r2
 801c4a2:	4a06      	ldr	r2, [pc, #24]	; (801c4bc <vPortFree+0xb8>)
 801c4a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c4a6:	6938      	ldr	r0, [r7, #16]
 801c4a8:	f000 f86c 	bl	801c584 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801c4ac:	f7fe fe76 	bl	801b19c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c4b0:	bf00      	nop
 801c4b2:	3718      	adds	r7, #24
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	2001b66c 	.word	0x2001b66c
 801c4bc:	2001b664 	.word	0x2001b664

0801c4c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c4c0:	b480      	push	{r7}
 801c4c2:	b085      	sub	sp, #20
 801c4c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c4c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c4ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c4cc:	4b27      	ldr	r3, [pc, #156]	; (801c56c <prvHeapInit+0xac>)
 801c4ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	f003 0307 	and.w	r3, r3, #7
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d00c      	beq.n	801c4f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	3307      	adds	r3, #7
 801c4de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	f023 0307 	bic.w	r3, r3, #7
 801c4e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c4e8:	68ba      	ldr	r2, [r7, #8]
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	1ad3      	subs	r3, r2, r3
 801c4ee:	4a1f      	ldr	r2, [pc, #124]	; (801c56c <prvHeapInit+0xac>)
 801c4f0:	4413      	add	r3, r2
 801c4f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c4f8:	4a1d      	ldr	r2, [pc, #116]	; (801c570 <prvHeapInit+0xb0>)
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c4fe:	4b1c      	ldr	r3, [pc, #112]	; (801c570 <prvHeapInit+0xb0>)
 801c500:	2200      	movs	r2, #0
 801c502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	68ba      	ldr	r2, [r7, #8]
 801c508:	4413      	add	r3, r2
 801c50a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c50c:	2208      	movs	r2, #8
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	1a9b      	subs	r3, r3, r2
 801c512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	f023 0307 	bic.w	r3, r3, #7
 801c51a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	4a15      	ldr	r2, [pc, #84]	; (801c574 <prvHeapInit+0xb4>)
 801c520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c522:	4b14      	ldr	r3, [pc, #80]	; (801c574 <prvHeapInit+0xb4>)
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	2200      	movs	r2, #0
 801c528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c52a:	4b12      	ldr	r3, [pc, #72]	; (801c574 <prvHeapInit+0xb4>)
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	2200      	movs	r2, #0
 801c530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c536:	683b      	ldr	r3, [r7, #0]
 801c538:	68fa      	ldr	r2, [r7, #12]
 801c53a:	1ad2      	subs	r2, r2, r3
 801c53c:	683b      	ldr	r3, [r7, #0]
 801c53e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c540:	4b0c      	ldr	r3, [pc, #48]	; (801c574 <prvHeapInit+0xb4>)
 801c542:	681a      	ldr	r2, [r3, #0]
 801c544:	683b      	ldr	r3, [r7, #0]
 801c546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	4a0a      	ldr	r2, [pc, #40]	; (801c578 <prvHeapInit+0xb8>)
 801c54e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c550:	683b      	ldr	r3, [r7, #0]
 801c552:	685b      	ldr	r3, [r3, #4]
 801c554:	4a09      	ldr	r2, [pc, #36]	; (801c57c <prvHeapInit+0xbc>)
 801c556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c558:	4b09      	ldr	r3, [pc, #36]	; (801c580 <prvHeapInit+0xc0>)
 801c55a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c55e:	601a      	str	r2, [r3, #0]
}
 801c560:	bf00      	nop
 801c562:	3714      	adds	r7, #20
 801c564:	46bd      	mov	sp, r7
 801c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c56a:	4770      	bx	lr
 801c56c:	20013658 	.word	0x20013658
 801c570:	2001b658 	.word	0x2001b658
 801c574:	2001b660 	.word	0x2001b660
 801c578:	2001b668 	.word	0x2001b668
 801c57c:	2001b664 	.word	0x2001b664
 801c580:	2001b66c 	.word	0x2001b66c

0801c584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c584:	b480      	push	{r7}
 801c586:	b085      	sub	sp, #20
 801c588:	af00      	add	r7, sp, #0
 801c58a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c58c:	4b28      	ldr	r3, [pc, #160]	; (801c630 <prvInsertBlockIntoFreeList+0xac>)
 801c58e:	60fb      	str	r3, [r7, #12]
 801c590:	e002      	b.n	801c598 <prvInsertBlockIntoFreeList+0x14>
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	60fb      	str	r3, [r7, #12]
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	681b      	ldr	r3, [r3, #0]
 801c59c:	687a      	ldr	r2, [r7, #4]
 801c59e:	429a      	cmp	r2, r3
 801c5a0:	d8f7      	bhi.n	801c592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	685b      	ldr	r3, [r3, #4]
 801c5aa:	68ba      	ldr	r2, [r7, #8]
 801c5ac:	4413      	add	r3, r2
 801c5ae:	687a      	ldr	r2, [r7, #4]
 801c5b0:	429a      	cmp	r2, r3
 801c5b2:	d108      	bne.n	801c5c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	685a      	ldr	r2, [r3, #4]
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	685b      	ldr	r3, [r3, #4]
 801c5bc:	441a      	add	r2, r3
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	685b      	ldr	r3, [r3, #4]
 801c5ce:	68ba      	ldr	r2, [r7, #8]
 801c5d0:	441a      	add	r2, r3
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	429a      	cmp	r2, r3
 801c5d8:	d118      	bne.n	801c60c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	681a      	ldr	r2, [r3, #0]
 801c5de:	4b15      	ldr	r3, [pc, #84]	; (801c634 <prvInsertBlockIntoFreeList+0xb0>)
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	429a      	cmp	r2, r3
 801c5e4:	d00d      	beq.n	801c602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	685a      	ldr	r2, [r3, #4]
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	685b      	ldr	r3, [r3, #4]
 801c5f0:	441a      	add	r2, r3
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	681a      	ldr	r2, [r3, #0]
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	601a      	str	r2, [r3, #0]
 801c600:	e008      	b.n	801c614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c602:	4b0c      	ldr	r3, [pc, #48]	; (801c634 <prvInsertBlockIntoFreeList+0xb0>)
 801c604:	681a      	ldr	r2, [r3, #0]
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	601a      	str	r2, [r3, #0]
 801c60a:	e003      	b.n	801c614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	681a      	ldr	r2, [r3, #0]
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c614:	68fa      	ldr	r2, [r7, #12]
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	429a      	cmp	r2, r3
 801c61a:	d002      	beq.n	801c622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	687a      	ldr	r2, [r7, #4]
 801c620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c622:	bf00      	nop
 801c624:	3714      	adds	r7, #20
 801c626:	46bd      	mov	sp, r7
 801c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c62c:	4770      	bx	lr
 801c62e:	bf00      	nop
 801c630:	2001b658 	.word	0x2001b658
 801c634:	2001b660 	.word	0x2001b660

0801c638 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801c63c:	2201      	movs	r2, #1
 801c63e:	490e      	ldr	r1, [pc, #56]	; (801c678 <MX_USB_HOST_Init+0x40>)
 801c640:	480e      	ldr	r0, [pc, #56]	; (801c67c <MX_USB_HOST_Init+0x44>)
 801c642:	f7f8 f9bb 	bl	80149bc <USBH_Init>
 801c646:	4603      	mov	r3, r0
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d001      	beq.n	801c650 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801c64c:	f7e5 fa54 	bl	8001af8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801c650:	490b      	ldr	r1, [pc, #44]	; (801c680 <MX_USB_HOST_Init+0x48>)
 801c652:	480a      	ldr	r0, [pc, #40]	; (801c67c <MX_USB_HOST_Init+0x44>)
 801c654:	f7f8 fa87 	bl	8014b66 <USBH_RegisterClass>
 801c658:	4603      	mov	r3, r0
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d001      	beq.n	801c662 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801c65e:	f7e5 fa4b 	bl	8001af8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801c662:	4806      	ldr	r0, [pc, #24]	; (801c67c <MX_USB_HOST_Init+0x44>)
 801c664:	f7f8 fb0b 	bl	8014c7e <USBH_Start>
 801c668:	4603      	mov	r3, r0
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d001      	beq.n	801c672 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801c66e:	f7e5 fa43 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801c672:	bf00      	nop
 801c674:	bd80      	pop	{r7, pc}
 801c676:	bf00      	nop
 801c678:	0801c685 	.word	0x0801c685
 801c67c:	2001b670 	.word	0x2001b670
 801c680:	2000005c 	.word	0x2000005c

0801c684 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801c684:	b480      	push	{r7}
 801c686:	b083      	sub	sp, #12
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
 801c68c:	460b      	mov	r3, r1
 801c68e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801c690:	78fb      	ldrb	r3, [r7, #3]
 801c692:	3b01      	subs	r3, #1
 801c694:	2b04      	cmp	r3, #4
 801c696:	d819      	bhi.n	801c6cc <USBH_UserProcess+0x48>
 801c698:	a201      	add	r2, pc, #4	; (adr r2, 801c6a0 <USBH_UserProcess+0x1c>)
 801c69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c69e:	bf00      	nop
 801c6a0:	0801c6cd 	.word	0x0801c6cd
 801c6a4:	0801c6bd 	.word	0x0801c6bd
 801c6a8:	0801c6cd 	.word	0x0801c6cd
 801c6ac:	0801c6c5 	.word	0x0801c6c5
 801c6b0:	0801c6b5 	.word	0x0801c6b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801c6b4:	4b09      	ldr	r3, [pc, #36]	; (801c6dc <USBH_UserProcess+0x58>)
 801c6b6:	2203      	movs	r2, #3
 801c6b8:	701a      	strb	r2, [r3, #0]
  break;
 801c6ba:	e008      	b.n	801c6ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801c6bc:	4b07      	ldr	r3, [pc, #28]	; (801c6dc <USBH_UserProcess+0x58>)
 801c6be:	2202      	movs	r2, #2
 801c6c0:	701a      	strb	r2, [r3, #0]
  break;
 801c6c2:	e004      	b.n	801c6ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801c6c4:	4b05      	ldr	r3, [pc, #20]	; (801c6dc <USBH_UserProcess+0x58>)
 801c6c6:	2201      	movs	r2, #1
 801c6c8:	701a      	strb	r2, [r3, #0]
  break;
 801c6ca:	e000      	b.n	801c6ce <USBH_UserProcess+0x4a>

  default:
  break;
 801c6cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801c6ce:	bf00      	nop
 801c6d0:	370c      	adds	r7, #12
 801c6d2:	46bd      	mov	sp, r7
 801c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d8:	4770      	bx	lr
 801c6da:	bf00      	nop
 801c6dc:	2001ba54 	.word	0x2001ba54

0801c6e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b08a      	sub	sp, #40	; 0x28
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c6e8:	f107 0314 	add.w	r3, r7, #20
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	601a      	str	r2, [r3, #0]
 801c6f0:	605a      	str	r2, [r3, #4]
 801c6f2:	609a      	str	r2, [r3, #8]
 801c6f4:	60da      	str	r2, [r3, #12]
 801c6f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c700:	d13c      	bne.n	801c77c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c702:	4b20      	ldr	r3, [pc, #128]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c706:	4a1f      	ldr	r2, [pc, #124]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c708:	f043 0301 	orr.w	r3, r3, #1
 801c70c:	6313      	str	r3, [r2, #48]	; 0x30
 801c70e:	4b1d      	ldr	r3, [pc, #116]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c712:	f003 0301 	and.w	r3, r3, #1
 801c716:	613b      	str	r3, [r7, #16]
 801c718:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801c71a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801c71e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c720:	2302      	movs	r3, #2
 801c722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c724:	2300      	movs	r3, #0
 801c726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c728:	2303      	movs	r3, #3
 801c72a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801c72c:	230a      	movs	r3, #10
 801c72e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c730:	f107 0314 	add.w	r3, r7, #20
 801c734:	4619      	mov	r1, r3
 801c736:	4814      	ldr	r0, [pc, #80]	; (801c788 <HAL_HCD_MspInit+0xa8>)
 801c738:	f7ec fcca 	bl	80090d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c73c:	4b11      	ldr	r3, [pc, #68]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c740:	4a10      	ldr	r2, [pc, #64]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c746:	6353      	str	r3, [r2, #52]	; 0x34
 801c748:	4b0e      	ldr	r3, [pc, #56]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c750:	60fb      	str	r3, [r7, #12]
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	4b0b      	ldr	r3, [pc, #44]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c758:	4a0a      	ldr	r2, [pc, #40]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c75a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c75e:	6453      	str	r3, [r2, #68]	; 0x44
 801c760:	4b08      	ldr	r3, [pc, #32]	; (801c784 <HAL_HCD_MspInit+0xa4>)
 801c762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c768:	60bb      	str	r3, [r7, #8]
 801c76a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801c76c:	2200      	movs	r2, #0
 801c76e:	2105      	movs	r1, #5
 801c770:	2043      	movs	r0, #67	; 0x43
 801c772:	f7ea ffe9 	bl	8007748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c776:	2043      	movs	r0, #67	; 0x43
 801c778:	f7eb f802 	bl	8007780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c77c:	bf00      	nop
 801c77e:	3728      	adds	r7, #40	; 0x28
 801c780:	46bd      	mov	sp, r7
 801c782:	bd80      	pop	{r7, pc}
 801c784:	40023800 	.word	0x40023800
 801c788:	40020000 	.word	0x40020000

0801c78c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b082      	sub	sp, #8
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c79a:	4618      	mov	r0, r3
 801c79c:	f7f8 ff27 	bl	80155ee <USBH_LL_IncTimer>
}
 801c7a0:	bf00      	nop
 801c7a2:	3708      	adds	r7, #8
 801c7a4:	46bd      	mov	sp, r7
 801c7a6:	bd80      	pop	{r7, pc}

0801c7a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c7a8:	b580      	push	{r7, lr}
 801c7aa:	b082      	sub	sp, #8
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	f7f8 ff6b 	bl	8015692 <USBH_LL_Connect>
}
 801c7bc:	bf00      	nop
 801c7be:	3708      	adds	r7, #8
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	bd80      	pop	{r7, pc}

0801c7c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c7c4:	b580      	push	{r7, lr}
 801c7c6:	b082      	sub	sp, #8
 801c7c8:	af00      	add	r7, sp, #0
 801c7ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c7d2:	4618      	mov	r0, r3
 801c7d4:	f7f8 ff80 	bl	80156d8 <USBH_LL_Disconnect>
}
 801c7d8:	bf00      	nop
 801c7da:	3708      	adds	r7, #8
 801c7dc:	46bd      	mov	sp, r7
 801c7de:	bd80      	pop	{r7, pc}

0801c7e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801c7e0:	b580      	push	{r7, lr}
 801c7e2:	b082      	sub	sp, #8
 801c7e4:	af00      	add	r7, sp, #0
 801c7e6:	6078      	str	r0, [r7, #4]
 801c7e8:	460b      	mov	r3, r1
 801c7ea:	70fb      	strb	r3, [r7, #3]
 801c7ec:	4613      	mov	r3, r2
 801c7ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	f7f8 ffb5 	bl	8015766 <USBH_LL_NotifyURBChange>
#endif
}
 801c7fc:	bf00      	nop
 801c7fe:	3708      	adds	r7, #8
 801c800:	46bd      	mov	sp, r7
 801c802:	bd80      	pop	{r7, pc}

0801c804 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c804:	b580      	push	{r7, lr}
 801c806:	b082      	sub	sp, #8
 801c808:	af00      	add	r7, sp, #0
 801c80a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c812:	4618      	mov	r0, r3
 801c814:	f7f8 ff15 	bl	8015642 <USBH_LL_PortEnabled>
}
 801c818:	bf00      	nop
 801c81a:	3708      	adds	r7, #8
 801c81c:	46bd      	mov	sp, r7
 801c81e:	bd80      	pop	{r7, pc}

0801c820 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c820:	b580      	push	{r7, lr}
 801c822:	b082      	sub	sp, #8
 801c824:	af00      	add	r7, sp, #0
 801c826:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c82e:	4618      	mov	r0, r3
 801c830:	f7f8 ff21 	bl	8015676 <USBH_LL_PortDisabled>
}
 801c834:	bf00      	nop
 801c836:	3708      	adds	r7, #8
 801c838:	46bd      	mov	sp, r7
 801c83a:	bd80      	pop	{r7, pc}

0801c83c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801c83c:	b580      	push	{r7, lr}
 801c83e:	b082      	sub	sp, #8
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801c84a:	2b01      	cmp	r3, #1
 801c84c:	d12a      	bne.n	801c8a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801c84e:	4a18      	ldr	r2, [pc, #96]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	4a15      	ldr	r2, [pc, #84]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c85a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c85e:	4b14      	ldr	r3, [pc, #80]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c860:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801c864:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801c866:	4b12      	ldr	r3, [pc, #72]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c868:	2208      	movs	r2, #8
 801c86a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801c86c:	4b10      	ldr	r3, [pc, #64]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c86e:	2201      	movs	r2, #1
 801c870:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c872:	4b0f      	ldr	r3, [pc, #60]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c874:	2200      	movs	r2, #0
 801c876:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801c878:	4b0d      	ldr	r3, [pc, #52]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c87a:	2202      	movs	r2, #2
 801c87c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c87e:	4b0c      	ldr	r3, [pc, #48]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c880:	2200      	movs	r2, #0
 801c882:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801c884:	480a      	ldr	r0, [pc, #40]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c886:	f7ec ff0c 	bl	80096a2 <HAL_HCD_Init>
 801c88a:	4603      	mov	r3, r0
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d001      	beq.n	801c894 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801c890:	f7e5 f932 	bl	8001af8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801c894:	4806      	ldr	r0, [pc, #24]	; (801c8b0 <USBH_LL_Init+0x74>)
 801c896:	f7ed faf0 	bl	8009e7a <HAL_HCD_GetCurrentFrame>
 801c89a:	4603      	mov	r3, r0
 801c89c:	4619      	mov	r1, r3
 801c89e:	6878      	ldr	r0, [r7, #4]
 801c8a0:	f7f8 fe96 	bl	80155d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801c8a4:	2300      	movs	r3, #0
}
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	3708      	adds	r7, #8
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bd80      	pop	{r7, pc}
 801c8ae:	bf00      	nop
 801c8b0:	2001ba58 	.word	0x2001ba58

0801c8b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801c8b4:	b580      	push	{r7, lr}
 801c8b6:	b084      	sub	sp, #16
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8bc:	2300      	movs	r3, #0
 801c8be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f7ed fa5f 	bl	8009d8e <HAL_HCD_Start>
 801c8d0:	4603      	mov	r3, r0
 801c8d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c8d4:	7bfb      	ldrb	r3, [r7, #15]
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	f000 f95c 	bl	801cb94 <USBH_Get_USB_Status>
 801c8dc:	4603      	mov	r3, r0
 801c8de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	3710      	adds	r7, #16
 801c8e6:	46bd      	mov	sp, r7
 801c8e8:	bd80      	pop	{r7, pc}

0801c8ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801c8ea:	b580      	push	{r7, lr}
 801c8ec:	b084      	sub	sp, #16
 801c8ee:	af00      	add	r7, sp, #0
 801c8f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c900:	4618      	mov	r0, r3
 801c902:	f7ed fa67 	bl	8009dd4 <HAL_HCD_Stop>
 801c906:	4603      	mov	r3, r0
 801c908:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c90a:	7bfb      	ldrb	r3, [r7, #15]
 801c90c:	4618      	mov	r0, r3
 801c90e:	f000 f941 	bl	801cb94 <USBH_Get_USB_Status>
 801c912:	4603      	mov	r3, r0
 801c914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c916:	7bbb      	ldrb	r3, [r7, #14]
}
 801c918:	4618      	mov	r0, r3
 801c91a:	3710      	adds	r7, #16
 801c91c:	46bd      	mov	sp, r7
 801c91e:	bd80      	pop	{r7, pc}

0801c920 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	b084      	sub	sp, #16
 801c924:	af00      	add	r7, sp, #0
 801c926:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801c928:	2301      	movs	r3, #1
 801c92a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c932:	4618      	mov	r0, r3
 801c934:	f7ed faaf 	bl	8009e96 <HAL_HCD_GetCurrentSpeed>
 801c938:	4603      	mov	r3, r0
 801c93a:	2b02      	cmp	r3, #2
 801c93c:	d00c      	beq.n	801c958 <USBH_LL_GetSpeed+0x38>
 801c93e:	2b02      	cmp	r3, #2
 801c940:	d80d      	bhi.n	801c95e <USBH_LL_GetSpeed+0x3e>
 801c942:	2b00      	cmp	r3, #0
 801c944:	d002      	beq.n	801c94c <USBH_LL_GetSpeed+0x2c>
 801c946:	2b01      	cmp	r3, #1
 801c948:	d003      	beq.n	801c952 <USBH_LL_GetSpeed+0x32>
 801c94a:	e008      	b.n	801c95e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801c94c:	2300      	movs	r3, #0
 801c94e:	73fb      	strb	r3, [r7, #15]
    break;
 801c950:	e008      	b.n	801c964 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801c952:	2301      	movs	r3, #1
 801c954:	73fb      	strb	r3, [r7, #15]
    break;
 801c956:	e005      	b.n	801c964 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801c958:	2302      	movs	r3, #2
 801c95a:	73fb      	strb	r3, [r7, #15]
    break;
 801c95c:	e002      	b.n	801c964 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801c95e:	2301      	movs	r3, #1
 801c960:	73fb      	strb	r3, [r7, #15]
    break;
 801c962:	bf00      	nop
  }
  return  speed;
 801c964:	7bfb      	ldrb	r3, [r7, #15]
}
 801c966:	4618      	mov	r0, r3
 801c968:	3710      	adds	r7, #16
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}

0801c96e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801c96e:	b580      	push	{r7, lr}
 801c970:	b084      	sub	sp, #16
 801c972:	af00      	add	r7, sp, #0
 801c974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c976:	2300      	movs	r3, #0
 801c978:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c97a:	2300      	movs	r3, #0
 801c97c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c984:	4618      	mov	r0, r3
 801c986:	f7ed fa42 	bl	8009e0e <HAL_HCD_ResetPort>
 801c98a:	4603      	mov	r3, r0
 801c98c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c98e:	7bfb      	ldrb	r3, [r7, #15]
 801c990:	4618      	mov	r0, r3
 801c992:	f000 f8ff 	bl	801cb94 <USBH_Get_USB_Status>
 801c996:	4603      	mov	r3, r0
 801c998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c99a:	7bbb      	ldrb	r3, [r7, #14]
}
 801c99c:	4618      	mov	r0, r3
 801c99e:	3710      	adds	r7, #16
 801c9a0:	46bd      	mov	sp, r7
 801c9a2:	bd80      	pop	{r7, pc}

0801c9a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c9a4:	b580      	push	{r7, lr}
 801c9a6:	b082      	sub	sp, #8
 801c9a8:	af00      	add	r7, sp, #0
 801c9aa:	6078      	str	r0, [r7, #4]
 801c9ac:	460b      	mov	r3, r1
 801c9ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c9b6:	78fa      	ldrb	r2, [r7, #3]
 801c9b8:	4611      	mov	r1, r2
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	f7ed fa49 	bl	8009e52 <HAL_HCD_HC_GetXferCount>
 801c9c0:	4603      	mov	r3, r0
}
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	3708      	adds	r7, #8
 801c9c6:	46bd      	mov	sp, r7
 801c9c8:	bd80      	pop	{r7, pc}

0801c9ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801c9ca:	b590      	push	{r4, r7, lr}
 801c9cc:	b089      	sub	sp, #36	; 0x24
 801c9ce:	af04      	add	r7, sp, #16
 801c9d0:	6078      	str	r0, [r7, #4]
 801c9d2:	4608      	mov	r0, r1
 801c9d4:	4611      	mov	r1, r2
 801c9d6:	461a      	mov	r2, r3
 801c9d8:	4603      	mov	r3, r0
 801c9da:	70fb      	strb	r3, [r7, #3]
 801c9dc:	460b      	mov	r3, r1
 801c9de:	70bb      	strb	r3, [r7, #2]
 801c9e0:	4613      	mov	r3, r2
 801c9e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9e4:	2300      	movs	r3, #0
 801c9e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c9e8:	2300      	movs	r3, #0
 801c9ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801c9f2:	787c      	ldrb	r4, [r7, #1]
 801c9f4:	78ba      	ldrb	r2, [r7, #2]
 801c9f6:	78f9      	ldrb	r1, [r7, #3]
 801c9f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c9fa:	9302      	str	r3, [sp, #8]
 801c9fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ca00:	9301      	str	r3, [sp, #4]
 801ca02:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ca06:	9300      	str	r3, [sp, #0]
 801ca08:	4623      	mov	r3, r4
 801ca0a:	f7ec feac 	bl	8009766 <HAL_HCD_HC_Init>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801ca12:	7bfb      	ldrb	r3, [r7, #15]
 801ca14:	4618      	mov	r0, r3
 801ca16:	f000 f8bd 	bl	801cb94 <USBH_Get_USB_Status>
 801ca1a:	4603      	mov	r3, r0
 801ca1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca1e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca20:	4618      	mov	r0, r3
 801ca22:	3714      	adds	r7, #20
 801ca24:	46bd      	mov	sp, r7
 801ca26:	bd90      	pop	{r4, r7, pc}

0801ca28 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b084      	sub	sp, #16
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
 801ca30:	460b      	mov	r3, r1
 801ca32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca34:	2300      	movs	r3, #0
 801ca36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ca38:	2300      	movs	r3, #0
 801ca3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ca42:	78fa      	ldrb	r2, [r7, #3]
 801ca44:	4611      	mov	r1, r2
 801ca46:	4618      	mov	r0, r3
 801ca48:	f7ec ff1c 	bl	8009884 <HAL_HCD_HC_Halt>
 801ca4c:	4603      	mov	r3, r0
 801ca4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ca50:	7bfb      	ldrb	r3, [r7, #15]
 801ca52:	4618      	mov	r0, r3
 801ca54:	f000 f89e 	bl	801cb94 <USBH_Get_USB_Status>
 801ca58:	4603      	mov	r3, r0
 801ca5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca5c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca5e:	4618      	mov	r0, r3
 801ca60:	3710      	adds	r7, #16
 801ca62:	46bd      	mov	sp, r7
 801ca64:	bd80      	pop	{r7, pc}

0801ca66 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801ca66:	b590      	push	{r4, r7, lr}
 801ca68:	b089      	sub	sp, #36	; 0x24
 801ca6a:	af04      	add	r7, sp, #16
 801ca6c:	6078      	str	r0, [r7, #4]
 801ca6e:	4608      	mov	r0, r1
 801ca70:	4611      	mov	r1, r2
 801ca72:	461a      	mov	r2, r3
 801ca74:	4603      	mov	r3, r0
 801ca76:	70fb      	strb	r3, [r7, #3]
 801ca78:	460b      	mov	r3, r1
 801ca7a:	70bb      	strb	r3, [r7, #2]
 801ca7c:	4613      	mov	r3, r2
 801ca7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca80:	2300      	movs	r3, #0
 801ca82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ca84:	2300      	movs	r3, #0
 801ca86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801ca8e:	787c      	ldrb	r4, [r7, #1]
 801ca90:	78ba      	ldrb	r2, [r7, #2]
 801ca92:	78f9      	ldrb	r1, [r7, #3]
 801ca94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ca98:	9303      	str	r3, [sp, #12]
 801ca9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ca9c:	9302      	str	r3, [sp, #8]
 801ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caa0:	9301      	str	r3, [sp, #4]
 801caa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801caa6:	9300      	str	r3, [sp, #0]
 801caa8:	4623      	mov	r3, r4
 801caaa:	f7ec ff0f 	bl	80098cc <HAL_HCD_HC_SubmitRequest>
 801caae:	4603      	mov	r3, r0
 801cab0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801cab2:	7bfb      	ldrb	r3, [r7, #15]
 801cab4:	4618      	mov	r0, r3
 801cab6:	f000 f86d 	bl	801cb94 <USBH_Get_USB_Status>
 801caba:	4603      	mov	r3, r0
 801cabc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cabe:	7bbb      	ldrb	r3, [r7, #14]
}
 801cac0:	4618      	mov	r0, r3
 801cac2:	3714      	adds	r7, #20
 801cac4:	46bd      	mov	sp, r7
 801cac6:	bd90      	pop	{r4, r7, pc}

0801cac8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801cac8:	b580      	push	{r7, lr}
 801caca:	b082      	sub	sp, #8
 801cacc:	af00      	add	r7, sp, #0
 801cace:	6078      	str	r0, [r7, #4]
 801cad0:	460b      	mov	r3, r1
 801cad2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801cada:	78fa      	ldrb	r2, [r7, #3]
 801cadc:	4611      	mov	r1, r2
 801cade:	4618      	mov	r0, r3
 801cae0:	f7ed f9a3 	bl	8009e2a <HAL_HCD_HC_GetURBState>
 801cae4:	4603      	mov	r3, r0
}
 801cae6:	4618      	mov	r0, r3
 801cae8:	3708      	adds	r7, #8
 801caea:	46bd      	mov	sp, r7
 801caec:	bd80      	pop	{r7, pc}

0801caee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801caee:	b580      	push	{r7, lr}
 801caf0:	b082      	sub	sp, #8
 801caf2:	af00      	add	r7, sp, #0
 801caf4:	6078      	str	r0, [r7, #4]
 801caf6:	460b      	mov	r3, r1
 801caf8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801cb00:	2b01      	cmp	r3, #1
 801cb02:	d103      	bne.n	801cb0c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801cb04:	78fb      	ldrb	r3, [r7, #3]
 801cb06:	4618      	mov	r0, r3
 801cb08:	f000 f870 	bl	801cbec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801cb0c:	20c8      	movs	r0, #200	; 0xc8
 801cb0e:	f7ea faab 	bl	8007068 <HAL_Delay>
  return USBH_OK;
 801cb12:	2300      	movs	r3, #0
}
 801cb14:	4618      	mov	r0, r3
 801cb16:	3708      	adds	r7, #8
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	bd80      	pop	{r7, pc}

0801cb1c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801cb1c:	b480      	push	{r7}
 801cb1e:	b085      	sub	sp, #20
 801cb20:	af00      	add	r7, sp, #0
 801cb22:	6078      	str	r0, [r7, #4]
 801cb24:	460b      	mov	r3, r1
 801cb26:	70fb      	strb	r3, [r7, #3]
 801cb28:	4613      	mov	r3, r2
 801cb2a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801cb32:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801cb34:	78fb      	ldrb	r3, [r7, #3]
 801cb36:	68fa      	ldr	r2, [r7, #12]
 801cb38:	212c      	movs	r1, #44	; 0x2c
 801cb3a:	fb01 f303 	mul.w	r3, r1, r3
 801cb3e:	4413      	add	r3, r2
 801cb40:	333b      	adds	r3, #59	; 0x3b
 801cb42:	781b      	ldrb	r3, [r3, #0]
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d009      	beq.n	801cb5c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801cb48:	78fb      	ldrb	r3, [r7, #3]
 801cb4a:	68fa      	ldr	r2, [r7, #12]
 801cb4c:	212c      	movs	r1, #44	; 0x2c
 801cb4e:	fb01 f303 	mul.w	r3, r1, r3
 801cb52:	4413      	add	r3, r2
 801cb54:	3354      	adds	r3, #84	; 0x54
 801cb56:	78ba      	ldrb	r2, [r7, #2]
 801cb58:	701a      	strb	r2, [r3, #0]
 801cb5a:	e008      	b.n	801cb6e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801cb5c:	78fb      	ldrb	r3, [r7, #3]
 801cb5e:	68fa      	ldr	r2, [r7, #12]
 801cb60:	212c      	movs	r1, #44	; 0x2c
 801cb62:	fb01 f303 	mul.w	r3, r1, r3
 801cb66:	4413      	add	r3, r2
 801cb68:	3355      	adds	r3, #85	; 0x55
 801cb6a:	78ba      	ldrb	r2, [r7, #2]
 801cb6c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801cb6e:	2300      	movs	r3, #0
}
 801cb70:	4618      	mov	r0, r3
 801cb72:	3714      	adds	r7, #20
 801cb74:	46bd      	mov	sp, r7
 801cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb7a:	4770      	bx	lr

0801cb7c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b082      	sub	sp, #8
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801cb84:	6878      	ldr	r0, [r7, #4]
 801cb86:	f7ea fa6f 	bl	8007068 <HAL_Delay>
}
 801cb8a:	bf00      	nop
 801cb8c:	3708      	adds	r7, #8
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	bd80      	pop	{r7, pc}
	...

0801cb94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cb94:	b480      	push	{r7}
 801cb96:	b085      	sub	sp, #20
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801cb9e:	2300      	movs	r3, #0
 801cba0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801cba2:	79fb      	ldrb	r3, [r7, #7]
 801cba4:	2b03      	cmp	r3, #3
 801cba6:	d817      	bhi.n	801cbd8 <USBH_Get_USB_Status+0x44>
 801cba8:	a201      	add	r2, pc, #4	; (adr r2, 801cbb0 <USBH_Get_USB_Status+0x1c>)
 801cbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbae:	bf00      	nop
 801cbb0:	0801cbc1 	.word	0x0801cbc1
 801cbb4:	0801cbc7 	.word	0x0801cbc7
 801cbb8:	0801cbcd 	.word	0x0801cbcd
 801cbbc:	0801cbd3 	.word	0x0801cbd3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	73fb      	strb	r3, [r7, #15]
    break;
 801cbc4:	e00b      	b.n	801cbde <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801cbc6:	2302      	movs	r3, #2
 801cbc8:	73fb      	strb	r3, [r7, #15]
    break;
 801cbca:	e008      	b.n	801cbde <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801cbcc:	2301      	movs	r3, #1
 801cbce:	73fb      	strb	r3, [r7, #15]
    break;
 801cbd0:	e005      	b.n	801cbde <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801cbd2:	2302      	movs	r3, #2
 801cbd4:	73fb      	strb	r3, [r7, #15]
    break;
 801cbd6:	e002      	b.n	801cbde <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801cbd8:	2302      	movs	r3, #2
 801cbda:	73fb      	strb	r3, [r7, #15]
    break;
 801cbdc:	bf00      	nop
  }
  return usb_status;
 801cbde:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3714      	adds	r7, #20
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbea:	4770      	bx	lr

0801cbec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b084      	sub	sp, #16
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801cbf6:	79fb      	ldrb	r3, [r7, #7]
 801cbf8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801cbfa:	79fb      	ldrb	r3, [r7, #7]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d102      	bne.n	801cc06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801cc00:	2300      	movs	r3, #0
 801cc02:	73fb      	strb	r3, [r7, #15]
 801cc04:	e001      	b.n	801cc0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801cc06:	2301      	movs	r3, #1
 801cc08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801cc0a:	7bfb      	ldrb	r3, [r7, #15]
 801cc0c:	461a      	mov	r2, r3
 801cc0e:	2120      	movs	r1, #32
 801cc10:	4803      	ldr	r0, [pc, #12]	; (801cc20 <MX_DriverVbusFS+0x34>)
 801cc12:	f7ec fd2d 	bl	8009670 <HAL_GPIO_WritePin>
}
 801cc16:	bf00      	nop
 801cc18:	3710      	adds	r7, #16
 801cc1a:	46bd      	mov	sp, r7
 801cc1c:	bd80      	pop	{r7, pc}
 801cc1e:	bf00      	nop
 801cc20:	40020c00 	.word	0x40020c00

0801cc24 <__errno>:
 801cc24:	4b01      	ldr	r3, [pc, #4]	; (801cc2c <__errno+0x8>)
 801cc26:	6818      	ldr	r0, [r3, #0]
 801cc28:	4770      	bx	lr
 801cc2a:	bf00      	nop
 801cc2c:	20000080 	.word	0x20000080

0801cc30 <__libc_init_array>:
 801cc30:	b570      	push	{r4, r5, r6, lr}
 801cc32:	4d0d      	ldr	r5, [pc, #52]	; (801cc68 <__libc_init_array+0x38>)
 801cc34:	4c0d      	ldr	r4, [pc, #52]	; (801cc6c <__libc_init_array+0x3c>)
 801cc36:	1b64      	subs	r4, r4, r5
 801cc38:	10a4      	asrs	r4, r4, #2
 801cc3a:	2600      	movs	r6, #0
 801cc3c:	42a6      	cmp	r6, r4
 801cc3e:	d109      	bne.n	801cc54 <__libc_init_array+0x24>
 801cc40:	4d0b      	ldr	r5, [pc, #44]	; (801cc70 <__libc_init_array+0x40>)
 801cc42:	4c0c      	ldr	r4, [pc, #48]	; (801cc74 <__libc_init_array+0x44>)
 801cc44:	f000 fd00 	bl	801d648 <_init>
 801cc48:	1b64      	subs	r4, r4, r5
 801cc4a:	10a4      	asrs	r4, r4, #2
 801cc4c:	2600      	movs	r6, #0
 801cc4e:	42a6      	cmp	r6, r4
 801cc50:	d105      	bne.n	801cc5e <__libc_init_array+0x2e>
 801cc52:	bd70      	pop	{r4, r5, r6, pc}
 801cc54:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc58:	4798      	blx	r3
 801cc5a:	3601      	adds	r6, #1
 801cc5c:	e7ee      	b.n	801cc3c <__libc_init_array+0xc>
 801cc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc62:	4798      	blx	r3
 801cc64:	3601      	adds	r6, #1
 801cc66:	e7f2      	b.n	801cc4e <__libc_init_array+0x1e>
 801cc68:	0801f494 	.word	0x0801f494
 801cc6c:	0801f494 	.word	0x0801f494
 801cc70:	0801f494 	.word	0x0801f494
 801cc74:	0801f498 	.word	0x0801f498

0801cc78 <malloc>:
 801cc78:	4b02      	ldr	r3, [pc, #8]	; (801cc84 <malloc+0xc>)
 801cc7a:	4601      	mov	r1, r0
 801cc7c:	6818      	ldr	r0, [r3, #0]
 801cc7e:	f000 b88d 	b.w	801cd9c <_malloc_r>
 801cc82:	bf00      	nop
 801cc84:	20000080 	.word	0x20000080

0801cc88 <free>:
 801cc88:	4b02      	ldr	r3, [pc, #8]	; (801cc94 <free+0xc>)
 801cc8a:	4601      	mov	r1, r0
 801cc8c:	6818      	ldr	r0, [r3, #0]
 801cc8e:	f000 b819 	b.w	801ccc4 <_free_r>
 801cc92:	bf00      	nop
 801cc94:	20000080 	.word	0x20000080

0801cc98 <memcpy>:
 801cc98:	440a      	add	r2, r1
 801cc9a:	4291      	cmp	r1, r2
 801cc9c:	f100 33ff 	add.w	r3, r0, #4294967295
 801cca0:	d100      	bne.n	801cca4 <memcpy+0xc>
 801cca2:	4770      	bx	lr
 801cca4:	b510      	push	{r4, lr}
 801cca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ccaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ccae:	4291      	cmp	r1, r2
 801ccb0:	d1f9      	bne.n	801cca6 <memcpy+0xe>
 801ccb2:	bd10      	pop	{r4, pc}

0801ccb4 <memset>:
 801ccb4:	4402      	add	r2, r0
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	4293      	cmp	r3, r2
 801ccba:	d100      	bne.n	801ccbe <memset+0xa>
 801ccbc:	4770      	bx	lr
 801ccbe:	f803 1b01 	strb.w	r1, [r3], #1
 801ccc2:	e7f9      	b.n	801ccb8 <memset+0x4>

0801ccc4 <_free_r>:
 801ccc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ccc6:	2900      	cmp	r1, #0
 801ccc8:	d044      	beq.n	801cd54 <_free_r+0x90>
 801ccca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ccce:	9001      	str	r0, [sp, #4]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	f1a1 0404 	sub.w	r4, r1, #4
 801ccd6:	bfb8      	it	lt
 801ccd8:	18e4      	addlt	r4, r4, r3
 801ccda:	f000 f965 	bl	801cfa8 <__malloc_lock>
 801ccde:	4a1e      	ldr	r2, [pc, #120]	; (801cd58 <_free_r+0x94>)
 801cce0:	9801      	ldr	r0, [sp, #4]
 801cce2:	6813      	ldr	r3, [r2, #0]
 801cce4:	b933      	cbnz	r3, 801ccf4 <_free_r+0x30>
 801cce6:	6063      	str	r3, [r4, #4]
 801cce8:	6014      	str	r4, [r2, #0]
 801ccea:	b003      	add	sp, #12
 801ccec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ccf0:	f000 b960 	b.w	801cfb4 <__malloc_unlock>
 801ccf4:	42a3      	cmp	r3, r4
 801ccf6:	d908      	bls.n	801cd0a <_free_r+0x46>
 801ccf8:	6825      	ldr	r5, [r4, #0]
 801ccfa:	1961      	adds	r1, r4, r5
 801ccfc:	428b      	cmp	r3, r1
 801ccfe:	bf01      	itttt	eq
 801cd00:	6819      	ldreq	r1, [r3, #0]
 801cd02:	685b      	ldreq	r3, [r3, #4]
 801cd04:	1949      	addeq	r1, r1, r5
 801cd06:	6021      	streq	r1, [r4, #0]
 801cd08:	e7ed      	b.n	801cce6 <_free_r+0x22>
 801cd0a:	461a      	mov	r2, r3
 801cd0c:	685b      	ldr	r3, [r3, #4]
 801cd0e:	b10b      	cbz	r3, 801cd14 <_free_r+0x50>
 801cd10:	42a3      	cmp	r3, r4
 801cd12:	d9fa      	bls.n	801cd0a <_free_r+0x46>
 801cd14:	6811      	ldr	r1, [r2, #0]
 801cd16:	1855      	adds	r5, r2, r1
 801cd18:	42a5      	cmp	r5, r4
 801cd1a:	d10b      	bne.n	801cd34 <_free_r+0x70>
 801cd1c:	6824      	ldr	r4, [r4, #0]
 801cd1e:	4421      	add	r1, r4
 801cd20:	1854      	adds	r4, r2, r1
 801cd22:	42a3      	cmp	r3, r4
 801cd24:	6011      	str	r1, [r2, #0]
 801cd26:	d1e0      	bne.n	801ccea <_free_r+0x26>
 801cd28:	681c      	ldr	r4, [r3, #0]
 801cd2a:	685b      	ldr	r3, [r3, #4]
 801cd2c:	6053      	str	r3, [r2, #4]
 801cd2e:	4421      	add	r1, r4
 801cd30:	6011      	str	r1, [r2, #0]
 801cd32:	e7da      	b.n	801ccea <_free_r+0x26>
 801cd34:	d902      	bls.n	801cd3c <_free_r+0x78>
 801cd36:	230c      	movs	r3, #12
 801cd38:	6003      	str	r3, [r0, #0]
 801cd3a:	e7d6      	b.n	801ccea <_free_r+0x26>
 801cd3c:	6825      	ldr	r5, [r4, #0]
 801cd3e:	1961      	adds	r1, r4, r5
 801cd40:	428b      	cmp	r3, r1
 801cd42:	bf04      	itt	eq
 801cd44:	6819      	ldreq	r1, [r3, #0]
 801cd46:	685b      	ldreq	r3, [r3, #4]
 801cd48:	6063      	str	r3, [r4, #4]
 801cd4a:	bf04      	itt	eq
 801cd4c:	1949      	addeq	r1, r1, r5
 801cd4e:	6021      	streq	r1, [r4, #0]
 801cd50:	6054      	str	r4, [r2, #4]
 801cd52:	e7ca      	b.n	801ccea <_free_r+0x26>
 801cd54:	b003      	add	sp, #12
 801cd56:	bd30      	pop	{r4, r5, pc}
 801cd58:	2001bd5c 	.word	0x2001bd5c

0801cd5c <sbrk_aligned>:
 801cd5c:	b570      	push	{r4, r5, r6, lr}
 801cd5e:	4e0e      	ldr	r6, [pc, #56]	; (801cd98 <sbrk_aligned+0x3c>)
 801cd60:	460c      	mov	r4, r1
 801cd62:	6831      	ldr	r1, [r6, #0]
 801cd64:	4605      	mov	r5, r0
 801cd66:	b911      	cbnz	r1, 801cd6e <sbrk_aligned+0x12>
 801cd68:	f000 f88c 	bl	801ce84 <_sbrk_r>
 801cd6c:	6030      	str	r0, [r6, #0]
 801cd6e:	4621      	mov	r1, r4
 801cd70:	4628      	mov	r0, r5
 801cd72:	f000 f887 	bl	801ce84 <_sbrk_r>
 801cd76:	1c43      	adds	r3, r0, #1
 801cd78:	d00a      	beq.n	801cd90 <sbrk_aligned+0x34>
 801cd7a:	1cc4      	adds	r4, r0, #3
 801cd7c:	f024 0403 	bic.w	r4, r4, #3
 801cd80:	42a0      	cmp	r0, r4
 801cd82:	d007      	beq.n	801cd94 <sbrk_aligned+0x38>
 801cd84:	1a21      	subs	r1, r4, r0
 801cd86:	4628      	mov	r0, r5
 801cd88:	f000 f87c 	bl	801ce84 <_sbrk_r>
 801cd8c:	3001      	adds	r0, #1
 801cd8e:	d101      	bne.n	801cd94 <sbrk_aligned+0x38>
 801cd90:	f04f 34ff 	mov.w	r4, #4294967295
 801cd94:	4620      	mov	r0, r4
 801cd96:	bd70      	pop	{r4, r5, r6, pc}
 801cd98:	2001bd60 	.word	0x2001bd60

0801cd9c <_malloc_r>:
 801cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cda0:	1ccd      	adds	r5, r1, #3
 801cda2:	f025 0503 	bic.w	r5, r5, #3
 801cda6:	3508      	adds	r5, #8
 801cda8:	2d0c      	cmp	r5, #12
 801cdaa:	bf38      	it	cc
 801cdac:	250c      	movcc	r5, #12
 801cdae:	2d00      	cmp	r5, #0
 801cdb0:	4607      	mov	r7, r0
 801cdb2:	db01      	blt.n	801cdb8 <_malloc_r+0x1c>
 801cdb4:	42a9      	cmp	r1, r5
 801cdb6:	d905      	bls.n	801cdc4 <_malloc_r+0x28>
 801cdb8:	230c      	movs	r3, #12
 801cdba:	603b      	str	r3, [r7, #0]
 801cdbc:	2600      	movs	r6, #0
 801cdbe:	4630      	mov	r0, r6
 801cdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdc4:	4e2e      	ldr	r6, [pc, #184]	; (801ce80 <_malloc_r+0xe4>)
 801cdc6:	f000 f8ef 	bl	801cfa8 <__malloc_lock>
 801cdca:	6833      	ldr	r3, [r6, #0]
 801cdcc:	461c      	mov	r4, r3
 801cdce:	bb34      	cbnz	r4, 801ce1e <_malloc_r+0x82>
 801cdd0:	4629      	mov	r1, r5
 801cdd2:	4638      	mov	r0, r7
 801cdd4:	f7ff ffc2 	bl	801cd5c <sbrk_aligned>
 801cdd8:	1c43      	adds	r3, r0, #1
 801cdda:	4604      	mov	r4, r0
 801cddc:	d14d      	bne.n	801ce7a <_malloc_r+0xde>
 801cdde:	6834      	ldr	r4, [r6, #0]
 801cde0:	4626      	mov	r6, r4
 801cde2:	2e00      	cmp	r6, #0
 801cde4:	d140      	bne.n	801ce68 <_malloc_r+0xcc>
 801cde6:	6823      	ldr	r3, [r4, #0]
 801cde8:	4631      	mov	r1, r6
 801cdea:	4638      	mov	r0, r7
 801cdec:	eb04 0803 	add.w	r8, r4, r3
 801cdf0:	f000 f848 	bl	801ce84 <_sbrk_r>
 801cdf4:	4580      	cmp	r8, r0
 801cdf6:	d13a      	bne.n	801ce6e <_malloc_r+0xd2>
 801cdf8:	6821      	ldr	r1, [r4, #0]
 801cdfa:	3503      	adds	r5, #3
 801cdfc:	1a6d      	subs	r5, r5, r1
 801cdfe:	f025 0503 	bic.w	r5, r5, #3
 801ce02:	3508      	adds	r5, #8
 801ce04:	2d0c      	cmp	r5, #12
 801ce06:	bf38      	it	cc
 801ce08:	250c      	movcc	r5, #12
 801ce0a:	4629      	mov	r1, r5
 801ce0c:	4638      	mov	r0, r7
 801ce0e:	f7ff ffa5 	bl	801cd5c <sbrk_aligned>
 801ce12:	3001      	adds	r0, #1
 801ce14:	d02b      	beq.n	801ce6e <_malloc_r+0xd2>
 801ce16:	6823      	ldr	r3, [r4, #0]
 801ce18:	442b      	add	r3, r5
 801ce1a:	6023      	str	r3, [r4, #0]
 801ce1c:	e00e      	b.n	801ce3c <_malloc_r+0xa0>
 801ce1e:	6822      	ldr	r2, [r4, #0]
 801ce20:	1b52      	subs	r2, r2, r5
 801ce22:	d41e      	bmi.n	801ce62 <_malloc_r+0xc6>
 801ce24:	2a0b      	cmp	r2, #11
 801ce26:	d916      	bls.n	801ce56 <_malloc_r+0xba>
 801ce28:	1961      	adds	r1, r4, r5
 801ce2a:	42a3      	cmp	r3, r4
 801ce2c:	6025      	str	r5, [r4, #0]
 801ce2e:	bf18      	it	ne
 801ce30:	6059      	strne	r1, [r3, #4]
 801ce32:	6863      	ldr	r3, [r4, #4]
 801ce34:	bf08      	it	eq
 801ce36:	6031      	streq	r1, [r6, #0]
 801ce38:	5162      	str	r2, [r4, r5]
 801ce3a:	604b      	str	r3, [r1, #4]
 801ce3c:	4638      	mov	r0, r7
 801ce3e:	f104 060b 	add.w	r6, r4, #11
 801ce42:	f000 f8b7 	bl	801cfb4 <__malloc_unlock>
 801ce46:	f026 0607 	bic.w	r6, r6, #7
 801ce4a:	1d23      	adds	r3, r4, #4
 801ce4c:	1af2      	subs	r2, r6, r3
 801ce4e:	d0b6      	beq.n	801cdbe <_malloc_r+0x22>
 801ce50:	1b9b      	subs	r3, r3, r6
 801ce52:	50a3      	str	r3, [r4, r2]
 801ce54:	e7b3      	b.n	801cdbe <_malloc_r+0x22>
 801ce56:	6862      	ldr	r2, [r4, #4]
 801ce58:	42a3      	cmp	r3, r4
 801ce5a:	bf0c      	ite	eq
 801ce5c:	6032      	streq	r2, [r6, #0]
 801ce5e:	605a      	strne	r2, [r3, #4]
 801ce60:	e7ec      	b.n	801ce3c <_malloc_r+0xa0>
 801ce62:	4623      	mov	r3, r4
 801ce64:	6864      	ldr	r4, [r4, #4]
 801ce66:	e7b2      	b.n	801cdce <_malloc_r+0x32>
 801ce68:	4634      	mov	r4, r6
 801ce6a:	6876      	ldr	r6, [r6, #4]
 801ce6c:	e7b9      	b.n	801cde2 <_malloc_r+0x46>
 801ce6e:	230c      	movs	r3, #12
 801ce70:	603b      	str	r3, [r7, #0]
 801ce72:	4638      	mov	r0, r7
 801ce74:	f000 f89e 	bl	801cfb4 <__malloc_unlock>
 801ce78:	e7a1      	b.n	801cdbe <_malloc_r+0x22>
 801ce7a:	6025      	str	r5, [r4, #0]
 801ce7c:	e7de      	b.n	801ce3c <_malloc_r+0xa0>
 801ce7e:	bf00      	nop
 801ce80:	2001bd5c 	.word	0x2001bd5c

0801ce84 <_sbrk_r>:
 801ce84:	b538      	push	{r3, r4, r5, lr}
 801ce86:	4d06      	ldr	r5, [pc, #24]	; (801cea0 <_sbrk_r+0x1c>)
 801ce88:	2300      	movs	r3, #0
 801ce8a:	4604      	mov	r4, r0
 801ce8c:	4608      	mov	r0, r1
 801ce8e:	602b      	str	r3, [r5, #0]
 801ce90:	f7e6 ff72 	bl	8003d78 <_sbrk>
 801ce94:	1c43      	adds	r3, r0, #1
 801ce96:	d102      	bne.n	801ce9e <_sbrk_r+0x1a>
 801ce98:	682b      	ldr	r3, [r5, #0]
 801ce9a:	b103      	cbz	r3, 801ce9e <_sbrk_r+0x1a>
 801ce9c:	6023      	str	r3, [r4, #0]
 801ce9e:	bd38      	pop	{r3, r4, r5, pc}
 801cea0:	2001bd64 	.word	0x2001bd64

0801cea4 <siprintf>:
 801cea4:	b40e      	push	{r1, r2, r3}
 801cea6:	b500      	push	{lr}
 801cea8:	b09c      	sub	sp, #112	; 0x70
 801ceaa:	ab1d      	add	r3, sp, #116	; 0x74
 801ceac:	9002      	str	r0, [sp, #8]
 801ceae:	9006      	str	r0, [sp, #24]
 801ceb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ceb4:	4809      	ldr	r0, [pc, #36]	; (801cedc <siprintf+0x38>)
 801ceb6:	9107      	str	r1, [sp, #28]
 801ceb8:	9104      	str	r1, [sp, #16]
 801ceba:	4909      	ldr	r1, [pc, #36]	; (801cee0 <siprintf+0x3c>)
 801cebc:	f853 2b04 	ldr.w	r2, [r3], #4
 801cec0:	9105      	str	r1, [sp, #20]
 801cec2:	6800      	ldr	r0, [r0, #0]
 801cec4:	9301      	str	r3, [sp, #4]
 801cec6:	a902      	add	r1, sp, #8
 801cec8:	f000 f8d6 	bl	801d078 <_svfiprintf_r>
 801cecc:	9b02      	ldr	r3, [sp, #8]
 801cece:	2200      	movs	r2, #0
 801ced0:	701a      	strb	r2, [r3, #0]
 801ced2:	b01c      	add	sp, #112	; 0x70
 801ced4:	f85d eb04 	ldr.w	lr, [sp], #4
 801ced8:	b003      	add	sp, #12
 801ceda:	4770      	bx	lr
 801cedc:	20000080 	.word	0x20000080
 801cee0:	ffff0208 	.word	0xffff0208

0801cee4 <strncpy>:
 801cee4:	b510      	push	{r4, lr}
 801cee6:	3901      	subs	r1, #1
 801cee8:	4603      	mov	r3, r0
 801ceea:	b132      	cbz	r2, 801cefa <strncpy+0x16>
 801ceec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cef0:	f803 4b01 	strb.w	r4, [r3], #1
 801cef4:	3a01      	subs	r2, #1
 801cef6:	2c00      	cmp	r4, #0
 801cef8:	d1f7      	bne.n	801ceea <strncpy+0x6>
 801cefa:	441a      	add	r2, r3
 801cefc:	2100      	movs	r1, #0
 801cefe:	4293      	cmp	r3, r2
 801cf00:	d100      	bne.n	801cf04 <strncpy+0x20>
 801cf02:	bd10      	pop	{r4, pc}
 801cf04:	f803 1b01 	strb.w	r1, [r3], #1
 801cf08:	e7f9      	b.n	801cefe <strncpy+0x1a>

0801cf0a <strstr>:
 801cf0a:	780a      	ldrb	r2, [r1, #0]
 801cf0c:	b570      	push	{r4, r5, r6, lr}
 801cf0e:	b96a      	cbnz	r2, 801cf2c <strstr+0x22>
 801cf10:	bd70      	pop	{r4, r5, r6, pc}
 801cf12:	429a      	cmp	r2, r3
 801cf14:	d109      	bne.n	801cf2a <strstr+0x20>
 801cf16:	460c      	mov	r4, r1
 801cf18:	4605      	mov	r5, r0
 801cf1a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d0f6      	beq.n	801cf10 <strstr+0x6>
 801cf22:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801cf26:	429e      	cmp	r6, r3
 801cf28:	d0f7      	beq.n	801cf1a <strstr+0x10>
 801cf2a:	3001      	adds	r0, #1
 801cf2c:	7803      	ldrb	r3, [r0, #0]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d1ef      	bne.n	801cf12 <strstr+0x8>
 801cf32:	4618      	mov	r0, r3
 801cf34:	e7ec      	b.n	801cf10 <strstr+0x6>

0801cf36 <_vsniprintf_r>:
 801cf36:	b530      	push	{r4, r5, lr}
 801cf38:	4614      	mov	r4, r2
 801cf3a:	2c00      	cmp	r4, #0
 801cf3c:	b09b      	sub	sp, #108	; 0x6c
 801cf3e:	4605      	mov	r5, r0
 801cf40:	461a      	mov	r2, r3
 801cf42:	da05      	bge.n	801cf50 <_vsniprintf_r+0x1a>
 801cf44:	238b      	movs	r3, #139	; 0x8b
 801cf46:	6003      	str	r3, [r0, #0]
 801cf48:	f04f 30ff 	mov.w	r0, #4294967295
 801cf4c:	b01b      	add	sp, #108	; 0x6c
 801cf4e:	bd30      	pop	{r4, r5, pc}
 801cf50:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cf54:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cf58:	bf14      	ite	ne
 801cf5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cf5e:	4623      	moveq	r3, r4
 801cf60:	9302      	str	r3, [sp, #8]
 801cf62:	9305      	str	r3, [sp, #20]
 801cf64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf68:	9100      	str	r1, [sp, #0]
 801cf6a:	9104      	str	r1, [sp, #16]
 801cf6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cf70:	4669      	mov	r1, sp
 801cf72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cf74:	f000 f880 	bl	801d078 <_svfiprintf_r>
 801cf78:	1c43      	adds	r3, r0, #1
 801cf7a:	bfbc      	itt	lt
 801cf7c:	238b      	movlt	r3, #139	; 0x8b
 801cf7e:	602b      	strlt	r3, [r5, #0]
 801cf80:	2c00      	cmp	r4, #0
 801cf82:	d0e3      	beq.n	801cf4c <_vsniprintf_r+0x16>
 801cf84:	9b00      	ldr	r3, [sp, #0]
 801cf86:	2200      	movs	r2, #0
 801cf88:	701a      	strb	r2, [r3, #0]
 801cf8a:	e7df      	b.n	801cf4c <_vsniprintf_r+0x16>

0801cf8c <vsniprintf>:
 801cf8c:	b507      	push	{r0, r1, r2, lr}
 801cf8e:	9300      	str	r3, [sp, #0]
 801cf90:	4613      	mov	r3, r2
 801cf92:	460a      	mov	r2, r1
 801cf94:	4601      	mov	r1, r0
 801cf96:	4803      	ldr	r0, [pc, #12]	; (801cfa4 <vsniprintf+0x18>)
 801cf98:	6800      	ldr	r0, [r0, #0]
 801cf9a:	f7ff ffcc 	bl	801cf36 <_vsniprintf_r>
 801cf9e:	b003      	add	sp, #12
 801cfa0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfa4:	20000080 	.word	0x20000080

0801cfa8 <__malloc_lock>:
 801cfa8:	4801      	ldr	r0, [pc, #4]	; (801cfb0 <__malloc_lock+0x8>)
 801cfaa:	f000 baf9 	b.w	801d5a0 <__retarget_lock_acquire_recursive>
 801cfae:	bf00      	nop
 801cfb0:	2001bd68 	.word	0x2001bd68

0801cfb4 <__malloc_unlock>:
 801cfb4:	4801      	ldr	r0, [pc, #4]	; (801cfbc <__malloc_unlock+0x8>)
 801cfb6:	f000 baf4 	b.w	801d5a2 <__retarget_lock_release_recursive>
 801cfba:	bf00      	nop
 801cfbc:	2001bd68 	.word	0x2001bd68

0801cfc0 <__ssputs_r>:
 801cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfc4:	688e      	ldr	r6, [r1, #8]
 801cfc6:	429e      	cmp	r6, r3
 801cfc8:	4682      	mov	sl, r0
 801cfca:	460c      	mov	r4, r1
 801cfcc:	4690      	mov	r8, r2
 801cfce:	461f      	mov	r7, r3
 801cfd0:	d838      	bhi.n	801d044 <__ssputs_r+0x84>
 801cfd2:	898a      	ldrh	r2, [r1, #12]
 801cfd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cfd8:	d032      	beq.n	801d040 <__ssputs_r+0x80>
 801cfda:	6825      	ldr	r5, [r4, #0]
 801cfdc:	6909      	ldr	r1, [r1, #16]
 801cfde:	eba5 0901 	sub.w	r9, r5, r1
 801cfe2:	6965      	ldr	r5, [r4, #20]
 801cfe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cfe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cfec:	3301      	adds	r3, #1
 801cfee:	444b      	add	r3, r9
 801cff0:	106d      	asrs	r5, r5, #1
 801cff2:	429d      	cmp	r5, r3
 801cff4:	bf38      	it	cc
 801cff6:	461d      	movcc	r5, r3
 801cff8:	0553      	lsls	r3, r2, #21
 801cffa:	d531      	bpl.n	801d060 <__ssputs_r+0xa0>
 801cffc:	4629      	mov	r1, r5
 801cffe:	f7ff fecd 	bl	801cd9c <_malloc_r>
 801d002:	4606      	mov	r6, r0
 801d004:	b950      	cbnz	r0, 801d01c <__ssputs_r+0x5c>
 801d006:	230c      	movs	r3, #12
 801d008:	f8ca 3000 	str.w	r3, [sl]
 801d00c:	89a3      	ldrh	r3, [r4, #12]
 801d00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d012:	81a3      	strh	r3, [r4, #12]
 801d014:	f04f 30ff 	mov.w	r0, #4294967295
 801d018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d01c:	6921      	ldr	r1, [r4, #16]
 801d01e:	464a      	mov	r2, r9
 801d020:	f7ff fe3a 	bl	801cc98 <memcpy>
 801d024:	89a3      	ldrh	r3, [r4, #12]
 801d026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d02e:	81a3      	strh	r3, [r4, #12]
 801d030:	6126      	str	r6, [r4, #16]
 801d032:	6165      	str	r5, [r4, #20]
 801d034:	444e      	add	r6, r9
 801d036:	eba5 0509 	sub.w	r5, r5, r9
 801d03a:	6026      	str	r6, [r4, #0]
 801d03c:	60a5      	str	r5, [r4, #8]
 801d03e:	463e      	mov	r6, r7
 801d040:	42be      	cmp	r6, r7
 801d042:	d900      	bls.n	801d046 <__ssputs_r+0x86>
 801d044:	463e      	mov	r6, r7
 801d046:	6820      	ldr	r0, [r4, #0]
 801d048:	4632      	mov	r2, r6
 801d04a:	4641      	mov	r1, r8
 801d04c:	f000 faaa 	bl	801d5a4 <memmove>
 801d050:	68a3      	ldr	r3, [r4, #8]
 801d052:	1b9b      	subs	r3, r3, r6
 801d054:	60a3      	str	r3, [r4, #8]
 801d056:	6823      	ldr	r3, [r4, #0]
 801d058:	4433      	add	r3, r6
 801d05a:	6023      	str	r3, [r4, #0]
 801d05c:	2000      	movs	r0, #0
 801d05e:	e7db      	b.n	801d018 <__ssputs_r+0x58>
 801d060:	462a      	mov	r2, r5
 801d062:	f000 fab9 	bl	801d5d8 <_realloc_r>
 801d066:	4606      	mov	r6, r0
 801d068:	2800      	cmp	r0, #0
 801d06a:	d1e1      	bne.n	801d030 <__ssputs_r+0x70>
 801d06c:	6921      	ldr	r1, [r4, #16]
 801d06e:	4650      	mov	r0, sl
 801d070:	f7ff fe28 	bl	801ccc4 <_free_r>
 801d074:	e7c7      	b.n	801d006 <__ssputs_r+0x46>
	...

0801d078 <_svfiprintf_r>:
 801d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d07c:	4698      	mov	r8, r3
 801d07e:	898b      	ldrh	r3, [r1, #12]
 801d080:	061b      	lsls	r3, r3, #24
 801d082:	b09d      	sub	sp, #116	; 0x74
 801d084:	4607      	mov	r7, r0
 801d086:	460d      	mov	r5, r1
 801d088:	4614      	mov	r4, r2
 801d08a:	d50e      	bpl.n	801d0aa <_svfiprintf_r+0x32>
 801d08c:	690b      	ldr	r3, [r1, #16]
 801d08e:	b963      	cbnz	r3, 801d0aa <_svfiprintf_r+0x32>
 801d090:	2140      	movs	r1, #64	; 0x40
 801d092:	f7ff fe83 	bl	801cd9c <_malloc_r>
 801d096:	6028      	str	r0, [r5, #0]
 801d098:	6128      	str	r0, [r5, #16]
 801d09a:	b920      	cbnz	r0, 801d0a6 <_svfiprintf_r+0x2e>
 801d09c:	230c      	movs	r3, #12
 801d09e:	603b      	str	r3, [r7, #0]
 801d0a0:	f04f 30ff 	mov.w	r0, #4294967295
 801d0a4:	e0d1      	b.n	801d24a <_svfiprintf_r+0x1d2>
 801d0a6:	2340      	movs	r3, #64	; 0x40
 801d0a8:	616b      	str	r3, [r5, #20]
 801d0aa:	2300      	movs	r3, #0
 801d0ac:	9309      	str	r3, [sp, #36]	; 0x24
 801d0ae:	2320      	movs	r3, #32
 801d0b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d0b4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0b8:	2330      	movs	r3, #48	; 0x30
 801d0ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d264 <_svfiprintf_r+0x1ec>
 801d0be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d0c2:	f04f 0901 	mov.w	r9, #1
 801d0c6:	4623      	mov	r3, r4
 801d0c8:	469a      	mov	sl, r3
 801d0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0ce:	b10a      	cbz	r2, 801d0d4 <_svfiprintf_r+0x5c>
 801d0d0:	2a25      	cmp	r2, #37	; 0x25
 801d0d2:	d1f9      	bne.n	801d0c8 <_svfiprintf_r+0x50>
 801d0d4:	ebba 0b04 	subs.w	fp, sl, r4
 801d0d8:	d00b      	beq.n	801d0f2 <_svfiprintf_r+0x7a>
 801d0da:	465b      	mov	r3, fp
 801d0dc:	4622      	mov	r2, r4
 801d0de:	4629      	mov	r1, r5
 801d0e0:	4638      	mov	r0, r7
 801d0e2:	f7ff ff6d 	bl	801cfc0 <__ssputs_r>
 801d0e6:	3001      	adds	r0, #1
 801d0e8:	f000 80aa 	beq.w	801d240 <_svfiprintf_r+0x1c8>
 801d0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d0ee:	445a      	add	r2, fp
 801d0f0:	9209      	str	r2, [sp, #36]	; 0x24
 801d0f2:	f89a 3000 	ldrb.w	r3, [sl]
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	f000 80a2 	beq.w	801d240 <_svfiprintf_r+0x1c8>
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	f04f 32ff 	mov.w	r2, #4294967295
 801d102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d106:	f10a 0a01 	add.w	sl, sl, #1
 801d10a:	9304      	str	r3, [sp, #16]
 801d10c:	9307      	str	r3, [sp, #28]
 801d10e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d112:	931a      	str	r3, [sp, #104]	; 0x68
 801d114:	4654      	mov	r4, sl
 801d116:	2205      	movs	r2, #5
 801d118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d11c:	4851      	ldr	r0, [pc, #324]	; (801d264 <_svfiprintf_r+0x1ec>)
 801d11e:	f7e3 f877 	bl	8000210 <memchr>
 801d122:	9a04      	ldr	r2, [sp, #16]
 801d124:	b9d8      	cbnz	r0, 801d15e <_svfiprintf_r+0xe6>
 801d126:	06d0      	lsls	r0, r2, #27
 801d128:	bf44      	itt	mi
 801d12a:	2320      	movmi	r3, #32
 801d12c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d130:	0711      	lsls	r1, r2, #28
 801d132:	bf44      	itt	mi
 801d134:	232b      	movmi	r3, #43	; 0x2b
 801d136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d13a:	f89a 3000 	ldrb.w	r3, [sl]
 801d13e:	2b2a      	cmp	r3, #42	; 0x2a
 801d140:	d015      	beq.n	801d16e <_svfiprintf_r+0xf6>
 801d142:	9a07      	ldr	r2, [sp, #28]
 801d144:	4654      	mov	r4, sl
 801d146:	2000      	movs	r0, #0
 801d148:	f04f 0c0a 	mov.w	ip, #10
 801d14c:	4621      	mov	r1, r4
 801d14e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d152:	3b30      	subs	r3, #48	; 0x30
 801d154:	2b09      	cmp	r3, #9
 801d156:	d94e      	bls.n	801d1f6 <_svfiprintf_r+0x17e>
 801d158:	b1b0      	cbz	r0, 801d188 <_svfiprintf_r+0x110>
 801d15a:	9207      	str	r2, [sp, #28]
 801d15c:	e014      	b.n	801d188 <_svfiprintf_r+0x110>
 801d15e:	eba0 0308 	sub.w	r3, r0, r8
 801d162:	fa09 f303 	lsl.w	r3, r9, r3
 801d166:	4313      	orrs	r3, r2
 801d168:	9304      	str	r3, [sp, #16]
 801d16a:	46a2      	mov	sl, r4
 801d16c:	e7d2      	b.n	801d114 <_svfiprintf_r+0x9c>
 801d16e:	9b03      	ldr	r3, [sp, #12]
 801d170:	1d19      	adds	r1, r3, #4
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	9103      	str	r1, [sp, #12]
 801d176:	2b00      	cmp	r3, #0
 801d178:	bfbb      	ittet	lt
 801d17a:	425b      	neglt	r3, r3
 801d17c:	f042 0202 	orrlt.w	r2, r2, #2
 801d180:	9307      	strge	r3, [sp, #28]
 801d182:	9307      	strlt	r3, [sp, #28]
 801d184:	bfb8      	it	lt
 801d186:	9204      	strlt	r2, [sp, #16]
 801d188:	7823      	ldrb	r3, [r4, #0]
 801d18a:	2b2e      	cmp	r3, #46	; 0x2e
 801d18c:	d10c      	bne.n	801d1a8 <_svfiprintf_r+0x130>
 801d18e:	7863      	ldrb	r3, [r4, #1]
 801d190:	2b2a      	cmp	r3, #42	; 0x2a
 801d192:	d135      	bne.n	801d200 <_svfiprintf_r+0x188>
 801d194:	9b03      	ldr	r3, [sp, #12]
 801d196:	1d1a      	adds	r2, r3, #4
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	9203      	str	r2, [sp, #12]
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	bfb8      	it	lt
 801d1a0:	f04f 33ff 	movlt.w	r3, #4294967295
 801d1a4:	3402      	adds	r4, #2
 801d1a6:	9305      	str	r3, [sp, #20]
 801d1a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d274 <_svfiprintf_r+0x1fc>
 801d1ac:	7821      	ldrb	r1, [r4, #0]
 801d1ae:	2203      	movs	r2, #3
 801d1b0:	4650      	mov	r0, sl
 801d1b2:	f7e3 f82d 	bl	8000210 <memchr>
 801d1b6:	b140      	cbz	r0, 801d1ca <_svfiprintf_r+0x152>
 801d1b8:	2340      	movs	r3, #64	; 0x40
 801d1ba:	eba0 000a 	sub.w	r0, r0, sl
 801d1be:	fa03 f000 	lsl.w	r0, r3, r0
 801d1c2:	9b04      	ldr	r3, [sp, #16]
 801d1c4:	4303      	orrs	r3, r0
 801d1c6:	3401      	adds	r4, #1
 801d1c8:	9304      	str	r3, [sp, #16]
 801d1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1ce:	4826      	ldr	r0, [pc, #152]	; (801d268 <_svfiprintf_r+0x1f0>)
 801d1d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d1d4:	2206      	movs	r2, #6
 801d1d6:	f7e3 f81b 	bl	8000210 <memchr>
 801d1da:	2800      	cmp	r0, #0
 801d1dc:	d038      	beq.n	801d250 <_svfiprintf_r+0x1d8>
 801d1de:	4b23      	ldr	r3, [pc, #140]	; (801d26c <_svfiprintf_r+0x1f4>)
 801d1e0:	bb1b      	cbnz	r3, 801d22a <_svfiprintf_r+0x1b2>
 801d1e2:	9b03      	ldr	r3, [sp, #12]
 801d1e4:	3307      	adds	r3, #7
 801d1e6:	f023 0307 	bic.w	r3, r3, #7
 801d1ea:	3308      	adds	r3, #8
 801d1ec:	9303      	str	r3, [sp, #12]
 801d1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1f0:	4433      	add	r3, r6
 801d1f2:	9309      	str	r3, [sp, #36]	; 0x24
 801d1f4:	e767      	b.n	801d0c6 <_svfiprintf_r+0x4e>
 801d1f6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d1fa:	460c      	mov	r4, r1
 801d1fc:	2001      	movs	r0, #1
 801d1fe:	e7a5      	b.n	801d14c <_svfiprintf_r+0xd4>
 801d200:	2300      	movs	r3, #0
 801d202:	3401      	adds	r4, #1
 801d204:	9305      	str	r3, [sp, #20]
 801d206:	4619      	mov	r1, r3
 801d208:	f04f 0c0a 	mov.w	ip, #10
 801d20c:	4620      	mov	r0, r4
 801d20e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d212:	3a30      	subs	r2, #48	; 0x30
 801d214:	2a09      	cmp	r2, #9
 801d216:	d903      	bls.n	801d220 <_svfiprintf_r+0x1a8>
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d0c5      	beq.n	801d1a8 <_svfiprintf_r+0x130>
 801d21c:	9105      	str	r1, [sp, #20]
 801d21e:	e7c3      	b.n	801d1a8 <_svfiprintf_r+0x130>
 801d220:	fb0c 2101 	mla	r1, ip, r1, r2
 801d224:	4604      	mov	r4, r0
 801d226:	2301      	movs	r3, #1
 801d228:	e7f0      	b.n	801d20c <_svfiprintf_r+0x194>
 801d22a:	ab03      	add	r3, sp, #12
 801d22c:	9300      	str	r3, [sp, #0]
 801d22e:	462a      	mov	r2, r5
 801d230:	4b0f      	ldr	r3, [pc, #60]	; (801d270 <_svfiprintf_r+0x1f8>)
 801d232:	a904      	add	r1, sp, #16
 801d234:	4638      	mov	r0, r7
 801d236:	f3af 8000 	nop.w
 801d23a:	1c42      	adds	r2, r0, #1
 801d23c:	4606      	mov	r6, r0
 801d23e:	d1d6      	bne.n	801d1ee <_svfiprintf_r+0x176>
 801d240:	89ab      	ldrh	r3, [r5, #12]
 801d242:	065b      	lsls	r3, r3, #25
 801d244:	f53f af2c 	bmi.w	801d0a0 <_svfiprintf_r+0x28>
 801d248:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d24a:	b01d      	add	sp, #116	; 0x74
 801d24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d250:	ab03      	add	r3, sp, #12
 801d252:	9300      	str	r3, [sp, #0]
 801d254:	462a      	mov	r2, r5
 801d256:	4b06      	ldr	r3, [pc, #24]	; (801d270 <_svfiprintf_r+0x1f8>)
 801d258:	a904      	add	r1, sp, #16
 801d25a:	4638      	mov	r0, r7
 801d25c:	f000 f87a 	bl	801d354 <_printf_i>
 801d260:	e7eb      	b.n	801d23a <_svfiprintf_r+0x1c2>
 801d262:	bf00      	nop
 801d264:	0801f458 	.word	0x0801f458
 801d268:	0801f462 	.word	0x0801f462
 801d26c:	00000000 	.word	0x00000000
 801d270:	0801cfc1 	.word	0x0801cfc1
 801d274:	0801f45e 	.word	0x0801f45e

0801d278 <_printf_common>:
 801d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d27c:	4616      	mov	r6, r2
 801d27e:	4699      	mov	r9, r3
 801d280:	688a      	ldr	r2, [r1, #8]
 801d282:	690b      	ldr	r3, [r1, #16]
 801d284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d288:	4293      	cmp	r3, r2
 801d28a:	bfb8      	it	lt
 801d28c:	4613      	movlt	r3, r2
 801d28e:	6033      	str	r3, [r6, #0]
 801d290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d294:	4607      	mov	r7, r0
 801d296:	460c      	mov	r4, r1
 801d298:	b10a      	cbz	r2, 801d29e <_printf_common+0x26>
 801d29a:	3301      	adds	r3, #1
 801d29c:	6033      	str	r3, [r6, #0]
 801d29e:	6823      	ldr	r3, [r4, #0]
 801d2a0:	0699      	lsls	r1, r3, #26
 801d2a2:	bf42      	ittt	mi
 801d2a4:	6833      	ldrmi	r3, [r6, #0]
 801d2a6:	3302      	addmi	r3, #2
 801d2a8:	6033      	strmi	r3, [r6, #0]
 801d2aa:	6825      	ldr	r5, [r4, #0]
 801d2ac:	f015 0506 	ands.w	r5, r5, #6
 801d2b0:	d106      	bne.n	801d2c0 <_printf_common+0x48>
 801d2b2:	f104 0a19 	add.w	sl, r4, #25
 801d2b6:	68e3      	ldr	r3, [r4, #12]
 801d2b8:	6832      	ldr	r2, [r6, #0]
 801d2ba:	1a9b      	subs	r3, r3, r2
 801d2bc:	42ab      	cmp	r3, r5
 801d2be:	dc26      	bgt.n	801d30e <_printf_common+0x96>
 801d2c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d2c4:	1e13      	subs	r3, r2, #0
 801d2c6:	6822      	ldr	r2, [r4, #0]
 801d2c8:	bf18      	it	ne
 801d2ca:	2301      	movne	r3, #1
 801d2cc:	0692      	lsls	r2, r2, #26
 801d2ce:	d42b      	bmi.n	801d328 <_printf_common+0xb0>
 801d2d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d2d4:	4649      	mov	r1, r9
 801d2d6:	4638      	mov	r0, r7
 801d2d8:	47c0      	blx	r8
 801d2da:	3001      	adds	r0, #1
 801d2dc:	d01e      	beq.n	801d31c <_printf_common+0xa4>
 801d2de:	6823      	ldr	r3, [r4, #0]
 801d2e0:	68e5      	ldr	r5, [r4, #12]
 801d2e2:	6832      	ldr	r2, [r6, #0]
 801d2e4:	f003 0306 	and.w	r3, r3, #6
 801d2e8:	2b04      	cmp	r3, #4
 801d2ea:	bf08      	it	eq
 801d2ec:	1aad      	subeq	r5, r5, r2
 801d2ee:	68a3      	ldr	r3, [r4, #8]
 801d2f0:	6922      	ldr	r2, [r4, #16]
 801d2f2:	bf0c      	ite	eq
 801d2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d2f8:	2500      	movne	r5, #0
 801d2fa:	4293      	cmp	r3, r2
 801d2fc:	bfc4      	itt	gt
 801d2fe:	1a9b      	subgt	r3, r3, r2
 801d300:	18ed      	addgt	r5, r5, r3
 801d302:	2600      	movs	r6, #0
 801d304:	341a      	adds	r4, #26
 801d306:	42b5      	cmp	r5, r6
 801d308:	d11a      	bne.n	801d340 <_printf_common+0xc8>
 801d30a:	2000      	movs	r0, #0
 801d30c:	e008      	b.n	801d320 <_printf_common+0xa8>
 801d30e:	2301      	movs	r3, #1
 801d310:	4652      	mov	r2, sl
 801d312:	4649      	mov	r1, r9
 801d314:	4638      	mov	r0, r7
 801d316:	47c0      	blx	r8
 801d318:	3001      	adds	r0, #1
 801d31a:	d103      	bne.n	801d324 <_printf_common+0xac>
 801d31c:	f04f 30ff 	mov.w	r0, #4294967295
 801d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d324:	3501      	adds	r5, #1
 801d326:	e7c6      	b.n	801d2b6 <_printf_common+0x3e>
 801d328:	18e1      	adds	r1, r4, r3
 801d32a:	1c5a      	adds	r2, r3, #1
 801d32c:	2030      	movs	r0, #48	; 0x30
 801d32e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d332:	4422      	add	r2, r4
 801d334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d33c:	3302      	adds	r3, #2
 801d33e:	e7c7      	b.n	801d2d0 <_printf_common+0x58>
 801d340:	2301      	movs	r3, #1
 801d342:	4622      	mov	r2, r4
 801d344:	4649      	mov	r1, r9
 801d346:	4638      	mov	r0, r7
 801d348:	47c0      	blx	r8
 801d34a:	3001      	adds	r0, #1
 801d34c:	d0e6      	beq.n	801d31c <_printf_common+0xa4>
 801d34e:	3601      	adds	r6, #1
 801d350:	e7d9      	b.n	801d306 <_printf_common+0x8e>
	...

0801d354 <_printf_i>:
 801d354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d358:	7e0f      	ldrb	r7, [r1, #24]
 801d35a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d35c:	2f78      	cmp	r7, #120	; 0x78
 801d35e:	4691      	mov	r9, r2
 801d360:	4680      	mov	r8, r0
 801d362:	460c      	mov	r4, r1
 801d364:	469a      	mov	sl, r3
 801d366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d36a:	d807      	bhi.n	801d37c <_printf_i+0x28>
 801d36c:	2f62      	cmp	r7, #98	; 0x62
 801d36e:	d80a      	bhi.n	801d386 <_printf_i+0x32>
 801d370:	2f00      	cmp	r7, #0
 801d372:	f000 80d8 	beq.w	801d526 <_printf_i+0x1d2>
 801d376:	2f58      	cmp	r7, #88	; 0x58
 801d378:	f000 80a3 	beq.w	801d4c2 <_printf_i+0x16e>
 801d37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d384:	e03a      	b.n	801d3fc <_printf_i+0xa8>
 801d386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d38a:	2b15      	cmp	r3, #21
 801d38c:	d8f6      	bhi.n	801d37c <_printf_i+0x28>
 801d38e:	a101      	add	r1, pc, #4	; (adr r1, 801d394 <_printf_i+0x40>)
 801d390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d394:	0801d3ed 	.word	0x0801d3ed
 801d398:	0801d401 	.word	0x0801d401
 801d39c:	0801d37d 	.word	0x0801d37d
 801d3a0:	0801d37d 	.word	0x0801d37d
 801d3a4:	0801d37d 	.word	0x0801d37d
 801d3a8:	0801d37d 	.word	0x0801d37d
 801d3ac:	0801d401 	.word	0x0801d401
 801d3b0:	0801d37d 	.word	0x0801d37d
 801d3b4:	0801d37d 	.word	0x0801d37d
 801d3b8:	0801d37d 	.word	0x0801d37d
 801d3bc:	0801d37d 	.word	0x0801d37d
 801d3c0:	0801d50d 	.word	0x0801d50d
 801d3c4:	0801d431 	.word	0x0801d431
 801d3c8:	0801d4ef 	.word	0x0801d4ef
 801d3cc:	0801d37d 	.word	0x0801d37d
 801d3d0:	0801d37d 	.word	0x0801d37d
 801d3d4:	0801d52f 	.word	0x0801d52f
 801d3d8:	0801d37d 	.word	0x0801d37d
 801d3dc:	0801d431 	.word	0x0801d431
 801d3e0:	0801d37d 	.word	0x0801d37d
 801d3e4:	0801d37d 	.word	0x0801d37d
 801d3e8:	0801d4f7 	.word	0x0801d4f7
 801d3ec:	682b      	ldr	r3, [r5, #0]
 801d3ee:	1d1a      	adds	r2, r3, #4
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	602a      	str	r2, [r5, #0]
 801d3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d3f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d3fc:	2301      	movs	r3, #1
 801d3fe:	e0a3      	b.n	801d548 <_printf_i+0x1f4>
 801d400:	6820      	ldr	r0, [r4, #0]
 801d402:	6829      	ldr	r1, [r5, #0]
 801d404:	0606      	lsls	r6, r0, #24
 801d406:	f101 0304 	add.w	r3, r1, #4
 801d40a:	d50a      	bpl.n	801d422 <_printf_i+0xce>
 801d40c:	680e      	ldr	r6, [r1, #0]
 801d40e:	602b      	str	r3, [r5, #0]
 801d410:	2e00      	cmp	r6, #0
 801d412:	da03      	bge.n	801d41c <_printf_i+0xc8>
 801d414:	232d      	movs	r3, #45	; 0x2d
 801d416:	4276      	negs	r6, r6
 801d418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d41c:	485e      	ldr	r0, [pc, #376]	; (801d598 <_printf_i+0x244>)
 801d41e:	230a      	movs	r3, #10
 801d420:	e019      	b.n	801d456 <_printf_i+0x102>
 801d422:	680e      	ldr	r6, [r1, #0]
 801d424:	602b      	str	r3, [r5, #0]
 801d426:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d42a:	bf18      	it	ne
 801d42c:	b236      	sxthne	r6, r6
 801d42e:	e7ef      	b.n	801d410 <_printf_i+0xbc>
 801d430:	682b      	ldr	r3, [r5, #0]
 801d432:	6820      	ldr	r0, [r4, #0]
 801d434:	1d19      	adds	r1, r3, #4
 801d436:	6029      	str	r1, [r5, #0]
 801d438:	0601      	lsls	r1, r0, #24
 801d43a:	d501      	bpl.n	801d440 <_printf_i+0xec>
 801d43c:	681e      	ldr	r6, [r3, #0]
 801d43e:	e002      	b.n	801d446 <_printf_i+0xf2>
 801d440:	0646      	lsls	r6, r0, #25
 801d442:	d5fb      	bpl.n	801d43c <_printf_i+0xe8>
 801d444:	881e      	ldrh	r6, [r3, #0]
 801d446:	4854      	ldr	r0, [pc, #336]	; (801d598 <_printf_i+0x244>)
 801d448:	2f6f      	cmp	r7, #111	; 0x6f
 801d44a:	bf0c      	ite	eq
 801d44c:	2308      	moveq	r3, #8
 801d44e:	230a      	movne	r3, #10
 801d450:	2100      	movs	r1, #0
 801d452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d456:	6865      	ldr	r5, [r4, #4]
 801d458:	60a5      	str	r5, [r4, #8]
 801d45a:	2d00      	cmp	r5, #0
 801d45c:	bfa2      	ittt	ge
 801d45e:	6821      	ldrge	r1, [r4, #0]
 801d460:	f021 0104 	bicge.w	r1, r1, #4
 801d464:	6021      	strge	r1, [r4, #0]
 801d466:	b90e      	cbnz	r6, 801d46c <_printf_i+0x118>
 801d468:	2d00      	cmp	r5, #0
 801d46a:	d04d      	beq.n	801d508 <_printf_i+0x1b4>
 801d46c:	4615      	mov	r5, r2
 801d46e:	fbb6 f1f3 	udiv	r1, r6, r3
 801d472:	fb03 6711 	mls	r7, r3, r1, r6
 801d476:	5dc7      	ldrb	r7, [r0, r7]
 801d478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d47c:	4637      	mov	r7, r6
 801d47e:	42bb      	cmp	r3, r7
 801d480:	460e      	mov	r6, r1
 801d482:	d9f4      	bls.n	801d46e <_printf_i+0x11a>
 801d484:	2b08      	cmp	r3, #8
 801d486:	d10b      	bne.n	801d4a0 <_printf_i+0x14c>
 801d488:	6823      	ldr	r3, [r4, #0]
 801d48a:	07de      	lsls	r6, r3, #31
 801d48c:	d508      	bpl.n	801d4a0 <_printf_i+0x14c>
 801d48e:	6923      	ldr	r3, [r4, #16]
 801d490:	6861      	ldr	r1, [r4, #4]
 801d492:	4299      	cmp	r1, r3
 801d494:	bfde      	ittt	le
 801d496:	2330      	movle	r3, #48	; 0x30
 801d498:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d49c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d4a0:	1b52      	subs	r2, r2, r5
 801d4a2:	6122      	str	r2, [r4, #16]
 801d4a4:	f8cd a000 	str.w	sl, [sp]
 801d4a8:	464b      	mov	r3, r9
 801d4aa:	aa03      	add	r2, sp, #12
 801d4ac:	4621      	mov	r1, r4
 801d4ae:	4640      	mov	r0, r8
 801d4b0:	f7ff fee2 	bl	801d278 <_printf_common>
 801d4b4:	3001      	adds	r0, #1
 801d4b6:	d14c      	bne.n	801d552 <_printf_i+0x1fe>
 801d4b8:	f04f 30ff 	mov.w	r0, #4294967295
 801d4bc:	b004      	add	sp, #16
 801d4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4c2:	4835      	ldr	r0, [pc, #212]	; (801d598 <_printf_i+0x244>)
 801d4c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d4c8:	6829      	ldr	r1, [r5, #0]
 801d4ca:	6823      	ldr	r3, [r4, #0]
 801d4cc:	f851 6b04 	ldr.w	r6, [r1], #4
 801d4d0:	6029      	str	r1, [r5, #0]
 801d4d2:	061d      	lsls	r5, r3, #24
 801d4d4:	d514      	bpl.n	801d500 <_printf_i+0x1ac>
 801d4d6:	07df      	lsls	r7, r3, #31
 801d4d8:	bf44      	itt	mi
 801d4da:	f043 0320 	orrmi.w	r3, r3, #32
 801d4de:	6023      	strmi	r3, [r4, #0]
 801d4e0:	b91e      	cbnz	r6, 801d4ea <_printf_i+0x196>
 801d4e2:	6823      	ldr	r3, [r4, #0]
 801d4e4:	f023 0320 	bic.w	r3, r3, #32
 801d4e8:	6023      	str	r3, [r4, #0]
 801d4ea:	2310      	movs	r3, #16
 801d4ec:	e7b0      	b.n	801d450 <_printf_i+0xfc>
 801d4ee:	6823      	ldr	r3, [r4, #0]
 801d4f0:	f043 0320 	orr.w	r3, r3, #32
 801d4f4:	6023      	str	r3, [r4, #0]
 801d4f6:	2378      	movs	r3, #120	; 0x78
 801d4f8:	4828      	ldr	r0, [pc, #160]	; (801d59c <_printf_i+0x248>)
 801d4fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d4fe:	e7e3      	b.n	801d4c8 <_printf_i+0x174>
 801d500:	0659      	lsls	r1, r3, #25
 801d502:	bf48      	it	mi
 801d504:	b2b6      	uxthmi	r6, r6
 801d506:	e7e6      	b.n	801d4d6 <_printf_i+0x182>
 801d508:	4615      	mov	r5, r2
 801d50a:	e7bb      	b.n	801d484 <_printf_i+0x130>
 801d50c:	682b      	ldr	r3, [r5, #0]
 801d50e:	6826      	ldr	r6, [r4, #0]
 801d510:	6961      	ldr	r1, [r4, #20]
 801d512:	1d18      	adds	r0, r3, #4
 801d514:	6028      	str	r0, [r5, #0]
 801d516:	0635      	lsls	r5, r6, #24
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	d501      	bpl.n	801d520 <_printf_i+0x1cc>
 801d51c:	6019      	str	r1, [r3, #0]
 801d51e:	e002      	b.n	801d526 <_printf_i+0x1d2>
 801d520:	0670      	lsls	r0, r6, #25
 801d522:	d5fb      	bpl.n	801d51c <_printf_i+0x1c8>
 801d524:	8019      	strh	r1, [r3, #0]
 801d526:	2300      	movs	r3, #0
 801d528:	6123      	str	r3, [r4, #16]
 801d52a:	4615      	mov	r5, r2
 801d52c:	e7ba      	b.n	801d4a4 <_printf_i+0x150>
 801d52e:	682b      	ldr	r3, [r5, #0]
 801d530:	1d1a      	adds	r2, r3, #4
 801d532:	602a      	str	r2, [r5, #0]
 801d534:	681d      	ldr	r5, [r3, #0]
 801d536:	6862      	ldr	r2, [r4, #4]
 801d538:	2100      	movs	r1, #0
 801d53a:	4628      	mov	r0, r5
 801d53c:	f7e2 fe68 	bl	8000210 <memchr>
 801d540:	b108      	cbz	r0, 801d546 <_printf_i+0x1f2>
 801d542:	1b40      	subs	r0, r0, r5
 801d544:	6060      	str	r0, [r4, #4]
 801d546:	6863      	ldr	r3, [r4, #4]
 801d548:	6123      	str	r3, [r4, #16]
 801d54a:	2300      	movs	r3, #0
 801d54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d550:	e7a8      	b.n	801d4a4 <_printf_i+0x150>
 801d552:	6923      	ldr	r3, [r4, #16]
 801d554:	462a      	mov	r2, r5
 801d556:	4649      	mov	r1, r9
 801d558:	4640      	mov	r0, r8
 801d55a:	47d0      	blx	sl
 801d55c:	3001      	adds	r0, #1
 801d55e:	d0ab      	beq.n	801d4b8 <_printf_i+0x164>
 801d560:	6823      	ldr	r3, [r4, #0]
 801d562:	079b      	lsls	r3, r3, #30
 801d564:	d413      	bmi.n	801d58e <_printf_i+0x23a>
 801d566:	68e0      	ldr	r0, [r4, #12]
 801d568:	9b03      	ldr	r3, [sp, #12]
 801d56a:	4298      	cmp	r0, r3
 801d56c:	bfb8      	it	lt
 801d56e:	4618      	movlt	r0, r3
 801d570:	e7a4      	b.n	801d4bc <_printf_i+0x168>
 801d572:	2301      	movs	r3, #1
 801d574:	4632      	mov	r2, r6
 801d576:	4649      	mov	r1, r9
 801d578:	4640      	mov	r0, r8
 801d57a:	47d0      	blx	sl
 801d57c:	3001      	adds	r0, #1
 801d57e:	d09b      	beq.n	801d4b8 <_printf_i+0x164>
 801d580:	3501      	adds	r5, #1
 801d582:	68e3      	ldr	r3, [r4, #12]
 801d584:	9903      	ldr	r1, [sp, #12]
 801d586:	1a5b      	subs	r3, r3, r1
 801d588:	42ab      	cmp	r3, r5
 801d58a:	dcf2      	bgt.n	801d572 <_printf_i+0x21e>
 801d58c:	e7eb      	b.n	801d566 <_printf_i+0x212>
 801d58e:	2500      	movs	r5, #0
 801d590:	f104 0619 	add.w	r6, r4, #25
 801d594:	e7f5      	b.n	801d582 <_printf_i+0x22e>
 801d596:	bf00      	nop
 801d598:	0801f469 	.word	0x0801f469
 801d59c:	0801f47a 	.word	0x0801f47a

0801d5a0 <__retarget_lock_acquire_recursive>:
 801d5a0:	4770      	bx	lr

0801d5a2 <__retarget_lock_release_recursive>:
 801d5a2:	4770      	bx	lr

0801d5a4 <memmove>:
 801d5a4:	4288      	cmp	r0, r1
 801d5a6:	b510      	push	{r4, lr}
 801d5a8:	eb01 0402 	add.w	r4, r1, r2
 801d5ac:	d902      	bls.n	801d5b4 <memmove+0x10>
 801d5ae:	4284      	cmp	r4, r0
 801d5b0:	4623      	mov	r3, r4
 801d5b2:	d807      	bhi.n	801d5c4 <memmove+0x20>
 801d5b4:	1e43      	subs	r3, r0, #1
 801d5b6:	42a1      	cmp	r1, r4
 801d5b8:	d008      	beq.n	801d5cc <memmove+0x28>
 801d5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d5c2:	e7f8      	b.n	801d5b6 <memmove+0x12>
 801d5c4:	4402      	add	r2, r0
 801d5c6:	4601      	mov	r1, r0
 801d5c8:	428a      	cmp	r2, r1
 801d5ca:	d100      	bne.n	801d5ce <memmove+0x2a>
 801d5cc:	bd10      	pop	{r4, pc}
 801d5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d5d6:	e7f7      	b.n	801d5c8 <memmove+0x24>

0801d5d8 <_realloc_r>:
 801d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5dc:	4680      	mov	r8, r0
 801d5de:	4614      	mov	r4, r2
 801d5e0:	460e      	mov	r6, r1
 801d5e2:	b921      	cbnz	r1, 801d5ee <_realloc_r+0x16>
 801d5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5e8:	4611      	mov	r1, r2
 801d5ea:	f7ff bbd7 	b.w	801cd9c <_malloc_r>
 801d5ee:	b92a      	cbnz	r2, 801d5fc <_realloc_r+0x24>
 801d5f0:	f7ff fb68 	bl	801ccc4 <_free_r>
 801d5f4:	4625      	mov	r5, r4
 801d5f6:	4628      	mov	r0, r5
 801d5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5fc:	f000 f81b 	bl	801d636 <_malloc_usable_size_r>
 801d600:	4284      	cmp	r4, r0
 801d602:	4607      	mov	r7, r0
 801d604:	d802      	bhi.n	801d60c <_realloc_r+0x34>
 801d606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d60a:	d812      	bhi.n	801d632 <_realloc_r+0x5a>
 801d60c:	4621      	mov	r1, r4
 801d60e:	4640      	mov	r0, r8
 801d610:	f7ff fbc4 	bl	801cd9c <_malloc_r>
 801d614:	4605      	mov	r5, r0
 801d616:	2800      	cmp	r0, #0
 801d618:	d0ed      	beq.n	801d5f6 <_realloc_r+0x1e>
 801d61a:	42bc      	cmp	r4, r7
 801d61c:	4622      	mov	r2, r4
 801d61e:	4631      	mov	r1, r6
 801d620:	bf28      	it	cs
 801d622:	463a      	movcs	r2, r7
 801d624:	f7ff fb38 	bl	801cc98 <memcpy>
 801d628:	4631      	mov	r1, r6
 801d62a:	4640      	mov	r0, r8
 801d62c:	f7ff fb4a 	bl	801ccc4 <_free_r>
 801d630:	e7e1      	b.n	801d5f6 <_realloc_r+0x1e>
 801d632:	4635      	mov	r5, r6
 801d634:	e7df      	b.n	801d5f6 <_realloc_r+0x1e>

0801d636 <_malloc_usable_size_r>:
 801d636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d63a:	1f18      	subs	r0, r3, #4
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	bfbc      	itt	lt
 801d640:	580b      	ldrlt	r3, [r1, r0]
 801d642:	18c0      	addlt	r0, r0, r3
 801d644:	4770      	bx	lr
	...

0801d648 <_init>:
 801d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d64a:	bf00      	nop
 801d64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d64e:	bc08      	pop	{r3}
 801d650:	469e      	mov	lr, r3
 801d652:	4770      	bx	lr

0801d654 <_fini>:
 801d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d656:	bf00      	nop
 801d658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d65a:	bc08      	pop	{r3}
 801d65c:	469e      	mov	lr, r3
 801d65e:	4770      	bx	lr
